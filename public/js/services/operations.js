/**
 * Operations Module
 * 
 * Consolidated JavaScript for PingOne Import Tool
 * Generated: 2025-08-06T19:08:20.709Z
 * 
 * This file was automatically generated by js-final-cleanup.js
 * Organized for better maintainability and performance
 */


/* From: public/js/modules/delete-manager.js */
/**
 * Delete Manager - Enhanced delete functionality with full environment deletion, confirmation, and logging
 * Handles file-based, population-based, and full environment user deletion
 */

class DeleteManager {
    constructor() {
        this.currentDeleteType = 'file';
        this.selectedFile = null;
        this.selectedPopulation = null;
        this.isEnvironmentDeleteConfirmed = false;
        this.isStandardDeleteConfirmed = false;
        this.deleteTextConfirmation = '';
        this.logger = console;
        
        // Only initialize if we're on a page with delete functionality
        if (document.getElementById('delete-file-section') || 
            document.getElementById('delete-population-section') || 
            document.getElementById('delete-environment-section') ||
            document.getElementById('start-delete')) {
            try {
                this.initializeEventListeners();
                this.loadPopulations();
            } catch (error) {
                console.warn('DeleteManager initialization warning:', error);
            }
        }
    }

    initializeEventListeners() {
        // Delete type selection
        document.querySelectorAll('input[name="delete-type"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.currentDeleteType = e.target.value;
                this.updateDeleteSections();
                this.updateConfirmationSections();
                this.validateDeleteButton();
                this.logDeleteTypeChange();
            });
        });

        // File upload for delete
        const deleteFileInput = document.getElementById('delete-csv-file');
        const deleteDropZone = document.getElementById('delete-drop-zone');
        
        if (deleteFileInput) {
            deleteFileInput.addEventListener('change', (e) => {
                this.handleFileSelection(e.target.files[0]);
            });
        }

        if (deleteDropZone) {
            this.setupDragAndDrop(deleteDropZone, deleteFileInput);
        }

        // Population selection
        const populationSelect = document.getElementById('delete-population-select');
        const apiUrlDisplay = document.getElementById('delete-population-api-url');
        if (populationSelect) {
            populationSelect.addEventListener('change', (e) => {
                this.selectedPopulation = e.target.value;
                this.validateDeleteButton();
                this.logPopulationSelection();
                // Show API URL
                if (apiUrlDisplay) {
                    const envId = window.globalTokenManager?.getEnvironmentId?.() || window.environmentId || '';
                    if (this.selectedPopulation && envId) {
                        apiUrlDisplay.innerHTML = `<span>PingOne API URL: <code>https://api.pingone.com/v1/environments/${envId}/populations/${this.selectedPopulation}</code></span>`;
                    } else {
                        apiUrlDisplay.innerHTML = '';
                    }
                }
            });
        }

        // Standard confirmation
        const confirmDeleteCheckbox = document.getElementById('confirm-delete');
        if (confirmDeleteCheckbox) {
            confirmDeleteCheckbox.addEventListener('change', (e) => {
                this.isStandardDeleteConfirmed = e.target.checked;
                this.validateDeleteButton();
                this.logConfirmationChange('standard', e.target.checked);
            });
        }

        // Environment confirmation
        const confirmEnvironmentCheckbox = document.getElementById('confirm-environment-delete');
        const environmentDeleteText = document.getElementById('environment-delete-text');
        
        if (confirmEnvironmentCheckbox) {
            confirmEnvironmentCheckbox.addEventListener('change', (e) => {
                this.isEnvironmentDeleteConfirmed = e.target.checked;
                this.validateDeleteButton();
                this.logConfirmationChange('environment', e.target.checked);
            });
        }

        if (environmentDeleteText) {
            environmentDeleteText.addEventListener('input', (e) => {
                this.deleteTextConfirmation = e.target.value;
                this.validateDeleteButton();
                this.logTextConfirmationChange();
            });
        }

        // Start delete button
        const startDeleteBtn = document.getElementById('start-delete');
        if (startDeleteBtn) {
            startDeleteBtn.addEventListener('click', () => {
                this.startDelete();
            });
        }
    }

    setupDragAndDrop(dropZone, fileInput) {
        // Prevent default browser behavior for all drag events
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, (e) => {
                e.preventDefault();
                e.stopPropagation();
            });
        });

        // Add visual feedback for drag events
        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.add('dragover');
                this.logDragEvent('dragenter');
            });
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, () => {
                dropZone.classList.remove('dragover');
                if (eventName === 'drop') {
                    this.logDragEvent('drop');
                }
            });
        });

        // Handle file drop
        dropZone.addEventListener('drop', (e) => {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFileSelection(files[0]);
                if (fileInput) {
                    fileInput.files = files;
                }
            }
        });

        // Handle click to browse
        dropZone.addEventListener('click', () => {
            if (fileInput) {
                fileInput.click();
            }
        });

        // Add keyboard accessibility
        dropZone.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                if (fileInput) {
                    fileInput.click();
                }
            }
        });
    }

    handleFileSelection(file) {
        if (!file) return;

        this.logFileSelection(file);
        this.selectedFile = file;
        this.displayFileInfo(file);
        this.validateDeleteButton();
    }

    displayFileInfo(file) {
        const fileInfo = document.getElementById('delete-file-info');
        if (!fileInfo) return;

        const fileSize = (file.size / 1024).toFixed(2);
        const fileExtension = file.name.split('.').pop().toLowerCase();
        
        if (fileExtension !== 'csv' && fileExtension !== 'txt') {
            fileInfo.innerHTML = `
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Invalid file type:</strong> Please select a CSV or TXT file.
                </div>
            `;
            this.selectedFile = null;
            this.logFileValidationError('Invalid file type', fileExtension);
            return;
        }

        // Validate file size (10MB limit)
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
            fileInfo.innerHTML = `
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>File too large:</strong> Please select a file smaller than 10MB.
                </div>
            `;
            this.selectedFile = null;
            this.logFileValidationError('File too large', file.size);
            return;
        }

        fileInfo.innerHTML = `
            <div class="file-info">
                <div class="file-name">${file.name}</div>
                <div class="file-meta">
                    <span>Size: ${fileSize} KB</span>
                    <span>Type: ${fileExtension.toUpperCase()}</span>
                </div>
            </div>
        `;
        
        this.logFileValidationSuccess(file);
    }

    async loadPopulations() {
        try {
            // Check if population select element exists before loading
            const populationSelect = document.getElementById('delete-population-select');
            if (!populationSelect) {
                console.log('Delete population select not found, skipping population load');
                return;
            }
            
            this.logPopulationLoadStart();
            
            // Try to use the modern PopulationSubsystem first
            if (window.app && window.app.populationSubsystem) {
                try {
                    const populations = await window.app.populationSubsystem.loadPopulations();
                    if (Array.isArray(populations) && populations.length > 0) {
                        this.populatePopulationSelect(populations);
                        this.logPopulationLoadSuccess(populations.length);
                        return;
                    }
                } catch (error) {
                    console.warn('Failed to load populations via PopulationSubsystem, falling back to direct API:', error);
                }
            }
            
            // Fallback to direct API call if PopulationSubsystem is not available
            const response = await fetch('/api/populations');
            if (response.ok) {
                const data = await response.json();
                // Handle the API response structure: { success: true, populations: [...], total: 123 }
                const populations = data.populations || data;
                if (Array.isArray(populations)) {
                    this.populatePopulationSelect(populations);
                    this.logPopulationLoadSuccess(populations.length);
                } else {
                    console.error('Invalid populations data format:', populations);
                    this.logPopulationLoadError('Invalid populations data format');
                }
            } else {
                console.error('Failed to load populations');
                this.logPopulationLoadError('Failed to load populations');
            }
        } catch (error) {
            console.error('Error loading populations:', error);
            this.logPopulationLoadError(error.message);
        }
    }

    populatePopulationSelect(populations) {
        const select = document.getElementById('delete-population-select');
        if (!select) return;

        select.innerHTML = '<option value="">Select a population...</option>';
        
        populations.forEach(population => {
            const option = document.createElement('option');
            option.value = population.id;
            option.textContent = population.name;
            select.appendChild(option);
        });
    }

    updateDeleteSections() {
        const sections = {
            'file': document.getElementById('delete-file-section'),
            'population': document.getElementById('delete-population-section'),
            'environment': document.getElementById('delete-environment-section')
        };

        Object.keys(sections).forEach(type => {
            if (sections[type]) {
                sections[type].style.display = type === this.currentDeleteType ? 'block' : 'none';
            }
        });
    }

    updateConfirmationSections() {
        const standardConfirmation = document.getElementById('standard-confirmation');
        const environmentConfirmation = document.getElementById('environment-confirmation');

        if (standardConfirmation) {
            standardConfirmation.style.display = this.currentDeleteType === 'environment' ? 'none' : 'block';
        }

        if (environmentConfirmation) {
            environmentConfirmation.style.display = this.currentDeleteType === 'environment' ? 'block' : 'none';
        }
    }

    validateDeleteButton() {
        const startDeleteBtn = document.getElementById('start-delete');
        if (!startDeleteBtn) return;

        let isValid = false;

        switch (this.currentDeleteType) {
            case 'file':
                isValid = this.selectedFile && this.isStandardDeleteConfirmed;
                break;
            case 'population':
                isValid = this.selectedPopulation && this.isStandardDeleteConfirmed;
                break;
            case 'environment':
                isValid = this.isEnvironmentDeleteConfirmed && 
                         this.deleteTextConfirmation === 'DELETE ALL';
                break;
        }

        startDeleteBtn.disabled = !isValid;
        this.logButtonValidation(isValid);
    }

    async startDelete() {
        const startDeleteBtn = document.getElementById('start-delete');
        if (startDeleteBtn) {
            startDeleteBtn.disabled = true;
            startDeleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Starting Delete...';
        }

        try {
            let deleteData = {
                type: this.currentDeleteType,
                skipNotFound: document.getElementById('delete-skip-not-found')?.checked || false
            };

            switch (this.currentDeleteType) {
                case 'file':
                    deleteData.file = this.selectedFile;
                    break;
                case 'population':
                    deleteData.populationId = this.selectedPopulation;
                    break;
                case 'environment':
                    deleteData.confirmation = this.deleteTextConfirmation;
                    break;
            }

            this.logDeleteStart(deleteData);
            await this.performDelete(deleteData);
        } catch (error) {
            console.error('Delete failed:', error);
            this.showError('Delete operation failed. Please try again.');
            this.logDeleteError(error);
        } finally {
            if (startDeleteBtn) {
                startDeleteBtn.disabled = false;
                startDeleteBtn.innerHTML = '<i class="fas fa-trash"></i> Start Delete';
            }
        }
    }

    async performDelete(deleteData) {
        // Validate delete data
        if (!deleteData || !deleteData.type) {
            throw new Error('Invalid delete data: type is required');
        }

        // Validate based on delete type
        switch (deleteData.type) {
            case 'file':
                if (!deleteData.file) {
                    throw new Error('File is required for file-based deletion');
                }
                break;
            case 'population':
                if (!deleteData.populationId) {
                    throw new Error('Population ID is required for population-based deletion');
                }
                break;
            case 'environment':
                if (deleteData.confirmation !== 'DELETE ALL') {
                    throw new Error('Environment deletion requires "DELETE ALL" confirmation');
                }
                break;
            default:
                throw new Error('Invalid delete type');
        }

        const formData = new FormData();
        formData.append('type', deleteData.type);
        formData.append('skipNotFound', deleteData.skipNotFound);

        if (deleteData.file) {
            formData.append('file', deleteData.file);
        }

        if (deleteData.populationId) {
            formData.append('populationId', deleteData.populationId);
        }

        if (deleteData.confirmation) {
            formData.append('confirmation', deleteData.confirmation);
        }

        const response = await fetch('/api/delete-users', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            let errorMessage = 'Delete operation failed';
            try {
                const errorData = await response.json();
                errorMessage = errorData.message || errorData.error || errorMessage;
                console.error('Delete API error:', errorData);
            } catch (parseError) {
                console.error('Failed to parse error response:', parseError);
                errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            }
            throw new Error(errorMessage);
        }

        const result = await response.json();
        this.showSuccess(`Delete operation completed successfully. ${result.deletedCount} users deleted.`);
        
        // Log the delete operation
        this.logDeleteOperation(deleteData, result);
    }

    logDeleteOperation(deleteData, result) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            action: 'DELETE_USERS',
            type: deleteData.type,
            scope: this.getDeleteScope(deleteData),
            metadata: this.getDeleteMetadata(deleteData),
            result: {
                deletedCount: result.deletedCount,
                skippedCount: result.skippedCount || 0,
                errors: result.errors || []
            }
        };

        // Send to logging system with proper error handling
        try {
            if (window.logManager && typeof window.logManager.log === 'function') {
                window.logManager.log('DELETE', 'User deletion completed', logEntry);
            } else {
                // Fallback logging if logManager is not available
                console.log('Delete operation logged:', logEntry);
            }
        } catch (error) {
            // Graceful fallback if logging fails
            console.log('Delete operation logged (fallback):', logEntry);
        }
    }

    getDeleteScope(deleteData) {
        switch (deleteData.type) {
            case 'file':
                return 'FILE_BASED';
            case 'population':
                return 'POPULATION_BASED';
            case 'environment':
                return 'FULL_ENVIRONMENT';
            default:
                return 'UNKNOWN';
        }
    }

    getDeleteMetadata(deleteData) {
        const metadata = {
            skipNotFound: deleteData.skipNotFound
        };

        switch (deleteData.type) {
            case 'file':
                metadata.fileName = deleteData.file?.name;
                metadata.fileSize = deleteData.file?.size;
                break;
            case 'population':
                metadata.populationId = deleteData.populationId;
                break;
            case 'environment':
                metadata.confirmationProvided = !!deleteData.confirmation;
                break;
        }

        return metadata;
    }

    // Enhanced logging methods
    logDeleteTypeChange() {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'Delete type changed', {
                type: this.currentDeleteType,
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('Delete type changed:', { type: this.currentDeleteType, timestamp: new Date().toISOString() });
        }
    }

    logFileSelection(file) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'File selected for deletion', {
                fileName: file.name,
                fileSize: file.size,
                fileType: file.type,
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('File selected for deletion:', { fileName: file.name, fileSize: file.size, fileType: file.type });
        }
    }

    logFileValidationError(error, details) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('warn', 'File validation failed', {
                error: error,
                details: details,
                timestamp: new Date().toISOString()
            });
        } else {
            console.warn('File validation failed:', { error, details, timestamp: new Date().toISOString() });
        }
    }

    logFileValidationSuccess(file) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'File validation successful', {
                fileName: file.name,
                fileSize: file.size,
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('File validation successful:', { fileName: file.name, fileSize: file.size, timestamp: new Date().toISOString() });
        }
    }

    logDragEvent(eventType) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('debug', 'Drag event', {
                eventType: eventType,
                timestamp: new Date().toISOString()
            });
        } else {
            console.debug('Drag event:', { eventType, timestamp: new Date().toISOString() });
        }
    }

    logPopulationLoadStart() {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'Loading populations for delete', {
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('Loading populations for delete:', { timestamp: new Date().toISOString() });
        }
    }

    logPopulationLoadSuccess(count) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'Populations loaded successfully', {
                count: count,
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('Populations loaded successfully:', { count, timestamp: new Date().toISOString() });
        }
    }

    logPopulationLoadError(error) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('error', 'Failed to load populations', {
                error: error,
                timestamp: new Date().toISOString()
            });
        } else {
            console.error('Failed to load populations:', { error, timestamp: new Date().toISOString() });
        }
    }

    logPopulationSelection() {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'Population selected for deletion', {
                populationId: this.selectedPopulation,
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('Population selected for deletion:', { populationId: this.selectedPopulation, timestamp: new Date().toISOString() });
        }
    }

    logConfirmationChange(type, confirmed) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'Delete confirmation changed', {
                type: type,
                confirmed: confirmed,
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('Delete confirmation changed:', { type, confirmed, timestamp: new Date().toISOString() });
        }
    }

    logTextConfirmationChange() {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('debug', 'Environment delete text confirmation changed', {
                textLength: this.deleteTextConfirmation.length,
                timestamp: new Date().toISOString()
            });
        } else {
            console.debug('Environment delete text confirmation changed:', { textLength: this.deleteTextConfirmation.length, timestamp: new Date().toISOString() });
        }
    }

    logButtonValidation(isValid) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('debug', 'Delete button validation', {
                isValid: isValid,
                deleteType: this.currentDeleteType,
                timestamp: new Date().toISOString()
            });
        } else {
            console.debug('Delete button validation:', { isValid, deleteType: this.currentDeleteType, timestamp: new Date().toISOString() });
        }
    }

    logDeleteStart(deleteData) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('info', 'Delete operation started', {
                type: deleteData.type,
                scope: this.getDeleteScope(deleteData),
                metadata: this.getDeleteMetadata(deleteData),
                timestamp: new Date().toISOString()
            });
        } else {
            console.info('Delete operation started:', { type: deleteData.type, scope: this.getDeleteScope(deleteData), metadata: this.getDeleteMetadata(deleteData), timestamp: new Date().toISOString() });
        }
    }

    logDeleteError(error) {
        if (window.logManager && typeof window.logManager.log === 'function') {
            window.logManager.log('error', 'Delete operation failed', {
                error: error.message,
                timestamp: new Date().toISOString()
            });
        } else {
            console.error('Delete operation failed:', { error: error.message, timestamp: new Date().toISOString() });
        }
    }

    showSuccess(message) {
        if (window.app && window.app.uiManager) {
            window.app.uiManager.showNotification(message, 'success');
        } else if (window.uiManager) {
            window.uiManager.showStatusMessage('success', 'Delete Complete', message);
        } else {
            // Create a modern notification instead of alert
            this.showModernNotification(message, 'success');
        }
    }

    showError(message) {
        if (window.app && window.app.uiManager) {
            window.app.uiManager.showNotification('Error: ' + message, 'error');
        } else if (window.uiManager) {
            window.uiManager.showStatusMessage('error', 'Delete Failed', message);
        } else {
            // Create a modern notification instead of alert
            this.showModernNotification('Error: ' + message, 'error');
        }
    }

    showModernNotification(message, type = 'info') {
        // Create a modern notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;

        // Set background color based on type
        if (type === 'success') {
            notification.style.backgroundColor = '#28a745';
        } else if (type === 'error') {
            notification.style.backgroundColor = '#dc3545';
        } else {
            notification.style.backgroundColor = '#17a2b8';
        }

        notification.textContent = message;
        document.body.appendChild(notification);

        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 5000);
    }
}

// Initialize delete manager when DOM is loaded
// Only initialize if delete UI elements exist
function hasDeleteUI() {
    return document.getElementById('delete-file-section') ||
           document.getElementById('delete-population-section') ||
           document.getElementById('delete-environment-section');
}
document.addEventListener('DOMContentLoaded', () => {
    if (hasDeleteUI()) {
        try {
            window.deleteManager = new DeleteManager();
        } catch (error) {
            console.error('Failed to initialize DeleteManager:', error);
        }
    } else {
        window.deleteManager = null;
    }
});

// Export for ES6 module system
export { DeleteManager }; 


/* From: public/js/modules/modify-support-methods.js */
/**
 * Modify Operation Support Methods
 * Comprehensive methods for modify operations including safety checks, conflict detection,
 * preview generation, and data integrity validation
 */

/**
 * Perform comprehensive safety checks before modify operation
 */
async function performModifySafetyChecks(options) {
    const checks = [];
    
    // Check if population exists and is accessible
    if (options.populationId && options.populationId !== 'ALL') {
        try {
            const populationCheck = await this.apiClient.get(`/api/populations/${options.populationId}`);
            if (!populationCheck.success) {
                checks.push(`Population ${options.populationId} not found or inaccessible`);
            }
        } catch (error) {
            checks.push(`Failed to validate population: ${error.message}`);
        }
    }
    
    // Check for protected populations
    const protectedPopulations = ['default', 'admin', 'system'];
    if (protectedPopulations.includes(options.populationName?.toLowerCase())) {
        checks.push(`Cannot modify users in protected population: ${options.populationName}`);
    }
    
    // Check file format and content if provided
    if (options.file) {
        const fileValidation = await this.validateModifyFile(options.file);
        if (!fileValidation.valid) {
            checks.push(`File validation failed: ${fileValidation.error}`);
        }
    }
    
    // Check for bulk modify limits
    if (options.userCount && options.userCount > 5000) {
        checks.push(`Bulk modify limit exceeded. Maximum 5000 users per operation, requested: ${options.userCount}`);
    }
    
    // Validate update fields
    if (!options.updateFields || options.updateFields.length === 0) {
        checks.push('No update fields specified for modify operation');
    }
    
    // Check for protected fields
    const protectedFields = ['id', 'username', 'email', 'createdAt'];
    const attemptingProtectedFields = options.updateFields?.filter(field => 
        protectedFields.includes(field.name?.toLowerCase())
    );
    
    if (attemptingProtectedFields && attemptingProtectedFields.length > 0) {
        checks.push(`Cannot modify protected fields: ${attemptingProtectedFields.map(f => f.name).join(', ')}`);
    }
    
    if (checks.length > 0) {
        const errorMessage = 'Modify safety checks failed:\n' + checks.join('\n');
        this.logger.error('Modify safety checks failed', { checks, options });
        throw new Error(errorMessage);
    }
    
    this.logger.info('Modify safety checks passed', { options });
}

/**
 * Validate modify data and detect potential issues
 */
async function validateModifyData(options) {
    const validationResult = {
        valid: true,
        errors: [],
        warnings: [],
        fieldValidation: {},
        dataQuality: {}
    };
    
    // Validate update fields structure
    if (options.updateFields) {
        for (const field of options.updateFields) {
            const fieldValidation = await this.validateUpdateField(field);
            validationResult.fieldValidation[field.name] = fieldValidation;
            
            if (!fieldValidation.valid) {
                validationResult.errors.push(`Field ${field.name}: ${fieldValidation.error}`);
                validationResult.valid = false;
            }
            
            if (fieldValidation.warnings && fieldValidation.warnings.length > 0) {
                validationResult.warnings.push(...fieldValidation.warnings.map(w => `Field ${field.name}: ${w}`));
            }
        }
    }
    
    // Validate file data if provided
    if (options.file) {
        const fileValidation = await this.validateModifyFileData(options.file);
        validationResult.dataQuality = fileValidation;
        
        if (!fileValidation.valid) {
            validationResult.errors.push(`File data validation failed: ${fileValidation.error}`);
            validationResult.valid = false;
        }
    }
    
    // Check for data consistency
    const consistencyCheck = await this.checkDataConsistency(options);
    if (!consistencyCheck.consistent) {
        validationResult.warnings.push(...consistencyCheck.issues);
    }
    
    this.logger.info('Modify data validation completed', {
        valid: validationResult.valid,
        errorCount: validationResult.errors.length,
        warningCount: validationResult.warnings.length
    });
    
    return validationResult;
}

/**
 * Generate modify preview with conflict analysis
 */
async function generateModifyPreview(options, validationResult) {
    const previewResult = {
        affectedCount: 0,
        hasConflicts: false,
        conflicts: [],
        changes: [],
        estimatedDuration: 0,
        riskLevel: 'low'
    };
    
    try {
        // Get preview from API
        const previewRequest = {
            populationId: options.populationId,
            updateFields: options.updateFields,
            file: options.file,
            previewOnly: true
        };
        
        const response = await this.apiClient.post('/api/modify/preview', previewRequest);
        
        if (response.success && response.preview) {
            previewResult.affectedCount = response.preview.affectedCount || 0;
            previewResult.changes = response.preview.changes || [];
            previewResult.estimatedDuration = response.preview.estimatedDuration || 0;
            
            // Analyze conflicts
            if (response.preview.conflicts && response.preview.conflicts.length > 0) {
                previewResult.hasConflicts = true;
                previewResult.conflicts = response.preview.conflicts;
                previewResult.riskLevel = 'high';
            } else if (previewResult.affectedCount > 1000) {
                previewResult.riskLevel = 'medium';
            }
        }
        
        // Add validation warnings to conflicts
        if (validationResult.warnings && validationResult.warnings.length > 0) {
            previewResult.conflicts.push(...validationResult.warnings.map(warning => ({
                type: 'validation_warning',
                message: warning,
                severity: 'warning'
            })));
        }
        
        this.logger.info('Modify preview generated', {
            affectedCount: previewResult.affectedCount,
            hasConflicts: previewResult.hasConflicts,
            conflictCount: previewResult.conflicts.length,
            riskLevel: previewResult.riskLevel
        });
        
    } catch (error) {
        this.logger.error('Failed to generate modify preview', error);
        // Continue with basic preview
        previewResult.conflicts.push({
            type: 'preview_error',
            message: `Failed to generate preview: ${error.message}`,
            severity: 'error'
        });
        previewResult.hasConflicts = true;
        previewResult.riskLevel = 'high';
    }
    
    return previewResult;
}

/**
 * Request user confirmation for modify operation
 */
async function requestModifyConfirmation(options, previewResult) {
    return new Promise((resolve) => {
        const affectedCount = previewResult.affectedCount || 'unknown number of';
        const populationName = options.populationName || 'selected population';
        const conflictCount = previewResult.conflicts.length;
        
        let confirmationMessage = `Are you sure you want to modify ${affectedCount} users in ${populationName}?\n\n`;
        
        if (previewResult.hasConflicts) {
            confirmationMessage += `⚠️ ${conflictCount} potential conflicts detected:\n`;
            previewResult.conflicts.slice(0, 3).forEach(conflict => {
                confirmationMessage += `• ${conflict.message}\n`;
            });
            if (conflictCount > 3) {
                confirmationMessage += `• ... and ${conflictCount - 3} more conflicts\n`;
            }
            confirmationMessage += '\n';
        }
        
        confirmationMessage += `Risk Level: ${previewResult.riskLevel.toUpperCase()}\n`;
        confirmationMessage += `Estimated Duration: ${Math.ceil(previewResult.estimatedDuration / 60)} minutes\n\n`;
        confirmationMessage += 'A backup will be created before proceeding.';
        
        // Use UIManager for confirmation dialog if available
        if (this.uiManager && typeof this.uiManager.showConfirmation === 'function') {
            this.uiManager.showConfirmation(
                'Confirm Modify Operation',
                confirmationMessage,
                (confirmed) => {
                    resolve({ confirmed, timestamp: new Date().toISOString() });
                }
            );
        } else {
            // Fallback to browser confirm
            const confirmed = confirm(confirmationMessage);
            resolve({ confirmed, timestamp: new Date().toISOString() });
        }
    });
}

/**
 * Create rollback point for modify operation
 */
async function createModifyRollbackPoint(options, previewResult) {
    try {
        const rollbackId = this.generateSessionId('modify_rollback');
        
        // Create rollback metadata
        const rollbackInfo = {
            id: rollbackId,
            timestamp: new Date().toISOString(),
            operation: 'modify',
            populationId: options.populationId,
            populationName: options.populationName,
            affectedCount: previewResult.affectedCount,
            updateFields: options.updateFields,
            createdBy: 'operation-manager-subsystem'
        };
        
        // Store rollback info in local storage for recovery
        const rollbackHistory = JSON.parse(localStorage.getItem('modifyRollbackHistory') || '[]');
        rollbackHistory.unshift(rollbackInfo);
        
        // Keep only last 10 rollback points
        if (rollbackHistory.length > 10) {
            rollbackHistory.splice(10);
        }
        
        localStorage.setItem('modifyRollbackHistory', JSON.stringify(rollbackHistory));
        
        this.logger.info('Modify rollback point created', rollbackInfo);
        return rollbackInfo;
        
    } catch (error) {
        this.logger.error('Failed to create modify rollback point', error);
        // Don't fail the operation for rollback creation failure
        return { id: 'fallback', timestamp: new Date().toISOString(), error: error.message };
    }
}

/**
 * Validate modify prerequisites
 */
async function validateModifyPrerequisites(options) {
    // Check authentication status
    try {
        const authStatus = await this.apiClient.get('/api/auth/status');
        if (!authStatus.success || !authStatus.authenticated) {
            throw new Error('Authentication required for modify operation');
        }
    } catch (error) {
        throw new Error(`Authentication validation failed: ${error.message}`);
    }
    
    // Check API connectivity
    try {
        const healthCheck = await this.apiClient.get('/api/health');
        if (!healthCheck.success) {
            throw new Error('API service unavailable');
        }
    } catch (error) {
        throw new Error(`API connectivity check failed: ${error.message}`);
    }
    
    // Verify modify permissions
    try {
        const permissionCheck = await this.apiClient.get('/api/permissions/modify');
        if (!permissionCheck.success || !permissionCheck.hasPermission) {
            throw new Error('Insufficient permissions for modify operation');
        }
    } catch (error) {
        this.logger.warn('Could not verify modify permissions', error);
        // Continue with operation but log warning
    }
    
    this.logger.info('Modify prerequisites validated successfully');
}

/**
 * Prepare enhanced modify data
 */
async function prepareModifyData(options, sessionId, rollbackInfo, previewResult) {
    const modifyData = {
        sessionId,
        populationId: options.populationId,
        populationName: options.populationName,
        updateFields: options.updateFields,
        rollbackId: rollbackInfo.id,
        previewId: previewResult.previewId,
        clientInfo: {
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString(),
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        },
        safetyChecks: {
            performed: true,
            timestamp: new Date().toISOString()
        },
        conflictResolution: {
            strategy: options.conflictStrategy || 'skip',
            overrideConflicts: options.overrideConflicts || false
        }
    };
    
    // Add file data if provided
    if (options.file) {
        modifyData.file = options.file;
        modifyData.fileName = options.fileName;
    }
    
    // Add user identifiers if provided
    if (options.userIds) {
        modifyData.userIds = options.userIds;
    }
    
    // Add filters if provided
    if (options.filters) {
        modifyData.filters = options.filters;
    }
    
    this.logger.debug('Modify data prepared', { sessionId, dataKeys: Object.keys(modifyData) });
    return modifyData;
}

// Export all methods for use in OperationManagerSubsystem
export {
    performModifySafetyChecks,
    validateModifyData,
    generateModifyPreview,
    requestModifyConfirmation,
    createModifyRollbackPoint,
    validateModifyPrerequisites,
    prepareModifyData
};



/* From: public/js/modules/operation-manager-subsystem.js */
/**
 * Operation Manager Subsystem
 * 
 * Manages all CRUD operations (Import, Export, Delete, Modify) with centralized
 * orchestration, validation, progress tracking, and error handling.
 * 
 * Features:
 * - Unified operation lifecycle management
 * - Operation validation and pre-checks
 * - Progress tracking and status updates
 * - Error handling and recovery
 * - Operation queuing and concurrency control
 * - Operation history and logging
 */

import { createWinstonLogger } from './winston-logger.js';

export class OperationManagerSubsystem {
    constructor(logger, uiManager, settingsSubsystem, apiClient, eventBus) {
        this.logger = logger || createWinstonLogger({
            service: 'operation-manager-subsystem',
            environment: process.env.NODE_ENV || 'development'
        });
        
        this.uiManager = uiManager;
        this.settingsSubsystem = settingsSubsystem;
        this.apiClient = apiClient;
        this.eventBus = eventBus;
        
        // Operation state
        this.currentOperation = null;
        this.operationQueue = [];
        this.operationHistory = [];
        this.isOperationRunning = false;
        
        // Operation types
        this.operationTypes = {
            IMPORT: 'import',
            EXPORT: 'export',
            DELETE: 'delete',
            MODIFY: 'modify'
        };
        
        // Operation validators
        this.validators = new Map();
        this.preChecks = new Map();
        this.postChecks = new Map();
        
        this.logger.info('Operation Manager subsystem initialized');
    }
    
    /**
     * Initialize the operation manager subsystem
     */
    async init() {
        try {
            this.logger.info('Initializing operation manager subsystem...');
            
            // Register default validators and checks
            this.registerDefaultValidators();
            this.registerDefaultPreChecks();
            this.registerDefaultPostChecks();
            
            this.logger.info('Operation Manager subsystem initialized successfully');
        } catch (error) {
            this.logger.error('Failed to initialize operation manager subsystem', { error: error.message });
            throw error;
        }
    }
    
    /**
     * Start an operation
     * @param {string} type - Operation type (import, export, delete, modify)
     * @param {Object} options - Operation options
     * @returns {Promise<Object>} - Operation result
     */
    async startOperation(type, options = {}) {
        try {
            this.logger.info('Starting operation', { type, options });
            
            // Check if operation is already running
            if (this.isOperationRunning) {
                throw new Error('Another operation is already running');
            }
            
            // Validate operation type
            if (!Object.values(this.operationTypes).includes(type)) {
                throw new Error(`Invalid operation type: ${type}`);
            }
            
            // Create operation context
            const operation = {
                id: this.generateOperationId(),
                type,
                options,
                status: 'initializing',
                startTime: Date.now(),
                endTime: null,
                progress: {
                    current: 0,
                    total: 0,
                    percentage: 0,
                    message: 'Initializing...'
                },
                result: null,
                error: null
            };
            
            this.currentOperation = operation;
            this.isOperationRunning = true;
            
            // Run pre-checks
            await this.runPreChecks(operation);
            
            // Validate operation
            await this.validateOperation(operation);
            
            // Execute operation
            const result = await this.executeOperation(operation);
            
            // Run post-checks
            await this.runPostChecks(operation);
            
            // Complete operation
            operation.status = 'completed';
            operation.endTime = Date.now();
            operation.result = result;
            
            this.logger.info('Operation completed successfully', { 
                type, 
                duration: operation.endTime - operation.startTime 
            });
            
            return result;
            
        } catch (error) {
            this.logger.error('Operation failed', { type, error: error.message });
            
            if (this.currentOperation) {
                this.currentOperation.status = 'failed';
                this.currentOperation.endTime = Date.now();
                this.currentOperation.error = error.message;
            }
            
            throw error;
        } finally {
            // Clean up
            this.finalizeOperation();
        }
    }
    
    /**
     * Execute the actual operation
     * @param {Object} operation - Operation context
     * @returns {Promise<Object>} - Operation result
     */
    async executeOperation(operation) {
        const { type, options } = operation;
        
        this.logger.debug('Executing operation', { type });
        
        switch (type) {
            case this.operationTypes.IMPORT:
                return await this.executeImport(operation);
            case this.operationTypes.EXPORT:
                return await this.executeExport(operation);
            case this.operationTypes.DELETE:
                return await this.executeDelete(operation);
            case this.operationTypes.MODIFY:
                return await this.executeModify(operation);
            default:
                throw new Error(`Unknown operation type: ${type}`);
        }
    }
    
    /**
     * Execute import operation
     * @param {Object} operation - Operation context
     * @returns {Promise<Object>} - Import result
     */
    async executeImport(operation) {
        const { options } = operation;
        
        this.logger.info('Executing import operation', { options });
        
        // Update progress
        this.updateOperationProgress(operation, 0, 100, 'Starting import...');
        
        // Prepare import data
        const importData = {
            file: options.file,
            populationId: options.populationId,
            populationName: options.populationName,
            skipDuplicates: options.skipDuplicates || false,
            updateExisting: options.updateExisting || false
        };
        
        // Start import via API
        const response = await this.apiClient.post('/api/import', importData);
        
        if (!response.success) {
            throw new Error(response.error || 'Import failed');
        }
        
        // Track progress via SSE or polling
        await this.trackOperationProgress(operation, response.sessionId);
        
        return {
            success: true,
            sessionId: response.sessionId,
            message: 'Import completed successfully'
        };
    }
    
    /**
     * Execute export operation
     * @param {Object} operation - Operation context
     * @returns {Promise<Object>} - Export result
     */
    async executeExport(operation) {
        const { options } = operation;
        
        this.logger.info('Executing export operation', { options });
        
        // Update progress
        this.updateOperationProgress(operation, 0, 100, 'Starting export...');
        
        // Prepare export data
        const exportData = {
            populationId: options.populationId,
            populationName: options.populationName,
            includeDisabled: options.includeDisabled || false,
            format: options.format || 'csv'
        };
        
        // Start export via API
        const response = await this.apiClient.post('/api/export', exportData);
        
        if (!response.success) {
            throw new Error(response.error || 'Export failed');
        }
        
        // Track progress
        await this.trackOperationProgress(operation, response.sessionId);
        
        return {
            success: true,
            sessionId: response.sessionId,
            downloadUrl: response.downloadUrl,
            message: 'Export completed successfully'
        };
    }
    
    /**
     * Execute delete operation with comprehensive safety checks and audit logging
     * @param {Object} operation - Operation context
     * @returns {Promise<Object>} - Delete result
     */
    async executeDelete(operation) {
        const { options } = operation;
        const sessionId = this.generateSessionId('delete');
        
        try {
            this.logger.info('Starting delete operation with enhanced safety checks', { 
                sessionId, 
                options: this.sanitizeOptionsForLogging(options) 
            });
            
            // Emit delete started event
            this.eventBus?.emit('deleteOperationStarted', { sessionId, options });
            
            // Phase 1: Pre-delete validation and safety checks
            this.updateOperationProgress(operation, 5, 100, 'Performing safety checks...');
            await this.performDeleteSafetyChecks(options);
            
            // Phase 2: User confirmation for critical operations
            this.updateOperationProgress(operation, 10, 100, 'Validating delete permissions...');
            const confirmationResult = await this.requestDeleteConfirmation(options);
            if (!confirmationResult.confirmed) {
                throw new Error('Delete operation cancelled by user');
            }
            
            // Phase 3: Create backup/rollback point
            this.updateOperationProgress(operation, 20, 100, 'Creating rollback checkpoint...');
            const rollbackInfo = await this.createDeleteRollbackPoint(options);
            
            // Phase 4: Validate prerequisites
            this.updateOperationProgress(operation, 30, 100, 'Validating prerequisites...');
            await this.validateDeletePrerequisites(options);
            
            // Phase 5: Prepare enhanced delete data
            this.updateOperationProgress(operation, 40, 100, 'Preparing delete request...');
            const deleteData = await this.prepareDeleteData(options, sessionId, rollbackInfo);
            
            // Phase 6: Execute delete operation
            this.updateOperationProgress(operation, 50, 100, 'Executing delete operation...');
            const response = await this.apiClient.post('/api/delete', deleteData);
            
            if (!response.success) {
                // Record failure and attempt rollback if needed
                await this.recordDeleteAuditLog(sessionId, options, 'failed', response.error);
                throw new Error(response.error || 'Delete operation failed');
            }
            
            // Phase 7: Track progress with enhanced monitoring
            this.updateOperationProgress(operation, 60, 100, 'Monitoring delete progress...');
            const result = await this.trackDeleteProgress(operation, response.sessionId || sessionId, rollbackInfo);
            
            // Phase 8: Post-delete validation
            this.updateOperationProgress(operation, 90, 100, 'Validating delete completion...');
            await this.validateDeleteCompletion(result, options);
            
            // Phase 9: Record success audit log
            await this.recordDeleteAuditLog(sessionId, options, 'completed', null, result);
            
            // Phase 10: Cleanup and finalization
            this.updateOperationProgress(operation, 100, 100, 'Delete completed successfully');
            
            // Emit delete completed event
            this.eventBus?.emit('deleteOperationCompleted', { sessionId, options, result });
            
            this.logger.info('Delete operation completed successfully', { 
                sessionId, 
                deletedCount: result.deletedCount || 0,
                duration: Date.now() - operation.startTime 
            });
            
            return {
                success: true,
                sessionId,
                deletedCount: result.deletedCount || 0,
                rollbackInfo,
                message: `Delete completed successfully. ${result.deletedCount || 0} users deleted.`,
                auditTrail: result.auditTrail
            };
            
        } catch (error) {
            this.logger.error('Delete operation failed', { 
                sessionId, 
                error: error.message, 
                options: this.sanitizeOptionsForLogging(options) 
            });
            
            // Record failure audit log
            await this.recordDeleteAuditLog(sessionId, options, 'failed', error.message);
            
            // Emit delete failed event
            this.eventBus?.emit('deleteOperationFailed', { sessionId, options, error: error.message });
            
            // Enhanced error handling
            await this.handleDeleteError(error, options, sessionId);
            
            throw error;
        }
    }
    
    /**
     * Perform comprehensive safety checks before delete operation
     */
    async performDeleteSafetyChecks(options) {
        const checks = [];
        
        // Check if population exists and is accessible
        if (options.populationId && options.populationId !== 'ALL') {
            try {
                const populationCheck = await this.apiClient.get(`/api/populations/${options.populationId}`);
                if (!populationCheck.success) {
                    checks.push(`Population ${options.populationId} not found or inaccessible`);
                }
            } catch (error) {
                checks.push(`Failed to validate population: ${error.message}`);
            }
        }
        
        // Check for protected populations
        const protectedPopulations = ['default', 'admin', 'system'];
        if (protectedPopulations.includes(options.populationName?.toLowerCase())) {
            checks.push(`Cannot delete users from protected population: ${options.populationName}`);
        }
        
        // Check file format and content if provided
        if (options.file) {
            const fileValidation = await this.validateDeleteFile(options.file);
            if (!fileValidation.valid) {
                checks.push(`File validation failed: ${fileValidation.error}`);
            }
        }
        
        // Check for bulk delete limits
        if (options.userCount && options.userCount > 1000) {
            checks.push(`Bulk delete limit exceeded. Maximum 1000 users per operation, requested: ${options.userCount}`);
        }
        
        if (checks.length > 0) {
            const errorMessage = 'Delete safety checks failed:\n' + checks.join('\n');
            this.logger.error('Delete safety checks failed', { checks, options });
            throw new Error(errorMessage);
        }
        
        this.logger.info('Delete safety checks passed', { options });
    }
    
    /**
     * Request user confirmation for delete operation
     */
    async requestDeleteConfirmation(options) {
        return new Promise((resolve) => {
            const userCount = options.userCount || 'unknown number of';
            const populationName = options.populationName || 'selected population';
            
            const confirmationMessage = `Are you sure you want to delete ${userCount} users from ${populationName}?\n\nThis action cannot be undone. A rollback checkpoint will be created for recovery purposes.`;
            
            // Use UIManager for confirmation dialog if available
            if (this.uiManager && typeof this.uiManager.showConfirmation === 'function') {
                this.uiManager.showConfirmation(
                    'Confirm Delete Operation',
                    confirmationMessage,
                    (confirmed) => {
                        resolve({ confirmed, timestamp: new Date().toISOString() });
                    }
                );
            } else {
                // Fallback to browser confirm
                const confirmed = confirm(confirmationMessage);
                resolve({ confirmed, timestamp: new Date().toISOString() });
            }
        });
    }
    
    /**
     * Create rollback point for delete operation
     */
    async createDeleteRollbackPoint(options) {
        try {
            const rollbackId = this.generateSessionId('rollback');
            
            // Create rollback metadata
            const rollbackInfo = {
                id: rollbackId,
                timestamp: new Date().toISOString(),
                operation: 'delete',
                populationId: options.populationId,
                populationName: options.populationName,
                userCount: options.userCount,
                createdBy: 'operation-manager-subsystem'
            };
            
            // Store rollback info in local storage for recovery
            const rollbackHistory = JSON.parse(localStorage.getItem('deleteRollbackHistory') || '[]');
            rollbackHistory.unshift(rollbackInfo);
            
            // Keep only last 10 rollback points
            if (rollbackHistory.length > 10) {
                rollbackHistory.splice(10);
            }
            
            localStorage.setItem('deleteRollbackHistory', JSON.stringify(rollbackHistory));
            
            this.logger.info('Delete rollback point created', rollbackInfo);
            return rollbackInfo;
            
        } catch (error) {
            this.logger.error('Failed to create rollback point', error);
            // Don't fail the operation for rollback creation failure
            return { id: 'fallback', timestamp: new Date().toISOString(), error: error.message };
        }
    }
    
    /**
     * Validate delete prerequisites
     */
    async validateDeletePrerequisites(options) {
        // Check authentication status
        try {
            const authStatus = await this.apiClient.get('/api/auth/status');
            if (!authStatus.success || !authStatus.authenticated) {
                throw new Error('Authentication required for delete operation');
            }
        } catch (error) {
            throw new Error(`Authentication validation failed: ${error.message}`);
        }
        
        // Check API connectivity
        try {
            const healthCheck = await this.apiClient.get('/api/health');
            if (!healthCheck.success) {
                throw new Error('API service unavailable');
            }
        } catch (error) {
            throw new Error(`API connectivity check failed: ${error.message}`);
        }
        
        this.logger.info('Delete prerequisites validated successfully');
    }
    
    /**
     * Prepare enhanced delete data
     */
    async prepareDeleteData(options, sessionId, rollbackInfo) {
        const deleteData = {
            sessionId,
            populationId: options.populationId,
            populationName: options.populationName,
            confirmDelete: true,
            rollbackId: rollbackInfo.id,
            clientInfo: {
                userAgent: navigator.userAgent,
                timestamp: new Date().toISOString(),
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
            },
            safetyChecks: {
                performed: true,
                timestamp: new Date().toISOString()
            }
        };
        
        // Add file data if provided
        if (options.file) {
            deleteData.file = options.file;
            deleteData.fileName = options.fileName;
        }
        
        // Add user identifiers if provided
        if (options.userIds) {
            deleteData.userIds = options.userIds;
        }
        
        // Add filters if provided
        if (options.filters) {
            deleteData.filters = options.filters;
        }
        
        this.logger.debug('Delete data prepared', { sessionId, dataKeys: Object.keys(deleteData) });
        return deleteData;
    }
    
    /**
     * Track delete progress with enhanced monitoring
     */
    async trackDeleteProgress(operation, sessionId, rollbackInfo) {
        try {
            // Use enhanced progress tracking with delete-specific monitoring
            const result = await this.trackOperationProgress(operation, sessionId);
            
            // Add delete-specific result processing
            if (result && typeof result === 'object') {
                result.rollbackInfo = rollbackInfo;
                result.auditTrail = result.auditTrail || [];
                result.deletedCount = result.deletedCount || result.processedCount || 0;
            }
            
            return result;
        } catch (error) {
            this.logger.error('Delete progress tracking failed', { sessionId, error: error.message });
            throw error;
        }
    }
    
    /**
     * Validate delete completion
     */
    async validateDeleteCompletion(result, options) {
        // Verify result structure
        if (!result || typeof result !== 'object') {
            throw new Error('Invalid delete result received');
        }
        
        // Check for expected deletion count
        if (options.userCount && result.deletedCount !== undefined) {
            if (result.deletedCount < options.userCount) {
                this.logger.warn('Delete count mismatch', {
                    expected: options.userCount,
                    actual: result.deletedCount
                });
            }
        }
        
        // Verify no critical errors in audit trail
        if (result.auditTrail && Array.isArray(result.auditTrail)) {
            const criticalErrors = result.auditTrail.filter(entry => 
                entry.level === 'error' && entry.critical === true
            );
            
            if (criticalErrors.length > 0) {
                throw new Error(`Delete completed with critical errors: ${criticalErrors.map(e => e.message).join(', ')}`);
            }
        }
        
        this.logger.info('Delete completion validated successfully', {
            deletedCount: result.deletedCount,
            auditEntries: result.auditTrail?.length || 0
        });
    }
    
    /**
     * Record comprehensive audit log for delete operation
     */
    async recordDeleteAuditLog(sessionId, options, status, errorMessage = null, result = null) {
        try {
            const auditEntry = {
                sessionId,
                timestamp: new Date().toISOString(),
                operation: 'delete',
                status, // 'started', 'completed', 'failed'
                populationId: options.populationId,
                populationName: options.populationName,
                userCount: options.userCount,
                deletedCount: result?.deletedCount,
                errorMessage,
                duration: result?.duration,
                userAgent: navigator.userAgent,
                ipAddress: 'client-side', // Would be filled by server
                rollbackId: result?.rollbackInfo?.id
            };
            
            // Store in local audit log
            const auditLog = JSON.parse(localStorage.getItem('deleteAuditLog') || '[]');
            auditLog.unshift(auditEntry);
            
            // Keep only last 100 audit entries
            if (auditLog.length > 100) {
                auditLog.splice(100);
            }
            
            localStorage.setItem('deleteAuditLog', JSON.stringify(auditLog));
            
            // Send to server for centralized audit logging
            try {
                await this.apiClient.post('/api/audit/delete', auditEntry);
            } catch (serverError) {
                this.logger.warn('Failed to send audit log to server', serverError);
                // Don't fail the operation for audit logging failure
            }
            
            this.logger.info('Delete audit log recorded', { sessionId, status });
            
        } catch (error) {
            this.logger.error('Failed to record delete audit log', error);
            // Don't fail the operation for audit logging failure
        }
    }
    
    /**
     * Handle delete operation errors with recovery options
     */
    async handleDeleteError(error, options, sessionId) {
        const errorType = this.categorizeDeleteError(error);
        
        switch (errorType) {
            case 'network':
                if (this.uiManager) {
                    this.uiManager.showError('Network Error', 
                        'Delete failed due to network issues. The operation may have been partially completed. Check the audit log for details.');
                }
                break;
            case 'authentication':
                if (this.uiManager) {
                    this.uiManager.showError('Authentication Error', 
                        'Your session has expired. Please re-authenticate and check if the delete operation completed.');
                }
                // Emit token refresh request
                this.eventBus?.emit('tokenRefreshRequired', { source: 'delete', sessionId });
                break;
            case 'validation':
                if (this.uiManager) {
                    this.uiManager.showError('Validation Error', 
                        `Delete operation failed validation: ${error.message}`);
                }
                break;
            case 'safety':
                if (this.uiManager) {
                    this.uiManager.showError('Safety Check Failed', 
                        `Delete operation blocked by safety checks: ${error.message}`);
                }
                break;
            case 'server':
                if (this.uiManager) {
                    this.uiManager.showError('Server Error', 
                        'Delete failed due to a server error. Check the audit log and consider using rollback if needed.');
                }
                break;
            default:
                if (this.uiManager) {
                    this.uiManager.showError('Delete Error', 
                        `Delete operation failed: ${error.message}`);
                }
        }
        
        // Offer rollback option for certain error types
        if (['network', 'server'].includes(errorType)) {
            this.offerRollbackOption(sessionId, options);
        }
    }
    
    /**
     * Categorize delete errors for appropriate handling
     */
    categorizeDeleteError(error) {
        const message = error.message.toLowerCase();
        
        if (message.includes('network') || message.includes('fetch') || message.includes('timeout')) {
            return 'network';
        } else if (message.includes('unauthorized') || message.includes('token') || message.includes('expired')) {
            return 'authentication';
        } else if (message.includes('validation') || message.includes('invalid') || message.includes('format')) {
            return 'validation';
        } else if (message.includes('safety') || message.includes('protected') || message.includes('limit')) {
            return 'safety';
        } else if (message.includes('server') || message.includes('internal') || message.includes('500')) {
            return 'server';
        }
        
        return 'unknown';
    }
    
    /**
     * Offer rollback option to user
     */
    offerRollbackOption(sessionId, options) {
        if (this.uiManager && typeof this.uiManager.showConfirmation === 'function') {
            this.uiManager.showConfirmation(
                'Rollback Available',
                'The delete operation may have been partially completed. Would you like to attempt a rollback?',
                (confirmed) => {
                    if (confirmed) {
                        this.initiateDeleteRollback(sessionId, options);
                    }
                }
            );
        }
    }
    
    /**
     * Initiate delete rollback operation
     */
    async initiateDeleteRollback(sessionId, options) {
        try {
            this.logger.info('Initiating delete rollback', { sessionId });
            
            // This would typically call a rollback API endpoint
            const rollbackResponse = await this.apiClient.post('/api/delete/rollback', {
                sessionId,
                timestamp: new Date().toISOString()
            });
            
            if (rollbackResponse.success) {
                if (this.uiManager) {
                    this.uiManager.showSuccess('Rollback Initiated', 
                        'Delete rollback has been initiated. Check the audit log for progress.');
                }
            } else {
                throw new Error(rollbackResponse.error || 'Rollback failed');
            }
            
        } catch (error) {
            this.logger.error('Delete rollback failed', error);
            if (this.uiManager) {
                this.uiManager.showError('Rollback Failed', 
                    `Failed to initiate rollback: ${error.message}`);
            }
        }
    }
    
    /**
     * Validate delete file format and content
     */
    async validateDeleteFile(file) {
        try {
            // Check file type
            const allowedTypes = ['text/csv', 'application/csv', 'text/plain'];
            if (!allowedTypes.includes(file.type)) {
                return { valid: false, error: `Invalid file type: ${file.type}. Only CSV files are allowed.` };
            }
            
            // Check file size (max 10MB)
            const maxSize = 10 * 1024 * 1024;
            if (file.size > maxSize) {
                return { valid: false, error: `File too large: ${(file.size / 1024 / 1024).toFixed(2)}MB. Maximum size is 10MB.` };
            }
            
            // Basic content validation
            const text = await file.text();
            const lines = text.split('\n').filter(line => line.trim());
            
            if (lines.length === 0) {
                return { valid: false, error: 'File is empty' };
            }
            
            if (lines.length > 10000) {
                return { valid: false, error: `Too many entries: ${lines.length}. Maximum 10,000 entries per file.` };
            }
            
            // Check for required headers (basic validation)
            const headers = lines[0].toLowerCase().split(',').map(h => h.trim());
            const requiredHeaders = ['email', 'username', 'id'];
            const hasRequiredHeader = requiredHeaders.some(header => 
                headers.some(h => h.includes(header))
            );
            
            if (!hasRequiredHeader) {
                return { valid: false, error: 'File must contain at least one of: email, username, or id column' };
            }
            
            return { valid: true, lineCount: lines.length - 1 }; // Subtract header
            
        } catch (error) {
            return { valid: false, error: `File validation error: ${error.message}` };
        }
    }
    
    /**
     * Generate session ID for operations
     */
    generateSessionId(prefix = 'op') {
        return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * Sanitize options for logging (remove sensitive data)
     */
    sanitizeOptionsForLogging(options) {
        const sanitized = { ...options };
        
        // Remove or mask sensitive fields
        if (sanitized.file) {
            sanitized.file = '[FILE_OBJECT]';
        }
        
        if (sanitized.userIds && Array.isArray(sanitized.userIds)) {
            sanitized.userIds = `[${sanitized.userIds.length} user IDs]`;
        }
        
        return sanitized;
    }
    
    /**
     * Execute modify operation with comprehensive conflict detection and data integrity validation
     * @param {Object} operation - Operation context
     * @returns {Promise<Object>} - Modify result
     */
    async executeModify(operation) {
        const { options } = operation;
        const sessionId = this.generateSessionId('modify');
        
        try {
            this.logger.info('Starting modify operation with enhanced validation', { 
                sessionId, 
                options: this.sanitizeOptionsForLogging(options) 
            });
            
            // Emit modify started event
            this.eventBus?.emit('modifyOperationStarted', { sessionId, options });
            
            // Phase 1: Pre-modify validation and safety checks
            this.updateOperationProgress(operation, 5, 100, 'Performing modify safety checks...');
            await this.performModifySafetyChecks(options);
            
            // Phase 2: Data validation and conflict detection
            this.updateOperationProgress(operation, 15, 100, 'Validating modification data...');
            const validationResult = await this.validateModifyData(options);
            
            // Phase 3: Preview generation and conflict analysis
            this.updateOperationProgress(operation, 25, 100, 'Analyzing potential conflicts...');
            const previewResult = await this.generateModifyPreview(options, validationResult);
            
            // Phase 4: User confirmation for modifications with conflicts
            if (previewResult.hasConflicts || previewResult.affectedCount > 100) {
                this.updateOperationProgress(operation, 30, 100, 'Requesting user confirmation...');
                const confirmationResult = await this.requestModifyConfirmation(options, previewResult);
                if (!confirmationResult.confirmed) {
                    throw new Error('Modify operation cancelled by user');
                }
            }
            
            // Phase 5: Create backup/rollback point
            this.updateOperationProgress(operation, 35, 100, 'Creating data backup...');
            const rollbackInfo = await this.createModifyRollbackPoint(options, previewResult);
            
            // Phase 6: Validate prerequisites
            this.updateOperationProgress(operation, 45, 100, 'Validating prerequisites...');
            await this.validateModifyPrerequisites(options);
            
            // Phase 7: Prepare enhanced modify data
            this.updateOperationProgress(operation, 50, 100, 'Preparing modification request...');
            const modifyData = await this.prepareModifyData(options, sessionId, rollbackInfo, previewResult);
            
            // Phase 8: Execute modify operation
            this.updateOperationProgress(operation, 60, 100, 'Executing modifications...');
            const response = await this.apiClient.post('/api/modify', modifyData);
            
            if (!response.success) {
                // Record failure and attempt rollback if needed
                await this.recordModifyAuditLog(sessionId, options, 'failed', response.error);
                throw new Error(response.error || 'Modify operation failed');
            }
        
        // Phase 9: Track progress with enhanced monitoring
        this.updateOperationProgress(operation, 70, 100, 'Monitoring modification progress...');
        const result = await this.trackModifyProgress(operation, response.sessionId || sessionId, rollbackInfo);
        
        // Phase 10: Post-modify validation and integrity checks
        this.updateOperationProgress(operation, 90, 100, 'Validating modification completion...');
        await this.validateModifyCompletion(result, options, previewResult);
        
        // Phase 11: Record success audit log
        await this.recordModifyAuditLog(sessionId, options, 'completed', null, result);
        
        // Phase 12: Cleanup and finalization
        this.updateOperationProgress(operation, 100, 100, 'Modify completed successfully');
        
        // Emit modify completed event
        this.eventBus?.emit('modifyOperationCompleted', { sessionId, options, result });
        
        this.logger.info('Modify operation completed successfully', { 
            sessionId, 
            modifiedCount: result.modifiedCount || 0,
            conflictsResolved: result.conflictsResolved || 0,
            duration: Date.now() - operation.startTime 
        });
        
        return {
            success: true,
            sessionId,
            modifiedCount: result.modifiedCount || 0,
            conflictsResolved: result.conflictsResolved || 0,
            rollbackInfo,
            previewResult,
            message: `Modify completed successfully. ${result.modifiedCount || 0} users modified.`,
            auditTrail: result.auditTrail
        };
        
    } catch (error) {
        this.logger.error('Modify operation failed', { 
            sessionId, 
            error: error.message, 
            options: this.sanitizeOptionsForLogging(options) 
        });
        
        // Record failure audit log
        await this.recordModifyAuditLog(sessionId, options, 'failed', error.message);
        
        // Emit modify failed event
        this.eventBus?.emit('modifyOperationFailed', { sessionId, options, error: error.message });
        
        // Enhanced error handling
        await this.handleModifyError(error, options, sessionId);
        
        throw error;
    }
}

/**
 * Track operation progress via SSE or polling
 * @param {Object} operation - Operation context
 * @param {string} sessionId - Session ID for tracking
 */
    async trackOperationProgress(operation, sessionId) {
        return new Promise((resolve, reject) => {
            // Try SSE first
            if (typeof EventSource !== 'undefined') {
                this.trackProgressViaSSE(operation, sessionId, resolve, reject);
            } else {
                // Fallback to polling
                this.trackProgressViaPolling(operation, sessionId, resolve, reject);
            }
        });
    }
    
    /**
     * Track progress via Server-Sent Events
     * @param {Object} operation - Operation context
     * @param {string} sessionId - Session ID
     * @param {Function} resolve - Promise resolve function
     * @param {Function} reject - Promise reject function
     */
    trackProgressViaSSE(operation, sessionId, resolve, reject) {
        const eventSource = new EventSource(`/api/progress/${sessionId}`);
        
        eventSource.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                this.handleProgressUpdate(operation, data);
                
                if (data.status === 'completed') {
                    eventSource.close();
                    resolve(data);
                } else if (data.status === 'failed') {
                    eventSource.close();
                    reject(new Error(data.error || 'Operation failed'));
                }
            } catch (error) {
                this.logger.error('Error parsing SSE data', { error: error.message });
            }
        };
        
        eventSource.onerror = (error) => {
            this.logger.error('SSE connection error', { error });
            eventSource.close();
            // Fallback to polling
            this.trackProgressViaPolling(operation, sessionId, resolve, reject);
        };
    }
    
    /**
     * Track progress via polling
     * @param {Object} operation - Operation context
     * @param {string} sessionId - Session ID
     * @param {Function} resolve - Promise resolve function
     * @param {Function} reject - Promise reject function
     */
    async trackProgressViaPolling(operation, sessionId, resolve, reject) {
        const pollInterval = 1000; // 1 second
        
        const poll = async () => {
            try {
                const response = await this.apiClient.get(`/api/progress/${sessionId}`);
                
                if (response.success) {
                    this.handleProgressUpdate(operation, response.data);
                    
                    if (response.data.status === 'completed') {
                        resolve(response.data);
                    } else if (response.data.status === 'failed') {
                        reject(new Error(response.data.error || 'Operation failed'));
                    } else {
                        setTimeout(poll, pollInterval);
                    }
                } else {
                    reject(new Error(response.error || 'Failed to get progress'));
                }
            } catch (error) {
                reject(error);
            }
        };
        
        poll();
    }
    
    /**
     * Handle progress update
     * @param {Object} operation - Operation context
     * @param {Object} progressData - Progress data from server
     */
    handleProgressUpdate(operation, progressData) {
        // Update operation progress
        operation.progress = {
            current: progressData.current || 0,
            total: progressData.total || 0,
            percentage: progressData.percentage || 0,
            message: progressData.message || 'Processing...'
        };
        
        // Update UI
        if (this.uiManager) {
            this.uiManager.updateProgress(
                operation.progress.current,
                operation.progress.total,
                operation.progress.message
            );
        }
        
        this.logger.debug('Progress updated', { 
            type: operation.type,
            progress: operation.progress 
        });
    }
    
    /**
     * Update operation progress
     * @param {Object} operation - Operation context
     * @param {number} current - Current progress
     * @param {number} total - Total progress
     * @param {string} message - Progress message
     */
    updateOperationProgress(operation, current, total, message) {
        const percentage = total > 0 ? Math.round((current / total) * 100) : 0;
        
        operation.progress = {
            current,
            total,
            percentage,
            message
        };
        
        // Update UI
        if (this.uiManager) {
            this.uiManager.updateProgress(current, total, message);
        }
        
        this.logger.debug('Operation progress updated', { 
            type: operation.type,
            progress: operation.progress 
        });
    }
    
    /**
     * Run pre-checks for operation
     * @param {Object} operation - Operation context
     */
    async runPreChecks(operation) {
        const preCheck = this.preChecks.get(operation.type);
        if (preCheck) {
            this.logger.debug('Running pre-checks', { type: operation.type });
            await preCheck(operation);
        }
    }
    
    /**
     * Validate operation
     * @param {Object} operation - Operation context
     */
    async validateOperation(operation) {
        const validator = this.validators.get(operation.type);
        if (validator) {
            this.logger.debug('Validating operation', { type: operation.type });
            await validator(operation);
        }
    }
    
    /**
     * Run post-checks for operation
     * @param {Object} operation - Operation context
     */
    async runPostChecks(operation) {
        const postCheck = this.postChecks.get(operation.type);
        if (postCheck) {
            this.logger.debug('Running post-checks', { type: operation.type });
            await postCheck(operation);
        }
    }
    
    /**
     * Finalize operation
     */
    finalizeOperation() {
        if (this.currentOperation) {
            // Add to history
            this.operationHistory.push({...this.currentOperation});
            
            // Limit history size
            if (this.operationHistory.length > 100) {
                this.operationHistory = this.operationHistory.slice(-100);
            }
            
            // Clear current operation
            this.currentOperation = null;
        }
        
        this.isOperationRunning = false;
        
        this.logger.debug('Operation finalized');
    }
    
    /**
     * Register default validators
     */
    registerDefaultValidators() {
        // Import validator
        this.validators.set(this.operationTypes.IMPORT, async (operation) => {
            const { options } = operation;
            
            if (!options.file) {
                throw new Error('No file selected for import');
            }
            
            if (!options.populationId) {
                throw new Error('No population selected for import');
            }
        });
        
        // Export validator
        this.validators.set(this.operationTypes.EXPORT, async (operation) => {
            const { options } = operation;
            
            if (!options.populationId) {
                throw new Error('No population selected for export');
            }
        });
        
        // Delete validator
        this.validators.set(this.operationTypes.DELETE, async (operation) => {
            const { options } = operation;
            
            if (!options.file) {
                throw new Error('No file selected for delete');
            }
            
            if (!options.populationId) {
                throw new Error('No population selected for delete');
            }
        });
        
        // Modify validator
        this.validators.set(this.operationTypes.MODIFY, async (operation) => {
            const { options } = operation;
            
            if (!options.file) {
                throw new Error('No file selected for modify');
            }
            
            if (!options.populationId) {
                throw new Error('No population selected for modify');
            }
        });
    }
    
    /**
     * Register default pre-checks
     */
    registerDefaultPreChecks() {
        // Common pre-check for all operations
        const commonPreCheck = async (operation) => {
            // Check token validity
            if (window.app && typeof window.app.checkTokenAndRedirect === 'function') {
                const hasValidToken = await window.app.checkTokenAndRedirect(operation.type);
                if (!hasValidToken) {
                    throw new Error('Invalid or expired token');
                }
            }
        };
        
        // Register for all operation types
        Object.values(this.operationTypes).forEach(type => {
            this.preChecks.set(type, commonPreCheck);
        });
    }
    
    /**
     * Register default post-checks
     */
    registerDefaultPostChecks() {
        // Common post-check for all operations
        const commonPostCheck = async (operation) => {
            // Log operation completion
            this.logger.info('Operation completed', {
                type: operation.type,
                duration: operation.endTime - operation.startTime,
                status: operation.status
            });
        };
        
        // Register for all operation types
        Object.values(this.operationTypes).forEach(type => {
            this.postChecks.set(type, commonPostCheck);
        });
    }
    
    /**
     * Generate unique operation ID
     * @returns {string} - Unique operation ID
     */
    generateOperationId() {
        return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * Cancel current operation
     */
    async cancelOperation() {
        if (this.currentOperation && this.isOperationRunning) {
            this.logger.info('Cancelling operation', { type: this.currentOperation.type });
            
            try {
                // Try to cancel via API
                if (this.currentOperation.sessionId) {
                    await this.apiClient.post(`/api/cancel/${this.currentOperation.sessionId}`);
                }
                
                this.currentOperation.status = 'cancelled';
                this.currentOperation.endTime = Date.now();
                
                this.logger.info('Operation cancelled successfully');
            } catch (error) {
                this.logger.error('Failed to cancel operation', { error: error.message });
            } finally {
                this.finalizeOperation();
            }
        }
    }
    
    /**
     * Get current operation status
     * @returns {Object|null} - Current operation or null
     */
    getCurrentOperation() {
        return this.currentOperation ? {...this.currentOperation} : null;
    }
    
    /**
     * Get operation history
     * @returns {Array} - Operation history
     */
    getOperationHistory() {
        return [...this.operationHistory];
    }
    
    /**
     * Check if operation is running
     * @returns {boolean} - Whether operation is running
     */
    isRunning() {
        return this.isOperationRunning;
    }
    
    /**
     * Get operation statistics
     * @returns {Object} - Operation statistics
     */
    getOperationStats() {
        const stats = {
            total: this.operationHistory.length,
            byType: {},
            byStatus: {},
            averageDuration: 0
        };
        
        let totalDuration = 0;
        
        this.operationHistory.forEach(op => {
            // By type
            if (!stats.byType[op.type]) {
                stats.byType[op.type] = 0;
            }
            stats.byType[op.type]++;
            
            // By status
            if (!stats.byStatus[op.status]) {
                stats.byStatus[op.status] = 0;
            }
            stats.byStatus[op.status]++;
            
            // Duration
            if (op.endTime && op.startTime) {
                totalDuration += (op.endTime - op.startTime);
            }
        });
        
        if (this.operationHistory.length > 0) {
            stats.averageDuration = Math.round(totalDuration / this.operationHistory.length);
        }
        
        return stats;
    }
}

