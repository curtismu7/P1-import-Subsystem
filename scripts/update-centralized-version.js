#!/usr/bin/env node

/**
 * Centralized Version Update Script
 * 
 * This script updates the centralized version in src/version.js
 * and ensures the package.json version is synchronized.
 * 
 * Usage:
 *   node scripts/update-centralized-version.js <new-version>
 *   npm run version:update:centralized <new-version>
 * 
 * Example:
 *   node scripts/update-centralized-version.js 7.0.0.20
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

// Color codes for console output
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function validateVersion(version) {
    const versionRegex = /^\d+\.\d+\.\d+(\.\d+)?$/;
    if (!versionRegex.test(version)) {
        throw new Error(`Invalid version format: ${version}. Expected format: x.y.z or x.y.z.w`);
    }
    return true;
}

function updateCentralizedVersion(newVersion) {
    const versionPath = path.join(projectRoot, 'src', 'version.js');
    log(`üì¶ Updating centralized version.js...`, 'blue');
    
    let content = fs.readFileSync(versionPath, 'utf8');
    
    // Update the APP_VERSION constant
    content = content.replace(
        /export const APP_VERSION = '[\d.]+'/,
        `export const APP_VERSION = '${newVersion}'`
    );
    
    // Update the buildDate
    const today = new Date().toISOString().split('T')[0];
    content = content.replace(
        /buildDate: '[\d-]+'/,
        `buildDate: '${today}'`
    );
    
    fs.writeFileSync(versionPath, content);
    log(`   ‚úÖ Updated centralized version to: ${newVersion}`, 'green');
}

function updatePackageJson(newVersion) {
    const packagePath = path.join(projectRoot, 'package.json');
    log(`üì¶ Updating package.json...`, 'blue');
    
    const packageContent = fs.readFileSync(packagePath, 'utf8');
    const packageJson = JSON.parse(packageContent);
    const oldVersion = packageJson.version;
    
    packageJson.version = newVersion;
    
    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2) + '\n');
    log(`   ‚úÖ Updated version: ${oldVersion} ‚Üí ${newVersion}`, 'green');
    
    return oldVersion;
}

function createVersionUpdateSummary(newVersion, oldVersion) {
    const summaryPath = path.join(projectRoot, 'VERSION_UPDATE_SUMMARY.md');
    const timestamp = new Date().toISOString();
    
    const summary = `# Centralized Version Update Summary

## Version Change
- **Previous Version**: ${oldVersion}
- **New Version**: ${newVersion}
- **Update Date**: ${timestamp}
- **Update Method**: Centralized Version Management System

## Files Updated
1. ‚úÖ src/version.js - Single source of truth
2. ‚úÖ package.json - Main version property

## Next Steps
1. Rebuild bundle: \`npm run build:bundle\`
2. Restart server: \`npm run restart\`
3. Commit changes: \`git add . && git commit -m "üîñ Update version to ${newVersion}"\`
4. Create tag: \`git tag -a v${newVersion} -m "Release v${newVersion}"\`
5. Test application to verify version displays correctly

## Verification Checklist
- [ ] Package.json shows version ${newVersion}
- [ ] Browser title shows "PingOne Import Tool v${newVersion}"
- [ ] Footer shows "¬© ${new Date().getFullYear()} PingOne Import Tool v${newVersion}"
- [ ] Version widget shows "v${newVersion}"
- [ ] Console logs show version ${newVersion}
- [ ] API endpoint returns version ${newVersion}

---
Generated by Centralized Version Management System
`;
    
    fs.writeFileSync(summaryPath, summary);
    log(`üìã Created version update summary: VERSION_UPDATE_SUMMARY.md`, 'cyan');
}

async function main() {
    try {
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            log('‚ùå Error: Version argument required', 'red');
            log('Usage: node scripts/update-centralized-version.js <new-version>', 'yellow');
            log('Example: node scripts/update-centralized-version.js 7.0.0.20', 'yellow');
            process.exit(1);
        }
        
        const newVersion = args[0];
        
        log('üîß Starting Centralized Version Update...', 'bright');
        log(`üéØ Target Version: ${newVersion}`, 'magenta');
        
        // Validate version format
        validateVersion(newVersion);
        log('‚úÖ Version format validated', 'green');
        
        // Update all files
        updateCentralizedVersion(newVersion);
        const oldVersion = updatePackageJson(newVersion);
        
        // Create summary
        createVersionUpdateSummary(newVersion, oldVersion);
        
        log('', 'reset');
        log('üéâ Centralized Version Update Complete!', 'bright');
        log(`üìà Version updated: ${oldVersion} ‚Üí ${newVersion}`, 'green');
        log('', 'reset');
        log('üìã Next Steps:', 'cyan');
        log('   1. npm run build:bundle', 'yellow');
        log('   2. npm run restart', 'yellow');
        log(`   3. git add . && git commit -m "üîñ Update version to ${newVersion}"`, 'yellow');
        log(`   4. git tag -a v${newVersion} -m "Release v${newVersion}"`, 'yellow');
        log('   5. Test application in browser', 'yellow');
        
    } catch (error) {
        log(`‚ùå Error: ${error.message}`, 'red');
        process.exit(1);
    }
}

main();
