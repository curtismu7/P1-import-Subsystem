{"version":3,"mappings":"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","names":["WinstonLogger","options","level","message","meta","timestamp","levelUpper","consoleMessage","error","transport","errorMeta","additionalMeta","childLogger","enabled","createWinstonLogger","createComponentLogger","component","MessageFormatter","eventType","eventStage","details","eventConfig","separator","formattedMessage","marker","operation","current","total","stats","percentage","errorMessage","errorDetails","results","eventData","type","counts","char","length","stage","date","formatted","key","value","statLabels","resultLabels","displayValue","milliseconds","seconds","minutes","hours","messageFormatter","elementCache","getElement","selector","description","required","el","ElementRegistry","SessionManager","random","counter","sessionId","operationType","metadata","sessionData","session","maxAge","now","expiredSessions","sessions","ProgressManager","cancelButton","closeButton","containerId","fallbackContainer","script","io","data","wsUrl","event","sessionElement","progressBar","percentageElement","progressText","statElement","step","steps","stepElement","currentStep","stepOrder","stepName","elapsed","elapsedElement","progress","remaining","etaElement","processed","success","failed","skipped","titleElement","titles","populationName","populationId","totalUsers","operationTypeElement","populationElement","status","subtitleElement","connectionElement","callback","area","ErrorTypes","ErrorSeverity","ui","Logger","logElement","element","isLoading","FileLogger","__vitePreload","args","context","parsedMessage","parsedData","logData","logEntry","levelBadge","detailsElement","detailsTitle","detailsContent","maxUILogs","log","label","startTime","duration","method","originalMethod","contextualData","CryptoUtils","password","encoder","keyMaterial","text","iv","encrypted","result","encryptedBase64","encryptedData","c","decrypted","SettingsManager","logger","msg","code","regions","storedData","parsedSettings","decryptedData","decryptionError","settings","jsonData","encryptionError","newSettings","deviceId","storedDeviceId","navigatorInfo","hashBuffer","b","test","exportData","importData","parsed","jsonError","LocalAPIClient","baseUrl","response","attempt","baseDelay","maxDelay","exponentialDelay","jitter","maxRetries","endpoint","url","requestOptions","headers","body","requestLog","lastError","controller","timeoutId","responseData","responseLog","friendlyMessage","isRateLimit","delay","resolve","contentType","formData","currentToken","token","payload","localAPIClient","PingOneClient","storedToken","storedExpiry","expiryTime","expiresIn","credentials","isExpired","bufferTime","isNearExpiry","timeRemaining","timeRemainingFormatted","lastLogTime","remainingSeconds","tokenInfo","errorMsg","retryAttempts","errorText","csvData","batchSize","enableUsers","skipDuplicatesByEmail","skipDuplicatesByUsername","fallbackPopulationId","populationSelect","seenEmails","seenUsernames","i","batch","user","userPopulationId","userData","statusError","successMessage"],"ignoreList":[],"sources":["../../public/js/modules/winston-logger.js","../../public/js/modules/message-formatter.js","../../public/js/modules/element-registry.js","../../public/js/modules/session-manager.js","../../public/js/modules/progress-manager.js","../../public/js/modules/error/error-types.js","../../public/js/modules/logger.js","../../public/js/modules/crypto-utils.js","../../public/js/modules/settings-manager.js","../../public/js/modules/local-api-client.js","../../public/js/modules/pingone-client.js"],"sourcesContent":["/**\n * @fileoverview Winston-compatible logger for frontend/browser environment\n * \n * This module provides a Winston-like logging interface for the frontend\n * that maintains consistency with server-side Winston logging while\n * working within browser constraints.\n * \n * Features:\n * - Winston-compatible API (info, warn, error, debug)\n * - Structured logging with metadata\n * - Timestamp formatting\n * - Log level filtering\n * - Console and server transport support\n * - Error stack trace handling\n * - Environment-aware configuration\n */\n\n/**\n * Winston-compatible logger for browser environment\n */\nclass WinstonLogger {\n    constructor(options = {}) {\n        this.level = options.level || this.getDefaultLevel();\n        this.service = options.service || 'pingone-import-frontend';\n        this.environment = options.environment || (process.env.NODE_ENV || 'development');\n        this.enableServerLogging = options.enableServerLogging !== false;\n        this.enableConsoleLogging = options.enableConsoleLogging !== false;\n        \n        // Log level hierarchy\n        this.levels = {\n            error: 0,\n            warn: 1,\n            info: 2,\n            debug: 3\n        };\n        \n        // Initialize transports\n        this.transports = [];\n        this.initializeTransports();\n    }\n    \n    /**\n     * Get default log level based on environment\n     */\n    getDefaultLevel() {\n        if (this.environment === 'production') {\n            return 'info';\n        } else if (this.environment === 'test') {\n            return 'warn';\n        } else {\n            return 'debug';\n        }\n    }\n    \n    /**\n     * Initialize logging transports\n     */\n    initializeTransports() {\n        // Console transport\n        if (this.enableConsoleLogging) {\n            this.transports.push({\n                name: 'console',\n                log: (level, message, meta) => this.logToConsole(level, message, meta)\n            });\n        }\n        \n        // Server transport (if enabled)\n        if (this.enableServerLogging) {\n            this.transports.push({\n                name: 'server',\n                log: (level, message, meta) => this.logToServer(level, message, meta)\n            });\n        }\n    }\n    \n    /**\n     * Check if a log level should be logged\n     */\n    shouldLog(level) {\n        return this.levels[level] <= this.levels[this.level];\n    }\n    \n    /**\n     * Format timestamp\n     */\n    formatTimestamp() {\n        return new Date().toISOString();\n    }\n    \n    /**\n     * Format log entry\n     */\n    formatLogEntry(level, message, meta = {}) {\n        const timestamp = this.formatTimestamp();\n        \n        return {\n            timestamp,\n            level,\n            message,\n            service: this.service,\n            environment: this.environment,\n            ...meta\n        };\n    }\n    \n    /**\n     * Log to console with Winston-like formatting\n     */\n    logToConsole(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        const logEntry = this.formatLogEntry(level, message, meta);\n        const timestamp = logEntry.timestamp;\n        const levelUpper = level.toUpperCase();\n        \n        // Create formatted console message\n        let consoleMessage = `[${timestamp}] [${this.service}] ${levelUpper}: ${message}`;\n        \n        // Add metadata if present\n        if (Object.keys(meta).length > 0) {\n            consoleMessage += `\\n${JSON.stringify(meta, null, 2)}`;\n        }\n        \n        // Use appropriate console method\n        switch (level) {\n            case 'error':\n                console.error(consoleMessage);\n                break;\n            case 'warn':\n                console.warn(consoleMessage);\n                break;\n            case 'info':\n                console.info(consoleMessage);\n                break;\n            case 'debug':\n                console.debug(consoleMessage);\n                break;\n            default:\n                console.log(consoleMessage);\n        }\n    }\n    \n    /**\n     * Log to server via API endpoint\n     */\n    async logToServer(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        try {\n            // Format the request body according to the API expectations\n            const requestBody = {\n                message,\n                level,\n                data: meta,\n                source: 'frontend'\n            };\n            \n            // Send to server logging endpoint\n            await fetch('/api/logs/ui', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestBody)\n            });\n        } catch (error) {\n            // Handle connection refused errors silently during startup\n            if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {\n                // Don't log connection refused errors to avoid console spam during startup\n                return;\n            }\n            // Fallback to console if server logging fails\n            console.warn('Server logging failed, falling back to console:', error.message);\n            this.logToConsole(level, message, meta);\n        }\n    }\n    \n    /**\n     * Main logging method\n     */\n    log(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        // Send to all transports\n        this.transports.forEach(transport => {\n            try {\n                transport.log(level, message, meta);\n            } catch (error) {\n                console.error(`Error in ${transport.name} transport:`, error);\n            }\n        });\n    }\n    \n    /**\n     * Log info level message\n     */\n    info(message, meta = {}) {\n        this.log('info', message, meta);\n    }\n    \n    /**\n     * Log warn level message\n     */\n    warn(message, meta = {}) {\n        this.log('warn', message, meta);\n    }\n    \n    /**\n     * Log error level message\n     */\n    error(message, meta = {}) {\n        this.log('error', message, meta);\n    }\n    \n    /**\n     * Log debug level message\n     */\n    debug(message, meta = {}) {\n        this.log('debug', message, meta);\n    }\n    \n    /**\n     * Log error with stack trace\n     */\n    errorWithStack(message, error, meta = {}) {\n        const errorMeta = {\n            ...meta,\n            error: {\n                message: error.message,\n                stack: error.stack,\n                code: error.code,\n                name: error.name\n            }\n        };\n        \n        this.error(message, errorMeta);\n    }\n    \n    /**\n     * Create child logger with additional metadata\n     */\n    child(additionalMeta = {}) {\n        const childLogger = new WinstonLogger({\n            level: this.level,\n            service: this.service,\n            environment: this.environment,\n            enableServerLogging: this.enableServerLogging,\n            enableConsoleLogging: this.enableConsoleLogging\n        });\n        \n        // Override formatLogEntry to include additional metadata\n        childLogger.formatLogEntry = (level, message, meta = {}) => {\n            const baseEntry = this.formatLogEntry(level, message, meta);\n            return {\n                ...baseEntry,\n                ...additionalMeta\n            };\n        };\n        \n        return childLogger;\n    }\n    \n    /**\n     * Set log level\n     */\n    setLevel(level) {\n        if (this.levels.hasOwnProperty(level)) {\n            this.level = level;\n        } else {\n            this.warn(`Invalid log level: ${level}`);\n        }\n    }\n    \n    /**\n     * Enable/disable server logging\n     */\n    setServerLogging(enabled) {\n        this.enableServerLogging = enabled;\n        \n        // Update transports\n        this.transports = this.transports.filter(t => t.name !== 'server');\n        if (enabled) {\n            this.transports.push({\n                name: 'server',\n                log: (level, message, meta) => this.logToServer(level, message, meta)\n            });\n        }\n    }\n    \n    /**\n     * Enable/disable console logging\n     */\n    setConsoleLogging(enabled) {\n        this.enableConsoleLogging = enabled;\n        \n        // Update transports\n        this.transports = this.transports.filter(t => t.name !== 'console');\n        if (enabled) {\n            this.transports.push({\n                name: 'console',\n                log: (level, message, meta) => this.logToConsole(level, message, meta)\n            });\n        }\n    }\n}\n\n/**\n * Create default logger instance\n */\nexport function createWinstonLogger(options = {}) {\n    return new WinstonLogger(options);\n}\n\n/**\n * Create component-specific logger\n */\nexport function createComponentLogger(component, options = {}) {\n    return createWinstonLogger({\n        ...options,\n        service: `${options.service || 'pingone-import'}-${component}`\n    });\n}\n\n/**\n * Default logger instances\n */\nexport const defaultLogger = createWinstonLogger();\nexport const apiLogger = createComponentLogger('api');\nexport const uiLogger = createComponentLogger('ui');\nexport const fileLogger = createComponentLogger('file');\nexport const settingsLogger = createComponentLogger('settings');\nexport const tokenLogger = createComponentLogger('token');\n\n// Export the class for custom instances\nexport { WinstonLogger }; ","/**\n * Enhanced Message Formatter Module\n * \n * Improves readability of server messages with:\n * - Visual separators and formatting\n * - Structured message blocks\n * - Event grouping and labeling\n * - Timestamp formatting\n * - Color coding and styling\n * \n * Features:\n * - Message block separation with asterisks\n * - Event start/end markers\n * - Structured formatting with line breaks\n * - Timestamp and label formatting\n * - Consistent styling across all message types\n */\n\nimport { createWinstonLogger } from './winston-logger.js';\n\n/**\n * Enhanced Message Formatter Class\n * \n * Formats server messages for improved readability in logs and progress windows\n */\nclass MessageFormatter {\n    constructor() {\n        this.logger = createWinstonLogger({\n            service: 'pingone-message-formatter',\n            environment: process.env.NODE_ENV || 'development'\n        });\n\n        // Message formatting options\n        this.formattingOptions = {\n            showTimestamps: true,\n            showEventMarkers: true,\n            showSeparators: true,\n            maxMessageLength: 200,\n            separatorChar: '*',\n            separatorLength: 50\n        };\n\n        // Event type configurations\n        this.eventTypes = {\n            import: {\n                start: 'IMPORT STARTED',\n                end: 'IMPORT COMPLETED',\n                error: 'IMPORT ERROR',\n                color: '#3498db'\n            },\n            export: {\n                start: 'EXPORT STARTED',\n                end: 'EXPORT COMPLETED',\n                error: 'EXPORT ERROR',\n                color: '#27ae60'\n            },\n            modify: {\n                start: 'MODIFY STARTED',\n                end: 'MODIFY COMPLETED',\n                error: 'MODIFY ERROR',\n                color: '#f39c12'\n            },\n            delete: {\n                start: 'DELETE STARTED',\n                end: 'DELETE COMPLETED',\n                error: 'DELETE ERROR',\n                color: '#e74c3c'\n            },\n            validation: {\n                start: 'VALIDATION STARTED',\n                end: 'VALIDATION COMPLETED',\n                error: 'VALIDATION ERROR',\n                color: '#9b59b6'\n            },\n            connection: {\n                start: 'CONNECTION ESTABLISHED',\n                end: 'CONNECTION CLOSED',\n                error: 'CONNECTION ERROR',\n                color: '#1abc9c'\n            }\n        };\n    }\n\n    /**\n     * Format a message block with visual separators\n     * @param {string} eventType - Type of event (import, export, etc.)\n     * @param {string} eventStage - Stage of the event (start, end, error, progress)\n     * @param {string} message - The main message\n     * @param {Object} details - Additional details\n     * @returns {string} Formatted message block\n     */\n    formatMessageBlock(eventType, eventStage, message, details = {}) {\n        try {\n            const eventConfig = this.eventTypes[eventType] || this.eventTypes.import;\n            const timestamp = this.formatTimestamp(new Date());\n            const separator = this.createSeparator();\n            \n            let formattedMessage = '';\n\n            // Add separator at the beginning\n            if (this.formattingOptions.showSeparators) {\n                formattedMessage += separator + '\\n';\n            }\n\n            // Add event marker\n            if (this.formattingOptions.showEventMarkers) {\n                const marker = this.getEventMarker(eventConfig, eventStage);\n                formattedMessage += `${marker}\\n`;\n            }\n\n            // Add timestamp\n            if (this.formattingOptions.showTimestamps) {\n                formattedMessage += `[${timestamp}] `;\n            }\n\n            // Add main message\n            formattedMessage += message + '\\n';\n\n            // Add details if present\n            if (details && Object.keys(details).length > 0) {\n                formattedMessage += this.formatDetails(details);\n            }\n\n            // Add separator at the end\n            if (this.formattingOptions.showSeparators) {\n                formattedMessage += separator + '\\n';\n            }\n\n            this.logger.debug('Message block formatted', { \n                eventType, \n                eventStage, \n                messageLength: message.length \n            });\n\n            return formattedMessage;\n        } catch (error) {\n            this.logger.error('Error formatting message block', { error: error.message });\n            return message; // Fallback to original message\n        }\n    }\n\n    /**\n     * Format a progress update message\n     * @param {string} operation - Operation type\n     * @param {number} current - Current progress\n     * @param {number} total - Total items\n     * @param {string} message - Progress message\n     * @param {Object} stats - Progress statistics\n     * @returns {string} Formatted progress message\n     */\n    formatProgressMessage(operation, current, total, message, stats = {}) {\n        try {\n            const timestamp = this.formatTimestamp(new Date());\n            const percentage = total > 0 ? Math.round((current / total) * 100) : 0;\n            \n            let formattedMessage = '';\n\n            // Add timestamp\n            if (this.formattingOptions.showTimestamps) {\n                formattedMessage += `[${timestamp}] `;\n            }\n\n            // Add progress indicator\n            formattedMessage += `PROGRESS: ${current}/${total} (${percentage}%)`;\n\n            // Add message if provided\n            if (message) {\n                formattedMessage += ` - ${message}`;\n            }\n\n            // Add stats if available\n            if (stats && Object.keys(stats).length > 0) {\n                formattedMessage += '\\n' + this.formatProgressStats(stats);\n            }\n\n            return formattedMessage;\n        } catch (error) {\n            this.logger.error('Error formatting progress message', { error: error.message });\n            return message || `Progress: ${current}/${total}`;\n        }\n    }\n\n    /**\n     * Format an error message with context\n     * @param {string} operation - Operation type\n     * @param {string} errorMessage - Error message\n     * @param {Object} errorDetails - Error details\n     * @returns {string} Formatted error message\n     */\n    formatErrorMessage(operation, errorMessage, errorDetails = {}) {\n        try {\n            const eventConfig = this.eventTypes[operation] || this.eventTypes.import;\n            const timestamp = this.formatTimestamp(new Date());\n            const separator = this.createSeparator();\n            \n            let formattedMessage = '';\n\n            // Add separator\n            if (this.formattingOptions.showSeparators) {\n                formattedMessage += separator + '\\n';\n            }\n\n            // Add error marker\n            formattedMessage += `${eventConfig.error}\\n`;\n\n            // Add timestamp and error message\n            if (this.formattingOptions.showTimestamps) {\n                formattedMessage += `[${timestamp}] `;\n            }\n            formattedMessage += `ERROR: ${errorMessage}\\n`;\n\n            // Add error details if present\n            if (errorDetails && Object.keys(errorDetails).length > 0) {\n                formattedMessage += this.formatErrorDetails(errorDetails);\n            }\n\n            // Add separator\n            if (this.formattingOptions.showSeparators) {\n                formattedMessage += separator + '\\n';\n            }\n\n            return formattedMessage;\n        } catch (error) {\n            this.logger.error('Error formatting error message', { error: error.message });\n            return `ERROR: ${errorMessage}`;\n        }\n    }\n\n    /**\n     * Format a completion message with results\n     * @param {string} operation - Operation type\n     * @param {Object} results - Operation results\n     * @returns {string} Formatted completion message\n     */\n    formatCompletionMessage(operation, results = {}) {\n        try {\n            const eventConfig = this.eventTypes[operation] || this.eventTypes.import;\n            const timestamp = this.formatTimestamp(new Date());\n            const separator = this.createSeparator();\n            \n            let formattedMessage = '';\n\n            // Add separator\n            if (this.formattingOptions.showSeparators) {\n                formattedMessage += separator + '\\n';\n            }\n\n            // Add completion marker\n            formattedMessage += `${eventConfig.end}\\n`;\n\n            // Add timestamp\n            if (this.formattingOptions.showTimestamps) {\n                formattedMessage += `[${timestamp}] `;\n            }\n\n            // Add completion message\n            formattedMessage += `Operation completed successfully\\n`;\n\n            // Add results if present\n            if (results && Object.keys(results).length > 0) {\n                formattedMessage += this.formatResults(results);\n            }\n\n            // Add separator\n            if (this.formattingOptions.showSeparators) {\n                formattedMessage += separator + '\\n';\n            }\n\n            return formattedMessage;\n        } catch (error) {\n            this.logger.error('Error formatting completion message', { error: error.message });\n            return 'Operation completed successfully';\n        }\n    }\n\n    /**\n     * Format SSE event data for display\n     * @param {Object} eventData - SSE event data\n     * @returns {string} Formatted event message\n     */\n    formatSSEEvent(eventData) {\n        try {\n            const { type, message, current, total, counts, error } = eventData;\n            const timestamp = this.formatTimestamp(new Date());\n\n            let formattedMessage = '';\n\n            // Add timestamp\n            if (this.formattingOptions.showTimestamps) {\n                formattedMessage += `[${timestamp}] `;\n            }\n\n            // Format based on event type\n            switch (type) {\n                case 'progress':\n                    formattedMessage += this.formatProgressMessage('import', current, total, message, counts);\n                    break;\n                case 'completion':\n                    formattedMessage += this.formatCompletionMessage('import', eventData);\n                    break;\n                case 'error':\n                    formattedMessage += this.formatErrorMessage('import', message, eventData);\n                    break;\n                default:\n                    formattedMessage += `SSE EVENT [${type.toUpperCase()}]: ${message || 'No message'}`;\n            }\n\n            return formattedMessage;\n        } catch (error) {\n            this.logger.error('Error formatting SSE event', { error: error.message });\n            return eventData.message || 'SSE event received';\n        }\n    }\n\n    /**\n     * Create a visual separator line\n     * @returns {string} Separator string\n     */\n    createSeparator() {\n        const char = this.formattingOptions.separatorChar;\n        const length = this.formattingOptions.separatorLength;\n        return char.repeat(length);\n    }\n\n    /**\n     * Get event marker based on event type and stage\n     * @param {Object} eventConfig - Event configuration\n     * @param {string} stage - Event stage\n     * @returns {string} Event marker\n     */\n    getEventMarker(eventConfig, stage) {\n        switch (stage) {\n            case 'start':\n                return eventConfig.start;\n            case 'end':\n                return eventConfig.end;\n            case 'error':\n                return eventConfig.error;\n            default:\n                return eventConfig.start;\n        }\n    }\n\n    /**\n     * Format timestamp for display\n     * @param {Date} date - Date to format\n     * @returns {string} Formatted timestamp\n     */\n    formatTimestamp(date) {\n        return date.toLocaleTimeString('en-US', {\n            hour12: false,\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        });\n    }\n\n    /**\n     * Format details object for display\n     * @param {Object} details - Details object\n     * @returns {string} Formatted details\n     */\n    formatDetails(details) {\n        try {\n            let formatted = '';\n            for (const [key, value] of Object.entries(details)) {\n                if (value !== null && value !== undefined) {\n                    formatted += `  ${key}: ${value}\\n`;\n                }\n            }\n            return formatted;\n        } catch (error) {\n            this.logger.error('Error formatting details', { error: error.message });\n            return '';\n        }\n    }\n\n    /**\n     * Format progress statistics\n     * @param {Object} stats - Progress statistics\n     * @returns {string} Formatted statistics\n     */\n    formatProgressStats(stats) {\n        try {\n            let formatted = '  Statistics:\\n';\n            const statLabels = {\n                processed: 'Processed',\n                success: 'Success',\n                failed: 'Failed',\n                skipped: 'Skipped',\n                duplicates: 'Duplicates'\n            };\n\n            for (const [key, value] of Object.entries(stats)) {\n                if (value !== null && value !== undefined && statLabels[key]) {\n                    formatted += `    ${statLabels[key]}: ${value}\\n`;\n                }\n            }\n\n            return formatted;\n        } catch (error) {\n            this.logger.error('Error formatting progress stats', { error: error.message });\n            return '';\n        }\n    }\n\n    /**\n     * Format error details\n     * @param {Object} errorDetails - Error details\n     * @returns {string} Formatted error details\n     */\n    formatErrorDetails(errorDetails) {\n        try {\n            let formatted = '  Error Details:\\n';\n            for (const [key, value] of Object.entries(errorDetails)) {\n                if (value !== null && value !== undefined) {\n                    formatted += `    ${key}: ${value}\\n`;\n                }\n            }\n            return formatted;\n        } catch (error) {\n            this.logger.error('Error formatting error details', { error: error.message });\n            return '';\n        }\n    }\n\n    /**\n     * Format operation results\n     * @param {Object} results - Operation results\n     * @returns {string} Formatted results\n     */\n    formatResults(results) {\n        try {\n            let formatted = '  Results:\\n';\n            const resultLabels = {\n                total: 'Total Records',\n                success: 'Successful',\n                failed: 'Failed',\n                skipped: 'Skipped',\n                duplicates: 'Duplicates',\n                duration: 'Duration'\n            };\n\n            for (const [key, value] of Object.entries(results)) {\n                if (value !== null && value !== undefined && resultLabels[key]) {\n                    let displayValue = value;\n                    if (key === 'duration' && typeof value === 'number') {\n                        displayValue = this.formatDuration(value);\n                    }\n                    formatted += `    ${resultLabels[key]}: ${displayValue}\\n`;\n                }\n            }\n\n            return formatted;\n        } catch (error) {\n            this.logger.error('Error formatting results', { error: error.message });\n            return '';\n        }\n    }\n\n    /**\n     * Format duration in milliseconds to human readable format\n     * @param {number} milliseconds - Duration in milliseconds\n     * @returns {string} Formatted duration\n     */\n    formatDuration(milliseconds) {\n        try {\n            const seconds = Math.floor(milliseconds / 1000);\n            const minutes = Math.floor(seconds / 60);\n            const hours = Math.floor(minutes / 60);\n\n            if (hours > 0) {\n                return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n            } else if (minutes > 0) {\n                return `${minutes}m ${seconds % 60}s`;\n            } else {\n                return `${seconds}s`;\n            }\n        } catch (error) {\n            this.logger.error('Error formatting duration', { error: error.message });\n            return `${milliseconds}ms`;\n        }\n    }\n\n    /**\n     * Update formatting options\n     * @param {Object} options - New formatting options\n     */\n    updateFormattingOptions(options) {\n        try {\n            this.formattingOptions = { ...this.formattingOptions, ...options };\n            this.logger.debug('Formatting options updated', { options });\n        } catch (error) {\n            this.logger.error('Error updating formatting options', { error: error.message });\n        }\n    }\n\n    /**\n     * Get current formatting options\n     * @returns {Object} Current formatting options\n     */\n    getFormattingOptions() {\n        return { ...this.formattingOptions };\n    }\n}\n\n// Create and export singleton instance\nconst messageFormatter = new MessageFormatter();\n\nexport { messageFormatter as default, MessageFormatter }; ","// ElementRegistry: Centralized DOM element lookup utility\n// Provides safe, memoized access to all required UI elements with logging for missing elements\n// Usage: import { ElementRegistry } from './element-registry.js';\n\nconst elementCache = {};\n\nfunction getElement(selector, description, required = true) {\n  // Input validation\n  if (!selector || typeof selector !== 'string') {\n    console.error(`[ElementRegistry] Invalid selector provided: ${selector}`);\n    return null;\n  }\n  \n  // Security: Prevent potential XSS through selector injection\n  // Allow valid attribute selectors with quotes but prevent script injection\n  if (selector.includes('<') || selector.includes('>') || \n      (selector.includes('\"') && !selector.includes('[') && !selector.includes(']')) ||\n      (selector.includes(\"'\") && !selector.includes('[') && !selector.includes(']'))) {\n    console.error(`[ElementRegistry] Potentially unsafe selector detected: ${selector}`);\n    return null;\n  }\n  \n  // Check cache first\n  if (elementCache[selector]) {\n    return elementCache[selector];\n  }\n  \n  try {\n    const el = document.querySelector(selector);\n    \n    if (!el && required) {\n      console.warn(`[ElementRegistry] Missing required element: ${description} (${selector})`);\n    } else if (!el) {\n      console.info(`[ElementRegistry] Optional element not found: ${description} (${selector})`);\n    } else {\n      // Validate element is still in DOM\n      if (!document.contains(el)) {\n        console.warn(`[ElementRegistry] Element found but not in DOM: ${description} (${selector})`);\n        elementCache[selector] = null;\n        return null;\n      }\n    }\n    \n    elementCache[selector] = el;\n    return el;\n  } catch (error) {\n    console.error(`[ElementRegistry] Error finding element: ${description} (${selector})`, error);\n    elementCache[selector] = null;\n    return null;\n  }\n}\n\nexport const ElementRegistry = {\n  // Main UI elements\n  importButton: () => getElement('#import-btn', 'Import Button'),\n  fileInput: () => getElement('#csv-file', 'File Input'),\n  dashboardTab: () => getElement('#dashboard-tab', 'Dashboard Tab'),\n  dragDropArea: () => getElement('#drag-drop-area', 'Drag-and-Drop Area', false),\n  \n  // Notification and progress containers\n  notificationContainer: () => getElement('#notification-area', 'Notification Container'),\n  progressContainer: () => {\n    // Try specific progress containers first, then fallback to generic\n    return getElement('#import-progress-container', 'Import Progress Container', false) ||\n           getElement('#delete-progress-container', 'Delete Progress Container', false) ||\n           getElement('#modify-progress-container', 'Modify Progress Container', false) ||\n           getElement('#export-progress-container', 'Export Progress Container', false) ||\n           getElement('#progress-container', 'Progress Container', false) ||\n           getElement('.progress-container', 'Progress Container (class)', false);\n  },\n  \n  // Token and connection status elements\n  tokenStatus: () => getElement('#token-status-indicator', 'Token Status'),\n  connectionStatus: () => getElement('#connection-status', 'Connection Status'),\n  currentTokenStatus: () => getElement('#current-token-status', 'Current Token Status'),\n  homeTokenStatus: () => getElement('#home-token-status', 'Home Token Status'),\n  \n  // File handling elements\n  fileInfo: () => getElement('#file-info', 'File Info'),\n  previewContainer: () => getElement('#dashboard-preview', 'Preview Container'),\n  fileInputLabel: () => getElement('label[for=\"csv-file\"]', 'File Input Label'),\n  deleteFileInput: () => getElement('#delete-csv-file', 'Delete File Input'),\n  deleteFileInputLabel: () => getElement('label[for=\"delete-csv-file\"]', 'Delete File Input Label'),\n  modifyFileInput: () => getElement('#modify-csv-file', 'Modify File Input'),\n  modifyFileInputLabel: () => getElement('label[for=\"modify-csv-file\"]', 'Modify File Input Label'),\n  \n  // Population selection elements\n  importPopulationSelect: () => getElement('#import-population-select', 'Import Population Select'),\n  deletePopulationSelect: () => getElement('#delete-population-select', 'Delete Population Select'),\n  modifyPopulationSelect: () => getElement('#modify-population-select', 'Modify Population Select'),\n  dashboardPopulationSelect: () => getElement('#dashboard-population-select', 'Dashboard Population Select'),\n  \n  // Import buttons\n  startImportBtn: () => getElement('#start-import', 'Start Import Button'),\n  startImportBtnBottom: () => getElement('#bottom-start-import', 'Bottom Start Import Button'),\n  \n  // Settings elements\n  settingsSaveStatus: () => getElement('#settings-save-status', 'Settings Save Status'),\n  \n  // Import status elements\n  importStatus: () => getElement('#import-status', 'Import Status'),\n  \n  // Population checkboxes\n  useDefaultPopulationCheckbox: () => getElement('#use-default-population', 'Use Default Population Checkbox'),\n  useCsvPopulationIdCheckbox: () => getElement('#use-csv-population-id', 'Use CSV Population ID Checkbox'),\n  \n          // Get Token button\n        getTokenBtn: () => getElement('#get-token-quick', 'Get Token Button'),\n  \n  // Population ID form field\n  populationIdField: () => getElement('#population-id', 'Population ID Field'),\n};\n\n// Global exports for subsystem access\nif (typeof window !== 'undefined') {\n  window.getElement = getElement;\n  window.elementCache = elementCache;\n  window.ElementRegistry = ElementRegistry;\n  console.log('✅ Element registry global exports initialized');\n} ","/**\n * Session Manager for PingOne Import Tool\n * \n * Handles session ID generation, validation, and management for SSE connections\n * across all operations (import, export, modify, delete).\n * \n * Features:\n * - Centralized session ID generation\n * - Session ID validation and format checking\n * - Session tracking and cleanup\n * - Error handling for missing/invalid session IDs\n */\n\nimport { createWinstonLogger } from './winston-logger.js';\n\n/**\n * Session Manager Class\n */\nclass SessionManager {\n    constructor() {\n        this.logger = createWinstonLogger({\n            service: 'pingone-import-session',\n            environment: process.env.NODE_ENV || 'development'\n        });\n        \n        this.activeSessions = new Map();\n        this.sessionCounter = 0;\n    }\n\n    /**\n     * Generate a unique session ID\n     * @returns {string} Unique session identifier\n     */\n    generateSessionId() {\n        try {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substring(2, 15);\n            const counter = ++this.sessionCounter;\n            const sessionId = `session_${timestamp}_${random}_${counter}`;\n            \n            this.logger.debug('Session ID generated', { sessionId });\n            return sessionId;\n        } catch (error) {\n            this.logger.error('Error generating session ID', { error: error.message });\n            // Fallback to simple timestamp-based ID\n            return `session_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\n        }\n    }\n\n    /**\n     * Validate session ID format and structure\n     * @param {string} sessionId - Session ID to validate\n     * @returns {boolean} True if valid, false otherwise\n     */\n    validateSessionId(sessionId) {\n        try {\n            if (!sessionId || typeof sessionId !== 'string') {\n                this.logger.warn('Session ID validation failed: null/undefined/non-string', { sessionId, type: typeof sessionId });\n                return false;\n            }\n\n            if (sessionId.trim() === '') {\n                this.logger.warn('Session ID validation failed: empty string');\n                return false;\n            }\n\n            // Check for minimum length (should be at least 8 characters)\n            if (sessionId.length < 8) {\n                this.logger.warn('Session ID validation failed: too short', { length: sessionId.length });\n                return false;\n            }\n\n            // Check for valid characters (alphanumeric, underscore, hyphen)\n            const validPattern = /^[a-zA-Z0-9_-]+$/;\n            if (!validPattern.test(sessionId)) {\n                this.logger.warn('Session ID validation failed: invalid characters', { sessionId });\n                return false;\n            }\n\n            this.logger.debug('Session ID validation passed', { sessionId });\n            return true;\n        } catch (error) {\n            this.logger.error('Error validating session ID', { error: error.message, sessionId });\n            return false;\n        }\n    }\n\n    /**\n     * Register an active session\n     * @param {string} sessionId - Session ID to register\n     * @param {string} operationType - Type of operation (import, export, etc.)\n     * @param {Object} metadata - Additional session metadata\n     */\n    registerSession(sessionId, operationType, metadata = {}) {\n        try {\n            if (!this.validateSessionId(sessionId)) {\n                this.logger.error('Cannot register invalid session ID', { sessionId, operationType });\n                return false;\n            }\n\n            const sessionData = {\n                sessionId,\n                operationType,\n                createdAt: Date.now(),\n                lastActivity: Date.now(),\n                metadata\n            };\n\n            this.activeSessions.set(sessionId, sessionData);\n            this.logger.info('Session registered', { sessionId, operationType, metadata });\n            return true;\n        } catch (error) {\n            this.logger.error('Error registering session', { error: error.message, sessionId, operationType });\n            return false;\n        }\n    }\n\n    /**\n     * Update session activity timestamp\n     * @param {string} sessionId - Session ID to update\n     */\n    updateSessionActivity(sessionId) {\n        try {\n            const session = this.activeSessions.get(sessionId);\n            if (session) {\n                session.lastActivity = Date.now();\n                this.logger.debug('Session activity updated', { sessionId });\n            } else {\n                this.logger.warn('Session not found for activity update', { sessionId });\n            }\n        } catch (error) {\n            this.logger.error('Error updating session activity', { error: error.message, sessionId });\n        }\n    }\n\n    /**\n     * Unregister a session\n     * @param {string} sessionId - Session ID to unregister\n     */\n    unregisterSession(sessionId) {\n        try {\n            const session = this.activeSessions.get(sessionId);\n            if (session) {\n                this.activeSessions.delete(sessionId);\n                this.logger.info('Session unregistered', { sessionId, operationType: session.operationType });\n            } else {\n                this.logger.warn('Session not found for unregistration', { sessionId });\n            }\n        } catch (error) {\n            this.logger.error('Error unregistering session', { error: error.message, sessionId });\n        }\n    }\n\n    /**\n     * Get session information\n     * @param {string} sessionId - Session ID to retrieve\n     * @returns {Object|null} Session data or null if not found\n     */\n    getSession(sessionId) {\n        try {\n            return this.activeSessions.get(sessionId) || null;\n        } catch (error) {\n            this.logger.error('Error getting session', { error: error.message, sessionId });\n            return null;\n        }\n    }\n\n    /**\n     * Get all active sessions\n     * @returns {Array} Array of active session data\n     */\n    getActiveSessions() {\n        try {\n            return Array.from(this.activeSessions.values());\n        } catch (error) {\n            this.logger.error('Error getting active sessions', { error: error.message });\n            return [];\n        }\n    }\n\n    /**\n     * Clean up expired sessions\n     * @param {number} maxAge - Maximum age in milliseconds (default: 1 hour)\n     */\n    cleanupExpiredSessions(maxAge = 60 * 60 * 1000) {\n        try {\n            const now = Date.now();\n            const expiredSessions = [];\n\n            for (const [sessionId, session] of this.activeSessions.entries()) {\n                if (now - session.lastActivity > maxAge) {\n                    expiredSessions.push(sessionId);\n                }\n            }\n\n            expiredSessions.forEach(sessionId => {\n                this.unregisterSession(sessionId);\n            });\n\n            if (expiredSessions.length > 0) {\n                this.logger.info('Cleaned up expired sessions', { count: expiredSessions.length });\n            }\n        } catch (error) {\n            this.logger.error('Error cleaning up expired sessions', { error: error.message });\n        }\n    }\n\n    /**\n     * Get session statistics\n     * @returns {Object} Session statistics\n     */\n    getSessionStats() {\n        try {\n            const sessions = this.getActiveSessions();\n            const stats = {\n                total: sessions.length,\n                byOperation: {},\n                oldest: null,\n                newest: null\n            };\n\n            sessions.forEach(session => {\n                // Count by operation type\n                stats.byOperation[session.operationType] = (stats.byOperation[session.operationType] || 0) + 1;\n\n                // Track oldest and newest\n                if (!stats.oldest || session.createdAt < stats.oldest.createdAt) {\n                    stats.oldest = session;\n                }\n                if (!stats.newest || session.createdAt > stats.newest.createdAt) {\n                    stats.newest = session;\n                }\n            });\n\n            return stats;\n        } catch (error) {\n            this.logger.error('Error getting session stats', { error: error.message });\n            return { total: 0, byOperation: {}, oldest: null, newest: null };\n        }\n    }\n}\n\n// Export singleton instance\nexport const sessionManager = new SessionManager();\nexport default sessionManager; ","/**\n * Enhanced Progress Manager Module\n * \n * Modern, real-time progress UI system with Socket.IO and WebSocket fallback:\n * - Real-time updates via Socket.IO (primary)\n * - WebSocket fallback for reliability\n * - Professional Ping Identity design system\n * - Responsive and accessible\n * - Enhanced visual feedback\n * - Step-by-step progress tracking\n * \n * Features:\n * - Real-time progress updates via Socket.IO\n * - WebSocket fallback for connection issues\n * - Professional progress indicators\n * - Step-by-step operation tracking\n * - Enhanced error handling and recovery\n * - Accessibility compliance\n * - Production-ready logging\n */\n\nimport { createWinstonLogger } from './winston-logger.js';\nimport { ElementRegistry } from './element-registry.js';\nimport { sessionManager } from './session-manager.js';\nimport messageFormatter from './message-formatter.js';\n\n// Enable debug mode for development (set to false in production)\nconst DEBUG_MODE = process.env.NODE_ENV !== 'production';\n\n/**\n * Enhanced Progress Manager Class\n * \n * Manages all progress-related UI updates with real-time Socket.IO and WebSocket integration\n */\nclass ProgressManager {\n    constructor() {\n        this.logger = createWinstonLogger('pingone-progress');\n        this.isEnabled = true; // Will be set to false if progress container is not found\n        this.currentOperation = null;\n        this.currentSessionId = null;\n        this.isActive = false;\n        this.startTime = null;\n        this.timingInterval = null;\n        this.progressCallback = null;\n        this.completeCallback = null;\n        this.cancelCallback = null;\n        this.duplicateHandlingMode = 'skip';\n        \n        // Real-time communication\n        this.socket = null;\n        this.websocket = null;\n        this.connectionType = null; // 'socketio' or 'websocket'\n        this.connectionRetries = 0;\n        this.maxRetries = 3;\n        \n        // Stats tracking\n        this.stats = {\n            processed: 0,\n            success: 0,\n            failed: 0,\n            skipped: 0,\n            total: 0\n        };\n        \n        this.logger.debug('ProgressManager initialized');\n    }\n\n    /**\n     * Initialize the progress manager and setup core functionality\n     */\n    initialize() {\n        try {\n            this.setupElements();\n            this.setupEventListeners();\n            this.logger.info('Enhanced progress manager initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize progress manager', { error: error.message });\n        }\n    }\n\n    /**\n     * Setup DOM elements with enhanced design\n     */\n    setupElements() {\n        try {\n            // Main progress container - use existing one from HTML or find operation-specific container\n            this.progressContainer = document.getElementById('progress-container');\n            \n            // If main container not found, we'll dynamically select the appropriate container based on operation\n            if (!this.progressContainer) {\n                this.logger.info('Main progress container not found - will use operation-specific containers');\n                // We'll set isEnabled to true since we'll find the container dynamically when needed\n                this.isEnabled = true;\n            }\n\n            // Log the progress container details for debugging\n            this.logger.info('Progress container found', {\n                id: this.progressContainer.id,\n                className: this.progressContainer.className,\n                display: this.progressContainer.style.display,\n                visibility: this.progressContainer.style.visibility,\n                offsetParent: this.progressContainer.offsetParent !== null\n            });\n\n            // Create enhanced progress content\n            this.progressContainer.innerHTML = `\n                <div class=\"progress-overlay\">\n                    <div class=\"progress-modal\">\n                        <div class=\"progress-header\">\n                            <div class=\"operation-info\">\n                                <h3 class=\"operation-title\">\n                                    <i class=\"fas fa-cog fa-spin\"></i>\n                                    <span class=\"title-text\">Operation in Progress</span>\n                                </h3>\n                                <div class=\"operation-subtitle\">Processing your request...</div>\n                            </div>\n                            <button class=\"cancel-operation\" type=\"button\" aria-label=\"Cancel operation\">\n                                <i class=\"fas fa-times\"></i>\n                                <span>Cancel</span>\n                            </button>\n                        </div>\n                        \n                        <div class=\"progress-content\">\n                            <div class=\"progress-steps\">\n                                <div class=\"step active\" data-step=\"init\">\n                                    <div class=\"step-icon\">\n                                        <i class=\"fas fa-play\"></i>\n                                    </div>\n                                    <div class=\"step-label\">Initializing</div>\n                                </div>\n                                <div class=\"step\" data-step=\"validate\">\n                                    <div class=\"step-icon\">\n                                        <i class=\"fas fa-check\"></i>\n                                    </div>\n                                    <div class=\"step-label\">Validating</div>\n                                </div>\n                                <div class=\"step\" data-step=\"process\">\n                                    <div class=\"step-icon\">\n                                        <i class=\"fas fa-cogs\"></i>\n                                    </div>\n                                    <div class=\"step-label\">Processing</div>\n                                </div>\n                                <div class=\"step\" data-step=\"complete\">\n                                    <div class=\"step-icon\">\n                                        <i class=\"fas fa-check-circle\"></i>\n                                    </div>\n                                    <div class=\"step-label\">Complete</div>\n                                </div>\n                            </div>\n                            \n                            <div class=\"progress-main\">\n                                <div class=\"progress-bar-container\">\n                                    <div class=\"progress-bar\">\n                                        <div class=\"progress-bar-fill\"></div>\n                                        <div class=\"progress-bar-glow\"></div>\n                                    </div>\n                                    <div class=\"progress-percentage\">0%</div>\n                                </div>\n                                \n                                <div class=\"progress-text\">Preparing operation...</div>\n                                \n                                <div class=\"progress-stats\">\n                                    <div class=\"stat-item\">\n                                        <span class=\"stat-label\">Processed:</span>\n                                        <span class=\"stat-value processed\">0</span>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                        <span class=\"stat-label\">Success:</span>\n                                        <span class=\"stat-value success\">0</span>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                        <span class=\"stat-label\">Failed:</span>\n                                        <span class=\"stat-value failed\">0</span>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                        <span class=\"stat-label\">Skipped:</span>\n                                        <span class=\"stat-value skipped\">0</span>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"progress-timing\">\n                                    <div class=\"time-elapsed\">\n                                        <i class=\"fas fa-clock\"></i>\n                                        <span>Time: <span class=\"elapsed-value\">00:00</span></span>\n                                    </div>\n                                    <div class=\"time-remaining\">\n                                        <i class=\"fas fa-hourglass-half\"></i>\n                                        <span>ETA: <span class=\"eta-value\">Calculating...</span></span>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div class=\"progress-details\">\n                                <div class=\"details-header\">\n                                    <h4><i class=\"fas fa-info-circle\"></i> Operation Details</h4>\n                                </div>\n                                <div class=\"details-content\">\n                                    <div class=\"detail-item\">\n                                        <span class=\"detail-label\">Operation Type:</span>\n                                        <span class=\"detail-value operation-type\">-</span>\n                                    </div>\n                                    <div class=\"detail-item\">\n                                        <span class=\"detail-label\">Session ID:</span>\n                                        <span class=\"detail-value session-id\">-</span>\n                                    </div>\n                                    <div class=\"detail-item\">\n                                        <span class=\"detail-label\">Population:</span>\n                                        <span class=\"detail-value population-info\">-</span>\n                                    </div>\n                                    <div class=\"detail-item\">\n                                        <span class=\"detail-label\">Connection:</span>\n                                        <span class=\"detail-value connection-type\">-</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            this.logger.debug('Progress elements setup completed');\n        } catch (error) {\n            this.logger.error('Error setting up progress elements', { error: error.message });\n            this.isEnabled = false;\n        }\n    }\n\n    /**\n     * Setup event listeners for progress interactions\n     */\n    setupEventListeners() {\n        if (!this.isEnabled) {\n            this.logger.warn('Progress manager not enabled - skipping event listener setup');\n            return;\n        }\n\n        try {\n            // Cancel operation button\n            const cancelButton = this.progressContainer.querySelector('.cancel-operation');\n            if (cancelButton) {\n                cancelButton.addEventListener('click', () => this.cancelOperation());\n            }\n\n            // Close progress button (if exists)\n            const closeButton = this.progressContainer.querySelector('.close-progress-btn');\n            if (closeButton) {\n                closeButton.addEventListener('click', () => this.hideProgress());\n            }\n\n            this.logger.debug('Progress event listeners setup completed');\n        } catch (error) {\n            this.logger.error('Error setting up progress event listeners', { error: error.message });\n        }\n    }\n\n    /**\n     * Start a new operation with progress tracking\n     * @param {string} operationType - Type of operation (import, export, delete, modify)\n     * @param {Object} options - Operation options\n     * @param {number} options.totalUsers - Total number of users\n     * @param {string} options.populationName - Population name\n     * @param {string} options.populationId - Population ID\n     */\n    startOperation(operationType, options = {}) {\n        if (!this.isEnabled) {\n            this.logger.warn('Progress manager not enabled - cannot start operation');\n            return;\n        }\n\n        this.currentOperation = operationType;\n        this.isActive = true;\n        this.startTime = Date.now();\n        this.resetOperationStats();\n\n        // Select the appropriate progress container based on operation type\n        this.selectProgressContainer(operationType);\n\n        // If we still don't have a progress container, try to create one\n        if (!this.progressContainer) {\n            this.createFallbackProgressContainer(operationType);\n        }\n\n        // If we still don't have a container, we can't proceed\n        if (!this.progressContainer) {\n            this.logger.error('No progress container available for operation', { operationType });\n            return;\n        }\n\n        // Initialize the progress container with content if needed\n        this.initializeProgressContainer();\n\n        // Update operation details\n        this.updateOperationTitle(operationType);\n        this.updateOperationDetails(options);\n\n        // Show progress\n        this.showProgress();\n\n        // Start timing updates\n        this.startTimingUpdates();\n\n        this.logger.info('Operation started', { operationType, options });\n    }\n    \n    /**\n     * Select the appropriate progress container based on operation type\n     * @param {string} operationType - Type of operation (import, export, delete, modify)\n     */\n    selectProgressContainer(operationType) {\n        // If we already have a container, keep using it\n        if (this.progressContainer && this.progressContainer.parentNode) {\n            return;\n        }\n        \n        // Try to find operation-specific container first\n        const containerMap = {\n            'import': 'progress-container',\n            'delete': 'progress-container-delete',\n            'modify': 'progress-container-modify',\n            'export': 'progress-container-export'\n        };\n        \n        const containerId = containerMap[operationType] || 'progress-container';\n        this.progressContainer = document.getElementById(containerId);\n        \n        // If not found, try the main progress container\n        if (!this.progressContainer) {\n            this.progressContainer = document.getElementById('progress-container');\n        }\n        \n        // Log what we found\n        if (this.progressContainer) {\n            this.logger.info('Selected progress container', { \n                id: this.progressContainer.id,\n                operationType\n            });\n        } else {\n            this.logger.warn('No progress container found for operation', { operationType });\n        }\n    }\n    \n    /**\n     * Create a fallback progress container if none exists\n     * @param {string} operationType - Type of operation\n     */\n    createFallbackProgressContainer(operationType) {\n        try {\n            // Create a simple progress container\n            const fallbackContainer = document.createElement('div');\n            fallbackContainer.id = 'progress-container-fallback';\n            fallbackContainer.className = 'progress-container visible';\n            \n            fallbackContainer.style.cssText = `\n                display: block !important;\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0,0,0,0.7);\n                z-index: 10000;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n            `;\n            \n            // Add to the document\n            document.body.appendChild(fallbackContainer);\n            this.progressContainer = fallbackContainer;\n            \n            this.logger.info('Created fallback progress container', { operationType });\n        } catch (error) {\n            this.logger.error('Failed to create fallback progress container', { error: error.message });\n        }\n    }\n    \n    /**\n     * Initialize the progress container with content if needed\n     */\n    initializeProgressContainer() {\n        // Only initialize if the container is empty\n        if (this.progressContainer && !this.progressContainer.querySelector('.progress-overlay')) {\n            this.setupElements();\n            this.setupEventListeners();\n        }\n    }\n\n    /**\n     * Initialize real-time connection for progress updates\n     * @param {string} sessionId - Session ID for tracking\n     */\n    initializeRealTimeConnection(sessionId) {\n        if (!sessionId) {\n            this.logger.warn('No session ID provided for real-time connection');\n            return;\n        }\n\n        this.currentSessionId = sessionId;\n        this.connectionRetries = 0;\n\n        // Try Socket.IO first, then fallback to WebSocket\n        this.trySocketIOConnection(sessionId);\n    }\n\n    /**\n     * Try Socket.IO connection for real-time updates\n     * @param {string} sessionId - Session ID for tracking\n     */\n    trySocketIOConnection(sessionId) {\n        try {\n            // Check if Socket.IO is already loaded globally\n            if (typeof io !== 'undefined') {\n                this.logger.info('Using global Socket.IO client');\n                this.connectWithSocketIO(io, sessionId);\n            } else {\n                // Try to load Socket.IO dynamically\n                this.logger.info('Loading Socket.IO client dynamically');\n                \n                // Create a script element to load Socket.IO\n                const script = document.createElement('script');\n                script.src = '/socket.io/socket.io.js';\n                script.async = true;\n                \n                script.onload = () => {\n                    this.logger.info('Socket.IO client loaded successfully');\n                    if (typeof io !== 'undefined') {\n                        this.connectWithSocketIO(io, sessionId);\n                    } else {\n                        this.logger.warn('Socket.IO loaded but io is undefined, trying WebSocket');\n                        this.tryWebSocketConnection(sessionId);\n                    }\n                };\n                \n                script.onerror = (error) => {\n                    this.logger.warn('Failed to load Socket.IO client script', { error: error.message });\n                    this.tryWebSocketConnection(sessionId);\n                };\n                \n                document.head.appendChild(script);\n            }\n        } catch (error) {\n            this.logger.warn('Socket.IO connection setup failed, trying WebSocket', { error: error.message });\n            this.tryWebSocketConnection(sessionId);\n        }\n    }\n    \n    /**\n     * Reconnect Socket.IO if connection is lost\n     * @param {string} sessionId - Session ID for tracking\n     */\n    reconnectSocketIO(sessionId) {\n        if (this.isReconnecting) return;\n        \n        this.isReconnecting = true;\n        this.logger.info('Attempting to reconnect Socket.IO', { sessionId });\n        console.log('🔄 [PROGRESS] Attempting to reconnect Socket.IO');\n        \n        // Close existing connections\n        if (this.socket) {\n            this.socket.close();\n            this.socket = null;\n        }\n        \n        // Try to reconnect\n        setTimeout(() => {\n            this.trySocketIOConnection(sessionId);\n            this.isReconnecting = false;\n        }, 1000);\n    }\n    \n    /**\n     * Connect with Socket.IO\n     * @param {Function} io - Socket.IO client function\n     * @param {string} sessionId - Session ID for tracking\n     */\n    connectWithSocketIO(io, sessionId) {\n        try {\n            // Create Socket.IO connection\n            this.socket = io('/', {\n                transports: ['websocket', 'polling'],\n                timeout: 5000,\n                forceNew: true\n            });\n\n            this.socket.on('connect', () => {\n                this.connectionType = 'socketio';\n                this.updateConnectionType('Socket.IO');\n                this.logger.info('Socket.IO connected', { sessionId, socketId: this.socket.id });\n                console.log(`🔌 [PROGRESS] Socket.IO connected (ID: ${this.socket.id})`);\n                \n                // Join session room\n                this.socket.emit('registerSession', sessionId);\n                \n                // Also try the join-session event for compatibility\n                this.socket.emit('join-session', { sessionId });\n            });\n\n            this.socket.on('progress', (data) => {\n                console.log('🔄 [PROGRESS] Received progress event:', data);\n                this.handleProgressEvent(data);\n            });\n\n            this.socket.on('completion', (data) => {\n                console.log('✅ [PROGRESS] Received completion event:', data);\n                this.handleCompletionEvent(data);\n            });\n            \n            // Also listen for 'complete' for compatibility\n            this.socket.on('complete', (data) => {\n                console.log('✅ [PROGRESS] Received complete event:', data);\n                this.handleCompletionEvent(data);\n            });\n\n            this.socket.on('error', (data) => {\n                console.log('❌ [PROGRESS] Received error event:', data);\n                this.handleErrorEvent(data);\n            });\n\n            this.socket.on('disconnect', () => {\n                console.log('🔌 [PROGRESS] Socket.IO disconnected');\n                this.logger.warn('Socket.IO disconnected');\n                this.handleConnectionFailure();\n            });\n\n            this.socket.on('connect_error', (error) => {\n                console.log('❌ [PROGRESS] Socket.IO connection error:', error.message);\n                this.logger.warn('Socket.IO connection error', { error: error.message });\n                this.handleConnectionFailure();\n            });\n        } catch (error) {\n            this.logger.warn('Socket.IO connection failed, trying WebSocket', { error: error.message });\n            this.tryWebSocketConnection(sessionId);\n        }\n    }\n\n    /**\n     * Try WebSocket connection as fallback\n     * @param {string} sessionId - Session ID for tracking\n     */\n    tryWebSocketConnection(sessionId) {\n        try {\n            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n            const wsUrl = `${protocol}//${window.location.host}/ws`;\n            \n            this.websocket = new WebSocket(wsUrl);\n\n            this.websocket.onopen = () => {\n                this.connectionType = 'websocket';\n                this.updateConnectionType('WebSocket');\n                this.logger.info('WebSocket connected', { sessionId });\n                \n                // Send session join message\n                this.websocket.send(JSON.stringify({\n                    type: 'join-session',\n                    sessionId: sessionId\n                }));\n            };\n\n            this.websocket.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    switch (data.type) {\n                        case 'progress':\n                            this.handleProgressEvent(data);\n                            break;\n                        case 'complete':\n                            this.handleCompletionEvent(data);\n                            break;\n                        case 'error':\n                            this.handleErrorEvent(data);\n                            break;\n                    }\n                } catch (error) {\n                    this.logger.error('Error parsing WebSocket message', { error: error.message });\n                }\n            };\n\n            this.websocket.onclose = (event) => {\n                this.logger.warn('WebSocket closed', { code: event.code, reason: event.reason });\n                this.handleConnectionFailure();\n            };\n\n            this.websocket.onerror = (error) => {\n                this.logger.error('WebSocket error', { error: error.message });\n                this.handleConnectionFailure();\n            };\n\n        } catch (error) {\n            this.logger.error('WebSocket connection failed', { error: error.message });\n            this.handleConnectionFailure();\n        }\n    }\n\n    /**\n     * Handle connection failure and implement fallback strategy\n     */\n    handleConnectionFailure() {\n        this.connectionRetries++;\n        \n        if (this.connectionRetries <= this.maxRetries) {\n            this.logger.info('Retrying connection', { attempt: this.connectionRetries, maxRetries: this.maxRetries });\n            \n            setTimeout(() => {\n                if (this.currentSessionId) {\n                    this.initializeRealTimeConnection(this.currentSessionId);\n                }\n            }, 1000 * this.connectionRetries); // Exponential backoff\n        } else {\n            this.logger.warn('Max connection retries reached, falling back to polling');\n            this.updateConnectionType('Polling (Fallback)');\n        }\n    }\n\n    /**\n     * Close all real-time connections\n     */\n    closeConnections() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n\n        if (this.websocket) {\n            this.websocket.close(1000, 'Operation completed');\n            this.websocket = null;\n        }\n\n        this.connectionType = null;\n        this.logger.debug('Real-time connections closed');\n    }\n\n    /**\n     * Update session ID for tracking\n     * @param {string} sessionId - New session ID\n     */\n    updateSessionId(sessionId) {\n        if (!sessionId) {\n            this.logger.warn('No session ID provided for update');\n            return;\n        }\n\n        this.currentSessionId = sessionId;\n        \n        // Update session ID display\n        const sessionElement = this.progressContainer.querySelector('.detail-value.session-id');\n        if (sessionElement) {\n            sessionElement.textContent = sessionId;\n        }\n\n        this.logger.info('Session ID updated', { sessionId });\n    }\n\n    /**\n     * Handle progress event from real-time connection\n     * @param {Object} data - Progress event data\n     */\n    handleProgressEvent(data) {\n        if (!data) {\n            this.logger.warn('No progress data received');\n            return;\n        }\n\n        const { current, total, message, counts } = data;\n        this.updateProgress(current, total, message, counts);\n        \n        this.logger.debug('Progress event handled', { current, total, message });\n    }\n\n    /**\n     * Handle completion event from real-time connection\n     * @param {Object} data - Completion event data\n     */\n    handleCompletionEvent(data) {\n        this.completeOperation(data);\n        this.logger.info('Completion event handled', { data });\n    }\n\n    /**\n     * Handle error event from real-time connection\n     * @param {Object} data - Error event data\n     */\n    handleErrorEvent(data) {\n        const { message, details } = data;\n        this.handleOperationError(message, details);\n        this.logger.error('Error event handled', { message, details });\n    }\n\n    /**\n     * Update progress display with current values\n     * @param {number} current - Current progress value\n     * @param {number} total - Total progress value\n     * @param {string} message - Progress message\n     * @param {Object} details - Additional progress details\n     */\n    updateProgress(current, total, message = '', details = {}) {\n        if (!this.isEnabled || !this.progressContainer) {\n            this.logger.warn('Progress manager not enabled or container not found');\n            return;\n        }\n\n        // Update progress bar\n        const progressBar = this.progressContainer.querySelector('.progress-bar-fill');\n        if (progressBar) {\n            const percentage = total > 0 ? Math.min(100, Math.round((current / total) * 100)) : 0;\n            progressBar.style.width = `${percentage}%`;\n        }\n\n        // Update percentage text\n        const percentageElement = this.progressContainer.querySelector('.progress-percentage');\n        if (percentageElement) {\n            const percentage = total > 0 ? Math.min(100, Math.round((current / total) * 100)) : 0;\n            percentageElement.textContent = `${percentage}%`;\n        }\n\n        // Update progress text\n        const progressText = this.progressContainer.querySelector('.progress-text');\n        if (progressText && message) {\n            progressText.textContent = message;\n        }\n\n        // Update step indicator based on progress\n        if (total > 0) {\n            const percentage = (current / total) * 100;\n            this.updateStepIndicatorBasedOnProgress(percentage);\n        }\n\n        // Update statistics if provided\n        if (details && typeof details === 'object') {\n            this.stats = { ...this.stats, ...details };\n            this.updateStatsDisplay();\n        }\n\n        this.logger.debug('Progress updated', { current, total, message, details });\n    }\n\n    /**\n     * Update statistics display in the UI\n     */\n    updateStatsDisplay() {\n        if (!this.progressContainer) return;\n\n        Object.entries(this.stats).forEach(([key, value]) => {\n            const statElement = this.progressContainer.querySelector(`.stat-value.${key}`);\n            if (statElement) {\n                statElement.textContent = value || 0;\n            }\n        });\n\n        this.logger.debug('Statistics display updated', { stats: this.stats });\n    }\n\n    /**\n     * Update step indicator based on progress percentage\n     * @param {number} percentage - Progress percentage (0-100)\n     */\n    updateStepIndicatorBasedOnProgress(percentage) {\n        let step = 'init';\n        \n        if (percentage >= 100) {\n            step = 'complete';\n        } else if (percentage >= 75) {\n            step = 'process';\n        } else if (percentage >= 25) {\n            step = 'validate';\n        }\n\n        this.updateStepIndicator(step);\n    }\n\n    /**\n     * Update step indicator to show current operation phase\n     * @param {string} step - Step name (init, validate, process, complete)\n     */\n    updateStepIndicator(step) {\n        if (!this.progressContainer) return;\n\n        const steps = this.progressContainer.querySelectorAll('.step');\n        steps.forEach(stepElement => {\n            stepElement.classList.remove('active', 'completed');\n        });\n\n        const currentStep = this.progressContainer.querySelector(`[data-step=\"${step}\"]`);\n        if (currentStep) {\n            currentStep.classList.add('active');\n        }\n\n        // Mark previous steps as completed\n        const stepOrder = this.getStepOrder(step);\n        steps.forEach(stepElement => {\n            const stepName = stepElement.getAttribute('data-step');\n            const stepIndex = this.getStepOrder(stepName);\n            if (stepIndex < stepOrder) {\n                stepElement.classList.add('completed');\n            }\n        });\n\n        this.logger.debug('Step indicator updated', { step });\n    }\n\n    /**\n     * Get step order for comparison\n     * @param {string} step - Step name\n     * @returns {number} Step order (0-3)\n     */\n    getStepOrder(step) {\n        const order = { init: 0, validate: 1, process: 2, complete: 3 };\n        return order[step] || 0;\n    }\n\n    /**\n     * Start timing updates for operation duration\n     */\n    startTimingUpdates() {\n        if (this.timingInterval) {\n            clearInterval(this.timingInterval);\n        }\n\n        this.timingInterval = setInterval(() => {\n            this.updateTiming();\n        }, 1000);\n\n        this.logger.debug('Timing updates started');\n    }\n\n    /**\n     * Update timing display with elapsed time and ETA\n     */\n    updateTiming() {\n        if (!this.startTime || !this.progressContainer) return;\n\n        const elapsed = Date.now() - this.startTime;\n        const elapsedElement = this.progressContainer.querySelector('.elapsed-value');\n        if (elapsedElement) {\n            elapsedElement.textContent = this.formatDuration(elapsed);\n        }\n\n        // Calculate ETA if we have progress data\n        if (this.stats.total > 0 && this.stats.processed > 0) {\n            const progress = this.stats.processed / this.stats.total;\n            if (progress > 0) {\n                const estimatedTotal = elapsed / progress;\n                const remaining = estimatedTotal - elapsed;\n                \n                const etaElement = this.progressContainer.querySelector('.eta-value');\n                if (etaElement) {\n                    etaElement.textContent = this.formatDuration(remaining);\n                }\n            }\n        }\n\n        this.logger.debug('Timing updated', { elapsed });\n    }\n\n    /**\n     * Complete operation with results\n     * @param {Object} results - Operation results\n     * @param {number} results.processed - Number of processed items\n     * @param {number} results.success - Number of successful items\n     * @param {number} results.failed - Number of failed items\n     * @param {number} results.skipped - Number of skipped items\n     */\n    completeOperation(results = {}) {\n        if (!this.isEnabled) {\n            this.logger.warn('Progress manager not enabled - cannot complete operation');\n            return;\n        }\n\n        // Stop timing updates\n        if (this.timingInterval) {\n            clearInterval(this.timingInterval);\n            this.timingInterval = null;\n        }\n\n        // Close real-time connections\n        this.closeConnections();\n\n        // Update final progress\n        const { processed, success, failed, skipped } = results;\n        this.updateProgress(processed || 0, processed || 0, 'Operation completed');\n\n        // Update final statistics\n        this.stats = { ...this.stats, ...results };\n        this.updateStatsDisplay();\n\n        // Mark as complete\n        this.updateStepIndicator('complete');\n\n        // Call completion callback if provided\n        if (this.completeCallback && typeof this.completeCallback === 'function') {\n            this.completeCallback(results);\n        }\n\n        this.isActive = false;\n        this.logger.info('Operation completed', { results });\n    }\n\n    /**\n     * Handle operation error\n     * @param {string} message - Error message\n     * @param {Object} details - Error details\n     */\n    handleOperationError(message, details = {}) {\n        if (!this.isEnabled) {\n            this.logger.warn('Progress manager not enabled - cannot handle error');\n            return;\n        }\n\n        // Stop timing updates\n        if (this.timingInterval) {\n            clearInterval(this.timingInterval);\n            this.timingInterval = null;\n        }\n\n        // Close real-time connections\n        this.closeConnections();\n\n        // Update progress text with error\n        const progressText = this.progressContainer.querySelector('.progress-text');\n        if (progressText) {\n            progressText.textContent = `Error: ${message}`;\n            progressText.classList.add('error');\n        }\n\n        this.isActive = false;\n        this.logger.error('Operation error', { message, details });\n    }\n\n    /**\n     * Cancel current operation\n     */\n    cancelOperation() {\n        if (!this.isEnabled || !this.isActive) {\n            this.logger.warn('No active operation to cancel');\n            return;\n        }\n\n        // Stop timing updates\n        if (this.timingInterval) {\n            clearInterval(this.timingInterval);\n            this.timingInterval = null;\n        }\n\n        // Close real-time connections\n        this.closeConnections();\n\n        // Call cancel callback if provided\n        if (this.cancelCallback && typeof this.cancelCallback === 'function') {\n            this.cancelCallback();\n        }\n\n        this.isActive = false;\n        this.hideProgress();\n        this.logger.info('Operation cancelled');\n    }\n\n    /**\n     * Show progress display\n     */\n    showProgress() {\n        if (!this.isEnabled || !this.progressContainer) {\n            this.logger.warn('Progress manager not enabled or container not found');\n            return;\n        }\n\n        // Make sure the container is visible\n        this.progressContainer.style.display = 'block';\n        this.progressContainer.classList.add('visible');\n        \n        // Force visibility with !important to override any CSS that might hide it\n        this.progressContainer.setAttribute('style', 'display: block !important; visibility: visible !important;');\n\n        // Focus management for accessibility\n        const cancelButton = this.progressContainer.querySelector('.cancel-operation');\n        if (cancelButton) {\n            cancelButton.focus();\n        }\n\n        this.logger.debug('Progress display shown', { containerId: this.progressContainer.id });\n        \n        // Log to console for debugging\n        console.log(`🔍 [PROGRESS] Showing progress container: ${this.progressContainer.id}`);\n    }\n\n    /**\n     * Hide progress display\n     */\n    hideProgress() {\n        if (!this.progressContainer) return;\n\n        // Log before hiding\n        this.logger.debug('Hiding progress display', { containerId: this.progressContainer.id });\n        console.log(`🔍 [PROGRESS] Hiding progress container: ${this.progressContainer.id}`);\n\n        this.progressContainer.classList.remove('visible');\n        \n        // Immediately hide the container\n        this.progressContainer.style.display = 'none';\n\n        this.logger.debug('Progress display hidden');\n    }\n\n    /**\n     * Update operation title\n     * @param {string} operationType - Type of operation\n     */\n    updateOperationTitle(operationType) {\n        if (!this.progressContainer) return;\n\n        const titleElement = this.progressContainer.querySelector('.title-text');\n        if (titleElement) {\n            const titles = {\n                import: 'Import Users',\n                export: 'Export Users',\n                delete: 'Delete Users',\n                modify: 'Modify Users'\n            };\n            titleElement.textContent = titles[operationType] || 'Operation in Progress';\n        }\n\n        this.logger.debug('Operation title updated', { operationType });\n    }\n\n    /**\n     * Update operation details\n     * @param {Object} options - Operation options\n     * @param {string} options.populationName - Population name\n     * @param {string} options.populationId - Population ID\n     * @param {number} options.totalUsers - Total number of users\n     */\n    updateOperationDetails(options = {}) {\n        if (!this.progressContainer) return;\n\n        const { populationName, populationId, totalUsers } = options;\n\n        // Update operation type\n        const operationTypeElement = this.progressContainer.querySelector('.detail-value.operation-type');\n        if (operationTypeElement) {\n            operationTypeElement.textContent = this.currentOperation || 'Unknown';\n        }\n\n        // Update population info\n        const populationElement = this.progressContainer.querySelector('.detail-value.population-info');\n        if (populationElement) {\n            populationElement.textContent = populationName || populationId || 'Unknown';\n        }\n\n        // Update total users in stats\n        if (totalUsers) {\n            this.stats.total = totalUsers;\n            this.updateStatsDisplay();\n        }\n\n        this.logger.debug('Operation details updated', { options });\n    }\n\n    /**\n     * Update operation status\n     * @param {string} status - Operation status\n     * @param {string} message - Status message\n     */\n    updateOperationStatus(status, message = '') {\n        if (!this.progressContainer) return;\n\n        const subtitleElement = this.progressContainer.querySelector('.operation-subtitle');\n        if (subtitleElement) {\n            subtitleElement.textContent = message || status;\n        }\n\n        this.logger.debug('Operation status updated', { status, message });\n    }\n\n    /**\n     * Update connection type display\n     * @param {string} type - Connection type\n     */\n    updateConnectionType(type) {\n        if (!this.progressContainer) return;\n\n        const connectionElement = this.progressContainer.querySelector('.detail-value.connection-type');\n        if (connectionElement) {\n            connectionElement.textContent = type;\n        }\n\n        this.logger.debug('Connection type updated', { type });\n    }\n\n    /**\n     * Reset operation statistics\n     */\n    resetOperationStats() {\n        this.stats = {\n            processed: 0,\n            success: 0,\n            failed: 0,\n            skipped: 0,\n            total: 0\n        };\n\n        this.updateStatsDisplay();\n        this.logger.debug('Operation statistics reset');\n    }\n\n    /**\n     * Format duration in milliseconds to human readable string\n     * @param {number} milliseconds - Duration in milliseconds\n     * @returns {string} Formatted duration string\n     */\n    formatDuration(milliseconds) {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n\n        if (hours > 0) {\n            return `${hours}:${String(minutes % 60).padStart(2, '0')}:${String(seconds % 60).padStart(2, '0')}`;\n        } else if (minutes > 0) {\n            return `${minutes}:${String(seconds % 60).padStart(2, '0')}`;\n        } else {\n            return `${seconds}s`;\n        }\n    }\n\n    /**\n     * Set progress callback function\n     * @param {Function} callback - Progress callback function\n     */\n    setProgressCallback(callback) {\n        this.progressCallback = callback;\n        this.logger.debug('Progress callback set');\n    }\n\n    /**\n     * Set completion callback function\n     * @param {Function} callback - Completion callback function\n     */\n    setCompleteCallback(callback) {\n        this.completeCallback = callback;\n        this.logger.debug('Completion callback set');\n    }\n\n    /**\n     * Set cancel callback function\n     * @param {Function} callback - Cancel callback function\n     */\n    setCancelCallback(callback) {\n        this.cancelCallback = callback;\n        this.logger.debug('Cancel callback set');\n    }\n\n    /**\n     * Debug logging for development\n     * @param {string} area - Debug area\n     * @param {string} message - Debug message\n     */\n    debugLog(area, message) {\n        if (DEBUG_MODE) {\n            this.logger.debug(`[${area}] ${message}`);\n        }\n    }\n\n    /**\n     * Clean up resources and destroy the progress manager\n     */\n    destroy() {\n        // Stop timing updates\n        if (this.timingInterval) {\n            clearInterval(this.timingInterval);\n            this.timingInterval = null;\n        }\n\n        // Close connections\n        this.closeConnections();\n\n        // Clear callbacks\n        this.progressCallback = null;\n        this.completeCallback = null;\n        this.cancelCallback = null;\n\n        // Reset state\n        this.isActive = false;\n        this.currentOperation = null;\n        this.currentSessionId = null;\n\n        this.logger.info('Progress manager destroyed');\n    }\n}\n\n// Create and export default instance\nconst progressManager = new ProgressManager();\n\n// Export the class and instance\nexport default progressManager;\nexport { ProgressManager }; ","/**\n * Error Types\n * \n * Defines standard error types and severities for consistent error handling\n */\n\n/**\n * Standard error types\n */\nexport const ErrorTypes = Object.freeze({\n    // Client-side errors\n    VALIDATION: 'VALIDATION',      // Data validation failed\n    AUTHENTICATION: 'AUTHENTICATION', // Authentication/authorization issues\n    AUTHORIZATION: 'AUTHORIZATION',   // Permission issues\n    NETWORK: 'NETWORK',           // Network connectivity issues\n    TIMEOUT: 'TIMEOUT',           // Request timeouts\n    \n    // Server-side errors\n    SERVER: 'SERVER',             // Generic server error (500)\n    SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE', // Service unavailable (503)\n    NOT_FOUND: 'NOT_FOUND',       // Resource not found (404)\n    CONFLICT: 'CONFLICT',         // Resource conflict (409)\n    \n    // Application-specific errors\n    CONFIGURATION: 'CONFIGURATION', // Configuration errors\n    INTEGRATION: 'INTEGRATION',   // Third-party service integration errors\n    \n    // Fallback\n    UNKNOWN: 'UNKNOWN'            // Unclassified errors\n});\n\n/**\n * Error severity levels\n */\nexport const ErrorSeverity = Object.freeze({\n    FATAL: 'FATAL',     // Application cannot continue\n    ERROR: 'ERROR',     // Operation failed, but application can continue\n    WARNING: 'WARNING', // Operation completed with issues\n    INFO: 'INFO',      // Informational message\n    DEBUG: 'DEBUG'     // Debug information\n});\n\n/**\n * Standard error codes\n */\nexport const ErrorCodes = Object.freeze({\n    // Authentication (1000-1099)\n    INVALID_CREDENTIALS: 1001,\n    SESSION_EXPIRED: 1002,\n    INVALID_TOKEN: 1003,\n    \n    // Validation (2000-2099)\n    INVALID_INPUT: 2001,\n    MISSING_REQUIRED_FIELD: 2002,\n    INVALID_FORMAT: 2003,\n    \n    // Authorization (3000-3099)\n    PERMISSION_DENIED: 3001,\n    INSUFFICIENT_PERMISSIONS: 3002,\n    \n    // Network (4000-4099)\n    NETWORK_ERROR: 4001,\n    REQUEST_TIMEOUT: 4002,\n    \n    // Server (5000-5099)\n    INTERNAL_SERVER_ERROR: 5001,\n    SERVICE_UNAVAILABLE: 5002,\n    \n    // Business Logic (6000-6099)\n    DUPLICATE_ENTRY: 6001,\n    RESOURCE_NOT_FOUND: 6002,\n    \n    // Integration (7000-7099)\n    EXTERNAL_SERVICE_ERROR: 7001,\n    API_RATE_LIMIT_EXCEEDED: 7002\n});\n\n/**\n * Standard error messages\n */\nexport const ErrorMessages = Object.freeze({\n    [ErrorTypes.VALIDATION]: 'Validation failed',\n    [ErrorTypes.AUTHENTICATION]: 'Authentication required',\n    [ErrorTypes.AUTHORIZATION]: 'Permission denied',\n    [ErrorTypes.NETWORK]: 'Network error occurred',\n    [ErrorTypes.TIMEOUT]: 'Request timed out',\n    [ErrorTypes.SERVER]: 'Internal server error',\n    [ErrorTypes.SERVICE_UNAVAILABLE]: 'Service unavailable',\n    [ErrorTypes.NOT_FOUND]: 'Resource not found',\n    [ErrorTypes.CONFLICT]: 'Resource conflict',\n    [ErrorTypes.CONFIGURATION]: 'Configuration error',\n    [ErrorTypes.INTEGRATION]: 'Integration error',\n    [ErrorTypes.UNKNOWN]: 'An unexpected error occurred'\n});\n\n/**\n * Error metadata\n * Maps error types to their default properties\n */\nexport const ErrorMetadata = Object.freeze({\n    [ErrorTypes.VALIDATION]: {\n        severity: ErrorSeverity.WARNING,\n        isRecoverable: true,\n        userMessage: 'Please check your input and try again.'\n    },\n    [ErrorTypes.AUTHENTICATION]: {\n        severity: ErrorSeverity.ERROR,\n        isRecoverable: true,\n        userMessage: 'Your session has expired. Please log in again.'\n    },\n    [ErrorTypes.AUTHORIZATION]: {\n        severity: ErrorSeverity.ERROR,\n        isRecoverable: false,\n        userMessage: 'You do not have permission to perform this action.'\n    },\n    [ErrorTypes.NETWORK]: {\n        severity: ErrorSeverity.WARNING,\n        isRecoverable: true,\n        userMessage: 'Unable to connect to the server. Please check your internet connection.'\n    },\n    [ErrorTypes.SERVER]: {\n        severity: ErrorSeverity.ERROR,\n        isRecoverable: false,\n        userMessage: 'An unexpected server error occurred. Please try again later.'\n    },\n    [ErrorTypes.UNKNOWN]: {\n        severity: ErrorSeverity.ERROR,\n        isRecoverable: false,\n        userMessage: 'An unexpected error occurred. Please try again.'\n    }\n});\n\n/**\n * Creates a standard error object\n * @param {string} type - Error type from ErrorTypes\n * @param {string} message - Error message\n * @param {Object} details - Additional error details\n * @returns {Error} Standardized error object\n */\nexport function createError(type, message, details = {}) {\n    const error = new Error(message || ErrorMessages[type] || 'An unknown error occurred');\n    error.type = type;\n    error.code = details.code || ErrorCodes[type] || 0;\n    error.details = details;\n    error.timestamp = new Date().toISOString();\n    \n    // Add metadata if available\n    const metadata = ErrorMetadata[type];\n    if (metadata) {\n        error.severity = metadata.severity;\n        error.isRecoverable = metadata.isRecoverable;\n        error.userMessage = metadata.userMessage;\n    }\n    \n    return error;\n}\n\n/**\n * Checks if an error is of a specific type\n * @param {Error} error - The error to check\n * @param {string} type - The error type to check against\n * @returns {boolean} True if the error is of the specified type\n */\nexport function isErrorType(error, type) {\n    return error && error.type === type;\n}\n\n/**\n * Gets the default error message for an error type\n * @param {string} type - The error type\n * @returns {string} The default error message\n */\nexport function getDefaultMessage(type) {\n    return ErrorMessages[type] || 'An unknown error occurred';\n}\n\n/**\n * Gets the default severity for an error type\n * @param {string} type - The error type\n * @returns {string} The default severity\n */\nexport function getDefaultSeverity(type) {\n    const metadata = ErrorMetadata[type];\n    return metadata ? metadata.severity : ErrorSeverity.ERROR;\n}\n","/**\n * @fileoverview Winston-compatible logger for frontend environment\n * \n * This module provides a Winston-like logging interface for the frontend\n * that maintains consistency with server-side Winston logging while\n * working within browser constraints.\n * \n * Features:\n * - Winston-compatible API (info, warn, error, debug)\n * - Structured logging with metadata\n * - Timestamp formatting\n * - Log level filtering\n * - Console and server transport support\n * - Error stack trace handling\n * - Environment-aware configuration\n */\n\nimport { createWinstonLogger } from './winston-logger.js';\nimport messageFormatter from './message-formatter.js';\nimport { UIManager } from './ui-manager.js';\nconst ui = window.app && window.app.uiManager;\n\n/**\n * Winston-compatible logger for browser environment\n */\nclass Logger {\n    constructor(logElement = null) {\n        // Handle different types of logElement parameters\n        if (typeof logElement === 'string') {\n            // If string provided, try to find DOM element or set to null for UI-less logging\n            try {\n                const element = document.getElementById(logElement) || document.querySelector(logElement);\n                this.logElement = element;\n                if (!element) {\n                    console.debug(`[LOGGER] DOM element not found for '${logElement}', using UI-less logging`);\n                }\n            } catch (error) {\n                console.debug(`[LOGGER] Error finding DOM element for '${logElement}':`, error.message);\n                this.logElement = null;\n            }\n        } else if (logElement && logElement.nodeType === Node.ELEMENT_NODE) {\n            // Valid DOM element\n            this.logElement = logElement;\n        } else if (logElement && typeof logElement === 'object' && logElement.length !== undefined) {\n            // Handle NodeList/HTMLCollection - take first element\n            this.logElement = logElement.length > 0 ? logElement[0] : null;\n            if (logElement.length > 1) {\n                console.debug(`[LOGGER] Multiple elements found, using first element`);\n            }\n        } else {\n            // Null, undefined, or invalid - use UI-less logging\n            this.logElement = null;\n        }\n        \n        this.logs = [];\n        this.validCount = 0;\n        this.errorCount = 0;\n        this.initialized = false;\n        this.serverLoggingEnabled = true;\n        this.isLoadingLogs = false;\n        this.offlineLogs = [];\n        \n        // Initialize Winston-compatible logger\n        this.winstonLogger = createWinstonLogger({\n            service: 'pingone-import-frontend',\n            environment: process.env.NODE_ENV || 'development',\n            enableServerLogging: true,\n            enableConsoleLogging: true\n        });\n        \n        this.initialize();\n    }\n    \n    /**\n     * Initialize the logger\n     */\n    initialize() {\n        try {\n            this.winstonLogger.info('Logger initialized successfully');\n            this.initialized = true;\n        } catch (error) {\n            console.error('Failed to initialize logger:', error);\n        }\n    }\n    \n    /**\n     * Temporarily disable server logging to prevent feedback loops\n     */\n    disableServerLogging() {\n        this.serverLoggingEnabled = false;\n        this.winstonLogger.setServerLogging(false);\n        this.winstonLogger.debug('Server logging disabled');\n    }\n    \n    /**\n     * Re-enable server logging\n     */\n    enableServerLogging() {\n        this.serverLoggingEnabled = true;\n        this.winstonLogger.setServerLogging(true);\n        this.winstonLogger.debug('Server logging enabled');\n    }\n    \n    /**\n     * Set flag to indicate we're loading logs (prevents server logging)\n     */\n    setLoadingLogs(isLoading) {\n        this.isLoadingLogs = isLoading;\n        this.winstonLogger.debug(`Loading logs flag set to: ${isLoading}`);\n    }\n    \n    /**\n     * Create a safe file logger that handles initialization and errors\n     * @private\n     */\n    _createSafeFileLogger() {\n        const logger = {\n            _initialized: false,\n            _logger: null,\n            _queue: [],\n            _initializing: false,\n            \n            async init() {\n                if (this._initialized || this._initializing) return;\n                \n                this._initializing = true;\n                try {\n                    // Initialize actual FileLogger for client.log\n                    const { FileLogger } = await import('./file-logger.js');\n                    this._logger = new FileLogger('client.log');\n                    this._initialized = true;\n                    this._processQueue();\n                } catch (error) {\n                    console.warn('Failed to initialize file logger, falling back to console:', error.message);\n                    // Fallback to console logging\n                    this._logger = {\n                        log: (level, message, data) => {\n                            console[level] || console.log(`[${level.toUpperCase()}] ${message}`, data);\n                        }\n                    };\n                    this._initialized = true;\n                    this._processQueue();\n                } finally {\n                    this._initializing = false;\n                }\n            },\n            \n            _processQueue() {\n                while (this._queue.length > 0) {\n                    const { level, message, data } = this._queue.shift();\n                    if (this._logger && typeof this._logger.log === 'function') {\n                        this._logger.log(level, message, data);\n                    }\n                }\n            },\n            \n            log(level, message, data) {\n                if (this._initialized && this._logger) {\n                    this._logger.log(level, message, data);\n                } else {\n                    this._queue.push({ level, message, data });\n                    if (!this._initializing) {\n                        this.init();\n                    }\n                }\n            }\n        };\n        \n        return logger;\n    }\n    \n    /**\n     * Parse log arguments into structured format\n     * @private\n     */\n    _parseLogArgs(args) {\n        let message = 'Log message';\n        let data = null;\n        let context = null;\n\n        if (args.length > 0) {\n            if (typeof args[0] === 'string') {\n                message = args[0];\n                if (args.length > 1 && typeof args[1] === 'object') {\n                    data = args[1];\n                    if (args.length > 2 && typeof args[2] === 'object') {\n                        context = args[2];\n                    }\n                }\n            } else if (typeof args[0] === 'object') {\n                data = args[0];\n                message = 'Log data';\n                if (args.length > 1 && typeof args[1] === 'object') {\n                    context = args[1];\n                }\n            }\n        }\n\n        return [message, data, context];\n    }\n    \n    /**\n     * Main logging method with Winston integration\n     */\n    log(level, message, data = {}) {\n        try {\n            // Parse arguments if needed\n            if (typeof level === 'string' && typeof message === 'string') {\n                // Direct call: log(level, message, data)\n                this._logToWinston(level, message, data);\n            } else {\n                // Legacy call: log(message, level)\n                const [parsedMessage, parsedData, context] = this._parseLogArgs(arguments);\n                this._logToWinston(level || 'info', parsedMessage, { ...parsedData, ...context });\n            }\n            \n            // Update UI if log element exists\n            this._updateLogUI({ level, message, data, timestamp: new Date() });\n            \n        } catch (error) {\n            console.error('Error in logger.log:', error);\n        }\n    }\n    \n    /**\n     * Log to Winston with proper formatting\n     * @private\n     */\n    _logToWinston(level, message, data = {}) {\n        const logData = {\n            ...data,\n            component: 'frontend-logger',\n            timestamp: new Date().toISOString()\n        };\n        \n        this.winstonLogger.log(level, message, logData);\n    }\n    \n    /**\n     * Log info level message\n     */\n    info(message, data = {}) {\n        this.log('info', message, data);\n    }\n    \n    /**\n     * Log warn level message\n     */\n    warn(message, data = {}) {\n        this.log('warn', message, data);\n    }\n    \n    /**\n     * Log error level message\n     */\n    error(message, data = {}) {\n        this.log('error', message, data);\n        if (ui) ui.showStatusBar(message, 'error', { autoDismiss: false });\n        this.errorCount++;\n        this.updateSummary();\n    }\n    \n    /**\n     * Log debug level message\n     */\n    debug(message, data = {}) {\n        this.log('debug', message, data);\n    }\n    \n    /**\n     * Log success level message\n     */\n    success(message, data = {}) {\n        this.log('info', message, { ...data, type: 'success' });\n        this.validCount++;\n        this.updateSummary();\n    }\n    \n    /**\n     * Log error with stack trace\n     */\n    errorWithStack(message, error, data = {}) {\n        this.winstonLogger.errorWithStack(message, error, data);\n        this.errorCount++;\n        this.updateSummary();\n    }\n    \n    /**\n     * Update log UI with new entry\n     * @private\n     */\n    _updateLogUI(logEntry) {\n        if (!this.logElement) return;\n        \n        try {\n            const logElement = document.createElement('div');\n            logElement.className = `log-entry ${logEntry.level}`;\n            \n            // Create timestamp\n            const timestamp = document.createElement('span');\n            timestamp.className = 'log-timestamp';\n            timestamp.textContent = new Date(logEntry.timestamp).toLocaleTimeString();\n            logElement.appendChild(timestamp);\n            \n            // Create level badge\n            const levelBadge = document.createElement('span');\n            levelBadge.className = 'log-level';\n            levelBadge.textContent = logEntry.level.toUpperCase();\n            logElement.appendChild(levelBadge);\n            \n            // Create message with formatting\n            const message = document.createElement('span');\n            message.className = 'log-message';\n            \n            // Format the message for better readability\n            let formattedMessage = logEntry.message;\n            if (logEntry.data && logEntry.data.type) {\n                // Format based on message type\n                switch (logEntry.data.type) {\n                    case 'progress':\n                        formattedMessage = messageFormatter.formatProgressMessage(\n                            logEntry.data.operation || 'import',\n                            logEntry.data.current || 0,\n                            logEntry.data.total || 0,\n                            logEntry.message,\n                            logEntry.data.counts || {}\n                        );\n                        break;\n                    case 'error':\n                        formattedMessage = messageFormatter.formatErrorMessage(\n                            logEntry.data.operation || 'import',\n                            logEntry.message,\n                            logEntry.data\n                        );\n                        break;\n                    case 'completion':\n                        formattedMessage = messageFormatter.formatCompletionMessage(\n                            logEntry.data.operation || 'import',\n                            logEntry.data\n                        );\n                        break;\n                    default:\n                        // Use original message for other types\n                        formattedMessage = logEntry.message;\n                }\n            }\n            \n            message.textContent = formattedMessage;\n            logElement.appendChild(message);\n            \n            // Add details if present\n            if (logEntry.data && Object.keys(logEntry.data).length > 0) {\n                const detailsElement = document.createElement('div');\n                detailsElement.className = 'log-details';\n                \n                const detailsTitle = document.createElement('h4');\n                detailsTitle.textContent = 'Details';\n                detailsElement.appendChild(detailsTitle);\n                \n                const detailsContent = document.createElement('pre');\n                detailsContent.className = 'log-detail-json';\n                detailsContent.textContent = JSON.stringify(logEntry.data, null, 2);\n                detailsElement.appendChild(detailsContent);\n                \n                logElement.appendChild(detailsElement);\n            }\n            \n            // Insert at top (newest first)\n            if (this.logElement.firstChild) {\n                this.logElement.insertBefore(logElement, this.logElement.firstChild);\n            } else {\n                this.logElement.appendChild(logElement);\n            }\n            \n            // Auto-scroll to top\n            this.logElement.scrollTop = 0;\n            \n            // Limit UI logs\n            const maxUILogs = 100;\n            while (this.logElement.children.length > maxUILogs) {\n                this.logElement.removeChild(this.logElement.lastChild);\n            }\n            \n        } catch (error) {\n            console.error('Error updating log UI:', error);\n        }\n    }\n    \n    /**\n     * Send log to server\n     * @private\n     */\n    async _sendToServer(logEntry) {\n        if (!this.serverLoggingEnabled || this.isLoadingLogs) {\n            return;\n        }\n        \n        try {\n            await fetch('/api/logs/ui', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    level: logEntry.level,\n                    message: logEntry.message,\n                    data: logEntry.data\n                })\n            });\n        } catch (error) {\n            this.winstonLogger.warn('Failed to send log to server', { error: error.message });\n            this.offlineLogs.push(logEntry);\n        }\n    }\n    \n    /**\n     * Render all logs to UI\n     */\n    renderLogs() {\n        if (!this.logElement) return;\n        \n        this.logElement.innerHTML = '';\n        this.logs.forEach(log => this._updateLogUI(log));\n        this.logElement.scrollTop = this.logElement.scrollHeight;\n    }\n    \n    /**\n     * Clear all logs\n     */\n    clearLogs() {\n        this.logs = [];\n        if (this.logElement) {\n            this.logElement.innerHTML = '';\n        }\n        this.winstonLogger.info('Logs cleared');\n    }\n    \n    /**\n     * Get all logs\n     */\n    getLogs() {\n        return [...this.logs];\n    }\n    \n    /**\n     * Update summary display\n     */\n    updateSummary() {\n        // Implementation depends on UI structure\n        this.winstonLogger.debug('Summary updated', { \n            validCount: this.validCount, \n            errorCount: this.errorCount \n        });\n    }\n    \n    /**\n     * Clear summary\n     */\n    clearSummary() {\n        this.validCount = 0;\n        this.errorCount = 0;\n        this.winstonLogger.debug('Summary cleared');\n    }\n    \n    /**\n     * Start a performance timer\n     */\n    startTimer(label) {\n        if (!this.timers) {\n            this.timers = new Map();\n        }\n        this.timers.set(label, Date.now());\n        this.debug(`Timer started: ${label}`);\n    }\n    \n    /**\n     * End a performance timer and log the duration\n     */\n    endTimer(label) {\n        if (!this.timers || !this.timers.has(label)) {\n            this.warn(`Timer '${label}' not found`);\n            return 0;\n        }\n        \n        const startTime = this.timers.get(label);\n        const duration = Date.now() - startTime;\n        this.timers.delete(label);\n        \n        this.info(`Timer completed: ${label}`, { duration: `${duration}ms` });\n        return duration;\n    }\n    \n    /**\n     * Create a child logger with additional context\n     * This is required for hierarchical logging in subsystems\n     */\n    child(options = {}) {\n        console.log('🔥 [LOGGER DEBUG] Creating child logger with options:', options);\n        \n        // Create a new logger instance that inherits from this one\n        const childLogger = Object.create(this);\n        \n        // Add context from options\n        childLogger.context = { ...this.context, ...options };\n        \n        // Override logging methods to include context\n        const originalMethods = ['info', 'warn', 'error', 'debug'];\n        originalMethods.forEach(method => {\n            const originalMethod = this[method].bind(this);\n            childLogger[method] = (message, data = {}) => {\n                const contextualData = { ...childLogger.context, ...data };\n                return originalMethod(message, contextualData);\n            };\n        });\n        \n        console.log('🔥 [LOGGER DEBUG] Child logger created successfully');\n        return childLogger;\n    }\n}\n\n// Export the Logger class\nexport { Logger };\n","// File: crypto-utils.js\n// Description: Cryptographic utilities for secure data handling\n// \n// This module provides encryption and decryption functionality for\n// sensitive data like API secrets and user credentials. Uses the\n// Web Crypto API for secure cryptographic operations.\n// \n// Features:\n// - PBKDF2 key derivation for secure key generation\n// - AES-GCM encryption for authenticated encryption\n// - Base64 encoding for storage compatibility\n// - Error handling for decryption failures\n\n/**\n * Cryptographic Utilities Class\n * \n * Provides secure encryption and decryption using the Web Crypto API.\n * Uses PBKDF2 for key derivation and AES-GCM for authenticated encryption.\n * All methods are static for easy use throughout the application.\n */\nclass CryptoUtils {\n    /**\n     * Generate a cryptographic key for encryption/decryption\n     * \n     * Uses PBKDF2 key derivation to create a secure key from a password.\n     * The key is suitable for AES-GCM encryption operations.\n     * \n     * @param {string} password - The password to derive the key from\n     * @returns {Promise<CryptoKey>} A CryptoKey object for encryption/decryption\n     */\n    static async generateKey(password) {\n        // Convert password to key material using PBKDF2\n        const encoder = new TextEncoder();\n        const keyMaterial = await window.crypto.subtle.importKey(\n            'raw',\n            encoder.encode(password),\n            'PBKDF2',\n            false,\n            ['deriveBits', 'deriveKey']\n        );\n\n        // Derive the actual encryption key using PBKDF2\n        return window.crypto.subtle.deriveKey(\n            {\n                name: 'PBKDF2',\n                salt: new TextEncoder().encode('PingOneImportSalt'), // Should be unique per user in production\n                iterations: 100000,\n                hash: 'SHA-256'\n            },\n            keyMaterial,\n            { name: 'AES-GCM', length: 256 },\n            false,\n            ['encrypt', 'decrypt']\n        );\n    }\n\n    /**\n     * Encrypt a string using AES-GCM\n     * \n     * Encrypts text using AES-GCM with a random initialization vector (IV).\n     * The IV is prepended to the encrypted data for secure storage.\n     * Returns the result as base64-encoded string.\n     * \n     * @param {string} text - The text to encrypt\n     * @param {CryptoKey} key - The encryption key\n     * @returns {Promise<string>} Encrypted text as base64 string\n     */\n    static async encrypt(text, key) {\n        // Convert text to UTF-8 bytes\n        const encoder = new TextEncoder();\n        const data = encoder.encode(text);\n        \n        // Generate a random IV (Initialization Vector) for security\n        const iv = window.crypto.getRandomValues(new Uint8Array(12));\n        \n        // Encrypt the data using AES-GCM\n        const encrypted = await window.crypto.subtle.encrypt(\n            { name: 'AES-GCM', iv },\n            key,\n            data\n        );\n        \n        // Combine IV and encrypted data into a single array\n        // IV is prepended for secure storage and retrieval\n        const result = new Uint8Array(iv.length + encrypted.byteLength);\n        result.set(iv, 0);\n        result.set(new Uint8Array(encrypted), iv.length);\n        \n        // Convert to base64 for storage compatibility\n        return btoa(String.fromCharCode(...result));\n    }\n\n    /**\n     * Decrypt a string\n     * @param {string} encryptedBase64 - The encrypted text in base64 format\n     * @param {CryptoKey} key - The decryption key\n     * @returns {Promise<string>} Decrypted text\n     */\n    static async decrypt(encryptedBase64, key) {\n        try {\n            // Convert from base64 to Uint8Array\n            const encryptedData = Uint8Array.from(atob(encryptedBase64), c => c.charCodeAt(0));\n            \n            // Extract the IV (first 12 bytes)\n            const iv = encryptedData.slice(0, 12);\n            const data = encryptedData.slice(12);\n            \n            const decrypted = await window.crypto.subtle.decrypt(\n                { name: 'AES-GCM', iv },\n                key,\n                data\n            );\n            \n            return new TextDecoder().decode(decrypted);\n        } catch (error) {\n            // Don't log the error here - let the calling code handle it\n            throw error;\n        }\n    }\n}\n\n// Export the class and a singleton instance\nexport { CryptoUtils };\nexport const cryptoUtils = new CryptoUtils();\n","/**\n * @fileoverview Settings Manager Class\n * \n * Manages application settings with secure storage and encryption.\n * Handles API credentials, user preferences, and configuration data\n * with automatic encryption for sensitive information.\n * \n * @param {Object} logger - Winston logger instance for debugging\n */\nimport { createWinstonLogger } from './winston-logger.js';\nimport { CryptoUtils } from './crypto-utils.js';\n\nclass SettingsManager {\n    /**\n     * Create a new SettingsManager instance\n     * @param {Object} logger - Winston logger instance for debugging\n     */\n    constructor(logger = null) {\n        // Initialize settings with default values\n        this.settings = this.getDefaultSettings();\n        this.storageKey = 'pingone-import-settings';\n        this.encryptionKey = null;\n        \n        // Initialize Winston logger for debugging and error reporting\n        this.initializeLogger(logger);\n        \n        // Encryption will be initialized in the init method\n        this.encryptionInitialized = false;\n    }\n    \n    /**\n     * Initialize the settings manager\n     * @returns {Promise<void>}\n     */\n    async init() {\n        try {\n            await this.initializeEncryption();\n            this.encryptionInitialized = true;\n            this.logger.info('Settings manager initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize settings manager', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Initialize Winston logger\n     * @param {Object} logger - Logger instance\n     */\n    initializeLogger(logger) {\n        if (logger && typeof logger.child === 'function') {\n            this.logger = logger.child({ component: 'settings-manager' });\n        } else {\n            this.logger = createWinstonLogger({\n                service: 'pingone-import-settings',\n                environment: process.env.NODE_ENV || 'development'\n            });\n        }\n    }\n    \n    /**\n     * Create a default console logger if none provided\n     * @returns {Object} Default logger object\n     */\n    createDefaultLogger() {\n        return {\n            log: (msg, level = 'info') => this.logger.log(level, `[Settings] ${msg}`),\n            info: (msg) => this.logger.info(`[Settings] ${msg}`),\n            warn: (msg) => this.logger.warn(`[Settings] ${msg}`),\n            error: (msg) => this.logger.error(`[Settings] ${msg}`),\n            debug: (msg) => this.logger.debug(`[Settings] ${msg}`)\n        };\n    }\n    \n    /**\n     * Get region info by code\n     * @param {string} code - Region code (e.g., 'NA', 'CA', 'EU', 'AU', 'SG', 'AP')\n     * @returns {{code: string, tld: string, label: string}} Region information\n     */\n    static getRegionInfo(code) {\n        if (!code) {\n            return { code: 'NA', tld: 'com', label: 'North America (excluding Canada)' };\n        }\n        \n        const regions = {\n            NA: { code: 'NA', tld: 'com', label: 'North America (excluding Canada)' },\n            CA: { code: 'CA', tld: 'ca', label: 'Canada' },\n            EU: { code: 'EU', tld: 'eu', label: 'European Union' },\n            AU: { code: 'AU', tld: 'com.au', label: 'Australia' },\n            SG: { code: 'SG', tld: 'sg', label: 'Singapore' },\n            AP: { code: 'AP', tld: 'asia', label: 'Asia-Pacific' }\n        };\n        return regions[code] || regions['NA'];\n    }\n\n    /**\n     * Get default settings\n     * @returns {Object} Default settings object\n     */\n    getDefaultSettings() {\n        return {\n            environmentId: '',\n            region: 'NA',\n            apiClientId: '',\n            populationId: '',\n            rateLimit: 50,\n            connectionStatus: 'disconnected',\n            connectionMessage: 'Not connected',\n            lastConnectionTest: null,\n            autoSave: true,\n            lastUsedDirectory: '',\n            theme: 'light',\n            pageSize: 50,\n            showNotifications: true\n        };\n    }\n    \n    /**\n     * Load settings from storage\n     * @returns {Promise<Object>} Loaded settings\n     */\n    async loadSettings() {\n        try {\n            const storedData = localStorage.getItem(this.storageKey);\n            if (!storedData) {\n                this.logger.info('No stored settings found, using defaults');\n                return this.settings;\n            }\n            \n            // Try to parse as JSON first (unencrypted)\n            try {\n                const parsedSettings = JSON.parse(storedData);\n                this.settings = { ...this.getDefaultSettings(), ...parsedSettings };\n                \n                this.logger.info('Settings loaded successfully (unencrypted)', {\n                    hasEnvironmentId: !!this.settings.environmentId,\n                    hasApiClientId: !!this.settings.apiClientId,\n                    region: this.settings.region\n                });\n                \n                return this.settings;\n            } catch (jsonError) {\n                // If JSON parsing fails, try decryption\n                if (!this.encryptionInitialized) {\n                    this.logger.warn('Encryption not initialized and JSON parsing failed, using defaults');\n                    return this.settings;\n                }\n                \n                try {\n                    const decryptedData = await CryptoUtils.decrypt(storedData, this.encryptionKey);\n                    const parsedSettings = JSON.parse(decryptedData);\n                    \n                    // Merge with defaults to ensure all properties exist\n                    this.settings = { ...this.getDefaultSettings(), ...parsedSettings };\n                    \n                    this.logger.info('Settings loaded successfully (encrypted)', {\n                        hasEnvironmentId: !!this.settings.environmentId,\n                        hasApiClientId: !!this.settings.apiClientId,\n                        region: this.settings.region\n                    });\n                    \n                    return this.settings;\n                } catch (decryptionError) {\n                    this.logger.error('Failed to decrypt settings', { error: decryptionError.message });\n                    // Return default settings on decryption error\n                    return this.settings;\n                }\n            }\n        } catch (error) {\n            this.logger.error('Failed to load settings', { error: error.message });\n            // Return default settings on error\n            return this.settings;\n        }\n    }\n    \n    /**\n     * Save settings to storage\n     * @param {Object} settings - Settings to save (optional)\n     * @returns {Promise<void>}\n     */\n    async saveSettings(settings = null) {\n        try {\n            if (settings) {\n                this.settings = { ...this.settings, ...settings };\n            }\n\n            const jsonData = JSON.stringify(this.settings);\n\n            if (!this.encryptionInitialized) {\n                this.logger.warn('Encryption not initialized, saving settings without encryption');\n                localStorage.setItem(this.storageKey, jsonData);\n                this.logger.info('Settings saved successfully (unencrypted)', {\n                    hasEnvironmentId: !!this.settings.environmentId,\n                    hasApiClientId: !!this.settings.apiClientId,\n                    region: this.settings.region\n                });\n                window.dispatchEvent(new CustomEvent('settings:save-success', {\n                    detail: { message: 'Settings saved successfully (unencrypted).' }\n                }));\n                return;\n            }\n\n            try {\n                const encryptedData = await CryptoUtils.encrypt(jsonData, this.encryptionKey);\n                localStorage.setItem(this.storageKey, encryptedData);\n                this.logger.info('Settings saved successfully (encrypted)', {\n                    hasEnvironmentId: !!this.settings.environmentId,\n                    hasApiClientId: !!this.settings.apiClientId,\n                    region: this.settings.region\n                });\n                window.dispatchEvent(new CustomEvent('settings:save-success', {\n                    detail: { message: 'Settings saved successfully.' }\n                }));\n            } catch (encryptionError) {\n                this.logger.warn('Encryption failed, saving settings without encryption', { \n                    error: encryptionError.message \n                });\n                localStorage.setItem(this.storageKey, jsonData);\n                this.logger.info('Settings saved successfully (unencrypted fallback)', {\n                    hasEnvironmentId: !!this.settings.environmentId,\n                    hasApiClientId: !!this.settings.apiClientId,\n                    region: this.settings.region\n                });\n                window.dispatchEvent(new CustomEvent('settings:save-success', {\n                    detail: { message: 'Settings saved successfully (encryption failed, used fallback).' }\n                }));\n            }\n        } catch (error) {\n            this.logger.error('Failed to save settings', { error: error.message });\n            window.dispatchEvent(new CustomEvent('settings:save-error', {\n                detail: { message: `Failed to save settings: ${error.message}` }\n            }));\n            throw error;\n        }\n    }\n    \n    /**\n     * Get a specific setting\n     * @param {string} key - Setting key\n     * @returns {*} Setting value\n     */\n    getSetting(key) {\n        if (!key) {\n            throw new Error('Setting key is required');\n        }\n        \n        return this.settings[key];\n    }\n    \n    /**\n     * Set a specific setting\n     * @param {string} key - Setting key\n     * @param {*} value - Setting value\n     * @returns {Promise<void>}\n     */\n    async setSetting(key, value) {\n        if (!key) {\n            throw new Error('Setting key is required');\n        }\n        \n        try {\n            this.settings[key] = value;\n            await this.saveSettings();\n            \n            this.logger.debug('Setting updated', { key, value: typeof value === 'string' ? value : '[object]' });\n        } catch (error) {\n            this.logger.error('Failed to update setting', { key, error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Get all settings\n     * @returns {Object} All settings\n     */\n    getAllSettings() {\n        return { ...this.settings };\n    }\n    \n    /**\n     * Update multiple settings at once\n     * @param {Object} newSettings - New settings to update\n     * @returns {Promise<void>}\n     */\n    async updateSettings(newSettings) {\n        if (!newSettings || typeof newSettings !== 'object') {\n            throw new Error('New settings object is required');\n        }\n        \n        try {\n            this.settings = { ...this.settings, ...newSettings };\n            await this.saveSettings();\n            \n            this.logger.info('Multiple settings updated', {\n                updatedKeys: Object.keys(newSettings),\n                hasEnvironmentId: !!this.settings.environmentId,\n                hasApiClientId: !!this.settings.apiClientId\n            });\n        } catch (error) {\n            this.logger.error('Failed to update settings', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Reset settings to defaults\n     * @returns {Promise<void>}\n     */\n    async resetSettings() {\n        try {\n            this.settings = this.getDefaultSettings();\n            await this.saveSettings();\n            \n            this.logger.info('Settings reset to defaults');\n        } catch (error) {\n            this.logger.error('Failed to reset settings', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Clear all settings\n     * @returns {Promise<void>}\n     */\n    async clearSettings() {\n        try {\n            localStorage.removeItem(this.storageKey);\n            this.settings = this.getDefaultSettings();\n            \n            this.logger.info('Settings cleared');\n        } catch (error) {\n            this.logger.error('Failed to clear settings', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Initialize encryption with a key derived from browser and user-specific data\n     * @returns {Promise<void>}\n     */\n    async initializeEncryption() {\n        try {\n            let deviceId = await this.getDeviceId();\n            if (typeof deviceId !== 'string') deviceId = String(deviceId || '');\n            if (!deviceId) deviceId = 'fallback-device-id';\n            this.encryptionKey = await CryptoUtils.generateKey(deviceId);\n            this.logger.debug('Encryption initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize encryption', { error: error.message });\n            // Fallback to a less secure but functional approach\n            this.encryptionKey = await CryptoUtils.generateKey('fallback-encryption-key');\n            this.logger.warn('Using fallback encryption key');\n        }\n    }\n    \n    /**\n     * Generate a device ID based on browser and system information\n     * @returns {Promise<string>} A unique device ID\n     */\n    async getDeviceId() {\n        try {\n            // Try to get a stored device ID first\n            if (this.isLocalStorageAvailable()) {\n                const storedDeviceId = localStorage.getItem('pingone-device-id');\n                if (storedDeviceId && typeof storedDeviceId === 'string') {\n                    return storedDeviceId;\n                }\n            }\n            \n            // Generate device ID from browser info\n            const navigatorInfo = {\n                userAgent: navigator.userAgent,\n                platform: navigator.platform,\n                hardwareConcurrency: navigator.hardwareConcurrency,\n                deviceMemory: navigator.deviceMemory,\n                maxTouchPoints: navigator.maxTouchPoints\n            };\n            const encoder = new TextEncoder();\n            const data = encoder.encode(JSON.stringify(navigatorInfo));\n            const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n            const hashArray = Array.from(new Uint8Array(hashBuffer));\n            const deviceId = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n            \n            if (typeof deviceId !== 'string' || !deviceId) {\n                return 'fallback-device-id';\n            }\n            \n            return deviceId;\n        } catch (error) {\n            this.logger.error('Failed to generate device ID:', error);\n            // Fallback to a random string if crypto API fails\n            return 'fallback-' + Math.random().toString(36).substring(2, 15);\n        }\n    }\n    \n    /**\n     * Check if localStorage is available\n     * @returns {boolean} True if localStorage is available\n     */\n    isLocalStorageAvailable() {\n        try {\n            const test = 'test';\n            localStorage.setItem(test, test);\n            localStorage.removeItem(test);\n            return true;\n        } catch (error) {\n            this.logger.warn('localStorage not available', { error: error.message });\n            return false;\n        }\n    }\n    \n    /**\n     * Export settings (for backup)\n     * @returns {Promise<Object>} Export data\n     */\n    async exportSettings() {\n        try {\n            const exportData = {\n                settings: this.settings,\n                exportDate: new Date().toISOString(),\n                version: '1.0'\n            };\n            \n            this.logger.info('Settings exported', { exportDate: exportData.exportDate });\n            return exportData;\n        } catch (error) {\n            this.logger.error('Failed to export settings', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Import settings (from backup)\n     * @param {Object} importData - Import data object\n     * @returns {Promise<void>}\n     */\n    async importSettings(importData) {\n        if (!importData) {\n            throw new Error('Import data is required');\n        }\n        \n        if (!importData.settings) {\n            throw new Error('Invalid import data: missing settings');\n        }\n        \n        try {\n            this.settings = { ...this.getDefaultSettings(), ...importData.settings };\n            await this.saveSettings();\n            \n            this.logger.info('Settings imported successfully', {\n                importDate: importData.exportDate,\n                hasEnvironmentId: !!this.settings.environmentId,\n                hasApiClientId: !!this.settings.apiClientId\n            });\n        } catch (error) {\n            this.logger.error('Failed to import settings', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Debug method to check localStorage contents\n     * @returns {Object|null} Debug information\n     */\n    debugLocalStorage() {\n        try {\n            const storedData = localStorage.getItem(this.storageKey);\n            if (!storedData) {\n                this.logger.info('No data found in localStorage', { key: this.storageKey });\n                return null;\n            }\n            \n            this.logger.info('localStorage contents found', { \n                key: this.storageKey,\n                length: storedData.length,\n                preview: storedData.substring(0, 100) + (storedData.length > 100 ? '...' : '')\n            });\n            \n            // Try to parse as JSON\n            try {\n                const parsed = JSON.parse(storedData);\n                this.logger.info('Data is valid JSON', { \n                    keys: Object.keys(parsed),\n                    hasEnvironmentId: !!parsed.environmentId,\n                    hasApiClientId: !!parsed.apiClientId\n                });\n                return parsed;\n            } catch (jsonError) {\n                this.logger.info('Data is not valid JSON, likely encrypted', { \n                    error: jsonError.message \n                });\n                return 'encrypted';\n            }\n        } catch (error) {\n            this.logger.error('Failed to debug localStorage', { error: error.message });\n            return null;\n        }\n    }\n}\n\n// Export the SettingsManager class\nexport { SettingsManager };\n","/**\n * Local API Client\n * Handles all API calls to the local server (localhost:4000)\n */\n\nexport class LocalAPIClient {\n    /**\n     * Create a new LocalAPIClient instance\n     * @param {Object} logger - Logger instance\n     * @param {string} [baseUrl=''] - Base URL for the API (defaults to relative path)\n     */\n    constructor(logger, baseUrl = '') {\n        this.logger = logger || console;\n        this.baseUrl = baseUrl;\n        this.serverHealth = {\n            lastCheck: 0,\n            isHealthy: true,\n            consecutiveFailures: 0,\n            maxConsecutiveFailures: 3\n        };\n        this.healthCheckInterval = 30000; // 30 seconds\n    }\n\n    /**\n     * Check server health before making requests\n     * @private\n     */\n    async _checkServerHealth() {\n        const now = Date.now();\n        \n        // Only check health if enough time has passed since last check\n        if (now - this.serverHealth.lastCheck < this.healthCheckInterval) {\n            return this.serverHealth.isHealthy;\n        }\n\n        try {\n            const response = await fetch(`${this.baseUrl}/api/health`, {\n                method: 'GET',\n                headers: { 'Accept': 'application/json' },\n                signal: AbortSignal.timeout(5000) // 5 second timeout\n            });\n\n            if (response.ok) {\n                this.serverHealth.isHealthy = true;\n                this.serverHealth.consecutiveFailures = 0;\n                this.logger.debug('✅ Server health check passed');\n            } else {\n                this.serverHealth.isHealthy = false;\n                this.serverHealth.consecutiveFailures++;\n                this.logger.warn('⚠️ Server health check failed', { status: response.status });\n            }\n        } catch (error) {\n            this.serverHealth.isHealthy = false;\n            this.serverHealth.consecutiveFailures++;\n            this.logger.warn('⚠️ Server health check error', { error: error.message });\n        }\n\n        this.serverHealth.lastCheck = now;\n        return this.serverHealth.isHealthy;\n    }\n\n    /**\n     * Calculate exponential backoff delay\n     * @private\n     */\n    _calculateBackoffDelay(attempt, baseDelay, maxDelay) {\n        const exponentialDelay = baseDelay * Math.pow(2, attempt - 1);\n        const jitter = Math.random() * 0.1 * exponentialDelay; // Add 10% jitter\n        return Math.min(exponentialDelay + jitter, maxDelay);\n    }\n\n    /**\n     * Determine if a request should be retried based on error type\n     * @private\n     */\n    _shouldRetry(error, attempt, maxRetries) {\n        // Don't retry if we've reached max attempts\n        if (attempt >= maxRetries) {\n            return false;\n        }\n\n        // Retry on network errors (no status code)\n        if (!error.status) {\n            return true;\n        }\n\n        // Retry on server errors (5xx)\n        if (error.status >= 500) {\n            return true;\n        }\n\n        // Retry on rate limits (429)\n        if (error.status === 429) {\n            return true;\n        }\n\n        // Retry on timeout errors (408)\n        if (error.status === 408) {\n            return true;\n        }\n\n        // Don't retry on client errors (4xx except 429, 408)\n        return false;\n    }\n\n    /**\n     * Make an API request to the local server with enhanced retry logic\n     * @param {string} method - HTTP method (GET, POST, PUT, DELETE, etc.)\n     * @param {string} endpoint - API endpoint (without base URL)\n     * @param {Object} [data] - Request body (for POST/PUT/PATCH)\n     * @param {Object} [options] - Additional options\n     * @returns {Promise<Object>} Response data\n     */\n    async request(method, endpoint, data = null, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const startTime = Date.now();\n\n        // Enhanced options with retry logic\n        const requestOptions = {\n            ...options,\n            retries: options.retries || 3,\n            retryDelay: options.retryDelay || 1000, // 1 second base delay\n            maxRetryDelay: options.maxRetryDelay || 30000, // 30 seconds max delay\n            healthCheck: options.healthCheck !== false, // Enable health check by default\n            timeout: options.timeout || 10000 // 10 second timeout\n        };\n\n        // Check server health before making request (if enabled)\n        if (requestOptions.healthCheck && endpoint !== '/api/health') {\n            const isHealthy = await this._checkServerHealth();\n            if (!isHealthy && this.serverHealth.consecutiveFailures >= this.serverHealth.maxConsecutiveFailures) {\n                throw new Error('Server is unhealthy and unavailable for requests');\n            }\n        }\n\n        // Prepare headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n\n        // Add authorization if available\n        if (this.accessToken) {\n            headers.Authorization = `Bearer ${this.accessToken}`;\n        }\n\n        // Prepare request body\n        let body = null;\n        if (data && method !== 'GET') {\n            body = JSON.stringify(data);\n        }\n\n        // Log the request with minimal details to avoid rate limiting\n        const requestLog = {\n            type: 'api_request',\n            method,\n            url,\n            timestamp: new Date().toISOString(),\n            source: 'local-api-client'\n        };\n        this.logger.debug('🔄 Local API Request:', requestLog);\n\n        // Retry logic with exponential backoff\n        let lastError = null;\n        for (let attempt = 1; attempt <= requestOptions.retries; attempt++) {\n            try {\n                // Create abort controller for timeout\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), requestOptions.timeout);\n\n                const response = await fetch(url, {\n                    method,\n                    headers,\n                    body,\n                    signal: controller.signal\n                });\n\n                clearTimeout(timeoutId);\n\n                const responseData = await this._handleResponse(response);\n\n                // Log successful response with minimal details\n                const responseLog = {\n                    type: 'api_response',\n                    status: response.status,\n                    method,\n                    duration: Date.now() - startTime,\n                    attempt: attempt,\n                    source: 'local-api-client'\n                };\n                this.logger.debug('✅ Local API Response:', responseLog);\n\n                // Update server health on success\n                if (requestOptions.healthCheck) {\n                    this.serverHealth.isHealthy = true;\n                    this.serverHealth.consecutiveFailures = 0;\n                }\n\n                return responseData;\n            } catch (error) {\n                lastError = error;\n                \n                // Handle timeout errors\n                if (error.name === 'AbortError') {\n                    error.message = 'Request timeout';\n                    error.status = 408;\n                }\n\n                this.logger.error(`Local API Error (attempt ${attempt}/${requestOptions.retries}):`, error);\n\n                // Get the friendly error message if available\n                const friendlyMessage = error.friendlyMessage || error.message;\n                const isRateLimit = error.status === 429;\n\n                // Check if we should retry this error\n                if (!this._shouldRetry(error, attempt, requestOptions.retries)) {\n                    throw error;\n                }\n\n                // Calculate backoff delay\n                const baseDelay = isRateLimit ? (requestOptions.retryDelay * 2) : requestOptions.retryDelay;\n                const delay = this._calculateBackoffDelay(attempt, baseDelay, requestOptions.maxRetryDelay);\n\n                // Show appropriate UI messages based on error type\n                if (window.app && window.app.uiManager) {\n                    if (isRateLimit) {\n                        if (attempt < requestOptions.retries) {\n                            // Use enhanced rate limit warning with retry information\n                            window.app.uiManager.showRateLimitWarning(friendlyMessage, {\n                                isRetrying: true,\n                                retryAttempt: attempt,\n                                maxRetries: requestOptions.retries,\n                                retryDelay: delay\n                            });\n                        } else {\n                            window.app.uiManager.showError(friendlyMessage);\n                        }\n                    } else if (attempt === requestOptions.retries) {\n                        // For other errors, show friendly message on final attempt\n                        window.app.uiManager.showError(friendlyMessage);\n                    }\n                }\n\n                // Update server health on failure\n                if (requestOptions.healthCheck) {\n                    this.serverHealth.isHealthy = false;\n                    this.serverHealth.consecutiveFailures++;\n                }\n\n                // If this is the last attempt, throw with friendly message\n                if (attempt === requestOptions.retries) {\n                    throw error;\n                }\n\n                // Log retry attempt\n                this.logger.info(`Retrying request in ${delay}ms... (attempt ${attempt + 1}/${requestOptions.retries})`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n            }\n        }\n\n        // If all retries fail, throw the last error\n        throw lastError;\n    }\n\n    /**\n     * Handle API response\n     * @private\n     */\n    async _handleResponse(response) {\n        const contentType = response.headers.get('content-type');\n        let data;\n\n        if (contentType && contentType.includes('application/json')) {\n            data = await response.json();\n        } else {\n            data = await response.text();\n        }\n\n        if (!response.ok) {\n            let errorMessage;\n            \n            // Provide user-friendly error messages based on status code\n            switch (response.status) {\n                case 400:\n                    errorMessage = this._getBadRequestMessage(data, response.url);\n                    break;\n                case 401:\n                    errorMessage = this._getUnauthorizedMessage();\n                    break;\n                case 403:\n                    errorMessage = this._getForbiddenMessage(data, response.url);\n                    break;\n                case 404:\n                    errorMessage = this._getNotFoundMessage(data, response.url);\n                    break;\n                case 429:\n                    errorMessage = this._getRateLimitMessage();\n                    break;\n                case 500:\n                case 501:\n                case 502:\n                case 503:\n                case 504:\n                    errorMessage = this._getServerErrorMessage(response.status);\n                    break;\n                default:\n                    errorMessage = data.message || `Request failed with status ${response.status}`;\n            }\n            \n            const error = new Error(errorMessage);\n            error.status = response.status;\n            error.details = data;\n            error.friendlyMessage = errorMessage;\n            throw error;\n        }\n\n        return data;\n    }\n\n    /**\n     * Get user-friendly error message for 400 Bad Request errors\n     * @private\n     */\n    _getBadRequestMessage(data, url) {\n        // Check if it's an import endpoint error\n        if (url.includes('/import')) {\n            if (data && data.error) {\n                // Return the specific error message from the server\n                return data.error;\n            }\n            if (data && data.message) {\n                return data.message;\n            }\n            return '🔍 Import failed. Please check your CSV file and settings.';\n        }\n        \n        // Check if it's a user modification endpoint\n        if (url.includes('/users/') && url.includes('PUT')) {\n            return '🔍 User data validation failed. Please check the user information and try again.';\n        }\n        \n        // Check if it's a user creation endpoint\n        if (url.includes('/users') && url.includes('POST')) {\n            return '🔍 User creation failed due to invalid data. Please check required fields and try again.';\n        }\n        \n        // Check if it's a population-related error\n        if (url.includes('/populations')) {\n            return '🔍 Population data is invalid. Please check your population settings.';\n        }\n        \n        // Generic 400 error\n        return '🔍 Request data is invalid. Please check your input and try again.';\n    }\n\n    /**\n     * Get user-friendly error message for 401 Unauthorized errors\n     * @private\n     */\n    _getUnauthorizedMessage() {\n        return '🔑 Authentication failed. Please check your PingOne API credentials in the Settings page.';\n    }\n\n    /**\n     * Get user-friendly error message for 403 Forbidden errors\n     * @private\n     */\n    _getForbiddenMessage(data, url) {\n        // Check if it's a user modification endpoint\n        if (url.includes('/users/') && url.includes('PUT')) {\n            return '🚫 Permission denied. Your PingOne application may not have permission to modify users.';\n        }\n        \n        // Check if it's a user creation endpoint\n        if (url.includes('/users') && url.includes('POST')) {\n            return '🚫 Permission denied. Your PingOne application may not have permission to create users.';\n        }\n        \n        // Check if it's a user deletion endpoint\n        if (url.includes('/users/') && url.includes('DELETE')) {\n            return '🚫 Permission denied. Your PingOne application may not have permission to delete users.';\n        }\n        \n        // Generic 403 error\n        return '🚫 Access denied. Your PingOne application may not have the required permissions for this operation.';\n    }\n\n    /**\n     * Get user-friendly error message for 404 Not Found errors\n     * @private\n     */\n    _getNotFoundMessage(data, url) {\n        // Check if it's a user-related endpoint\n        if (url.includes('/users/')) {\n            return '🔍 User not found. The user may have been deleted or the ID is incorrect.';\n        }\n        \n        // Check if it's a population-related endpoint\n        if (url.includes('/populations')) {\n            return '🔍 Population not found. Please check your population settings.';\n        }\n        \n        // Check if it's an environment-related endpoint\n        if (url.includes('/environments/')) {\n            return '🔍 PingOne environment not found. Please check your environment ID.';\n        }\n        \n        // Generic 404 error\n        return '🔍 Resource not found. Please check the ID or settings and try again.';\n    }\n\n    /**\n     * Get user-friendly error message for 429 Too Many Requests errors\n     * @private\n     */\n    _getRateLimitMessage() {\n        return '⏰ You are sending requests too quickly. Please wait a moment and try again.';\n    }\n\n    /**\n     * Get user-friendly error message for 500+ server errors\n     * @private\n     */\n    _getServerErrorMessage(status) {\n        if (status >= 500) {\n            return '🔧 Server error. Please check your PingOne API credentials in the Settings page.';\n        }\n        return '🔧 An unexpected error occurred. Please try again.';\n    }\n\n    // Convenience methods for common HTTP methods\n    get(endpoint, options = {}) {\n        return this.request('GET', endpoint, null, options);\n    }\n\n    post(endpoint, data, options = {}) {\n        return this.request('POST', endpoint, data, options);\n    }\n\n    /**\n     * Send a POST request with FormData (for file uploads)\n     * @param {string} endpoint - API endpoint\n     * @param {FormData} formData - FormData object\n     * @param {Object} options - Additional options\n     * @returns {Promise<Object>} Response data\n     */\n    async postFormData(endpoint, formData, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const startTime = Date.now();\n\n        // Enhanced options with retry logic\n        const requestOptions = {\n            ...options,\n            retries: options.retries || 3,\n            retryDelay: options.retryDelay || 1000 // 1 second base delay\n        };\n\n        // Prepare headers for FormData (don't set Content-Type, let browser set it with boundary)\n        const headers = {\n            'Accept': 'application/json'\n        };\n\n        // Add authorization if available\n        if (this.accessToken) {\n            headers.Authorization = `Bearer ${this.accessToken}`;\n        }\n\n        // Log the request with minimal details to avoid rate limiting\n        const requestLog = {\n            type: 'api_request',\n            method: 'POST',\n            url,\n            timestamp: new Date().toISOString(),\n            source: 'local-api-client',\n            contentType: 'multipart/form-data'\n        };\n        this.logger.debug('🔄 Local API FormData Request:', requestLog);\n\n        // Retry logic\n        let lastError = null;\n        for (let attempt = 1; attempt <= requestOptions.retries; attempt++) {\n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers,\n                    body: formData\n                });\n\n                const responseData = await this._handleResponse(response);\n\n                // Log successful response with minimal details\n                const responseLog = {\n                    type: 'api_response',\n                    status: response.status,\n                    method: 'POST',\n                    duration: Date.now() - startTime,\n                    attempt: attempt,\n                    source: 'local-api-client'\n                };\n                this.logger.debug('✅ Local API FormData Response:', responseLog);\n\n                return responseData;\n            } catch (error) {\n                lastError = error;\n                this.logger.error(`Local API FormData Error (attempt ${attempt}/${requestOptions.retries}):`, error);\n\n                // Get the friendly error message if available\n                const friendlyMessage = error.friendlyMessage || error.message;\n                const isRateLimit = error.status === 429;\n\n                // Calculate baseDelay and delay here, before using them\n                const baseDelay = isRateLimit ? (requestOptions.retryDelay * 2) : requestOptions.retryDelay;\n                const delay = baseDelay * Math.pow(2, attempt - 1);\n\n                // Show appropriate UI messages based on error type\n                if (window.app && window.app.uiManager) {\n                    if (isRateLimit) {\n                        if (attempt < requestOptions.retries) {\n                            // Use enhanced rate limit warning with retry information\n                            window.app.uiManager.showRateLimitWarning(friendlyMessage, {\n                                isRetrying: true,\n                                retryAttempt: attempt,\n                                maxRetries: requestOptions.retries,\n                                retryDelay: delay\n                            });\n                        } else {\n                            window.app.uiManager.showError(friendlyMessage);\n                        }\n                    } else if (attempt === requestOptions.retries) {\n                        // For other errors, show friendly message on final attempt\n                        window.app.uiManager.showError(friendlyMessage);\n                    }\n                }\n\n                // If this is the last attempt, throw with friendly message\n                if (attempt === requestOptions.retries) {\n                    throw error;\n                }\n\n                // Only retry for rate limits (429) and server errors (5xx)\n                const shouldRetry = isRateLimit || error.status >= 500 || !error.status;\n                if (!shouldRetry) {\n                    // Don't retry for client errors (4xx except 429), throw immediately\n                    throw error;\n                }\n\n                // Use the delay calculated above\n                this.logger.info(`Retrying FormData request in ${delay}ms... (attempt ${attempt + 1}/${requestOptions.retries})`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n            }\n        }\n\n        // If all retries fail, throw the last error\n        throw lastError;\n    }\n\n    put(endpoint, data, options = {}) {\n        return this.request('PUT', endpoint, data, options);\n    }\n\n    delete(endpoint, options = {}) {\n        return this.request('DELETE', endpoint, null, options);\n    }\n\n    // Token Management Methods\n    \n    /**\n     * Retrieve PingOne worker token\n     * @returns {Promise<Object>} Token data with expiration info\n     */\n    async getWorkerToken() {\n        this.logger.debug('🔐 Retrieving PingOne worker token...');\n        \n        try {\n            const response = await this.post('/api/auth/worker-token', {}, {\n                timeout: 15000, // 15 second timeout for token retrieval\n                retries: 2 // Fewer retries for token operations\n            });\n            \n            this.logger.debug('✅ Worker token retrieved successfully');\n            return response;\n            \n        } catch (error) {\n            this.logger.error('❌ Failed to retrieve worker token:', error);\n            throw new Error(`Token retrieval failed: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Refresh existing PingOne worker token\n     * @param {string} currentToken - Current token for authorization\n     * @returns {Promise<Object>} Refreshed token data\n     */\n    async refreshWorkerToken(currentToken) {\n        this.logger.debug('🔄 Refreshing PingOne worker token...');\n        \n        if (!currentToken) {\n            throw new Error('Current token is required for refresh');\n        }\n        \n        try {\n            const response = await this.post('/api/auth/refresh-token', {}, {\n                headers: {\n                    'Authorization': `Bearer ${currentToken}`\n                },\n                timeout: 10000, // 10 second timeout for refresh\n                retries: 1 // Single retry for refresh operations\n            });\n            \n            this.logger.debug('✅ Worker token refreshed successfully');\n            return response;\n            \n        } catch (error) {\n            this.logger.error('❌ Failed to refresh worker token:', error);\n            throw new Error(`Token refresh failed: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Get current token status without retrieving the actual token\n     * @returns {Promise<Object>} Token status information\n     */\n    async getTokenStatus() {\n        this.logger.debug('🔍 Checking worker token status...');\n        \n        try {\n            const response = await this.get('/api/auth/token-status', {\n                timeout: 5000, // 5 second timeout for status check\n                retries: 1 // Single retry for status check\n            });\n            \n            this.logger.debug('✅ Token status retrieved successfully');\n            return response;\n            \n        } catch (error) {\n            this.logger.debug('ℹ️ Could not retrieve token status:', error.message);\n            // Don't throw for status checks - return null status\n            return {\n                success: false,\n                hasToken: false,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Clear/invalidate current worker token\n     * @returns {Promise<Object>} Clear operation result\n     */\n    async clearWorkerToken() {\n        this.logger.debug('🗑️ Clearing worker token...');\n        \n        try {\n            const response = await this.delete('/api/auth/worker-token', {\n                timeout: 5000, // 5 second timeout for clear operation\n                retries: 1 // Single retry for clear operation\n            });\n            \n            this.logger.debug('✅ Worker token cleared successfully');\n            return response;\n            \n        } catch (error) {\n            this.logger.error('❌ Failed to clear worker token:', error);\n            throw new Error(`Token clear failed: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Validate worker token and get detailed information\n     */\n    async validateToken(token = null) {\n        try {\n            const payload = token ? { token: token } : {};\n            const response = await this.post('/api/auth/validate-credentials', payload, {\n                timeout: 5000, // 5 second timeout for validation\n                retries: 1 // Single retry for validation\n            });\n            \n            return {\n                success: true,\n                valid: response.valid || false,\n                details: response.details || {},\n                message: response.message || 'Token validation completed'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                valid: false,\n                error: error.message,\n                message: 'Token validation failed'\n            };\n        }\n    }\n    \n    /**\n     * Test API connection\n     * @returns {Promise<Object>} Connection test result\n     */\n    async testConnection() {\n        try {\n            // CRITICAL: This MUST be a GET request to /api/pingone/test-connection\n            // Server endpoint: routes/pingone-proxy-fixed.js - router.get('/test-connection')\n            // DO NOT change to POST without updating server-side endpoint\n            // Last fixed: 2025-07-21 - Fixed HTTP method mismatch causing 400 Bad Request errors\n            const response = await this.get('/api/pingone/test-connection', {\n                timeout: 10000, // 10 second timeout for connection test\n                retries: 1 // Single retry for connection test\n            });\n            \n            return {\n                success: true,\n                connected: true,\n                details: response.details || {},\n                message: response.message || 'Connection successful'\n            };\n        } catch (error) {\n            return {\n                success: false,\n                connected: false,\n                error: error.message,\n                message: 'Connection test failed'\n            };\n        }\n    }\n}\n\n// Export a singleton instance\nexport const localAPIClient = new LocalAPIClient(console);\n","/**\n * @fileoverview PingOne Client Class\n * \n * Handles authentication and API communication with PingOne services.\n * Manages token acquisition, caching, and API requests with Winston logging.\n * \n * Features:\n * - Token management with localStorage caching\n * - Automatic token refresh\n * - API request handling with retry logic\n * - User import and modification operations\n * - Winston logging integration\n */\n\nimport { createWinstonLogger } from './winston-logger.js';\nimport { UIManager } from './ui-manager.js';\nconst ui = window.app && window.app.uiManager;\nfunction handleClientError(error) {\n    let userMessage = 'An unexpected error occurred. Please try again.';\n    if (error && error.message) {\n        if (error.message.includes('Network')) {\n            userMessage = 'Network error – check your connection.';\n        } else if (error.message.includes('timeout')) {\n            userMessage = 'Request timed out – try again.';\n        } else if (error.message.includes('401')) {\n            userMessage = 'Session expired – please log in again.';\n        } else if (error.message.includes('404')) {\n            userMessage = 'Resource not found.';\n        }\n    }\n    if (ui) ui.showStatusBar(userMessage, 'error');\n}\n\n/**\n * PingOne Client Class\n * \n * Manages PingOne API authentication and requests with Winston logging.\n */\nclass PingOneClient {\n    constructor() {\n        // Initialize browser-compatible logger\n        this.logger = {\n            info: (msg, data) => console.log(`[PingOneClient] ${msg}`, data || ''),\n            debug: (msg, data) => console.debug(`[PingOneClient] ${msg}`, data || ''),\n            warn: (msg, data) => console.warn(`[PingOneClient] ${msg}`, data || ''),\n            error: (msg, data) => console.error(`[PingOneClient] ${msg}`, data || '')\n        };\n        \n        this.accessToken = null;\n        this.tokenExpiry = null;\n        this.baseUrl = '/api/pingone';\n        \n        this.initialize();\n    }\n    \n    /**\n     * Initialize the client\n     */\n    initialize() {\n        try {\n            this.loadTokenFromStorage();\n            this.logger.info('PingOne client initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize PingOne client', { error: error.message });\n        }\n    }\n    \n    /**\n     * Load token from localStorage\n     */\n    loadTokenFromStorage() {\n        try {\n            if (typeof localStorage !== 'undefined') {\n                const storedToken = localStorage.getItem('pingone_worker_token');\n                const storedExpiry = localStorage.getItem('pingone_token_expiry');\n                \n                if (storedToken && storedExpiry) {\n                    const expiryTime = parseInt(storedExpiry, 10);\n                    const now = Date.now();\n                    \n                    if (expiryTime > now) {\n                        this.accessToken = storedToken;\n                        this.tokenExpiry = expiryTime;\n                        this.logger.info('Token loaded from storage', {\n                            hasToken: !!this.accessToken,\n                            expiryTime: new Date(this.tokenExpiry).toISOString()\n                        });\n                    } else {\n                        this.logger.warn('Stored token has expired');\n                        this.clearToken();\n                    }\n                } else {\n                    this.logger.debug('No stored token found');\n                }\n            } else {\n                this.logger.warn('localStorage is not available');\n            }\n        } catch (error) {\n            this.logger.error('Error loading token from storage', { error: error.message });\n        }\n    }\n    \n    /**\n     * Save token to localStorage\n     */\n    saveTokenToStorage(token, expiresIn) {\n        try {\n            if (typeof localStorage !== 'undefined') {\n                const expiryTime = Date.now() + (expiresIn * 1000);\n                \n                localStorage.setItem('pingone_worker_token', token);\n                localStorage.setItem('pingone_token_expiry', expiryTime.toString());\n                \n                this.accessToken = token;\n                this.tokenExpiry = expiryTime;\n                \n                this.logger.info('Token saved to storage', {\n                    tokenLength: token.length,\n                    expiresIn,\n                    expiryTime: new Date(expiryTime).toISOString()\n                });\n                \n                return true;\n            } else {\n                this.logger.warn('localStorage is not available, cannot save token');\n                return false;\n            }\n        } catch (error) {\n            this.logger.error('Error saving token to storage', { error: error.message });\n            return false;\n        }\n    }\n    \n    /**\n     * Clear token from storage\n     */\n    clearToken() {\n        try {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem('pingone_worker_token');\n                localStorage.removeItem('pingone_token_expiry');\n            }\n            \n            this.accessToken = null;\n            this.tokenExpiry = null;\n            \n            this.logger.info('Token cleared from storage');\n        } catch (error) {\n            this.logger.error('Error clearing token from storage', { error: error.message });\n        }\n    }\n    \n    /**\n     * Update credentials and clear existing token\n     * @param {Object} credentials - New credentials object\n     */\n    updateCredentials(credentials) {\n        try {\n            this.logger.info('Updating PingOne client credentials');\n            \n            // Clear existing token since credentials are changing\n            this.clearToken();\n            \n            // Store new credentials in localStorage\n            if (typeof localStorage !== 'undefined') {\n                localStorage.setItem('pingone_credentials', JSON.stringify(credentials));\n                this.logger.info('Credentials updated in localStorage');\n            }\n            \n            // Trigger a custom event to notify other components\n            window.dispatchEvent(new CustomEvent('credentials-updated', { \n                detail: { credentials } \n            }));\n            \n            this.logger.info('Credentials updated successfully');\n        } catch (error) {\n            this.logger.error('Error updating credentials', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Get cached token (alias for getCurrentTokenTimeRemaining for compatibility)\n     * Production-ready with comprehensive error handling and validation\n     */\n    getCachedToken() {\n        try {\n            // Validate token existence and format\n            if (!this.accessToken || typeof this.accessToken !== 'string') {\n                this.logger.debug('No valid cached token available');\n                return null;\n            }\n            \n            // Validate expiry timestamp\n            if (!this.tokenExpiry || typeof this.tokenExpiry !== 'number') {\n                this.logger.warn('Invalid token expiry timestamp');\n                this.clearToken(); // Clean up invalid state\n                return null;\n            }\n            \n            const now = Date.now();\n            const isExpired = this.tokenExpiry <= now;\n            \n            // Add buffer time (5 minutes) to prevent edge cases\n            const bufferTime = 5 * 60 * 1000; // 5 minutes in milliseconds\n            const isNearExpiry = (this.tokenExpiry - now) <= bufferTime;\n            \n            if (isExpired) {\n                this.logger.debug('Cached token is expired');\n                this.clearToken(); // Clean up expired token\n                return null;\n            }\n            \n            if (isNearExpiry) {\n                this.logger.warn('Token is near expiry, consider refreshing');\n            }\n            \n            // Validate token format (basic JWT structure check)\n            if (!this.accessToken.includes('.') || this.accessToken.split('.').length !== 3) {\n                this.logger.error('Invalid token format detected');\n                this.clearToken(); // Clean up invalid token\n                return null;\n            }\n            \n            this.logger.debug('Returning valid cached token');\n            return this.accessToken;\n        } catch (error) {\n            this.logger.error('Error getting cached token', { \n                error: error.message,\n                stack: error.stack,\n                tokenLength: this.accessToken ? this.accessToken.length : 0\n            });\n            // Don't expose token in logs for security\n            return null;\n        }\n    }\n    \n    /**\n     * Get current token time remaining\n     */\n    getCurrentTokenTimeRemaining() {\n        try {\n            if (!this.accessToken || !this.tokenExpiry) {\n                return {\n                    token: null,\n                    timeRemaining: null,\n                    isExpired: true\n                };\n            }\n            \n            const now = Date.now();\n            const timeRemaining = Math.max(0, this.tokenExpiry - now);\n            const isExpired = timeRemaining === 0;\n            \n            const timeRemainingFormatted = this.formatDuration(Math.floor(timeRemaining / 1000));\n            \n            // Only log debug message every 5 minutes (300000ms) to reduce noise\n            const lastLogTime = this.lastTokenTimeLog || 0;\n            const timeSinceLastLog = now - lastLogTime;\n            \n            if (timeSinceLastLog >= 300000) { // 5 minutes\n                this.logger.debug('Token time remaining calculated', {\n                    timeRemaining: timeRemainingFormatted,\n                    isExpired\n                });\n                this.lastTokenTimeLog = now;\n            }\n            \n            return {\n                token: this.accessToken,\n                timeRemaining: timeRemainingFormatted,\n                isExpired\n            };\n        } catch (error) {\n            this.logger.error('Error getting token time remaining', { error: error.message });\n            return {\n                token: null,\n                timeRemaining: null,\n                isExpired: true\n            };\n        }\n    }\n    \n    /**\n     * Format duration in human-readable format\n     */\n    formatDuration(seconds) {\n        if (seconds <= 0) return 'Expired';\n        \n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        \n        if (hours > 0) {\n            return `${hours}h ${minutes}m ${remainingSeconds}s`;\n        } else if (minutes > 0) {\n            return `${minutes}m ${remainingSeconds}s`;\n        } else {\n            return `${remainingSeconds}s`;\n        }\n    }\n    \n    /**\n     * Get an access token using client credentials flow\n     * @returns {Promise<string>} Access token\n     */\n    async getAccessToken() {\n        try {\n            this.logger.debug('getAccessToken called');\n            \n            // Check if we have a valid cached token\n            const tokenInfo = this.getCurrentTokenTimeRemaining();\n            if (tokenInfo.token && !tokenInfo.isExpired) {\n                this.logger.debug('Using cached token', { \n                    tokenPreview: tokenInfo.token.substring(0, 8) + '...',\n                    timeRemaining: tokenInfo.timeRemaining\n                });\n                return tokenInfo.token;\n            }\n            \n            this.logger.debug('Fetching token from /api/pingone/get-token');\n            \n            // Fetch new token from server\n            const response = await fetch('/api/pingone/get-token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    // You can add additional parameters here if needed\n                    // useOverrideCredentials: false\n                })\n            });\n            \n            this.logger.debug('Fetch response', { status: response.status, ok: response.ok });\n            \n            if (!response.ok) {\n                const errorMsg = await response.text();\n                this.logger.error('Fetch error', { status: response.status, error: errorMsg });\n                throw new Error(`Failed to get token: ${response.status} ${errorMsg}`);\n            }\n            \n            const data = await response.json();\n            this.logger.debug('Data received from server', { \n                hasAccessToken: !!data.access_token,\n                expiresIn: data.expires_in,\n                success: data.success\n            });\n            \n            if (!data.success) {\n                this.logger.warn('Server returned error', { data });\n                throw new Error(data.error || 'Failed to get token from server');\n            }\n            \n            if (!data.access_token) {\n                this.logger.warn('No access_token in server response', { data });\n                throw new Error('No access token received from server');\n            }\n            \n            // Save token to storage\n            const tokenSaved = this.saveTokenToStorage(data.access_token, data.expires_in || 3600);\n            \n            if (tokenSaved) {\n                this.logger.debug('Token saved to localStorage', {\n                    tokenLength: data.access_token.length,\n                    expiresIn: data.expires_in || 3600\n                });\n            } else {\n                this.logger.warn('Failed to store token in localStorage');\n            }\n            \n            return data.access_token;\n            \n        } catch (error) {\n            this.logger.error('Error in getAccessToken', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Make authenticated API request with retry logic\n     */\n    async makeRequest(method, url, data = null, retryAttempts = 3) {\n        try {\n            const token = await this.getAccessToken();\n            \n            for (let attempt = 1; attempt <= retryAttempts; attempt++) {\n                try {\n                    this.logger.debug(`Making API request (attempt ${attempt})`, { \n                        method, \n                        url,\n                        hasData: !!data\n                    });\n                    \n                    const requestOptions = {\n                        method,\n                        headers: {\n                            'Authorization': `Bearer ${token}`,\n                            'Content-Type': 'application/json'\n                        }\n                    };\n                    \n                    if (data) {\n                        requestOptions.body = JSON.stringify(data);\n                    }\n                    \n                    const response = await fetch(`${this.baseUrl}${url}`, requestOptions);\n                    \n                    this.logger.debug(`API request completed (attempt ${attempt})`, {\n                        status: response.status,\n                        ok: response.ok\n                    });\n                    \n                    if (response.ok) {\n                        const responseData = await response.json();\n                        return responseData;\n                    } else {\n                        const errorText = await response.text();\n                        this.logger.warn(`API request failed (attempt ${attempt})`, {\n                            status: response.status,\n                            error: errorText\n                        });\n                        \n                        if (attempt === retryAttempts) {\n                            throw new Error(`API request failed: ${response.status} ${errorText}`);\n                        }\n                    }\n                } catch (error) {\n                    this.logger.error(`API request error (attempt ${attempt})`, { error: error.message });\n                    \n                    if (attempt === retryAttempts) {\n                        throw error;\n                    }\n                    \n                    // Wait before retry\n                    await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n                }\n            }\n        } catch (error) {\n            this.logger.error('All API request attempts failed', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Get populations from PingOne API\n     */\n    async getPopulations(options = {}) {\n        try {\n            this.logger.info('Getting populations from PingOne API');\n            \n            const url = '/api/pingone/populations';\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            if (!response.ok) {\n                throw new Error(`Failed to fetch populations: ${response.status} ${response.statusText}`);\n            }\n            \n            return response;\n            \n        } catch (error) {\n            this.logger.error('Failed to get populations', { error: error.message });\n            throw error;\n        }\n    }\n\n    /**\n     * Import users from CSV data\n     */\n    async importUsers(csvData, options = {}) {\n        try {\n            this.logger.info('importUsers method called', { \n                userCount: csvData.length,\n                options: Object.keys(options)\n            });\n            \n            const {\n                populationId = null,\n                batchSize = 10,\n                retryAttempts = 3,\n                enableUsers = true,\n                skipDuplicatesByEmail = false,\n                skipDuplicatesByUsername = false\n            } = options;\n            \n            this.logger.debug('Initial setup completed', { batchSize, retryAttempts, enableUsers, skipDuplicatesByEmail, skipDuplicatesByUsername });\n            \n            // Validate input\n            if (!csvData || !Array.isArray(csvData) || csvData.length === 0) {\n                throw new Error('Invalid CSV data: must be a non-empty array');\n            }\n            \n            this.logger.debug('Input validation completed');\n            \n            // Handle population selection\n            let fallbackPopulationId = populationId;\n            \n            if (!fallbackPopulationId) {\n                const populationSelect = document.getElementById('import-population-select');\n                if (populationSelect && populationSelect.value) {\n                    fallbackPopulationId = populationSelect.value;\n                    this.logger.debug('Using selected population from dropdown', { fallbackPopulationId });\n                } else {\n                    // Try to get from settings\n                    const settings = JSON.parse(localStorage.getItem('pingone-import-settings') || '{}');\n                    fallbackPopulationId = settings.populationId;\n                    this.logger.debug('Using default population from settings', { fallbackPopulationId });\n                }\n            }\n            \n            // Prepare sets for duplicate detection\n            const seenEmails = new Set();\n            const seenUsernames = new Set();\n            \n            // Process users in batches\n            const totalUsers = csvData.length;\n            const results = {\n                success: true,\n                processed: 0,\n                created: 0,\n                skipped: 0,\n                failed: 0,\n                errors: []\n            };\n            \n            this.logger.debug('Starting user processing loop...');\n            \n            for (let i = 0; i < totalUsers; i += batchSize) {\n                const batch = csvData.slice(i, i + batchSize);\n                this.logger.debug(`Processing batch ${Math.floor(i/batchSize) + 1}`, { \n                    users: `${i+1}-${Math.min(i+batchSize, totalUsers)}`,\n                    batchSize: batch.length\n                });\n                \n                for (const user of batch) {\n                    try {\n                        const userPopulationId = user.populationId || fallbackPopulationId;\n                        \n                        if (!userPopulationId) {\n                            const error = `Missing population – user not processed. Username: ${user.email || user.username}`;\n                            results.errors.push(error);\n                            results.skipped++;\n                            continue;\n                        }\n                        \n                        // Duplicate detection\n                        if (skipDuplicatesByEmail && user.email) {\n                            if (seenEmails.has(user.email.toLowerCase())) {\n                                this.logger.info(`Skipping duplicate user by email: ${user.email}`);\n                                results.skipped++;\n                                continue;\n                            }\n                            seenEmails.add(user.email.toLowerCase());\n                        }\n                        if (skipDuplicatesByUsername && user.username) {\n                            if (seenUsernames.has(user.username.toLowerCase())) {\n                                this.logger.info(`Skipping duplicate user by username: ${user.username}`);\n                                results.skipped++;\n                                continue;\n                            }\n                            seenUsernames.add(user.username.toLowerCase());\n                        }\n                        \n                        // Create user\n                        const userData = {\n                            username: user.username || user.email,\n                            email: user.email,\n                            name: {\n                                given: user.firstName || user.givenName || '',\n                                family: user.lastName || user.familyName || ''\n                            },\n                            enabled: enableUsers,\n                            population: {\n                                id: userPopulationId\n                            }\n                        };\n                        \n                        // Add optional fields\n                        if (user.phoneNumber) userData.phoneNumber = user.phoneNumber;\n                        if (user.company) userData.company = user.company;\n                        \n                        const result = await this.createUser(userData, retryAttempts);\n                        \n                        if (result.success) {\n                            results.created++;\n                            // Disable user if requested\n                            if (!enableUsers && result.userId) {\n                                this.logger.debug(`Disabling user ${result.userId} after creation`);\n                                try {\n                                    await this.makeRequest('PATCH', `/environments/current/users/${result.userId}`, {\n                                        enabled: false\n                                    });\n                                    this.logger.debug(`Successfully disabled user ${result.userId}`);\n                                } catch (statusError) {\n                                    this.logger.warn(`Failed to disable user ${result.userId}`, { error: statusError.message });\n                                }\n                            }\n                        } else {\n                            results.failed++;\n                            results.errors.push(result.error);\n                        }\n                        \n                        results.processed++;\n                        \n                    } catch (error) {\n                        results.failed++;\n                        results.errors.push(error.message);\n                    }\n                }\n            }\n            \n            this.logger.info('Batch import summary', {\n                total: totalUsers,\n                processed: results.processed,\n                created: results.created,\n                skipped: results.skipped,\n                failed: results.failed\n            });\n            \n            return results;\n            \n        } catch (error) {\n            this.logger.error('Import users failed', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Create a single user\n     */\n    async createUser(userData, retryAttempts = 3) {\n        try {\n            for (let attempt = 1; attempt <= retryAttempts; attempt++) {\n                try {\n                    this.logger.debug(`Making API request for user ${userData.email || userData.username} (attempt ${attempt}/${retryAttempts})`);\n                    \n                    const result = await this.makeRequest('POST', '/environments/current/users', userData);\n                    \n                    this.logger.debug(`API request completed for user ${userData.email || userData.username}`);\n                    \n                    if (result.id) {\n                        const successMessage = `Successfully created user: ${userData.username || userData.email}`;\n                        this.logger.info(successMessage, { userId: result.id, populationId: userData.population.id });\n                        \n                        return {\n                            success: true,\n                            userId: result.id,\n                            user: result\n                        };\n                    } else {\n                        this.logger.warn('Invalid response structure - no ID found', { result });\n                        return {\n                            success: false,\n                            error: 'Invalid response structure'\n                        };\n                    }\n                    \n                } catch (error) {\n                    if (error.message.includes('already exists')) {\n                        this.logger.debug(`User already exists: ${userData.email || userData.username}`);\n                        return {\n                            success: true,\n                            userId: null,\n                            user: null,\n                            message: 'User already exists'\n                        };\n                    }\n                    \n                    this.logger.error(`API request failed for user ${userData.email || userData.username} (attempt ${attempt})`, { error: error.message });\n                    \n                    if (attempt === retryAttempts) {\n                        return {\n                            success: false,\n                            error: error.message\n                        };\n                    }\n                    \n                    // Wait before retry\n                    await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n                }\n            }\n        } catch (error) {\n            this.logger.error('Create user failed', { error: error.message, userData });\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n}\n\n// Create and export default instance\nconst pingOneClient = new PingOneClient();\n\n// Export the class and instance\nexport { PingOneClient, pingOneClient };"],"file":"assets/pingone-client-X8mLxZeL.js"}