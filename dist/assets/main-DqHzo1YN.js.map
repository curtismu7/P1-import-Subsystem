{"version":3,"mappings":"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","names":["BrowserLoggingService","options","level","message","meta","entry","timestamp","correlationId","consoleMessage","error","transport","label","startTime","duration","additionalMeta","childLogger","originalFormatLogEntry","createLogger","ClientDebugLogger","category","data","formattedEntry","dataString","errorData","eventName","eventData","operation","perfData","from","to","method","url","status","action","element","component","state","flag","enabled","name","clientDebugLogger","getClientDebugLogger","debugLog","CentralizedLogger","masked","key","pattern","formattedMessage","maskedData","logEntry","childComponent","module","SafeDOM$1","logger","msg","selector","context","elements","id","text","html","event","handler","className","SafeDOM","ErrorHandler$1","asyncFn","userMessage","retries","retryDelay","fallbackValue","suppressErrors","rethrow","args","attempt","syncFn","code","originalError","suppress","additionalData","uiManager","displayMessage","fn","response","errorMessage","errorBody","jsonError","arg","ms","resolve","ErrorHandler","API_CONFIG","UI_CONFIG","MESSAGES","BUSINESS_CONFIG","safeDOM","errorHandler","EventBus","h","eventBus","UIManager","errorManager","ElementRegistry","type","autoDismiss","errorId","logLevel","logContext","dismiss","e","force","details","errorObj","errorContext","invalidError","mergedContext","successMessage","current","total","percentage","progressBar","percentageElement","progressText","tokenInfo","isValid","expiresAt","timeRemaining","timeRemainingText","tokenStatusBar","statusContent","icon","time","isLoading","homeTokenStatus","hasValidToken","buttonClass","buttonText","sidebar","debugLabel","getTokenBtn","token","expiry","expiryTime","now","settingsStatus","iconClass","settingsActionStatus","icons","importStatus","statusText","progressContainer","el","isVisible","rect","buttonId","button","populations","populationSelects","select","currentValue","defaultOption","population","option","title","shouldAutoDismiss","counts","populationName","populationId","value","statElement","populationElement","operationType","totalUsers","operationTypeElement","sessionId","sessionElement","results","processed","success","failed","skipped","duplicates","onDecision","area","fullMessage","TokenManager","settings","retryFn","newToken","requestFn","retryCount","responseText","requestArgs","expiresIn","region","apiClientId","apiSecret","environmentId","requestId","authDomain","tokenUrl","credentials","responseTime","responseData","errorMsg","expiresInMs","newSettings","credentialsChanged","DisclaimerModal$1","_a","overlay","focusableElements","firstElement","lastElement","focusableSelectors","appContainer","item","card","warning","announcement","logMessage","__publicField","disclaimerInitialized","initializeDisclaimer","isAccepted","DisclaimerModal","CredentialsModal","hasCredentials","btn","useButton","userTitle","result","verifyResponse","verifyData","savedSettings","tokenResult","lastError","tokenData","apiError","authError","waitTime","notification","notificationArea","modal","existingError","errorDiv","modalBody","settingsNav","originalIcon","err","shouldShow","ImportSubsystem","localClient","settingsManager","populationService","authManagementSubsystem","importBtn","csvFileInput","file","populationSelect","dropArea","fileInput","files","dataTransfer","popSelect","selectedOption","formData","authStatus","existingModal","settingsBtn","closeBtn","settingsNavItem","hasFile","hasPopulation","shouldEnable","recordCount","csvData","fileContent","parseError","fileInfoElement","errorHTML","reject","reader","content","lines","line","fields","inQuotes","i","char","row","field","fileSize","lastModified","fileType","fileExtension","isValidType","recordCountHTML","fileInfoHTML","bytes","k","sizes","filename","populationNameDisplay","apiUrlDisplay","apiUrl","ExportSubsystem","initAction","exportBtn","formatSelect","exportAction","config","validationAction","getAction","includeHeaders","limitUsers","userLimit","isLimitEnabled","downloadAction","link","format","downloadDataAction","mimeType","extension","blob","convertAction","headers","csvHeaders","csvRows","header","loadAction","populateAction","p","optionsAdded","pop","changeAction","updateAction","headersOption","showOptionsAction","optionsContainer","hideOptionsAction","showProgressAction","hideProgressAction","checkAction","refreshAction","OperationManagerSubsystem","apiClient","importData","exportData","deleteData","modifyData","eventSource","poll","progressData","preCheck","validator","postCheck","commonPreCheck","commonPostCheck","stats","totalDuration","op","NavigationSubsystem","view","pushToHistory","viewElement","container","titles","baseTitle","viewTitle","initializer","cleanup","fromView","previousEntry","ConnectionManagerSubsystem","testCredentials","tokenCredentials","missing","cachedToken","timeUntilExpiry","refreshThreshold","listener","listeners","index","RealtimeCommunicationSubsystem","preferredTransport","enableFallback","timeout","io","__vitePreload","connectionTimeout","sseUrl","wsUrl","fallbackOrder","reason","delay","handlers","AuthManagementSubsystem","settingsSubsystem","testConnectionBtn","globalRefreshBtn","settingsForm","refreshTime","required","globalTokenStatus","tokenIndicator","refreshTokenBtn","isConnected","connectionStatus","ViewManagementSubsystem","updateHistory","currentViewElement","analyticsContainer","initialView","hash","newView","oldView","GlobalTokenManagerSubsystem","countdown","statusElement","mutations","mutation","node","statusBox","timeLeft","formattedTime","seconds","hours","minutes","secs","currentTime","serverTokenInfo","serverError","refreshBtn","WinstonLogger","levelUpper","errorMeta","createWinstonLogger","createComponentLogger","TokenNotificationSubsystem","navigationSubsystem","existing","mainContent","goToSettingsBtn","AdvancedRealtimeSubsystem","realtimeCommunication","sessionSubsystem","progressSubsystem","presenceData","updateData","analyticsData","streamData","roomId","userInfo","room","userId","user","operationId","progressStream","subscriberId","stream","notificationData","recipientId","queue","sum","start","latency","RealtimeCollaborationUI","advancedRealtimeSubsystem","dashboardData","userName","roomData","usersList","userCount","userElement","progressList","progressCount","progressElement","notificationsList","notificationCount","notificationElement","stage","date","diff","AnalyticsDashboardSubsystem","systemMetrics","resourceMetrics","connectionMetrics","operationData","userMetrics","realtimeMetrics","count","totalTime","session","recentMetrics","metric","oneHourAgo","recentErrors","recentOperations","memory","timing","iterations","testDuration","endTime","cpuScore","connection","firstPaint","navEntries","nav","milliseconds","days","activity","limit","recentActivity","errorMetric","timeRange","performanceData","resourceData","connectionData","imports","exports","modifications","deletions","callback","main","sub","units","match","unit","cutoffTime","resources","r","memoryUsage","recentLatency","errorRate","severity","alert","a","EnhancedProgressSubsystem","realtimeComm","containerId","operationTitle","viewContainer","cancelBtn","elapsed","rate","remaining","eta","updates","remainingSeconds","EnhancedTokenStatusSubsystem","indicator","logData","LoggingSubsystem","offset","search","startDate","endDate","filteredLogs","log","searchLower","paginatedLogs","previousCount","logs","dataStr","prefix","HistorySubsystem","loggingSubsystem","description","sortBy","sortOrder","filteredHistory","b","aValue","bValue","paginatedHistory","historyData","durationCount","filter","includeData","history","stored","parsedHistory","deleted","PopulationSubsystem","useCache","cached","dropdownId","includeEmpty","emptyText","emptyValue","dropdown","filteredPopulations","emptyOption","refreshPromises","comparison","age","searchTerm","SettingsSubsystem","credentialsManager","saveBtn","testBtn","tokenBtn","toggleBtn","validation","credentialsUpdatedEvent","form","errors","fieldId","secretField","FileHandler","savedFile","folderPath","pathParts","fileName","lastSlashIndex","storageKey","operationKey","fileLabel","lastFolderPath","shortPath","path","maxLength","parts","firstPart","lastPart","middleParts","fileInfo","fileData","newFileInput","fileExt","maxSize","parseResults","fileInfoContainerId","rows","missingHeaders","requiredHeaders","recommendedHeaders","missingRequired","hasHeader","headerLower","mappedHeader","matches","missingRecommended","warningMsg","users","warnings","rowNumber","validationResult","w","validationSummary","errorDetails","delimiter","nextChar","values","valueLower","summary","email","username","filePath","fileSizeInKB","fileSizeInMB","importBtnBottom","previewRows","hasPopulationChoice","selectedPopulationId","useDefaultPopulation","useCsvPopulationId","lastDot","lastSlash","charset","password","dropZone","preventDefaultDragEvents","handleGlobalDrop","currentView","targetDropZone","handleGlobalDragEnter","handleGlobalDragLeave","activeView","viewId","VersionManager","importButton","baseText","versionText","existingTopLeftBadge","existingSidebarBadge","badge","footer","footerLeft","logoDiv","PACKET_TYPES","PACKET_TYPES_REVERSE","ERROR_PACKET","withNativeBlob","withNativeArrayBuffer","isView","obj","encodePacket","supportsBinary","encodeBlobAsBase64","fileReader","toArray","TEXT_ENCODER","encodePacketToBinary","packet","encoded","chars","lookup","decode","base64","bufferLength","len","encoded1","encoded2","encoded3","encoded4","arraybuffer","decodePacket","encodedPacket","binaryType","mapBinary","decodeBase64Packet","decoded","SEPARATOR","encodePayload","packets","length","encodedPackets","decodePayload","encodedPayload","decodedPacket","createPacketEncoderStream","controller","payloadLength","TEXT_DECODER","totalLength","chunks","acc","chunk","concatChunks","size","buffer","j","createPacketDecoderStream","maxPayload","expectedLength","isBinary","headerArray","n","protocol","Emitter","mixin","on","callbacks","cb","nextTick","setTimeoutFn","globalThisShim","defaultBinaryType","pick","attr","NATIVE_SET_TIMEOUT","globalThis","NATIVE_CLEAR_TIMEOUT","installTimerFunctions","opts","BASE64_OVERHEAD","byteLength","utf8Length","str","c","l","randomString","encode","qs","qry","pairs","pair","TransportError","Transport","onPause","schema","query","hostname","encodedQuery","Polling","pause","close","hasCORS","empty","BaseXHR","isSSL","port","req","xhrStatus","Request","createRequest","uri","xhr","fromError","unloadHandler","terminationEvent","hasXHR2","newRequest","XHR","forceBase64","xdomain","isReactNative","BaseWS","protocols","closeEvent","ev","lastPacket","WebSocketCtor","WS","_packet","WT","decoderStream","encoderStream","read","done","transports","re","parse","src","m","pathNames","queryKey","regx","names","$0","$1","$2","withEventListeners","OFFLINE_EVENT_LISTENERS","SocketWithoutUpgrade","parsedUri","t","transportName","payloadSize","hasExpired","cleanupAndClose","waitForUpgrade","SocketWithUpgrade","onTransportOpen","freezeTransport","onerror","onTransportClose","onclose","onupgrade","upgrades","filteredUpgrades","o","DEFAULT_TRANSPORTS","loc","host","toString","withNativeFile","hasBinary","toJSON","deconstructPacket","buffers","packetData","pack","_deconstructPacket","placeholder","newData","reconstructPacket","_reconstructPacket","RESERVED_EVENTS","PacketType","Encoder","replacer","deconstruction","isObject","Decoder","reviver","isBinaryEvent","BinaryReconstructor","buf","next","payload","binData","Socket","nsp","_b","_c","ack","isTransportWritable","timer","arg1","arg2","responseArgs","self","sent","pid","subDestroy","compress","Backoff","rand","deviation","min","max","jitter","Manager","_parser","parser","v","Engine","socket","openSubDestroy","onError","errorSub","nsps","cache","parsed","source","sameNamespace","newConnection","FEATURE_FLAGS","isFeatureEnabled","featureName","App","Logger","initTime","startupScreen","LocalAPIClient","SettingsManager","PingOneClient","subsystemsToInit","resolvedDeps","dep","rejectionData","cancelImportBtn","titleElement","messageElement","textElement","navElements","clickHandler","saveSettingsBtn","toggleSecretBtn","clientId","clientSecret","rateLimit","fieldMappings","secretInput","iconElement","allViews","targetView","viewName","subsystem","app"],"ignoreList":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"sources":["../../src/client/utils/browser-logging-service.js","../../src/client/utils/debug-logger.js","../../public/js/utils/centralized-logger.js","../../public/js/utils/safe-dom.js","../../public/js/utils/error-handler.js","../../public/js/utils/config-constants.js","../../public/js/utils/utility-loader.js","../../public/js/modules/event-bus.js","../../src/client/components/ui-manager.js","../../public/js/modules/token-manager.js","../../public/js/modules/disclaimer-modal.js","../../public/js/modules/credentials-modal.js","../../src/client/subsystems/import-subsystem.js","../../src/client/subsystems/export-subsystem.js","../../src/client/subsystems/operation-manager-subsystem.js","../../src/client/subsystems/navigation-subsystem.js","../../src/client/subsystems/connection-manager-subsystem.js","../../src/client/subsystems/realtime-communication-subsystem.js","../../src/client/subsystems/auth-management-subsystem.js","../../src/client/subsystems/view-management-subsystem.js","../../src/client/subsystems/global-token-manager-subsystem.js","../../src/client/utils/winston-logger.js","../../src/client/subsystems/token-notification-subsystem.js","../../src/client/subsystems/advanced-realtime-subsystem.js","../../src/client/components/realtime-collaboration-ui.js","../../src/client/subsystems/analytics-dashboard-subsystem.js","../../src/client/components/testing-hub.js","../../src/client/subsystems/enhanced-progress-subsystem.js","../../src/client/subsystems/enhanced-token-status-subsystem.js","../../public/js/modules/logging-subsystem.js","../../public/js/modules/history-subsystem.js","../../public/js/modules/population-subsystem.js","../../public/js/modules/settings-subsystem.js","../../public/js/modules/file-handler.js","../../public/js/modules/version-manager.js","../../node_modules/engine.io-parser/build/esm/commons.js","../../node_modules/engine.io-parser/build/esm/encodePacket.browser.js","../../node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js","../../node_modules/engine.io-parser/build/esm/decodePacket.browser.js","../../node_modules/engine.io-parser/build/esm/index.js","../../node_modules/@socket.io/component-emitter/lib/esm/index.js","../../node_modules/engine.io-client/build/esm/globals.js","../../node_modules/engine.io-client/build/esm/util.js","../../node_modules/engine.io-client/build/esm/contrib/parseqs.js","../../node_modules/engine.io-client/build/esm/transport.js","../../node_modules/engine.io-client/build/esm/transports/polling.js","../../node_modules/engine.io-client/build/esm/contrib/has-cors.js","../../node_modules/engine.io-client/build/esm/transports/polling-xhr.js","../../node_modules/engine.io-client/build/esm/transports/websocket.js","../../node_modules/engine.io-client/build/esm/transports/webtransport.js","../../node_modules/engine.io-client/build/esm/transports/index.js","../../node_modules/engine.io-client/build/esm/contrib/parseuri.js","../../node_modules/engine.io-client/build/esm/socket.js","../../node_modules/socket.io-client/build/esm/url.js","../../node_modules/socket.io-parser/build/esm/is-binary.js","../../node_modules/socket.io-parser/build/esm/binary.js","../../node_modules/socket.io-parser/build/esm/index.js","../../node_modules/socket.io-client/build/esm/on.js","../../node_modules/socket.io-client/build/esm/socket.js","../../node_modules/socket.io-client/build/esm/contrib/backo2.js","../../node_modules/socket.io-client/build/esm/manager.js","../../node_modules/socket.io-client/build/esm/index.js","../../src/shared/feature-flags.js","../../src/client/app.js"],"sourcesContent":["/**\n * Browser-Compatible Logging Service\n * \n * Provides unified logging for browser environment with:\n * - Correlation IDs for request tracking\n * - Structured logging with metadata\n * - Console and server transports\n * - Log level filtering\n * - Performance monitoring\n */\n\nexport class BrowserLoggingService {\n    constructor(options = {}) {\n        this.serviceName = options.serviceName || 'pingone-import-client';\n        this.environment = options.environment || 'development';\n        this.logLevel = options.logLevel || this.getDefaultLogLevel();\n        this.enableConsole = options.enableConsole !== false;\n        this.enableServer = options.enableServer !== false;\n        \n        // Log levels hierarchy\n        this.levels = {\n            error: 0,\n            warn: 1,\n            info: 2,\n            debug: 3\n        };\n        \n        // Correlation ID for request tracking\n        this.correlationId = this.generateCorrelationId();\n        \n        // Performance tracking\n        this.performanceMarks = new Map();\n        \n        this.initializeTransports();\n    }\n    \n    /**\n     * Get default log level based on environment\n     */\n    getDefaultLogLevel() {\n        switch (this.environment) {\n            case 'production': return 'info';\n            case 'test': return 'warn';\n            default: return 'debug';\n        }\n    }\n    \n    /**\n     * Generate correlation ID for request tracking\n     */\n    generateCorrelationId() {\n        return `${this.serviceName}-${Date.now()}-${Math.random().toString(36).substr(2, 8)}`;\n    }\n    \n    /**\n     * Initialize logging transports\n     */\n    initializeTransports() {\n        this.transports = [];\n        \n        if (this.enableConsole) {\n            this.transports.push({\n                name: 'console',\n                log: this.logToConsole.bind(this)\n            });\n        }\n        \n        if (this.enableServer) {\n            this.transports.push({\n                name: 'server',\n                log: this.logToServer.bind(this)\n            });\n        }\n    }\n    \n    /**\n     * Check if log level should be processed\n     */\n    shouldLog(level) {\n        return this.levels[level] <= this.levels[this.logLevel];\n    }\n    \n    /**\n     * Format log entry with metadata\n     */\n    formatLogEntry(level, message, meta = {}) {\n        return {\n            timestamp: new Date().toISOString(),\n            level: level.toUpperCase(),\n            message,\n            service: this.serviceName,\n            environment: this.environment,\n            correlationId: this.correlationId,\n            source: 'client',\n            url: window.location.href,\n            userAgent: navigator.userAgent,\n            ...meta\n        };\n    }\n    \n    /**\n     * Log to console with formatting\n     */\n    logToConsole(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        const entry = this.formatLogEntry(level, message, meta);\n        const timestamp = entry.timestamp;\n        const correlationId = entry.correlationId.slice(-8);\n        \n        let consoleMessage = `[${timestamp}] [${correlationId}] [${entry.service}] ${level.toUpperCase()}: ${message}`;\n        \n        if (Object.keys(meta).length > 0) {\n            consoleMessage += `\\n${JSON.stringify(meta, null, 2)}`;\n        }\n        \n        switch (level) {\n            case 'error':\n                console.error(consoleMessage);\n                break;\n            case 'warn':\n                console.warn(consoleMessage);\n                break;\n            case 'info':\n                console.info(consoleMessage);\n                break;\n            case 'debug':\n                console.debug(consoleMessage);\n                break;\n            default:\n                console.log(consoleMessage);\n        }\n    }\n    \n    /**\n     * Log to server via API endpoint\n     */\n    async logToServer(level, message, meta = {}) {\n        try {\n            const entry = this.formatLogEntry(level, message, meta);\n            \n            await fetch('/api/logs/client', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(entry)\n            });\n            \n        } catch (error) {\n            // Silently fail to avoid infinite loops\n            if (this.enableConsole) {\n                console.warn('Failed to send log to server:', error.message);\n            }\n        }\n    }\n    \n    /**\n     * Main logging method\n     */\n    log(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        this.transports.forEach(transport => {\n            try {\n                transport.log(level, message, meta);\n            } catch (error) {\n                console.error(`Error in ${transport.name} transport:`, error);\n            }\n        });\n    }\n    \n    /**\n     * Convenience methods\n     */\n    error(message, meta = {}) {\n        this.log('error', message, meta);\n    }\n    \n    warn(message, meta = {}) {\n        this.log('warn', message, meta);\n    }\n    \n    info(message, meta = {}) {\n        this.log('info', message, meta);\n    }\n    \n    debug(message, meta = {}) {\n        this.log('debug', message, meta);\n    }\n    \n    /**\n     * Performance monitoring\n     */\n    startTimer(label) {\n        this.performanceMarks.set(label, performance.now());\n        this.debug(`Timer started: ${label}`);\n    }\n    \n    endTimer(label, meta = {}) {\n        const startTime = this.performanceMarks.get(label);\n        if (!startTime) {\n            this.warn(`Timer not found: ${label}`);\n            return 0;\n        }\n        \n        const duration = performance.now() - startTime;\n        this.performanceMarks.delete(label);\n        \n        this.info(`Timer completed: ${label}`, {\n            duration: `${duration.toFixed(2)}ms`,\n            ...meta\n        });\n        \n        return duration;\n    }\n    \n    /**\n     * Create child logger with additional context\n     */\n    child(additionalMeta = {}) {\n        const childLogger = new BrowserLoggingService({\n            serviceName: this.serviceName,\n            environment: this.environment,\n            logLevel: this.logLevel,\n            enableConsole: this.enableConsole,\n            enableServer: this.enableServer\n        });\n        \n        // Override formatLogEntry to include additional metadata\n        const originalFormatLogEntry = childLogger.formatLogEntry.bind(childLogger);\n        childLogger.formatLogEntry = (level, message, meta = {}) => {\n            return originalFormatLogEntry(level, message, {\n                ...additionalMeta,\n                ...meta\n            });\n        };\n        \n        return childLogger;\n    }\n    \n    /**\n     * Set correlation ID (useful for request tracking)\n     */\n    setCorrelationId(correlationId) {\n        this.correlationId = correlationId;\n    }\n    \n    /**\n     * Get current correlation ID\n     */\n    getCorrelationId() {\n        return this.correlationId;\n    }\n}\n\n/**\n * Create logger instance\n */\nexport function createLogger(options = {}) {\n    return new BrowserLoggingService(options);\n}\n\n/**\n * Default logger instance\n */\nexport const logger = createLogger({\n    serviceName: 'pingone-import-client'\n});\n\nexport default BrowserLoggingService;","/**\n * Client-Side Debug Logger\n * \n * Browser-compatible version of the debug logger that sends logs to the server.\n */\n\nclass ClientDebugLogger {\n    constructor() {\n        this.sessionId = this.generateSessionId();\n        this.isClient = true;\n        \n        // Initialize with session start\n        this.log('SESSION_START', 'Client debug logging session started', {\n            timestamp: new Date().toISOString(),\n            sessionId: this.sessionId,\n            userAgent: navigator.userAgent,\n            url: window.location.href\n        });\n    }\n    \n    generateSessionId() {\n        return 'client_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    }\n    \n    formatLogEntry(level, category, message, data = {}) {\n        const timestamp = new Date().toISOString();\n        const entry = {\n            timestamp,\n            sessionId: this.sessionId,\n            level: level.toUpperCase(),\n            category: category.toUpperCase(),\n            message,\n            environment: 'client',\n            url: window.location.href,\n            data: data || {}\n        };\n        \n        // Format as readable string\n        const formattedEntry = `[${timestamp}] [${this.sessionId}] [CLIENT] [${level.toUpperCase()}] [${category.toUpperCase()}] ${message}`;\n        const dataString = Object.keys(data).length > 0 ? `\\n  Data: ${JSON.stringify(data, null, 2)}` : '';\n        \n        return formattedEntry + dataString + '\\n' + '-'.repeat(80) + '\\n';\n    }\n    \n    async sendToServer(entry) {\n        try {\n            await fetch('/api/debug-log', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ entry })\n            });\n        } catch (error) {\n            console.error('Failed to send debug log to server:', error);\n        }\n    }\n    \n    // Main logging method\n    log(category, message, data = {}) {\n        const entry = this.formatLogEntry('info', category, message, data);\n        this.sendToServer(entry);\n        \n        // Also log to console in development\n        console.log(`🐛 [${category.toUpperCase()}] ${message}`, data);\n    }\n    \n    // Error logging\n    error(category, message, error = null, data = {}) {\n        const errorData = {\n            ...data,\n            error: error ? {\n                message: error.message,\n                stack: error.stack,\n                name: error.name\n            } : null\n        };\n        \n        const entry = this.formatLogEntry('error', category, message, errorData);\n        this.sendToServer(entry);\n        \n        // Always log errors to console\n        console.error(`🚨 [${category.toUpperCase()}] ${message}`, errorData);\n    }\n    \n    // Warning logging\n    warn(category, message, data = {}) {\n        const entry = this.formatLogEntry('warn', category, message, data);\n        this.sendToServer(entry);\n        \n        console.warn(`⚠️ [${category.toUpperCase()}] ${message}`, data);\n    }\n    \n    // Debug logging\n    debug(category, message, data = {}) {\n        const entry = this.formatLogEntry('debug', category, message, data);\n        this.sendToServer(entry);\n        \n        console.debug(`🔍 [${category.toUpperCase()}] ${message}`, data);\n    }\n    \n    // Event logging\n    event(category, eventName, data = {}) {\n        const eventData = {\n            eventName,\n            ...data\n        };\n        \n        const entry = this.formatLogEntry('event', category, `Event: ${eventName}`, eventData);\n        this.sendToServer(entry);\n        \n        console.log(`📊 [${category.toUpperCase()}] Event: ${eventName}`, eventData);\n    }\n    \n    // Performance logging\n    performance(category, operation, duration, data = {}) {\n        const perfData = {\n            operation,\n            duration: `${duration}ms`,\n            ...data\n        };\n        \n        const entry = this.formatLogEntry('perf', category, `Performance: ${operation}`, perfData);\n        this.sendToServer(entry);\n        \n        console.log(`⚡ [${category.toUpperCase()}] Performance: ${operation} (${duration}ms)`, perfData);\n    }\n    \n    // Navigation logging\n    navigation(from, to, data = {}) {\n        this.event('navigation', 'view_change', {\n            from,\n            to,\n            ...data\n        });\n    }\n    \n    // API logging\n    api(method, url, status, duration, data = {}) {\n        this.event('api', 'request', {\n            method,\n            url,\n            status,\n            duration: `${duration}ms`,\n            ...data\n        });\n    }\n    \n    // User action logging\n    userAction(action, element, data = {}) {\n        this.event('user', action, {\n            element,\n            ...data\n        });\n    }\n    \n    // System state logging\n    systemState(component, state, data = {}) {\n        this.log('system', `${component} state: ${state}`, data);\n    }\n    \n    // Feature flag logging\n    featureFlag(flag, enabled, data = {}) {\n        this.log('feature', `Feature flag ${flag}: ${enabled ? 'enabled' : 'disabled'}`, data);\n    }\n    \n    // Subsystem logging\n    subsystem(name, action, data = {}) {\n        this.log('subsystem', `${name}: ${action}`, data);\n    }\n}\n\n// Create singleton instance\nlet clientDebugLogger = null;\n\nexport function getClientDebugLogger() {\n    if (!clientDebugLogger) {\n        clientDebugLogger = new ClientDebugLogger();\n    }\n    return clientDebugLogger;\n}\n\n// Convenience exports\nexport const debugLog = {\n    log: (category, message, data) => getClientDebugLogger().log(category, message, data),\n    error: (category, message, error, data) => getClientDebugLogger().error(category, message, error, data),\n    warn: (category, message, data) => getClientDebugLogger().warn(category, message, data),\n    debug: (category, message, data) => getClientDebugLogger().debug(category, message, data),\n    event: (category, eventName, data) => getClientDebugLogger().event(category, eventName, data),\n    performance: (category, operation, duration, data) => getClientDebugLogger().performance(category, operation, duration, data),\n    navigation: (from, to, data) => getClientDebugLogger().navigation(from, to, data),\n    api: (method, url, status, duration, data) => getClientDebugLogger().api(method, url, status, duration, data),\n    userAction: (action, element, data) => getClientDebugLogger().userAction(action, element, data),\n    systemState: (component, state, data) => getClientDebugLogger().systemState(component, state, data),\n    featureFlag: (flag, enabled, data) => getClientDebugLogger().featureFlag(flag, enabled, data),\n    subsystem: (name, action, data) => getClientDebugLogger().subsystem(name, action, data)\n};\n\nexport default debugLog;","/**\n * Centralized Logger Utility\n * \n * Provides structured logging with sensitive data masking, remote logging,\n * and consistent formatting across the application.\n */\n\nclass CentralizedLogger {\n    constructor(options = {}) {\n        this.component = options.component || 'app';\n        this.level = options.level || 'info';\n        this.enableRemoteLogging = options.enableRemoteLogging !== false;\n        this.enableConsoleLogging = options.enableConsoleLogging !== false;\n        this.sensitivePatterns = [\n            /password/i,\n            /token/i,\n            /secret/i,\n            /key/i,\n            /credential/i,\n            /auth/i\n        ];\n    }\n\n    /**\n     * Mask sensitive data in log messages\n     */\n    maskSensitiveData(data) {\n        if (typeof data === 'string') {\n            return data.replace(/(\"(?:password|token|secret|key|credential|auth)\"\\s*:\\s*\")([^\"]+)\"/gi, '$1***MASKED***\"');\n        }\n        \n        if (typeof data === 'object' && data !== null) {\n            const masked = { ...data };\n            for (const key in masked) {\n                if (this.sensitivePatterns.some(pattern => pattern.test(key))) {\n                    masked[key] = '***MASKED***';\n                } else if (typeof masked[key] === 'object') {\n                    masked[key] = this.maskSensitiveData(masked[key]);\n                }\n            }\n            return masked;\n        }\n        \n        return data;\n    }\n\n    /**\n     * Format log message with timestamp and component info\n     */\n    formatMessage(level, message, data = null) {\n        const timestamp = new Date().toISOString();\n        const component = this.component;\n        \n        let formattedMessage = `[${timestamp}] [${level.toUpperCase()}] [${component}] ${message}`;\n        \n        if (data) {\n            const maskedData = this.maskSensitiveData(data);\n            formattedMessage += ` | Data: ${JSON.stringify(maskedData, null, 2)}`;\n        }\n        \n        return formattedMessage;\n    }\n\n    /**\n     * Send log to remote endpoint\n     */\n    async sendRemoteLog(level, message, data = null) {\n        if (!this.enableRemoteLogging) return;\n        \n        try {\n            const logEntry = {\n                timestamp: new Date().toISOString(),\n                level,\n                component: this.component,\n                message,\n                data: this.maskSensitiveData(data),\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n\n            await fetch('/api/logs', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(logEntry)\n            });\n        } catch (error) {\n            // Fallback to console if remote logging fails\n            if (this.enableConsoleLogging) {\n                console.warn('Remote logging failed:', error);\n            }\n        }\n    }\n\n    /**\n     * Log debug message\n     */\n    debug(message, data = null) {\n        // Only log if debug mode is enabled in settings\n        const settings = window.settings || {};\n        if (!settings.debugMode) {\n            return; // Suppress debug log if not in debug mode\n        }\n\n        const formattedMessage = this.formatMessage('debug', message, data);\n        \n        if (this.enableConsoleLogging) {\n            console.debug(formattedMessage);\n        }\n        \n        // Optionally, send debug logs remotely if needed for remote debugging sessions\n        this.sendRemoteLog('debug', message, data);\n    }\n\n    /**\n     * Log info message\n     */\n    info(message, data = null) {\n        const formattedMessage = this.formatMessage('info', message, data);\n        \n        if (this.enableConsoleLogging) {\n            console.log(formattedMessage);\n        }\n        \n        this.sendRemoteLog('info', message, data);\n    }\n\n    /**\n     * Log warning message\n     */\n    warn(message, data = null) {\n        const formattedMessage = this.formatMessage('warn', message, data);\n        \n        if (this.enableConsoleLogging) {\n            console.warn(formattedMessage);\n        }\n        \n        this.sendRemoteLog('warn', message, data);\n    }\n\n    /**\n     * Log error message\n     */\n    error(message, data = null) {\n        const formattedMessage = this.formatMessage('error', message, data);\n        \n        if (this.enableConsoleLogging) {\n            console.error(formattedMessage);\n        }\n        \n        this.sendRemoteLog('error', message, data);\n    }\n\n    /**\n     * Create child logger with additional component context\n     */\n    child(options = {}) {\n        const childComponent = options.component \n            ? `${this.component}.${options.component}`\n            : this.component;\n            \n        return new CentralizedLogger({\n            ...options,\n            component: childComponent,\n            level: options.level || this.level,\n            enableRemoteLogging: options.enableRemoteLogging !== undefined ? options.enableRemoteLogging : this.enableRemoteLogging,\n            enableConsoleLogging: options.enableConsoleLogging !== undefined ? options.enableConsoleLogging : this.enableConsoleLogging\n        });\n    }\n}\n\n// Export for both ES modules and CommonJS\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { CentralizedLogger };\n} else if (typeof window !== 'undefined') {\n    window.CentralizedLogger = CentralizedLogger;\n}\n\nexport { CentralizedLogger };\n","/**\n * Safe DOM Utility\n * \n * Provides safe DOM element selection and manipulation with error handling\n * and null checks to prevent common DOM-related errors.\n */\n\nclass SafeDOM {\n    constructor(logger = null) {\n        this.logger = logger || {\n            warn: (msg, data) => console.warn(msg, data),\n            error: (msg, data) => console.error(msg, data),\n            debug: (msg, data) => console.debug(msg, data)\n        };\n    }\n\n    /**\n     * Safely select a single element\n     */\n    select(selector, context = document) {\n        try {\n            if (!selector) {\n                this.logger.warn('SafeDOM: Empty selector provided');\n                return null;\n            }\n\n            const element = context.querySelector(selector);\n            if (!element) {\n                this.logger.debug(`SafeDOM: Element not found for selector: ${selector}`);\n            }\n            \n            return element;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error selecting element', { selector, error: error.message });\n            return null;\n        }\n    }\n\n    /**\n     * Safely select multiple elements\n     */\n    selectAll(selector, context = document) {\n        try {\n            if (!selector) {\n                this.logger.warn('SafeDOM: Empty selector provided');\n                return [];\n            }\n\n            const elements = context.querySelectorAll(selector);\n            return Array.from(elements);\n        } catch (error) {\n            this.logger.error('SafeDOM: Error selecting elements', { selector, error: error.message });\n            return [];\n        }\n    }\n\n    /**\n     * Safely get element by ID\n     */\n    getElementById(id) {\n        try {\n            if (!id) {\n                this.logger.warn('SafeDOM: Empty ID provided');\n                return null;\n            }\n\n            const element = document.getElementById(id);\n            if (!element) {\n                this.logger.debug(`SafeDOM: Element not found for ID: ${id}`);\n            }\n            \n            return element;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error getting element by ID', { id, error: error.message });\n            return null;\n        }\n    }\n\n    /**\n     * Safely set text content\n     */\n    setText(element, text) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to setText');\n                return false;\n            }\n\n            element.textContent = text || '';\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error setting text content', { text, error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely set HTML content (with sanitization warning)\n     */\n    setHTML(element, html) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to setHTML');\n                return false;\n            }\n\n            // Warning about potential XSS\n            if (html && typeof html === 'string' && (html.includes('<script') || html.includes('javascript:'))) {\n                this.logger.warn('SafeDOM: Potentially unsafe HTML detected', { html: html.substring(0, 100) });\n            }\n\n            element.innerHTML = html || '';\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error setting HTML content', { error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely add event listener\n     */\n    addEventListener(element, event, handler, options = {}) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to addEventListener');\n                return false;\n            }\n\n            if (typeof handler !== 'function') {\n                this.logger.warn('SafeDOM: Non-function handler provided to addEventListener');\n                return false;\n            }\n\n            element.addEventListener(event, handler, options);\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error adding event listener', { event, error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely remove event listener\n     */\n    removeEventListener(element, event, handler, options = {}) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to removeEventListener');\n                return false;\n            }\n\n            element.removeEventListener(event, handler, options);\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error removing event listener', { event, error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely add CSS class\n     */\n    addClass(element, className) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to addClass');\n                return false;\n            }\n\n            if (!className) {\n                this.logger.warn('SafeDOM: Empty className provided to addClass');\n                return false;\n            }\n\n            element.classList.add(className);\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error adding CSS class', { className, error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely remove CSS class\n     */\n    removeClass(element, className) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to removeClass');\n                return false;\n            }\n\n            if (!className) {\n                this.logger.warn('SafeDOM: Empty className provided to removeClass');\n                return false;\n            }\n\n            element.classList.remove(className);\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error removing CSS class', { className, error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely toggle CSS class\n     */\n    toggleClass(element, className) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to toggleClass');\n                return false;\n            }\n\n            if (!className) {\n                this.logger.warn('SafeDOM: Empty className provided to toggleClass');\n                return false;\n            }\n\n            element.classList.toggle(className);\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error toggling CSS class', { className, error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely show element\n     */\n    show(element) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to show');\n                return false;\n            }\n\n            element.style.display = '';\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error showing element', { error: error.message });\n            return false;\n        }\n    }\n\n    /**\n     * Safely hide element\n     */\n    hide(element) {\n        try {\n            if (!element) {\n                this.logger.warn('SafeDOM: Null element provided to hide');\n                return false;\n            }\n\n            element.style.display = 'none';\n            return true;\n        } catch (error) {\n            this.logger.error('SafeDOM: Error hiding element', { error: error.message });\n            return false;\n        }\n    }\n}\n\n// Export for both ES modules and CommonJS\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { SafeDOM };\n} else if (typeof window !== 'undefined') {\n    window.SafeDOM = SafeDOM;\n}\n\nexport { SafeDOM };\n","/**\n * Standardized Error Handling Utility\n * \n * Provides consistent error handling patterns, error wrapping for async operations,\n * and standardized error reporting across the application.\n */\n\nclass ErrorHandler {\n    constructor(logger = null) {\n        this.logger = logger || {\n            error: (msg, data) => console.error(msg, data),\n            warn: (msg, data) => console.warn(msg, data),\n            debug: (msg, data) => console.debug(msg, data)\n        };\n    }\n\n    /**\n     * Wrap async functions with standardized error handling\n     * @param {Function} asyncFn - The async function to wrap\n     * @param {string} context - Context description for error reporting\n     * @param {Object} options - Options for error handling\n     * @returns {Function} Wrapped function with error handling\n     */\n    wrapAsync(asyncFn, context = 'Unknown operation', userMessage = null, options = {}) {\n        const { \n            retries = 0, \n            retryDelay = 1000, \n            fallbackValue = null,\n            suppressErrors = false,\n            rethrow = false\n        } = options;\n\n        return async (...args) => {\n            for (let attempt = 0; attempt <= retries; attempt++) {\n                try {\n                    return await asyncFn(...args);\n                } catch (error) {\n                    if (attempt < retries) {\n                        this.logger.warn(`${context} failed (attempt ${attempt + 1}/${retries + 1}), retrying...`, {\n                            error: error.message,\n                            args: this._sanitizeArgs(args)\n                        });\n                        await this._delay(retryDelay * (attempt + 1));\n                        continue;\n                    }\n                    \n                    // Final attempt failed\n                    this.handleError(error, context, { \n                        userMessage: userMessage || 'An unexpected error occurred.',\n                        retries, \n                        suppress: suppressErrors \n                    });\n\n                    if (rethrow) {\n                        throw error;\n                    }\n\n                    return fallbackValue;\n                }\n            }\n            return fallbackValue; // Should be unreachable if rethrow is false\n        };\n    }\n\n    /**\n     * Wrap synchronous functions with standardized error handling\n     * @param {Function} syncFn - The synchronous function to wrap\n     * @param {string} context - Context description for error reporting\n     * @param {Object} options - Options for error handling\n     * @returns {Function} Wrapped function with error handling\n     */\n    wrapSync(syncFn, context = 'Unknown operation', userMessage = null, options = {}) {\n        const {\n            fallbackValue = null,\n            suppressErrors = false,\n            rethrow = false\n        } = options;\n\n        return (...args) => {\n            try {\n                return syncFn(...args);\n            } catch (error) {\n                this.handleError(error, context, {\n                    userMessage: userMessage || 'An unexpected error occurred.',\n                    suppress: suppressErrors,\n                    args: this._sanitizeArgs(args)\n                });\n\n                if (rethrow) {\n                    throw error;\n                }\n\n                return fallbackValue;\n            }\n        };\n    }\n\n    /**\n     * Create a standardized error object\n     * @param {string} message - Error message\n     * @param {string} code - Error code\n     * @param {Object} context - Additional context\n     * @param {Error} originalError - Original error if wrapping\n     * @returns {Error} Standardized error object\n     */\n    createError(message, code = 'UNKNOWN_ERROR', context = {}, originalError = null) {\n        const error = new Error(message);\n        error.code = code;\n        error.context = context;\n        error.timestamp = new Date().toISOString();\n        \n        if (originalError) {\n            error.originalError = originalError;\n            error.originalStack = originalError.stack;\n        }\n        \n        return error;\n    }\n\n    /**\n     * Handle and report errors with context\n     * @param {Error} error - The error to handle\n     * @param {string} context - Context description\n     * @param {Object} options - Additional data for error reporting\n     */\n    handleError(error, context = 'Unknown context', options = {}) {\n        const { userMessage, suppress, ...additionalData } = options;\n\n        if (suppress) return; // Do not log or show UI error if suppressed\n\n        const errorData = {\n            message: error.message,\n            code: error.code || 'UNHANDLED_EXCEPTION',\n            context: context,\n            timestamp: new Date().toISOString(),\n            stack: error.stack,\n            ...additionalData\n        };\n        \n        this.logger.error(`Error in ${context}:`, errorData);\n        \n        // Report to external service if configured\n        this._reportToErrorService(errorData);\n        \n        // Show UI notification if UI manager is available\n        if (typeof window !== 'undefined' && window.app && window.app.uiManager) {\n            const uiManager = window.app.uiManager;\n            // Prioritize the user-friendly message for the UI\n            const displayMessage = userMessage || error.message;\n            uiManager.showError(\n                `Error: ${context}`,\n                displayMessage\n            );\n        }\n    }\n\n    /**\n     * Wrap DOM event handlers with error handling\n     * @param {Function} handler - The event handler function\n     * @param {string} context - Context description\n     * @returns {Function} Wrapped event handler\n     */\n    wrapEventHandler(handler, context = 'Event handler') {\n        return (event) => {\n            try {\n                return handler(event);\n            } catch (error) {\n                this.logger.error(`${context} failed`, {\n                    error: error.message,\n                    eventType: event?.type,\n                    target: event?.target?.tagName || 'unknown'\n                });\n                \n                // Prevent error from bubbling up and breaking the UI\n                event?.preventDefault?.();\n                event?.stopPropagation?.();\n            }\n        };\n    }\n\n    /**\n     * Create a safe function that never throws\n     * @param {Function} fn - Function to make safe\n     * @param {string} context - Context description\n     * @param {*} fallbackValue - Value to return on error\n     * @returns {Function} Safe function\n     */\n    makeSafe(fn, context = 'Safe function', fallbackValue = null) {\n        return (...args) => {\n            try {\n                return fn(...args);\n            } catch (error) {\n                this.logger.warn(`${context} failed safely`, {\n                    error: error.message,\n                    args: this._sanitizeArgs(args)\n                });\n                return fallbackValue;\n            }\n        };\n    }\n\n    /**\n     * Validate and handle API responses\n     * @param {Response} response - Fetch response object\n     * @param {string} context - Context description\n     * @returns {Promise<Object>} Parsed response data\n     */\n    async handleApiResponse(response, context = 'API call') {\n        try {\n            if (!response.ok) {\n                const errorData = {\n                    status: response.status,\n                    statusText: response.statusText,\n                    url: response.url\n                };\n                \n                let errorMessage = `${context} failed with status ${response.status}`;\n                \n                try {\n                    const errorBody = await response.text();\n                    errorData.body = errorBody;\n                    \n                    // Try to parse as JSON for more details\n                    try {\n                        const jsonError = JSON.parse(errorBody);\n                        if (jsonError.message) {\n                            errorMessage = jsonError.message;\n                        }\n                    } catch (e) {\n                        // Not JSON, use text as is\n                    }\n                } catch (e) {\n                    // Could not read response body\n                }\n                \n                throw this.createError(errorMessage, `HTTP_${response.status}`, errorData);\n            }\n            \n            const data = await response.json();\n            return data;\n        } catch (error) {\n            if (error.code && error.code.startsWith('HTTP_')) {\n                throw error; // Re-throw our custom HTTP errors\n            }\n            \n            // Handle JSON parsing or other errors\n            throw this.createError(\n                `${context} response parsing failed`,\n                'RESPONSE_PARSE_ERROR',\n                { originalError: error.message }\n            );\n        }\n    }\n\n    // Private helper methods\n    _sanitizeArgs(args) {\n        return args.map(arg => {\n            if (typeof arg === 'string' && arg.length > 100) {\n                return arg.substring(0, 100) + '...';\n            }\n            if (typeof arg === 'object' && arg !== null) {\n                return { ...arg, _truncated: true };\n            }\n            return arg;\n        });\n    }\n\n    _delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    _reportToErrorService(errorData) {\n        // Placeholder for error reporting service integration\n        // Could send to external service, local storage, etc.\n        if (typeof window !== 'undefined' && window.errorReportingEnabled) {\n            // Example: send to error reporting service\n            // fetch('/api/errors', { method: 'POST', body: JSON.stringify(errorData) });\n        }\n    }\n}\n\n// Export for both ES modules and CommonJS\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { ErrorHandler };\n} else if (typeof window !== 'undefined') {\n    window.ErrorHandler = ErrorHandler;\n}\n\nexport { ErrorHandler };\n","/**\n * Configuration Constants for PingOne Import Tool\n * Centralizes hardcoded values: timeouts, URLs, selectors, messages\n */\n\n// API Configuration\nexport const API_CONFIG = {\n    ENDPOINTS: {\n        SETTINGS: '/api/settings',\n        IMPORT: '/api/import',\n        EXPORT: '/api/export',\n        POPULATIONS: '/api/populations',\n        TEST_CONNECTION: '/api/pingone/test-connection',\n        LOGS: '/api/logs'\n    },\n    \n    TIMEOUTS: {\n        DEFAULT: 10000,\n        LONG_OPERATION: 30000,\n        FILE_UPLOAD: 60000,\n        CONNECTION_TEST: 5000\n    },\n    \n    RETRY: {\n        MAX_ATTEMPTS: 3,\n        DELAYS: [1000, 2000, 5000]\n    }\n};\n\n// UI Configuration\nexport const UI_CONFIG = {\n    SELECTORS: {\n        APP_CONTAINER: '.app-container',\n        NAV_ITEMS: '[data-view]',\n        SETTINGS_FORM: '#settings-form',\n        PROGRESS_BAR: '.progress-bar',\n        STATUS_INDICATOR: '.status-indicator',\n        MODAL_BACKDROP: '.modal-backdrop'\n    },\n    \n    CLASSES: {\n        HIDDEN: 'hidden',\n        ACTIVE: 'active',\n        LOADING: 'loading',\n        ERROR: 'error',\n        SUCCESS: 'success'\n    }\n};\n\n// Messages\nexport const MESSAGES = {\n    SUCCESS: {\n        SETTINGS_SAVED: 'Settings saved successfully',\n        FILE_UPLOADED: 'File uploaded successfully',\n        CONNECTION_SUCCESS: 'Connection test successful'\n    },\n    \n    ERROR: {\n        NETWORK_ERROR: 'Network connection error',\n        FILE_TOO_LARGE: 'File size exceeds 10MB limit',\n        SETTINGS_SAVE_FAILED: 'Failed to save settings',\n        CONNECTION_FAILED: 'Connection test failed'\n    }\n};\n\n// Business Config\nexport const BUSINESS_CONFIG = {\n    FILE_UPLOAD: {\n        MAX_SIZE: 10 * 1024 * 1024, // 10MB\n        ALLOWED_TYPES: ['.csv', '.txt']\n    },\n    \n    IMPORT: {\n        BATCH_SIZE: 100,\n        MAX_CONCURRENT: 5\n    }\n};\n\n// Make available globally\nif (typeof window !== 'undefined') {\n    window.API_CONFIG = API_CONFIG;\n    window.UI_CONFIG = UI_CONFIG;\n    window.MESSAGES = MESSAGES;\n    window.BUSINESS_CONFIG = BUSINESS_CONFIG;\n}\n","/**\n * Utility Loader\n * \n * Initializes and exposes debug-friendly utilities globally\n * Must be loaded before main application code\n */\n\n// Import utilities\nimport { CentralizedLogger } from './centralized-logger.js';\nimport { SafeDOM } from './safe-dom.js';\nimport { ErrorHandler } from './error-handler.js';\nimport { API_CONFIG, UI_CONFIG, MESSAGES, BUSINESS_CONFIG } from './config-constants.js';\n\n// Initialize utilities\nconst logger = new CentralizedLogger();\nconst safeDOM = new SafeDOM(logger);\nconst errorHandler = new ErrorHandler(logger);\n\n// Expose utilities globally\nif (typeof window !== 'undefined') {\n    window.logger = logger;\n    window.safeDOM = safeDOM;\n    window.errorHandler = errorHandler;\n    \n    // Expose configuration constants\n    window.API_CONFIG = API_CONFIG;\n    window.UI_CONFIG = UI_CONFIG;\n    window.MESSAGES = MESSAGES;\n    window.BUSINESS_CONFIG = BUSINESS_CONFIG;\n    \n    // Initialize logger\n    logger.info('Debug utilities loaded', {\n        utilities: ['CentralizedLogger', 'SafeDOM', 'ErrorHandler', 'ConfigConstants'],\n        timestamp: new Date().toISOString()\n    });\n}\n\n// Export for module systems\nexport {\n    logger,\n    safeDOM,\n    errorHandler,\n    API_CONFIG,\n    UI_CONFIG,\n    MESSAGES,\n    BUSINESS_CONFIG\n};\n","// event-bus.js\n// Simple EventBus utility for cross-subsystem communication\n\nclass EventBus {\n    constructor() {\n        this.events = {};\n    }\n    on(event, handler) {\n        (this.events[event] = this.events[event] || []).push(handler);\n    }\n    off(event, handler) {\n        if (!this.events[event]) return;\n        this.events[event] = this.events[event].filter(h => h !== handler);\n    }\n    emit(event, data) {\n        (this.events[event] || []).forEach(h => h(data));\n    }\n}\n\n// Create and export a default instance\nconst eventBus = new EventBus();\n\n// Export both the class and the default instance\nexport { EventBus, eventBus };\nexport default eventBus;\n\n// Browser global fallback for legacy compatibility\nif (typeof window !== 'undefined') {\n    window.EventBus = EventBus;\n    window.eventBus = eventBus;\n}\n","// File: ui-manager.js\n// Description: UI management for PingOne user import tool\n// \n// This module handles all user interface interactions and state management:\n// - Status notifications and user feedback\n// - Progress tracking and real-time updates\n// - View transitions and navigation\n// - Debug logging and error display\n// - Connection status indicators\n// - Form handling and validation feedback\n// \n// Provides a centralized interface for updating the UI based on application events.\n\nimport { createCircularProgress } from '../../../public/js/modules/circular-progress.js';\nimport { ElementRegistry } from '../../../public/js/modules/element-registry.js';\nimport progressManager from '../../../public/js/modules/progress-manager.js';\nimport { ErrorTypes } from '../../../public/js/modules/error/error-types.js';\n\n// Enable debug mode for development (set to false in production)\nconst DEBUG_MODE = process.env.NODE_ENV === 'development';\n\n/**\n * UI Manager Class\n * \n * Manages all user interface interactions and updates with centralized error handling.\n */\nclass UIManager {\n    /**\n     * Create a new UIManager instance\n     * @param {Object} options - Configuration options\n     * @param {Object} options.errorManager - Error manager instance\n     * @param {Object} options.logger - Logger instance\n     */\n    constructor({ errorManager, logger } = {}) {\n        // Initialize logger from provided logger or fallback to console\n        this.logger = logger ? logger.child({ component: 'UIManager' }) : console;\n        \n        // Initialize error manager\n        this.errorManager = errorManager || {\n            handleError: (error, context) => {\n                (window.logger?.error || console.error)('Unhandled error (no error manager):', error, context);\n            }\n        };\n        \n        // Initialize UI elements\n        this.notificationContainer = null;\n        this.progressContainer = null;\n        this.tokenStatusElement = null;\n        this.connectionStatusElement = null;\n        \n        // Initialize the UI manager\n        this.initialize();\n    }\n    \n    /**\n     * Initialize UI manager and setup core functionality\n     */\n    /**\n     * Initialize the UI Manager\n     * @private\n     */\n    initialize() {\n        try {\n            this.setupElements();\n            this.logger.info('UI Manager initialized successfully');\n        } catch (error) {\n            this.errorManager.handleError(error, {\n                component: 'UIManager',\n                operation: 'initialize',\n                severity: 'error',\n                context: { \n                    message: 'Failed to initialize UI Manager',\n                    error: error.message \n                }\n            });\n        }\n    }\n    \n    /**\n     * Initialize UI manager (alias for initialize for compatibility)\n     * @returns {Promise<void>} Promise that resolves when initialization is complete\n     */\n    async init() {\n        this.initialize();\n        return Promise.resolve();\n    }\n    \n    /**\n     * Setup UI elements and initialize core DOM references\n     */\n    setupElements() {\n        try {\n            // Initialize core UI elements with safe fallbacks\n            this.notificationContainer = ElementRegistry.notificationContainer ? ElementRegistry.notificationContainer() : null;\n            this.progressContainer = ElementRegistry.progressContainer ? ElementRegistry.progressContainer() : null;\n            this.tokenStatusElement = ElementRegistry.tokenStatus ? ElementRegistry.tokenStatus() : null;\n            this.connectionStatusElement = ElementRegistry.connectionStatus ? ElementRegistry.connectionStatus() : null;\n            \n            // Initialize navigation items for safe access\n            this.navItems = document.querySelectorAll('[data-view]');\n            \n            if (!this.notificationContainer) {\n                this.logger.warn('Notification container not found');\n            }\n            \n            if (!this.progressContainer) {\n                this.logger.warn('Progress container not found');\n            }\n            \n            this.logger.debug('UI elements setup completed', {\n                hasNotificationContainer: !!this.notificationContainer,\n                hasProgressContainer: !!this.progressContainer,\n                hasTokenStatusElement: !!this.tokenStatusElement,\n                hasConnectionStatusElement: !!this.connectionStatusElement,\n                navItemsCount: this.navItems ? this.navItems.length : 0\n            });\n        } catch (error) {\n            this.logger.error('Error setting up UI elements', { error: error.message });\n        }\n    }\n    \n    /**\n     * Show a status message in the status bar\n     * @param {string} message - The message to display\n     * @param {string} [type='info'] - Message type (info, success, warning, error)\n     * @param {Object} [options] - Additional options\n     * @param {number} [options.duration=5000] - Duration in milliseconds to show the message\n     * @param {boolean} [options.autoDismiss=true] - Whether to auto-dismiss the message\n     * @param {string} [options.errorId] - Unique error ID for tracking\n     * @param {Object} [options.context] - Additional context for the message\n     */\n    /**\n     * Show a status message in the status bar\n     * @param {string} message - The message to display\n     * @param {string} [type='info'] - Message type (info, success, warning, error)\n     * @param {Object} [options] - Additional options\n     * @param {number} [options.duration=5000] - Duration in milliseconds to show the message\n     * @param {boolean} [options.autoDismiss=true] - Whether to auto-dismiss the message\n     * @param {string} [options.errorId] - Unique error ID for tracking\n     * @param {Object} [options.context] - Additional context for the message\n     */\n    showStatusBar(message, type = 'info', options = {}) {\n        const { \n            duration = 5000, \n            autoDismiss = true,\n            errorId,\n            context = {}\n        } = options;\n        \n        try {\n            // Log the status message with appropriate level\n            const logLevel = {\n                info: 'info',\n                success: 'info',\n                warning: 'warn',\n                error: 'error'\n            }[type] || 'log';\n            \n            // Create log context\n            const logContext = {\n                messageType: type,\n                ...(errorId && { errorId }),\n                ...context\n            };\n            \n            // Log the message with context\n            this.logger[logLevel](`Status: ${message}`, logContext);\n            \n            // If status bar element is not available, just log and return\n            if (!this.statusBarElement) {\n                this.logger.debug('Status bar element not available in current view', logContext);\n                return;\n            }\n            \n            // Clear any existing timers\n            if (this.statusBarTimer) {\n                clearTimeout(this.statusBarTimer);\n                this.statusBarTimer = null;\n            }\n            \n            // Clear existing content using Safe DOM\n            const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n            const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n            const UI_CONFIG = window.UI_CONFIG || { CLASSES: { ERROR: 'error', SUCCESS: 'success' } };\n            \n            safeDOM.setHTML(this.statusBarElement, '');\n            \n            // Create message element using Safe DOM\n            const msg = document.createElement('span');\n            safeDOM.addClass(msg, 'status-message');\n            \n            // Add error ID to the message if available\n            let displayMessage = message;\n            if (type === UI_CONFIG.CLASSES.ERROR && errorId) {\n                displayMessage += ` (Error ID: ${errorId})`;\n                \n                // In development, show more context for errors\n                if (process.env.NODE_ENV === 'development' && Object.keys(context).length > 0) {\n                    displayMessage += `\\n${JSON.stringify(context, null, 2)}`;\n                }\n            }\n            \n            safeDOM.setText(msg, displayMessage);\n            this.statusBarElement.appendChild(msg);\n            \n            // Add dismiss button for error/warning (persistent messages)\n            if (type === UI_CONFIG.CLASSES.ERROR || type === 'warning') {\n                const dismiss = document.createElement('button');\n                safeDOM.addClass(dismiss, 'status-dismiss');\n                safeDOM.setHTML(dismiss, '&times;');\n                dismiss.setAttribute('aria-label', 'Dismiss message');\n                \n                // Use error handler to wrap the event handler\n                dismiss.onclick = errorHandler.wrapEventHandler(\n                    () => this.clearStatusBar(),\n                    'Status bar dismiss button click'\n                );\n                \n                this.statusBarElement.appendChild(dismiss);\n            }\n            \n            // Set status bar classes\n            this.statusBarElement.className = `status-bar status-bar-${type} visible`;\n            \n            // Auto-dismiss for success/info messages or if explicitly enabled\n            const shouldAutoDismiss = autoDismiss && (type === 'success' || type === 'info');\n            if (shouldAutoDismiss) {\n                this.statusBarTimer = setTimeout(() => {\n                    this.clearStatusBar();\n                }, duration);\n            }\n            \n        } catch (error) {\n            // If there's an error showing the status bar, report it but don't crash\n            this.errorManager.handleError(error, {\n                component: 'UIManager',\n                operation: 'showStatusBar',\n                severity: 'warning',\n                context: {\n                    originalMessage: message,\n                    type,\n                    options,\n                    errorMessage: error.message\n                }\n            });\n            \n            // Fallback to console if the error manager fails\n            (window.logger?.error || console.error)('Failed to show status bar:', error);\n            (window.logger?.debug || console.log)('Original message:', message);\n            \n            // Try to show a simplified error message\n            try {\n                if (this.statusBarElement) {\n                    this.statusBarElement.textContent = `Error: ${message.substring(0, 100)}`;\n                    this.statusBarElement.className = 'status-bar status-bar-error visible';\n                }\n            } catch (e) {\n                // If we can't even show the error message, just give up\n                (window.logger?.error || console.error)('Completely failed to show status bar:', e);\n            }\n        }\n    }\n    \n    /**\n     * Clear the status bar with smooth animation\n     * @param {Object} [options] - Additional options\n     * @param {boolean} [options.force=false] - Force clear without animation\n     */\n    clearStatusBar(options = {}) {\n        try {\n            // Clear any pending auto-dismiss timers\n            if (this.statusBarTimer) {\n                clearTimeout(this.statusBarTimer);\n                this.statusBarTimer = null;\n            }\n            \n            // If status bar element doesn't exist, just return\n            if (!this.statusBarElement) {\n                this.logger.debug('Status bar element not found during clear');\n                return;\n            }\n            \n            const { force = false } = options;\n            \n            const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n            const UI_CONFIG = window.UI_CONFIG || { TIMEOUTS: { ANIMATION: 300 } };\n            \n            if (force) {\n                // Immediate removal using Safe DOM\n                safeDOM.setHTML(this.statusBarElement, '');\n                this.statusBarElement.className = 'status-bar';\n                this.logger.debug('Status bar cleared immediately');\n            } else {\n                // Animate out using Safe DOM\n                safeDOM.removeClass(this.statusBarElement, 'visible');\n                \n                // Remove the element after animation completes\n                setTimeout(() => {\n                    if (this.statusBarElement) {\n                        safeDOM.setHTML(this.statusBarElement, '');\n                        this.statusBarElement.className = 'status-bar';\n                    }\n                }, UI_CONFIG.TIMEOUTS?.ANIMATION || 300); // Use config constant for timeout\n                \n                this.logger.debug('Status bar cleared with animation');\n            }\n        } catch (error) {\n            this.errorManager.handleError(error, {\n                component: 'UIManager',\n                operation: 'clearStatusBar',\n                severity: 'warning',\n                context: {\n                    options,\n                    errorMessage: error.message\n                }\n            });\n            \n            // Fallback to direct DOM manipulation if possible\n            try {\n                if (this.statusBarElement) {\n                    this.statusBarElement.innerHTML = '';\n                    this.statusBarElement.className = 'status-bar';\n                }\n            } catch (e) {\n                (window.logger?.error || console.error)('Failed to clear status bar:', e);\n            }\n        }\n    }\n    \n    /**\n     * Show a success message\n     * @param {string} message - The success message to display\n     * @param {Object} [details] - Additional details to log\n     */\n    showSuccess(message, details = {}) {\n        this.showStatusBar(message, 'success');\n        this.logger.info('Success message shown', { message, ...details });\n    }\n\n    /**\n     * Show a warning message\n     * @param {string} message - The warning message to display\n     * @param {Object} [details] - Additional details to log\n     */\n    showWarning(message, details = {}) {\n        this.showStatusBar(message, 'warning');\n        this.logger.warn('Warning message shown', { message, ...details });\n    }\n    \n    /**\n     * Show an info message\n     * @param {string} message - The info message to display\n     * @param {Object} [details] - Additional details to log\n     */\n    showInfo(message, details = {}) {\n        this.showStatusBar(message, 'info');\n    }\n    /**\n     * Show an error message to the user\n     * @param {string|Error} error - Error title, message, or Error object\n     * @param {string|Object} [details] - Additional error details or options object\n     * @param {Object} [options] - Additional options\n     * @param {string} [options.errorId] - Unique error ID for tracking\n     * @param {Object} [options.context] - Additional context for the error\n     * @param {boolean} [options.reportToServer=true] - Whether to report the error to the server\n     * @param {string} [options.operation] - The operation that failed\n     * @param {string} [options.component] - The component where the error occurred\n     */\n    showError(error, details = {}, options = {}) {\n        // Handle different parameter patterns\n        let errorMessage, errorObj, errorContext;\n        \n        if (error instanceof Error) {\n            // First parameter is an Error object\n            errorObj = error;\n            errorMessage = error.message;\n            errorContext = typeof details === 'object' && details !== null ? details : {};\n        } else if (typeof error === 'string' && details instanceof Error) {\n            // First is title, second is Error object\n            errorObj = details;\n            errorMessage = `${error}: ${details.message}`;\n            errorContext = {};\n        } else if (typeof error === 'string' && typeof details === 'string') {\n            // Both are strings (title and message)\n            errorMessage = `${error}: ${details}`;\n            errorObj = new Error(errorMessage);\n            errorObj.name = error;\n            errorContext = {};\n        } else if (typeof error === 'string') {\n            // First is message, second is options\n            errorMessage = error;\n            errorObj = new Error(errorMessage);\n            errorContext = typeof details === 'object' && details !== null ? details : {};\n        } else {\n            // Invalid parameters\n            const invalidError = new Error('Invalid parameters passed to showError');\n            this.errorManager.handleError(invalidError, {\n                component: 'UIManager',\n                operation: 'showError',\n                severity: 'error',\n                context: {\n                    error,\n                    details,\n                    options\n                }\n            });\n            return;\n        }\n            \n            // Merge contexts\n            const mergedContext = {\n                ...errorContext,\n                ...options.context\n            };\n            \n            // Report the error through the error manager\n            if (options.reportToServer !== false) {\n                this.errorManager.handleError(errorObj, {\n                    component: options.component || 'UIManager',\n                    operation: options.operation || 'showError',\n                    severity: 'error',\n                    context: mergedContext\n                });\n            }\n            \n            // Show the error in the UI\n            this.showStatusBar(errorMessage, 'error', {\n                autoDismiss: false,\n                errorId: options.errorId,\n                context: mergedContext,\n                ...options\n            });\n            \n            // Log the error with additional context\n            this.logger.error('Error message shown', {\n                error: errorMessage,\n                name: errorObj.name,\n                stack: errorObj.stack,\n                ...mergedContext\n            });\n            \n        } catch (error) {\n            // If there's an error in the error handler, log to console\n            (window.logger?.error || console.error)('Error in showError:', error);\n            \n            // Try to show a basic error message\n            try {\n                const fallbackMessage = 'An error occurred';\n                this.showStatusBar(fallbackMessage, 'error', {\n                    autoDismiss: false,\n                    context: { \n                        originalError: error instanceof Error ? error.message : String(error),\n                        timestamp: new Date().toISOString()\n                    }\n                });\n            } catch (e) {\n                // If we can't even show the error message, just give up\n                (window.logger?.error || console.error)('Completely failed to show error:', e);\n            }\n        }\n\n    /**\n     * Hide loading indicator dand optionally show success message\n     * @param {string} successMessage - Optional success message to show after hiding loading\n     */\n    hideLoading(successMessage = null) {\n        this.clearStatusBar();\n        \n        if (successMessage) {\n            this.showSuccess(successMessage);\n        }\n        \n        this.logger.debug('Loading indicator hidden');\n    }\n    \n    /**\n     * Update progress bar with current and total values\n     * @param {number} current - Current progress value\n     * @param {number} total - Total progress value\n     * @param {string} message - Progress message\n     */\n    updateProgress(current, total, message = '') {\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] updateProgress() called with:', { current, total, message });\n        \n        if (!this.progressContainer) {\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Progress container not found in updateProgress');\n            this.logger.warn('Progress container not found');\n            return;\n        }\n        \n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress container found, calculating percentage...');\n        const percentage = total > 0 ? Math.round((current / total) * 100) : 0;\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Calculated percentage:', percentage);\n        \n        // Initialize utilities for safe DOM operations\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                PROGRESS_BAR_FILL: '.progress-bar-fill',\n                PROGRESS_PERCENTAGE: '.progress-percentage',\n                PROGRESS_TEXT: '.progress-text'\n            }\n        };\n        \n        // Update progress bar using Safe DOM\n        const progressBar = safeDOM.select(UI_CONFIG.SELECTORS.PROGRESS_BAR_FILL, this.progressContainer);\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress bar element:', progressBar);\n        if (progressBar) {\n            progressBar.style.width = `${percentage}%`;\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress bar updated to:', `${percentage}%`);\n        } else {\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Progress bar element not found');\n        }\n        \n        // Update percentage text using Safe DOM\n        const percentageElement = safeDOM.select(UI_CONFIG.SELECTORS.PROGRESS_PERCENTAGE, this.progressContainer);\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Percentage element:', percentageElement);\n        if (percentageElement) {\n            safeDOM.setText(percentageElement, `${percentage}%`);\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Percentage text updated to:', `${percentage}%`);\n        } else {\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Percentage element not found');\n        }\n        \n        // Update progress text using Safe DOM\n        const progressText = safeDOM.select(UI_CONFIG.SELECTORS.PROGRESS_TEXT, this.progressContainer);\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress text element:', progressText);\n        if (progressText && message) {\n            safeDOM.setText(progressText, message);\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress text updated to:', message);\n        } else {\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Progress text element not found or no message');\n        }\n        \n        this.logger.debug('Progress updated', { current, total, percentage, message });\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] updateProgress() completed');\n    }\n    \n    /**\n     * Update token status display\n     * @param {string} status - Token status (valid, expired, etc.)\n     * @param {string} message - Status message\n     */\n    updateTokenStatus(status, message = '') {\n        if (!this.tokenStatusElement) {\n            this.logger.warn('Token status element not found');\n            return;\n        }\n        \n        this.tokenStatusElement.className = `token-status ${status}`;\n        this.tokenStatusElement.textContent = message || status;\n        \n        this.logger.debug('Token status updated', { status, message });\n    }\n    \n    /**\n     * Update connection status display\n     * @param {string} status - Connection status (connected, disconnected, etc.)\n     * @param {string} message - Status message\n     */\n    updateConnectionStatus(status, message = '') {\n        if (!this.connectionStatusElement) {\n            this.logger.warn('Connection status element not found');\n            return;\n        }\n        \n        this.connectionStatusElement.className = `connection-status ${status}`;\n        this.connectionStatusElement.textContent = message || status;\n        \n        this.logger.debug('Connection status updated', { status, message });\n    }\n    \n    /**\n     * Show current token status with detailed information\n     * @param {Object} tokenInfo - Token information object\n     */\n    showCurrentTokenStatus(tokenInfo) {\n        if (!tokenInfo) {\n            this.logger.warn('No token info provided');\n            return;\n        }\n        \n        const { isValid, expiresAt, timeRemaining } = tokenInfo;\n        \n        if (!isValid) {\n            this.updateTokenStatus('expired', '');\n            return;\n        }\n        \n        const timeRemainingText = timeRemaining ? ` (${timeRemaining})` : '';\n        this.updateTokenStatus('valid', `Token valid${timeRemainingText}`);\n        \n        this.logger.info('Current token status displayed', { \n            isValid, \n            expiresAt, \n            timeRemaining \n        });\n    }\n    \n    /**\n     * Update universal token status bar\n     * @param {Object} tokenInfo - Token information object\n     */\n    updateUniversalTokenStatus(tokenInfo) {\n        // Redirect to token-status-indicator instead of universal-token-status\n        const tokenStatusBar = document.getElementById('token-status-indicator');\n        if (!tokenStatusBar) {\n            this.logger.warn('Token status indicator not found');\n            return;\n        }\n        \n        if (!tokenInfo) {\n            tokenStatusBar.style.display = 'none';\n            return;\n        }\n        \n        const { isValid, expiresAt, timeRemaining } = tokenInfo;\n        const statusContent = tokenStatusBar.querySelector('.token-status-content');\n        \n        if (statusContent) {\n            const icon = statusContent.querySelector('.token-status-icon');\n            const text = statusContent.querySelector('.token-status-text');\n            const time = statusContent.querySelector('.token-status-time');\n            \n            if (isValid) {\n                icon.textContent = '✅';\n                text.textContent = 'Token valid';\n                time.textContent = timeRemaining || '';\n            } else {\n                icon.textContent = '❌';\n                text.textContent = '';\n                text.style.visibility = 'hidden';\n                time.textContent = '';\n            }\n        }\n        \n        tokenStatusBar.style.display = 'block';\n        this.logger.debug('Token status indicator updated', { isValid, timeRemaining });\n    }\n    \n    /**\n     * Update home page token status\n     * @param {boolean} isLoading - Whether to show loading state\n     * @param {string} message - Status message\n     */\n    updateHomeTokenStatus(isLoading = false, message = '') {\n        const homeTokenStatus = document.getElementById('home-token-status');\n        if (!homeTokenStatus) {\n            (window.logger?.error || console.log)('❌ home-token-status element not found!');\n            return;\n        }\n        (window.logger?.debug || console.log)('✅ Found home-token-status element:', homeTokenStatus);\n\n        // Check current token status to determine button color\n        let hasValidToken = false;\n        let buttonClass = 'btn-danger'; // Default to red\n        let buttonText = 'Get New Token';\n        \n        try {\n            // First check for stashed token in localStorage\n            hasValidToken = this.checkForStashedToken();\n            \n            // If no stashed token, check PingOne client\n            if (!hasValidToken && window.app && window.app.pingOneClient) {\n                const tokenInfo = window.app.pingOneClient.getCurrentTokenTimeRemaining();\n                if (tokenInfo && tokenInfo.token && !tokenInfo.isExpired) {\n                    hasValidToken = true;\n                }\n            }\n            \n            // Set button appearance based on token status\n            if (hasValidToken) {\n                buttonClass = 'btn-success'; // Green when token is valid\n                buttonText = 'Token Valid';\n            }\n        } catch (error) {\n            (window.logger?.error || console.log)('Error checking token status:', error);\n        }\n\n        // Move to bottom of sidebar\n        const sidebar = document.querySelector('.sidebar');\n        if (sidebar && homeTokenStatus.parentNode !== sidebar) {\n            sidebar.appendChild(homeTokenStatus);\n            (window.logger?.debug || console.log)('✅ Moved home-token-status to bottom of sidebar');\n        }\n\n        // Add debug label to home-token-status container (red, above box)\n        if (!document.getElementById('debug-home-token-status-label')) {\n            const debugLabel = document.createElement('div');\n            debugLabel.id = 'debug-home-token-status-label';\n            debugLabel.style.cssText = `\n                position: absolute !important;\n                top: -30px !important;\n                left: 0 !important;\n                background: #ff0000 !important;\n                color: #ffffff !important;\n                padding: 4px 8px !important;\n                font-size: 12px !important;\n                font-weight: bold !important;\n                border: 2px solid #000 !important;\n                z-index: 9999 !important;\n                white-space: nowrap !important;\n                pointer-events: none !important;\n            `;\n            debugLabel.textContent = 'DEBUG: home-token-status CONTAINER';\n            \n            // Ensure container has relative positioning\n            homeTokenStatus.style.cssText = `\n                position: relative !important;\n                background: #ffffcc !important;\n                border: 1px solid #dee2e6 !important;\n                border-radius: 6px !important;\n                padding: 2px !important;\n                width: fit-content !important;\n                height: auto !important;\n                display: block !important;\n                overflow: visible !important;\n                margin-top: auto !important;\n            `;\n            \n            homeTokenStatus.appendChild(debugLabel);\n            (window.logger?.debug || console.log)('✅ Added debug label to home-token-status container');\n        }\n\n        if (isLoading) {\n            homeTokenStatus.innerHTML = '';\n        } else {\n            // Use the provided token-status-indicator markup with dynamic button color and enhanced styling\n            homeTokenStatus.innerHTML = `\n                <div id=\"token-status-indicator\" class=\"token-status-indicator valid\" role=\"status\" aria-live=\"polite\" style=\"display: block !important; padding: 0 !important; margin: 0 !important; background: none !important; border: none !important;\">\n                    <button id=\"get-token-btn\" class=\"btn ${buttonClass}\" style=\"font-size: 14px !important; padding: 8px 16px !important; margin: 0 !important; font-weight: 500 !important; border-radius: 6px !important; box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important; transition: all 0.2s ease !important;\">\n                        <i class=\"fas fa-key\"></i> ${buttonText}\n                    </button>\n                </div>\n            `;\n            // Wire up the button to call getNewToken if available\n            const getTokenBtn = document.getElementById('get-token-btn');\n            if (getTokenBtn) {\n                getTokenBtn.addEventListener('click', () => {\n                    if (window.tokenStatusIndicator && typeof window.tokenStatusIndicator.getNewToken === 'function') {\n                        window.tokenStatusIndicator.getNewToken();\n                    } else if (typeof this.getNewToken === 'function') {\n                        this.getNewToken();\n                    } else {\n                        // TODO: Refactor: Use Notification or Modal from UI subsystem instead of alert.\n// alert('Get New Token functionality is not available.');\n                    }\n                });\n            }\n        }\n        \n        homeTokenStatus.style.display = 'block';\n        this.logger.debug('Home token status updated', { isLoading, message, hasValidToken, buttonClass });\n    }\n\n    /**\n     * Check for stashed token in localStorage\n     * @returns {boolean} True if valid token is found\n     */\n    checkForStashedToken() {\n        try {\n            if (typeof localStorage === 'undefined') {\n                return false;\n            }\n            \n            const token = localStorage.getItem('pingone_worker_token');\n            const expiry = localStorage.getItem('pingone_token_expiry');\n            \n            if (!token || !expiry) {\n                return false;\n            }\n            \n            const expiryTime = parseInt(expiry, 10);\n            const now = Date.now();\n            \n            // Check if token is expired (with 5 minute buffer)\n            if (isNaN(expiryTime) || now >= expiryTime - (5 * 60 * 1000)) {\n                return false;\n            }\n            \n            return true;\n        } catch (error) {\n            (window.logger?.error || console.error)('Error checking for stashed token:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Update settings save status with message and type\n     * @param {string} message - Status message\n     * @param {string} type - Message type (success, error, warning, info)\n     */\n    updateSettingsSaveStatus(message, type = 'info') {\n        const settingsStatus = document.querySelector('.settings-save-status');\n        if (!settingsStatus) {\n            this.logger.warn('Settings save status element not found');\n            return;\n        }\n        \n        // Update classes\n        settingsStatus.className = `settings-save-status ${type} show`;\n        \n        // Create simple HTML structure with text on the left, icon on the right\n        const iconClass = this.getStatusIcon(type);\n        settingsStatus.innerHTML = `\n            <span>${message}</span>\n            <i class=\"fas ${iconClass}\"></i>\n        `;\n        \n        // Auto-hide success messages after 3 seconds\n        if (type === 'success') {\n            setTimeout(() => {\n                settingsStatus.classList.remove('show');\n            }, 3000);\n        }\n        \n        this.logger.info('Settings save status updated', { message, type });\n    }\n    \n    /**\n     * Show settings action status with enhanced options\n     * @param {string} message - Status message\n     * @param {string} type - Message type (success, error, warning, info)\n     * @param {Object} options - Additional display options\n     * @param {boolean} options.autoDismiss - Whether to auto-dismiss\n     * @param {number} options.duration - Duration before auto-dismiss\n     */\n    showSettingsActionStatus(message, type = 'info', options = {}) {\n        const settingsActionStatus = document.getElementById('settings-action-status');\n        if (!settingsActionStatus) {\n            this.logger.warn('Settings action status element not found');\n            return;\n        }\n        \n        // Clear existing content\n        settingsActionStatus.innerHTML = '';\n        settingsActionStatus.className = `settings-action-status ${type}`;\n        \n        // Create status content\n        const statusContent = document.createElement('div');\n        statusContent.className = 'status-content';\n        \n        const text = document.createElement('span');\n        text.textContent = message;\n        statusContent.appendChild(text);\n        \n        const icon = document.createElement('i');\n        icon.className = `fas ${this.getStatusIcon(type)}`;\n        statusContent.appendChild(icon);\n        \n        settingsActionStatus.appendChild(statusContent);\n        settingsActionStatus.style.display = 'block';\n        \n        // No auto-dismiss for any type\n        this.logger.info('Settings action status shown', { message, type, autoDismiss: false });\n    }\n    \n    /**\n     * Get appropriate icon class for status type\n     * @param {string} type - Status type\n     * @returns {string} Icon class name\n     */\n    getStatusIcon(type) {\n        const icons = {\n            success: 'fa-check-circle',\n            error: 'fa-times-circle',\n            warning: 'fa-exclamation-triangle',\n            info: 'fa-info-circle'\n        };\n        return icons[type] || icons.info;\n    }\n    \n    /**\n     * Hide settings action status\n     */\n    hideSettingsActionStatus() {\n        const settingsActionStatus = document.getElementById('settings-action-status');\n        if (settingsActionStatus) {\n            settingsActionStatus.style.display = 'none';\n            this.logger.debug('Settings action status hidden');\n        }\n    }\n    \n    /**\n     * Show import status with operation details\n     * @param {string} status - Import status\n     * @param {string} message - Status message\n     * @param {Object} details - Additional details\n     */\n    showImportStatus(status, message = '', details = {}) {\n        const importStatus = document.getElementById('import-status');\n        if (!importStatus) {\n            this.logger.warn('Import status element not found');\n            return;\n        }\n        \n        importStatus.style.display = 'block';\n        importStatus.className = `import-status ${status}`;\n        \n        const statusText = importStatus.querySelector('.status-text');\n        if (statusText) {\n            statusText.textContent = message || status;\n        }\n        \n        this.logger.info('Import status shown', { status, message, details });\n    }\n    \n    /**\n     * Clear all notifications from the UI\n     */\n    clearNotifications() {\n        if (this.notificationContainer) {\n            this.notificationContainer.innerHTML = '';\n            this.logger.debug('All notifications cleared');\n        }\n        \n        this.clearStatusBar();\n    }\n    \n    /**\n     * Hide progress display\n     */\n    hideProgress() {\n        if (this.progressContainer) {\n            const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n            safeDOM.hide(this.progressContainer);\n            this.logger.debug('Progress display hidden');\n        }\n    }\n    \n    /**\n     * Show progress section with enhanced debugging and fallback mechanisms\n     */\n    showProgress() {\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] showProgress() called');\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] this.progressContainer:', this.progressContainer);\n        \n        // Try multiple ways to get the progress container\n        let progressContainer = this.progressContainer;\n        \n        if (!progressContainer) {\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress container not found in UI manager, trying direct access...');\n            progressContainer = document.getElementById('progress-container');\n        }\n        \n        if (!progressContainer) {\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress container not found by ID, trying ElementRegistry...');\n            if (typeof ElementRegistry !== 'undefined' && ElementRegistry.progressContainer) {\n                progressContainer = ElementRegistry.progressContainer();\n            }\n        }\n        \n        if (!progressContainer) {\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress container not found by ElementRegistry, trying class selector...');\n            progressContainer = document.querySelector('.progress-container');\n        }\n        \n        if (!progressContainer) {\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Progress container not found by any method');\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Available containers with \"progress\" in ID:', \n                Array.from(document.querySelectorAll('[id*=\"progress\"]')).map(el => el.id));\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Available containers with \"progress\" in class:', \n                Array.from(document.querySelectorAll('[class*=\"progress\"]')).map(el => ({ id: el.id, className: el.className })));\n            return;\n        }\n        \n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Progress container found, showing...');\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Current display style:', progressContainer.style.display);\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Current visibility:', progressContainer.offsetParent !== null ? 'visible' : 'hidden');\n        \n        // Force show the progress container\n        progressContainer.style.display = 'block';\n        progressContainer.style.visibility = 'visible';\n        progressContainer.style.opacity = '1';\n        \n        // Ensure it's not hidden by CSS\n        progressContainer.classList.remove('hidden', 'd-none');\n        progressContainer.classList.add('visible');\n        \n        // Force layout recalculation\n        progressContainer.offsetHeight;\n        \n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Display style after setting to block:', progressContainer.style.display);\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Container visibility:', progressContainer.offsetParent !== null ? 'visible' : 'hidden');\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Container dimensions:', {\n            offsetWidth: progressContainer.offsetWidth,\n            offsetHeight: progressContainer.offsetHeight,\n            clientWidth: progressContainer.clientWidth,\n            clientHeight: progressContainer.clientHeight\n        });\n        \n        // Scroll into view if needed\n        if (progressContainer.offsetParent !== null) {\n            progressContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n        \n        // Update UI manager's reference\n        this.progressContainer = progressContainer;\n        \n        this.logger.debug('Progress display shown');\n        \n        // Additional verification\n        setTimeout(() => {\n            const isVisible = progressContainer.offsetParent !== null;\n            const rect = progressContainer.getBoundingClientRect();\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Final verification:', {\n                isVisible,\n                dimensions: { width: rect.width, height: rect.height },\n                display: progressContainer.style.display,\n                computedDisplay: window.getComputedStyle(progressContainer).display\n            });\n        }, 100);\n    }\n    \n    /**\n     * Set button loading state\n     * @param {string} buttonId - Button element ID\n     * @param {boolean} isLoading - Whether to show loading state\n     */\n    setButtonLoading(buttonId, isLoading) {\n        const button = document.getElementById(buttonId);\n        if (!button) {\n            // Don't log warning for buttons that are intentionally hidden or optional\n            if (buttonId === 'get-token-quick') {\n                this.logger.debug(`Button with ID '${buttonId}' not found (may be hidden)`);\n            } else {\n                this.logger.warn(`Button with ID '${buttonId}' not found`);\n            }\n            return;\n        }\n        \n        if (isLoading) {\n            button.disabled = true;\n            button.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Loading...';\n            button.classList.add('loading');\n        } else {\n            button.disabled = false;\n            button.innerHTML = button.getAttribute('data-original-text') || 'Submit';\n            button.classList.remove('loading');\n        }\n        \n        this.logger.debug('Button loading state updated', { buttonId, isLoading });\n    }\n    \n    /**\n     * Update population dropdown fields with available populations\n     * @param {Array} populations - Array of population objects\n     */\n    updatePopulationFields(populations) {\n        if (!populations || !Array.isArray(populations)) {\n            this.logger.warn('Invalid populations data provided');\n            return;\n        }\n        \n        const populationSelects = document.querySelectorAll('select[id*=\"population\"]');\n        \n        populationSelects.forEach(select => {\n            // Store current selection\n            const currentValue = select.value;\n            \n            // Clear existing options\n            select.innerHTML = '';\n            \n            // Add default option\n            const defaultOption = document.createElement('option');\n            defaultOption.value = '';\n            defaultOption.textContent = 'Select a population...';\n            select.appendChild(defaultOption);\n            \n            // Add population options\n            populations.forEach(population => {\n                const option = document.createElement('option');\n                option.value = population.id;\n                option.textContent = population.name;\n                select.appendChild(option);\n            });\n            \n            // Restore selection if it still exists\n            if (currentValue && select.querySelector(`option[value=\"${currentValue}\"]`)) {\n                select.value = currentValue;\n            }\n        });\n        \n        this.logger.info('Population fields updated', { \n            populationCount: populations.length,\n            selectCount: populationSelects.length \n        });\n    }\n    \n    /**\n     * Show notification with enhanced options\n     * @param {string} title - Notification title\n     * @param {string} message - Notification message\n     * @param {string} type - Notification type (success, error, warning, info)\n     * @param {Object} options - Additional display options\n     * @param {boolean} options.autoDismiss - Whether to auto-dismiss\n     * @param {number} options.duration - Duration before auto-dismiss\n     */\n    showNotification(title, message, type = 'info', options = {}) {\n        if (!this.notificationContainer) {\n            this.logger.warn('Notification container not found');\n            return;\n        }\n        \n        // Clear existing content\n        this.notificationContainer.innerHTML = '';\n        \n        // Create status header content\n        const statusContent = document.createElement('div');\n        statusContent.className = 'status-content';\n        \n        // Add icon\n        const icon = document.createElement('i');\n        icon.className = `fas ${this.getStatusIcon(type)}`;\n        statusContent.appendChild(icon);\n        \n        // Add text\n        const text = document.createElement('span');\n        if (title && message) {\n            text.textContent = `${title}: ${message}`;\n        } else {\n            text.textContent = title || message;\n        }\n        statusContent.appendChild(text);\n        \n        // Add to container\n        this.notificationContainer.appendChild(statusContent);\n        \n        // Auto-dismiss if specified (but keep persistent for success messages)\n        const shouldAutoDismiss = options.autoDismiss !== false && type !== 'error' && type !== 'success';\n        if (shouldAutoDismiss) {\n            const duration = options.duration || 5000;\n            setTimeout(() => {\n                if (this.notificationContainer && this.notificationContainer.contains(statusContent)) {\n                    this.notificationContainer.innerHTML = '';\n                }\n            }, duration);\n        }\n        \n        this.logger.info('Status header updated', { title, message, type, autoDismiss: shouldAutoDismiss });\n    }\n    \n    /**\n     * Update import progress with detailed statistics\n     * @param {number} current - Current progress value\n     * @param {number} total - Total progress value\n     * @param {string} message - Progress message\n     * @param {Object} counts - Statistics counts\n     * @param {number} counts.processed - Number of processed items\n     * @param {number} counts.success - Number of successful items\n     * @param {number} counts.failed - Number of failed items\n     * @param {number} counts.skipped - Number of skipped items\n     * @param {string} populationName - Population name\n     * @param {string} populationId - Population ID\n     */\n    updateImportProgress(current, total, message = '', counts = {}, populationName = '', populationId = '') {\n        // Update main progress\n        this.updateProgress(current, total, message);\n        \n        // Update statistics if provided\n        if (counts && typeof counts === 'object') {\n            Object.entries(counts).forEach(([key, value]) => {\n                const statElement = document.querySelector(`.stat-value.${key}`);\n                if (statElement) {\n                    statElement.textContent = value || 0;\n                }\n            });\n        }\n        \n        // Update population information if provided\n        if (populationName || populationId) {\n            const populationElement = document.querySelector('.detail-value.population-info');\n            if (populationElement) {\n                populationElement.textContent = populationName || populationId || 'Unknown';\n            }\n        }\n        \n        this.logger.debug('Import progress updated', { \n            current, \n            total, \n            message, \n            counts, \n            populationName, \n            populationId \n        });\n    }\n    \n    /**\n     * Start import operation with progress tracking\n     * @param {Object} options - Operation options\n     * @param {string} options.operationType - Type of operation\n     * @param {number} options.totalUsers - Total number of users\n     * @param {string} options.populationName - Population name\n     * @param {string} options.populationId - Population ID\n     */\n    startImportOperation(options = {}) {\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] startImportOperation() called with options:', options);\n        \n        const { operationType, totalUsers, populationName, populationId } = options;\n        \n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] About to call showProgress()...');\n        this.showProgress();\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] showProgress() completed');\n        \n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] About to call updateProgress()...');\n        this.updateProgress(0, totalUsers || 0, 'Starting import operation...');\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] updateProgress() completed');\n        \n        // Update operation details\n        const operationTypeElement = document.querySelector('.detail-value.operation-type');\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Operation type element:', operationTypeElement);\n        if (operationTypeElement) {\n            operationTypeElement.textContent = operationType || 'Import';\n            (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] Operation type updated to:', operationType || 'Import');\n        } else {\n            (window.logger?.error || console.error)('🔍 [UI MANAGER DEBUG] Operation type element not found');\n        }\n        \n        this.logger.info('Import operation started', { operationType, totalUsers, populationName, populationId });\n        (window.logger?.debug || console.log)('🔍 [UI MANAGER DEBUG] startImportOperation() completed');\n    }\n    \n    /**\n     * Update import operation with session ID\n     * @param {string} sessionId - Session ID for tracking\n     */\n    updateImportOperationWithSessionId(sessionId) {\n        if (!sessionId) {\n            this.logger.warn('No session ID provided for import operation');\n            return;\n        }\n        \n        const sessionElement = document.querySelector('.detail-value.session-id');\n        if (sessionElement) {\n            sessionElement.textContent = sessionId;\n        }\n        \n        this.logger.info('Import operation session ID updated', { sessionId });\n    }\n    \n    /**\n     * Start export operation with progress tracking\n     * @param {Object} options - Operation options\n     * @param {number} options.totalUsers - Total number of users\n     * @param {string} options.populationName - Population name\n     */\n    startExportOperation(options = {}) {\n        const { totalUsers, populationName } = options;\n        \n        this.showProgress();\n        this.updateProgress(0, totalUsers || 0, 'Starting export operation...');\n        \n        const operationTypeElement = document.querySelector('.detail-value.operation-type');\n        if (operationTypeElement) {\n            operationTypeElement.textContent = 'Export';\n        }\n        \n        this.logger.info('Export operation started', { totalUsers, populationName });\n    }\n    \n    /**\n     * Start delete operation with progress tracking\n     * @param {Object} options - Operation options\n     * @param {number} options.totalUsers - Total number of users\n     * @param {string} options.populationName - Population name\n     */\n    startDeleteOperation(options = {}) {\n        const { totalUsers, populationName } = options;\n        \n        this.showProgress();\n        this.updateProgress(0, totalUsers || 0, 'Starting delete operation...');\n        \n        const operationTypeElement = document.querySelector('.detail-value.operation-type');\n        if (operationTypeElement) {\n            operationTypeElement.textContent = 'Delete';\n        }\n        \n        this.logger.info('Delete operation started', { totalUsers, populationName });\n    }\n    \n    /**\n     * Start modify operation with progress tracking\n     * @param {Object} options - Operation options\n     * @param {number} options.totalUsers - Total number of users\n     * @param {string} options.populationName - Population name\n     */\n    startModifyOperation(options = {}) {\n        const { totalUsers, populationName } = options;\n        \n        this.showProgress();\n        this.updateProgress(0, totalUsers || 0, 'Starting modify operation...');\n        \n        const operationTypeElement = document.querySelector('.detail-value.operation-type');\n        if (operationTypeElement) {\n            operationTypeElement.textContent = 'Modify';\n        }\n        \n        this.logger.info('Modify operation started', { totalUsers, populationName });\n    }\n    \n    /**\n     * Complete operation with results\n     * @param {Object} results - Operation results\n     * @param {number} results.processed - Number of processed items\n     * @param {number} results.success - Number of successful items\n     * @param {number} results.failed - Number of failed items\n     * @param {number} results.skipped - Number of skipped items\n     */\n    completeOperation(results = {}) {\n        const { processed, success, failed, skipped } = results;\n        \n        this.updateProgress(processed || 0, processed || 0, 'Operation completed');\n        \n        // Show completion message\n        const message = `Operation completed: ${success || 0} successful, ${failed || 0} failed, ${skipped || 0} skipped`;\n        this.showSuccess(message);\n        \n        // Hide progress after delay\n        setTimeout(() => {\n            this.hideProgress();\n        }, 2000);\n        \n        this.logger.info('Operation completed', { processed, success, failed, skipped });\n    }\n    \n    /**\n     * Handle duplicate users with decision callback\n     * @param {Array} duplicates - Array of duplicate user objects\n     * @param {Function} onDecision - Callback function for user decision\n     */\n    handleDuplicateUsers(duplicates, onDecision) {\n        if (!duplicates || duplicates.length === 0) {\n            this.logger.warn('No duplicates provided for handling');\n            return;\n        }\n        \n        const message = `Found ${duplicates.length} duplicate users. How would you like to proceed?`;\n        this.showWarning(message);\n        \n        // In a real implementation, you would show a modal or dialog here\n        // For now, we'll just log the decision\n        this.logger.info('Duplicate users found', { count: duplicates.length });\n        \n        if (onDecision && typeof onDecision === 'function') {\n            onDecision('skip'); // Default to skip\n        }\n    }\n    \n    /**\n     * Debug logging for development\n     * @param {string} area - Debug area\n     * @param {string} message - Debug message\n     */\n    debugLog(area, message) {\n        if (DEBUG_MODE) {\n            this.logger.debug(`[${area}] ${message}`);\n        }\n    }\n    \n    /**\n     * Show status message with type\n     * @param {string} type - Message type\n     * @param {string} message - Message content\n     * @param {string} details - Additional details\n     */\n    showStatusMessage(type, message, details = '') {\n        const fullMessage = details ? `${message}: ${details}` : message;\n        this.showNotification('Status Update', fullMessage, type);\n    }\n    \n    /**\n     * Show export status\n     */\n    showExportStatus() {\n        this.showProgress();\n        this.updateProgress(0, 100, 'Preparing export...');\n        this.logger.info('Export status shown');\n    }\n    \n    /**\n     * Update export progress\n     * @param {number} current - Current progress\n     * @param {number} total - Total progress\n     * @param {string} message - Progress message\n     * @param {Object} counts - Statistics counts\n     */\n    updateExportProgress(current, total, message, counts = {}) {\n        this.updateProgress(current, total, message);\n        \n        // Update export-specific statistics\n        if (counts && typeof counts === 'object') {\n            Object.entries(counts).forEach(([key, value]) => {\n                const statElement = document.querySelector(`.stat-value.${key}`);\n                if (statElement) {\n                    statElement.textContent = value || 0;\n                }\n            });\n        }\n        \n        this.logger.debug('Export progress updated', { current, total, message, counts });\n    }\n    \n    /**\n     * Show delete status\n     * @param {number} totalUsers - Total number of users\n     * @param {string} populationName - Population name\n     * @param {string} populationId - Population ID\n     */\n    showDeleteStatus(totalUsers, populationName, populationId) {\n        this.showProgress();\n        this.updateProgress(0, totalUsers || 0, 'Preparing delete operation...');\n        \n        const operationTypeElement = document.querySelector('.detail-value.operation-type');\n        if (operationTypeElement) {\n            operationTypeElement.textContent = 'Delete';\n        }\n        \n        this.logger.info('Delete status shown', { totalUsers, populationName, populationId });\n    }\n    \n    /**\n     * Update delete progress\n     * @param {number} current - Current progress\n     * @param {number} total - Total progress\n     * @param {string} message - Progress message\n     * @param {Object} counts - Statistics counts\n     * @param {string} populationName - Population name\n     * @param {string} populationId - Population ID\n     */\n    updateDeleteProgress(current, total, message, counts = {}, populationName = '', populationId = '') {\n        this.updateProgress(current, total, message);\n        \n        // Update delete-specific statistics\n        if (counts && typeof counts === 'object') {\n            Object.entries(counts).forEach(([key, value]) => {\n                const statElement = document.querySelector(`.stat-value.${key}`);\n                if (statElement) {\n                    statElement.textContent = value || 0;\n                }\n            });\n        }\n        \n        this.logger.debug('Delete progress updated', { \n            current, \n            total, \n            message, \n            counts, \n            populationName, \n            populationId \n        });\n    }\n    \n    /**\n     * Show modify status\n     * @param {number} totalUsers - Total number of users\n     */\n    showModifyStatus(totalUsers) {\n        this.showProgress();\n        this.updateProgress(0, totalUsers || 0, 'Preparing modify operation...');\n        \n        const operationTypeElement = document.querySelector('.detail-value.operation-type');\n        if (operationTypeElement) {\n            operationTypeElement.textContent = 'Modify';\n        }\n        \n        this.logger.info('Modify status shown', { totalUsers });\n    }\n    \n    /**\n     * Update modify progress\n     * @param {number} current - Current progress\n     * @param {number} total - Total progress\n     * @param {string} message - Progress message\n     * @param {Object} counts - Statistics counts\n     */\n    updateModifyProgress(current, total, message, counts = {}) {\n        this.updateProgress(current, total, message);\n        \n        // Update modify-specific statistics\n        if (counts && typeof counts === 'object') {\n            Object.entries(counts).forEach(([key, value]) => {\n                const statElement = document.querySelector(`.stat-value.${key}`);\n                if (statElement) {\n                    statElement.textContent = value || 0;\n                }\n            });\n        }\n        \n        this.logger.debug('Modify progress updated', { current, total, message, counts });\n    }\n}\n\n// Export the UIManager class\nexport { UIManager };\n","/**\n * TokenManager - Handles OAuth 2.0 token acquisition and caching with automatic re-authentication\n * \n * Features:\n * - Automatic token refresh before expiry\n * - Detection of token expiration via 401 responses\n * - Automatic retry of failed requests with new tokens\n * - Secure credential storage and retrieval\n * - Rate limiting to prevent API abuse\n */\nclass TokenManager {\n    /**\n     * Create a new TokenManager instance\n     * @param {Object} logger - Logger instance for logging messages\n     * @param {Object} settings - Settings object containing API credentials\n     */\n    constructor(logger, settings, eventBus) {\n        if (!settings) {\n            throw new Error('Settings are required for TokenManager');\n        }\n        \n        this.logger = logger || console;\n        this.settings = settings || {};\n        this.eventBus = eventBus;\n        this.tokenCache = {\n            accessToken: null,\n            expiresAt: 0,\n            tokenType: 'Bearer',\n            lastRefresh: 0\n        };\n        this.tokenExpiryBuffer = 5 * 60 * 1000; // 5 minutes buffer before token expiry\n        this.isRefreshing = false;\n        this.refreshQueue = [];\n        \n        // Auto-retry configuration\n        this.maxRetries = 1; // Only retry once with new token\n        this.retryDelay = 1000; // 1 second delay before retry\n        \n        // Bind methods\n        this.getAccessToken = this.getAccessToken.bind(this);\n        this._requestNewToken = this._requestNewToken.bind(this);\n        this._isTokenValid = this._isTokenValid.bind(this);\n        this.handleTokenExpiration = this.handleTokenExpiration.bind(this);\n        this.retryWithNewToken = this.retryWithNewToken.bind(this);\n    }\n\n    /**\n     * Get a valid access token, either from cache or by requesting a new one\n     * @returns {Promise<string>} The access token\n     */\n    async getAccessToken() {\n        // Check if we have a valid cached token\n        if (this._isTokenValid()) {\n            this.logger.debug('Using cached access token');\n            return this.tokenCache.accessToken;\n        }\n\n        // If a refresh is already in progress, queue this request\n        if (this.isRefreshing) {\n            return new Promise((resolve) => {\n                this.refreshQueue.push(resolve);\n            });\n        }\n\n        // Otherwise, request a new token\n        try {\n            this.isRefreshing = true;\n            const token = await this._requestNewToken();\n            \n            // Resolve all queued requests\n            while (this.refreshQueue.length > 0) {\n                const resolve = this.refreshQueue.shift();\n                resolve(token);\n            }\n            \n            return token;\n        } catch (error) {\n            // Clear token cache on error\n            this.tokenCache = {\n                accessToken: null,\n                expiresAt: 0,\n                tokenType: 'Bearer',\n                lastRefresh: 0\n            };\n            \n            // Emit token error event\n            if (this.eventBus) {\n                this.eventBus.emit('tokenError', { error: error.message });\n            }\n            \n            // Reject all queued requests\n            while (this.refreshQueue.length > 0) {\n                const resolve = this.refreshQueue.shift();\n                resolve(Promise.reject(error));\n            }\n            \n            throw error;\n        } finally {\n            this.isRefreshing = false;\n        }\n    }\n\n    /**\n     * Handle token expiration detected from API response\n     * @param {Object} response - The failed API response\n     * @param {Function} retryFn - Function to retry the original request\n     * @returns {Promise<Object>} The retry result\n     */\n    async handleTokenExpiration(response, retryFn) {\n        if (!response) {\n            throw new Error('Response is required for token expiration handling');\n        }\n        \n        if (!retryFn || typeof retryFn !== 'function') {\n            throw new Error('Retry function is required for token expiration handling');\n        }\n        \n        this.logger.warn('Token expiration detected, attempting automatic re-authentication');\n        \n        // Clear the expired token\n        this.tokenCache = {\n            accessToken: null,\n            expiresAt: 0,\n            tokenType: 'Bearer',\n            lastRefresh: 0\n        };\n        \n        // Emit token expiration event\n        if (this.eventBus) {\n            this.eventBus.emit('tokenExpired', { response });\n        }\n        \n        try {\n            // Get a new token using stored credentials\n            const newToken = await this.getAccessToken();\n            \n            if (!newToken) {\n                throw new Error('Failed to obtain new token for retry');\n            }\n            \n            this.logger.info('Successfully obtained new token, retrying request');\n            \n            // Wait a moment before retrying to avoid rate limiting\n            await new Promise(resolve => setTimeout(resolve, this.retryDelay));\n            \n            // Retry the original request with the new token\n            return await retryFn(newToken);\n            \n        } catch (error) {\n            this.logger.error('Failed to re-authenticate and retry request', {\n                error: error.message,\n                originalStatus: response.status\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Retry a failed request with a new token\n     * @param {Function} requestFn - Function that makes the API request\n     * @param {Object} options - Request options\n     * @returns {Promise<Object>} The API response\n     */\n    async retryWithNewToken(requestFn, options = {}) {\n        if (!requestFn || typeof requestFn !== 'function') {\n            throw new Error('Request function is required for retry operation');\n        }\n        \n        let retryCount = 0;\n        \n        while (retryCount <= this.maxRetries) {\n            try {\n                // Get current token\n                const token = await this.getAccessToken();\n                \n                // Make the request\n                const response = await requestFn(token);\n                \n                // Check if the response indicates token expiration\n                if (response.status === 401) {\n                    const responseText = await response.text().catch(() => '');\n                    const isTokenExpired = responseText.includes('token_expired') || \n                                         responseText.includes('invalid_token') ||\n                                         responseText.includes('expired');\n                    \n                    if (isTokenExpired && retryCount < this.maxRetries) {\n                        this.logger.warn(`Token expired on attempt ${retryCount + 1}, retrying with new token`);\n                        \n                        // Clear expired token and get new one\n                        this.tokenCache = {\n                            accessToken: null,\n                            expiresAt: 0,\n                            tokenType: 'Bearer',\n                            lastRefresh: 0\n                        };\n                        \n                        retryCount++;\n                        continue;\n                    }\n                }\n                \n                // If we get here, the request was successful or we've exhausted retries\n                return response;\n                \n            } catch (error) {\n                if (retryCount >= this.maxRetries) {\n                    throw error;\n                }\n                \n                this.logger.warn(`Request failed on attempt ${retryCount + 1}, retrying`, {\n                    error: error.message\n                });\n                \n                retryCount++;\n                \n                // Wait before retrying\n                await new Promise(resolve => setTimeout(resolve, this.retryDelay));\n            }\n        }\n        \n        throw new Error('Max retries exceeded');\n    }\n\n    /**\n     * Create a request wrapper that automatically handles token expiration\n     * @param {Function} requestFn - Function that makes the API request\n     * @returns {Function} Wrapped function that handles token expiration\n     */\n    createAutoRetryWrapper(requestFn) {\n        if (!requestFn || typeof requestFn !== 'function') {\n            throw new Error('Request function is required for auto-retry wrapper');\n        }\n        \n        return async (...args) => {\n            return await this.retryWithNewToken(async (token) => {\n                // Add the token to the request arguments\n                const requestArgs = [...args];\n                \n                // If the first argument is an options object, add the token to it\n                if (requestArgs[0] && typeof requestArgs[0] === 'object') {\n                    requestArgs[0].headers = {\n                        ...requestArgs[0].headers,\n                        'Authorization': `Bearer ${token}`\n                    };\n                }\n                \n                return await requestFn(...requestArgs);\n            });\n        };\n    }\n\n    /**\n     * Get token information including expiry details\n     * @returns {Object|null} Token info object or null if no token\n     */\n    getTokenInfo() {\n        if (!this.tokenCache.accessToken) {\n            return null;\n        }\n        \n        const now = Date.now();\n        const expiresIn = Math.max(0, this.tokenCache.expiresAt - now);\n        \n        return {\n            accessToken: this.tokenCache.accessToken,\n            expiresIn: Math.floor(expiresIn / 1000), // Convert to seconds\n            tokenType: this.tokenCache.tokenType,\n            expiresAt: this.tokenCache.expiresAt,\n            lastRefresh: this.tokenCache.lastRefresh,\n            isValid: this._isTokenValid()\n        };\n    }\n\n    /**\n     * Check if the current token is still valid\n     * @returns {boolean} True if token is valid, false otherwise\n     * @private\n     */\n    _isTokenValid() {\n        const now = Date.now();\n        return this.tokenCache.accessToken && \n               this.tokenCache.expiresAt > (now + this.tokenExpiryBuffer) &&\n               // Ensure token isn't too old (max 1 hour)\n               (now - this.tokenCache.lastRefresh) < (60 * 60 * 1000);\n    }\n\n    /**\n     * Get the auth domain for a given region\n     * @param {string} region - The region to get auth domain for\n     * @returns {string} The auth domain URL\n     * @private\n     */\n    _getAuthDomain(region) {\n        if (!region) {\n            return 'auth.pingone.com';\n        }\n        \n        const authDomainMap = {\n            'NorthAmerica': 'auth.pingone.com',\n            'Europe': 'auth.eu.pingone.com',\n            'Canada': 'auth.ca.pingone.com',\n            'Asia': 'auth.apsoutheast.pingone.com',\n            'Australia': 'auth.aus.pingone.com',\n            'US': 'auth.pingone.com',\n            'EU': 'auth.eu.pingone.com',\n            'AP': 'auth.apsoutheast.pingone.com'\n        };\n        return authDomainMap[region] || 'auth.pingone.com';\n    }\n\n    /**\n     * Request a new access token from PingOne using stored credentials\n     * @returns {Promise<string>} The new access token\n     * @private\n     */\n    async _requestNewToken() {\n        const { apiClientId, apiSecret, environmentId, region = 'NorthAmerica' } = this.settings;\n        const requestId = `req_${Math.random().toString(36).substr(2, 9)}`;\n        const startTime = Date.now();\n        \n        // Validate required settings\n        if (!apiClientId || !apiSecret || !environmentId) {\n            const error = new Error('Missing required API credentials in settings');\n            this.logger.error('Token request failed: Missing credentials', {\n                requestId,\n                hasClientId: !!apiClientId,\n                hasSecret: !!apiSecret,\n                hasEnvId: !!environmentId\n            });\n            throw error;\n        }\n\n        // Prepare request\n        const authDomain = this._getAuthDomain(region);\n        const tokenUrl = `https://${authDomain}/${environmentId}/as/token`;\n        const credentials = btoa(`${apiClientId}:${apiSecret}`);\n        \n        try {\n            this.logger.debug('Requesting new access token from PingOne...', {\n                requestId,\n                authDomain,\n                environmentId,\n                region\n            });\n            \n            const response = await fetch(tokenUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'Authorization': `Basic ${credentials}`\n                },\n                body: 'grant_type=client_credentials',\n                credentials: 'omit'\n            });\n\n            const responseTime = Date.now() - startTime;\n            let responseData;\n            \n            try {\n                responseData = await response.json();\n            } catch (e) {\n                const text = await response.text().catch(() => 'Failed to read response text');\n                throw new Error(`Invalid JSON response: ${e.message}. Response: ${text}`);\n            }\n            \n            if (!response.ok) {\n                const errorMsg = responseData.error_description || \n                               responseData.error || \n                               `HTTP ${response.status} ${response.statusText}`;\n                \n                this.logger.error('Token request failed', {\n                    requestId,\n                    status: response.status,\n                    error: responseData.error,\n                    errorDescription: responseData.error_description,\n                    responseTime: `${responseTime}ms`,\n                    url: tokenUrl\n                });\n                \n                throw new Error(errorMsg);\n            }\n            \n            if (!responseData.access_token) {\n                throw new Error('No access token in response');\n            }\n            \n            // Update token cache\n            const expiresInMs = (responseData.expires_in || 3600) * 1000;\n            this.tokenCache = {\n                accessToken: responseData.access_token,\n                expiresAt: Date.now() + expiresInMs,\n                tokenType: responseData.token_type || 'Bearer',\n                lastRefresh: Date.now()\n            };\n            \n            this.logger.info('Successfully obtained new access token', {\n                requestId,\n                tokenType: this.tokenCache.tokenType,\n                expiresIn: Math.floor(expiresInMs / 1000) + 's',\n                responseTime: `${responseTime}ms`\n            });\n            \n            // Emit token refresh event\n            if (this.eventBus) {\n                this.eventBus.emit('tokenRefreshed', {\n                    tokenType: this.tokenCache.tokenType,\n                    expiresAt: this.tokenCache.expiresAt\n                });\n            }\n            \n            return this.tokenCache.accessToken;\n            \n        } catch (error) {\n            this.logger.error('Error getting access token', {\n                requestId,\n                error: error.toString(),\n                message: error.message,\n                url: tokenUrl,\n                responseTime: `${Date.now() - startTime}ms`\n            });\n            \n            // Clear token cache on error\n            this.tokenCache = {\n                accessToken: null,\n                expiresAt: 0,\n                tokenType: 'Bearer',\n                lastRefresh: 0\n            };\n            \n            throw error;\n        }\n    }\n    \n    /**\n     * Update settings and clear token cache if credentials changed\n     * @param {Object} newSettings - New settings object\n     */\n    updateSettings(newSettings) {\n        if (!newSettings) {\n            throw new Error('New settings are required for update');\n        }\n        \n        const credentialsChanged = \n            newSettings.apiClientId !== this.settings.apiClientId ||\n            newSettings.apiSecret !== this.settings.apiSecret ||\n            newSettings.environmentId !== this.settings.environmentId ||\n            newSettings.region !== this.settings.region;\n        \n        this.settings = { ...this.settings, ...newSettings };\n        \n        if (credentialsChanged) {\n            this.logger.debug('API credentials changed, clearing token cache');\n            this.tokenCache = {\n                accessToken: null,\n                expiresAt: 0,\n                tokenType: 'Bearer',\n                lastRefresh: 0\n            };\n        }\n    }\n}\n\nexport default TokenManager;\n","/**\n * Disclaimer Modal Module\n * Enforces user acknowledgment before allowing access to the application\n */\nclass DisclaimerModal {\n    constructor() {\n        this.isActive = false;\n        this.focusableElements = [];\n        this.firstFocusableElement = null;\n        this.lastFocusableElement = null;\n        this.previousActiveElement = null;\n        \n        this.init();\n    }\n\n    init() {\n        this.createModal();\n        this.bindEvents();\n        this.showModal();\n    }\n\n    createModal() {\n        // Create modal overlay\n        const overlay = document.createElement('div');\n        overlay.className = 'disclaimer-modal-overlay';\n        overlay.setAttribute('role', 'dialog');\n        overlay.setAttribute('aria-modal', 'true');\n        overlay.setAttribute('aria-labelledby', 'disclaimer-title');\n        overlay.setAttribute('aria-describedby', 'disclaimer-content');\n\n        // Create modal content\n        overlay.innerHTML = `\n            <div class=\"disclaimer-modal\" tabindex=\"-1\">\n                <div class=\"disclaimer-modal-header\">\n                    <h2 id=\"disclaimer-title\">\n                        <span class=\"warning-icon\" aria-hidden=\"true\">⚠️</span>\n                        <span>Important Disclaimer</span>\n                    </h2>\n                </div>\n                \n                <div class=\"disclaimer-modal-body\">\n                    <div id=\"disclaimer-content\" class=\"disclaimer-content\">\n                        <h3>🚨 UNSUPPORTED TOOL WARNING</h3>\n                        <p>\n                            <strong>This tool is NOT an official Ping Identity product</strong> and is provided \n                            <span class=\"highlight\">without any warranty or support</span>. Use at your own risk.\n                        </p>\n                        \n                        <h3>⚠️ CRITICAL DISCLAIMERS:</h3>\n                        <ul>\n                            <li><strong>No technical support</strong> is available from Ping Identity</li>\n                            <li><strong>No updates or bug fixes</strong> are guaranteed</li>\n                            <li><strong>No compatibility</strong> with future PingOne versions is assured</li>\n                            <li><strong>No documentation or training</strong> is provided by Ping Identity</li>\n                            <li>This tool may <strong>stop working at any time</strong> without notice</li>\n                            <li>Use of this tool is <strong>not recommended for production environments</strong></li>\n                            <li>You are <strong>responsible for testing and validating</strong> all operations</li>\n                            <li><strong>Backup your PingOne account</strong> before using this tool</li>\n                            <li><strong>Test in non-production environments</strong> only</li>\n                        </ul>\n                        \n                        <p>\n                            <strong>By continuing, you acknowledge that:</strong>\n                        </p>\n                        <ul>\n                            <li>You understand this tool is unsupported and use it at your own risk</li>\n                            <li>You have backed up your PingOne account data</li>\n                            <li>You will test operations in non-production environments first</li>\n                            <li>You accept full responsibility for any data loss or issues</li>\n                        </ul>\n                    </div>\n                </div>\n                \n                <div class=\"disclaimer-modal-footer\">\n                    <div class=\"disclaimer-agreement\">\n                        <div class=\"disclaimer-checkbox\">\n                            <input type=\"checkbox\" id=\"disclaimer-agreement-checkbox\" required>\n                            <label for=\"disclaimer-agreement-checkbox\">\n                                <span class=\"required-indicator\">*</span>\n                                I acknowledge and accept the above disclaimer. I understand this tool is unsupported and I use it at my own risk.\n                            </label>\n                        </div>\n                    </div>\n                    \n                    <div class=\"disclaimer-actions\">\n                        <button type=\"button\" class=\"disclaimer-btn disclaimer-btn-secondary\" id=\"disclaimer-cancel\">\n                            Cancel\n                        </button>\n                        <button type=\"button\" class=\"disclaimer-btn disclaimer-btn-primary\" id=\"disclaimer-continue\" disabled>\n                            Continue\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(overlay);\n        this.overlay = overlay;\n        this.modal = overlay.querySelector('.disclaimer-modal');\n        this.checkbox = overlay.querySelector('#disclaimer-agreement-checkbox');\n        this.continueBtn = overlay.querySelector('#disclaimer-continue');\n        this.cancelBtn = overlay.querySelector('#disclaimer-cancel');\n    }\n\n    bindEvents() {\n        // Checkbox change event\n        this.checkbox.addEventListener('change', (e) => {\n            this.continueBtn.disabled = !e.target.checked;\n            this.logEvent('disclaimer_checkbox_changed', { checked: e.target.checked });\n        });\n\n        // Continue button click\n        this.continueBtn.addEventListener('click', () => {\n            this.acceptDisclaimer();\n        });\n\n        // Cancel button click\n        this.cancelBtn.addEventListener('click', () => {\n            this.cancelDisclaimer();\n        });\n\n        // Keyboard events for accessibility\n        this.overlay.addEventListener('keydown', (e) => {\n            this.handleKeyboardNavigation(e);\n        });\n\n        // Prevent clicks outside modal from closing it\n        this.overlay.addEventListener('click', (e) => {\n            if (e.target === this.overlay) {\n                // Don't close on outside click - require explicit action\n                this.logEvent('disclaimer_outside_click_prevented');\n            }\n        });\n\n        // Escape key handling\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.isActive) {\n                e.preventDefault();\n                this.cancelDisclaimer();\n            }\n        });\n    }\n\n    handleKeyboardNavigation(e) {\n        if (!this.isActive) return;\n\n        const focusableElements = this.getFocusableElements();\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n\n        // Tab key navigation with focus trapping\n        if (e.key === 'Tab') {\n            if (e.shiftKey) {\n                if (document.activeElement === firstElement) {\n                    e.preventDefault();\n                    lastElement.focus();\n                }\n            } else {\n                if (document.activeElement === lastElement) {\n                    e.preventDefault();\n                    firstElement.focus();\n                }\n            }\n        }\n    }\n\n    getFocusableElements() {\n        const focusableSelectors = [\n            'button:not([disabled])',\n            'input:not([disabled])',\n            'select:not([disabled])',\n            'textarea:not([disabled])',\n            'a[href]',\n            '[tabindex]:not([tabindex=\"-1\"])'\n        ];\n\n        return Array.from(this.modal.querySelectorAll(focusableSelectors.join(', ')));\n    }\n\n    showModal() {\n        this.isActive = true;\n        this.previousActiveElement = document.activeElement;\n        \n        // Add classes to body and app container\n        document.body.classList.add('disclaimer-modal-open');\n        const appContainer = document.querySelector('.app-container');\n        if (appContainer) {\n            appContainer.classList.add('disclaimer-modal-active');\n        }\n\n        // Show modal with animation\n        this.overlay.classList.add('active');\n        \n        // Focus management\n        this.modal.focus();\n        this.setupFocusTrap();\n        \n        this.logEvent('disclaimer_modal_shown');\n        \n        // Announce to screen readers\n        this.announceToScreenReader('Disclaimer modal opened. You must read and accept the disclaimer to continue.');\n    }\n\n    setupFocusTrap() {\n        this.focusableElements = this.getFocusableElements();\n        this.firstFocusableElement = this.focusableElements[0];\n        this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1];\n    }\n\n    acceptDisclaimer() {\n        if (!this.checkbox.checked) {\n            this.logEvent('disclaimer_acceptance_attempted_without_checkbox');\n            return;\n        }\n\n        this.logEvent('disclaimer_accepted');\n        this.hideModal();\n        \n        // Enable application functionality\n        this.enableApplication();\n        \n        // Call the app's enableToolAfterDisclaimer function to show startup screen\n        if (typeof window.enableToolAfterDisclaimer === 'function') {\n            console.log('[STARTUP] [DEBUG] Disclaimer accepted, calling enableToolAfterDisclaimer');\n            window.enableToolAfterDisclaimer();\n        } else {\n            console.warn('[STARTUP] [DEBUG] enableToolAfterDisclaimer function not found');\n        }\n        \n        // Dispatch custom event for other components to listen to\n        document.dispatchEvent(new CustomEvent('disclaimerAccepted', {\n            detail: { timestamp: new Date().toISOString() }\n        }));\n        \n        // Announce to screen readers\n        this.announceToScreenReader('Disclaimer accepted. Application is now enabled.');\n    }\n\n    cancelDisclaimer() {\n        this.logEvent('disclaimer_cancelled');\n        this.hideModal();\n        \n        // Show warning that application cannot be used without accepting\n        this.showCancellationWarning();\n    }\n\n    hideModal() {\n        this.isActive = false;\n        \n        // Remove classes\n        document.body.classList.remove('disclaimer-modal-open');\n        const appContainer = document.querySelector('.app-container');\n        if (appContainer) {\n            appContainer.classList.remove('disclaimer-modal-active');\n        }\n\n        // Hide modal with animation\n        this.overlay.classList.remove('active');\n        \n        // Restore focus\n        if (this.previousActiveElement) {\n            this.previousActiveElement.focus();\n        }\n        \n        // Announce to screen readers\n        this.announceToScreenReader('Disclaimer modal closed.');\n    }\n\n    enableApplication() {\n        // Remove disabled state from all interactive elements\n        const disabledElements = document.querySelectorAll('[disabled]');\n        disabledElements.forEach(el => {\n            if (el.classList.contains('disclaimer-disabled')) {\n                el.disabled = false;\n                el.classList.remove('disclaimer-disabled');\n            }\n        });\n\n        // Enable navigation\n        const navItems = document.querySelectorAll('.nav-item');\n        navItems.forEach(item => {\n            item.style.pointerEvents = 'auto';\n            item.style.opacity = '1';\n        });\n\n        // Enable feature cards\n        const featureCards = document.querySelectorAll('.feature-card');\n        featureCards.forEach(card => {\n            card.style.pointerEvents = 'auto';\n            card.style.opacity = '1';\n        });\n\n        // Store acceptance\n        DisclaimerModal.setDisclaimerAccepted();\n        this.logEvent('application_enabled_after_disclaimer');\n    }\n\n    showCancellationWarning() {\n        // Create a temporary warning message\n        const warning = document.createElement('div');\n        warning.className = 'alert alert-warning alert-dismissible fade show';\n        warning.style.position = 'fixed';\n        warning.style.top = '20px';\n        warning.style.left = '50%';\n        warning.style.transform = 'translateX(-50%)';\n        warning.style.zIndex = '10000';\n        warning.style.maxWidth = '500px';\n        warning.innerHTML = `\n            <strong>⚠️ Disclaimer Required</strong>\n            <br>You must accept the disclaimer to use this tool. The application will remain disabled until you acknowledge the terms.\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n        `;\n\n        document.body.appendChild(warning);\n\n        // Auto-remove after 10 seconds\n        setTimeout(() => {\n            if (warning.parentNode) {\n                warning.remove();\n            }\n        }, 10000);\n\n        this.logEvent('disclaimer_cancellation_warning_shown');\n    }\n\n    announceToScreenReader(message) {\n        // Create temporary element for screen reader announcement\n        const announcement = document.createElement('div');\n        announcement.setAttribute('aria-live', 'polite');\n        announcement.setAttribute('aria-atomic', 'true');\n        announcement.className = 'sr-only';\n        announcement.textContent = message;\n        \n        document.body.appendChild(announcement);\n        \n        // Remove after announcement\n        setTimeout(() => {\n            if (announcement.parentNode) {\n                announcement.remove();\n            }\n        }, 1000);\n    }\n\n    logEvent(eventName, data = {}) {\n        // Log to console for debugging\n        console.log(`[DisclaimerModal] ${eventName}:`, data);\n        \n        // Send to server if logging is available and properly initialized\n        try {\n            // Check if logManager exists and has the log method\n            if (window.logManager && typeof window.logManager.log === 'function') {\n                window.logManager.log('info', `Disclaimer modal: ${eventName}`, {\n                    source: 'disclaimer-modal',\n                    type: 'ui',\n                    ...data\n                });\n            } else if (window.logManager) {\n                // logManager exists but doesn't have log method - initialize it\n                if (typeof window.logManager.log !== 'function') {\n                    window.logManager.log = function(level, message, data) {\n                        const timestamp = new Date().toISOString();\n                        const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n                        if (data) {\n                            console.log(logMessage, data);\n                        } else {\n                            console.log(logMessage);\n                        }\n                    };\n                    // Now try logging again\n                    window.logManager.log('info', `Disclaimer modal: ${eventName}`, {\n                        source: 'disclaimer-modal',\n                        type: 'ui',\n                        ...data\n                    });\n                }\n            } else {\n                // logManager not available - create a basic one\n                window.logManager = {\n                    log: function(level, message, data) {\n                        const timestamp = new Date().toISOString();\n                        const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n                        if (data) {\n                            console.log(logMessage, data);\n                        } else {\n                            console.log(logMessage);\n                        }\n                    }\n                };\n                // Now try logging\n                window.logManager.log('info', `Disclaimer modal: ${eventName}`, {\n                    source: 'disclaimer-modal',\n                    type: 'ui',\n                    ...data\n                });\n            }\n        } catch (error) {\n            // Graceful fallback if logging fails\n            console.warn('[DisclaimerModal] Logging failed:', error);\n        }\n    }\n\n    // === CONFIGURATION ===\n    // Set to true for session-only disclaimer (shows once per browser session)\n    static DISCLAIMER_SESSION_ONLY = false; // set true for sessionStorage, false for localStorage\n    // Set expiry in days (set to 0 for no expiry)\n    static DISCLAIMER_EXPIRY_DAYS = 7; // e.g. 7 days, or 0 for no expiry\n\n    // Static method to check if disclaimer was previously accepted (with expiry/session logic)\n    static isDisclaimerAccepted() {\n        // TEMPORARY: Force disclaimer to always show for debugging\n        return false;\n        \n        // Original logic (commented out for debugging):\n        // if (DisclaimerModal.DISCLAIMER_SESSION_ONLY) {\n        //     return sessionStorage.getItem('disclaimerAccepted') === 'true';\n        // }\n        // // Expiry logic\n        // const accepted = localStorage.getItem('disclaimerAccepted') === 'true';\n        // if (!accepted) return false;\n        // if (DisclaimerModal.DISCLAIMER_EXPIRY_DAYS > 0) {\n        //     const acceptedAt = localStorage.getItem('disclaimerAcceptedAt');\n        //     if (!acceptedAt) return false;\n        //     const acceptedDate = new Date(acceptedAt);\n        //     const now = new Date();\n        //     const diffDays = (now - acceptedDate) / (1000 * 60 * 60 * 24);\n        //     if (diffDays > DisclaimerModal.DISCLAIMER_EXPIRY_DAYS) {\n        //         // Expired, reset\n        //         DisclaimerModal.resetDisclaimerAcceptance();\n        //         return false;\n        //     }\n        // }\n        // return true;\n    }\n\n    // Static method to set acceptance (handles session/local/expiry)\n    static setDisclaimerAccepted() {\n        if (DisclaimerModal.DISCLAIMER_SESSION_ONLY) {\n            sessionStorage.setItem('disclaimerAccepted', 'true');\n        } else {\n            localStorage.setItem('disclaimerAccepted', 'true');\n            localStorage.setItem('disclaimerAcceptedAt', new Date().toISOString());\n        }\n    }\n\n    // Static method to reset disclaimer acceptance\n    static resetDisclaimerAcceptance() {\n        if (DisclaimerModal.DISCLAIMER_SESSION_ONLY) {\n            sessionStorage.removeItem('disclaimerAccepted');\n        } else {\n            localStorage.removeItem('disclaimerAccepted');\n            localStorage.removeItem('disclaimerAcceptedAt');\n        }\n    }\n}\n\n// Initialize disclaimer modal immediately (DOM is already loaded when bundle executes)\n(function() {\n    console.log('[DISCLAIMER DEBUG] Modal initialization starting immediately');\n    \n    // Wait for app to be fully initialized before showing disclaimer\n    let disclaimerInitialized = false;\n    const initializeDisclaimer = () => {\n        console.log('[DISCLAIMER DEBUG] initializeDisclaimer called, disclaimerInitialized:', disclaimerInitialized);\n        if (disclaimerInitialized) return;\n        \n        // Ensure logManager is available before proceeding\n        if (!window.logManager) {\n            console.log('[DISCLAIMER DEBUG] Creating logManager');\n            window.logManager = {\n                log: function(level, message, data) {\n                    const timestamp = new Date().toISOString();\n                    const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n                    if (data) {\n                        console.log(logMessage, data);\n                    } else {\n                        console.log(logMessage);\n                    }\n                }\n            };\n        }\n        \n        // Check disclaimer acceptance status\n        const isAccepted = DisclaimerModal.isDisclaimerAccepted();\n        console.log('[DISCLAIMER DEBUG] isDisclaimerAccepted():', isAccepted);\n        \n        // Only show disclaimer if not previously accepted (with expiry/session logic)\n        if (!isAccepted) {\n            console.log('[DISCLAIMER DEBUG] Creating new DisclaimerModal');\n            new DisclaimerModal();\n            disclaimerInitialized = true;\n        } else {\n            console.log('[DISCLAIMER DEBUG] Disclaimer previously accepted, not showing modal');\n            // If previously accepted, just enable the application (no modal)\n            if (typeof window.enableToolAfterDisclaimer === 'function') {\n                console.log('[STARTUP] [DEBUG] Disclaimer previously accepted, calling enableToolAfterDisclaimer');\n                window.enableToolAfterDisclaimer();\n            } else {\n                console.warn('[STARTUP] [DEBUG] enableToolAfterDisclaimer function not found');\n            }\n            disclaimerInitialized = true;\n        }\n    };\n    \n    // Try to initialize immediately\n    initializeDisclaimer();\n    // Also try after a short delay to ensure app components are loaded\n    setTimeout(initializeDisclaimer, 100);\n    // Final attempt after longer delay to ensure logManager is available\n    setTimeout(initializeDisclaimer, 1000);\n    // Additional attempt after app initialization\n    setTimeout(initializeDisclaimer, 2000);\n})();\n\n// Export for global access\nwindow.DisclaimerModal = DisclaimerModal; ","/**\n * Credentials Modal Module\n * Shows current PingOne credentials and asks user if they want to use them or configure new ones\n */\nclass CredentialsModal {\n    constructor() {\n        this.isActive = false;\n        this.focusableElements = [];\n        this.firstFocusableElement = null;\n        this.lastFocusableElement = null;\n        this.previousActiveElement = null;\n        this.credentials = null;\n        \n        this.init();\n    }\n\n    async init() {\n        await this.loadCredentials();\n        this.createModal();\n        this.bindEvents();\n        this.showModal();\n    }\n\n    async loadCredentials() {\n        try {\n            const response = await fetch('/api/settings');\n            if (response.ok) {\n                const data = await response.json();\n                // The API returns data in data.data structure\n                const settings = data.data || data.settings || {};\n                this.credentials = {\n                    environmentId: settings.environmentId || settings['environment-id'] || '',\n                    clientId: settings.apiClientId || settings['api-client-id'] || '',\n                    clientSecret: settings.apiSecret || settings['api-secret'] || '',\n                    region: settings.region || 'NorthAmerica',\n                    populationId: settings.populationId || settings['population-id'] || '',\n                    rateLimit: settings.rateLimit || settings['rate-limit'] || 90\n                };\n                \n                console.log('Credentials loaded from server:', {\n                    hasEnvironmentId: !!this.credentials.environmentId,\n                    hasClientId: !!this.credentials.clientId,\n                    hasClientSecret: !!this.credentials.clientSecret,\n                    region: this.credentials.region\n                });\n            } else {\n                console.warn('Failed to load credentials from settings');\n                this.credentials = null;\n            }\n        } catch (error) {\n            console.error('Error loading credentials:', error);\n            this.credentials = null;\n        }\n    }\n\n    createModal() {\n        // Create modal overlay\n        const overlay = document.createElement('div');\n        overlay.className = 'credentials-modal-overlay';\n        overlay.setAttribute('role', 'dialog');\n        overlay.setAttribute('aria-modal', 'true');\n        overlay.setAttribute('aria-labelledby', 'credentials-title');\n        overlay.setAttribute('aria-describedby', 'credentials-content');\n\n        const hasCredentials = this.credentials && this.credentials.environmentId && this.credentials.clientId;\n        \n        // Create modal content\n        overlay.innerHTML = `\n            <div class=\"credentials-modal\" tabindex=\"-1\">\n                <div class=\"credentials-modal-header\">\n                    <h2 id=\"credentials-title\">\n                        <span class=\"credentials-icon\" aria-hidden=\"true\">🔐</span>\n                        <span>PingOne Credentials</span>\n                    </h2>\n                </div>\n                \n                <div class=\"credentials-modal-body\">\n                    <div id=\"credentials-content\" class=\"credentials-content\">\n                        ${hasCredentials ? this.createCredentialsContent() : this.createNoCredentialsContent()}\n                    </div>\n                </div>\n                \n                <div class=\"credentials-modal-footer\">\n                    <div class=\"credentials-actions\">\n                        ${hasCredentials ? this.createCredentialsActions() : this.createNoCredentialsActions()}\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(overlay);\n        this.overlay = overlay;\n        this.modal = overlay.querySelector('.credentials-modal');\n        this.useCredentialsBtn = overlay.querySelector('#use-credentials-btn');\n        this.configureBtn = overlay.querySelector('#configure-credentials-btn');\n        this.skipBtn = overlay.querySelector('#skip-credentials-btn');\n    }\n\n    createCredentialsContent() {\n        return `\n            <h3>🔐 PingOne Credentials Found</h3>\n            <p>The following PingOne credentials are available. Would you like to use them or configure new ones?</p>\n            \n            <div class=\"credentials-display\">\n                <div class=\"credential-item\">\n                    <label>Environment ID:</label>\n                    <div class=\"credential-value\">\n                        <code class=\"credential-visible\">${this.credentials.environmentId}</code>\n                        <button class=\"btn btn-sm btn-outline-secondary copy-btn\" data-value=\"${this.credentials.environmentId}\" title=\"Copy Environment ID\">\n                            <i class=\"fas fa-copy\"></i>\n                        </button>\n                    </div>\n                </div>\n                \n                <div class=\"credential-item\">\n                    <label>Client ID:</label>\n                    <div class=\"credential-value\">\n                        <code class=\"credential-visible\">${this.credentials.clientId}</code>\n                        <button class=\"btn btn-sm btn-outline-secondary copy-btn\" data-value=\"${this.credentials.clientId}\" title=\"Copy Client ID\">\n                            <i class=\"fas fa-copy\"></i>\n                        </button>\n                    </div>\n                </div>\n                \n                <div class=\"credential-item\">\n                    <label>Client Secret:</label>\n                    <div class=\"credential-value\">\n                        <code class=\"credential-masked\">${this.credentials.clientSecret ? this.credentials.clientSecret.substring(0, 5) + '•'.repeat(Math.max(0, 15)) : '••••••••••••••••••••'}</code>\n                        <span class=\"credential-status\">✅ Configured</span>\n                    </div>\n                </div>\n                \n                <div class=\"credential-item\">\n                    <label>Region:</label>\n                    <div class=\"credential-value\">\n                        <code class=\"credential-visible\">${this.credentials.region}</code>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"credentials-info\">\n                <h4>💡 What would you like to do?</h4>\n                <ul>\n                    <li><strong>Use These Credentials:</strong> Continue with the stored credentials</li>\n                    <li><strong>Go to Settings:</strong> Configure new or different credentials</li>\n                </ul>\n            </div>\n        `;\n    }\n\n    createNoCredentialsContent() {\n        return `\n            <h3>🔧 No Credentials Found</h3>\n            <p>No PingOne credentials were found in your settings. You'll need to configure them to use this tool.</p>\n            \n            <div class=\"credentials-info\">\n                <h4>📋 Required Information:</h4>\n                <ul>\n                    <li><strong>Environment ID:</strong> Your PingOne environment identifier</li>\n                    <li><strong>Client ID:</strong> Your PingOne API client identifier</li>\n                    <li><strong>Client Secret:</strong> Your PingOne API client secret</li>\n                    <li><strong>Region:</strong> Your PingOne environment region</li>\n                </ul>\n            </div>\n            \n            <div class=\"credentials-help\">\n                <h4>💡 How to Get Credentials:</h4>\n                <ol>\n                    <li>Log into your PingOne Admin Console</li>\n                    <li>Navigate to Applications → Applications</li>\n                    <li>Create a new application or use an existing one</li>\n                    <li>Copy the Environment ID, Client ID, and Client Secret</li>\n                    <li>Configure them in the Settings page</li>\n                </ol>\n            </div>\n        `;\n    }\n\n    createCredentialsActions() {\n        return `\n            <button type=\"button\" class=\"credentials-btn credentials-btn-primary\" id=\"use-credentials-btn\">\n                <i class=\"fas fa-play\"></i>\n                Use These Credentials\n            </button>\n            <button type=\"button\" class=\"credentials-btn credentials-btn-secondary\" id=\"configure-credentials-btn\">\n                <i class=\"fas fa-cog\"></i>\n                Go to Settings\n            </button>\n            <button type=\"button\" class=\"credentials-btn credentials-btn-outline\" id=\"skip-credentials-btn\">\n                <i class=\"fas fa-times\"></i>\n                Skip for Now\n            </button>\n        `;\n    }\n\n    createNoCredentialsActions() {\n        return `\n            <button type=\"button\" class=\"credentials-btn credentials-btn-primary\" id=\"configure-credentials-btn\">\n                <i class=\"fas fa-cog\"></i>\n                Go to Settings\n            </button>\n            <button type=\"button\" class=\"credentials-btn credentials-btn-secondary\" id=\"skip-credentials-btn\">\n                <i class=\"fas fa-times\"></i>\n                Skip for Now\n            </button>\n        `;\n    }\n\n    maskCredential(value) {\n        if (!value) return 'Not set';\n        if (value.length <= 8) return value;\n        return value.substring(0, 8) + '...' + value.substring(value.length - 4);\n    }\n\n    bindEvents() {\n        // Use credentials button\n        if (this.useCredentialsBtn) {\n            this.useCredentialsBtn.addEventListener('click', async () => {\n                await this.useCurrentCredentials();\n            });\n        }\n\n        // Configure credentials button\n        if (this.configureBtn) {\n            this.configureBtn.addEventListener('click', () => {\n                this.goToSettings();\n            });\n        }\n\n        // Skip button\n        if (this.skipBtn) {\n            this.skipBtn.addEventListener('click', () => {\n                this.skipCredentials();\n            });\n        }\n\n        // Copy buttons\n        this.modal.querySelectorAll('.copy-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const value = e.target.closest('.copy-btn').dataset.value;\n                this.copyToClipboard(value, e.target.closest('.copy-btn'));\n            });\n        });\n\n        // Keyboard events for accessibility\n        this.overlay.addEventListener('keydown', (e) => {\n            this.handleKeyboardNavigation(e);\n        });\n\n        // Prevent clicks outside modal from closing it\n        this.overlay.addEventListener('click', (e) => {\n            if (e.target === this.overlay) {\n                // Don't close on outside click - require explicit action\n                this.logEvent('credentials_outside_click_prevented');\n            }\n        });\n\n        // Escape key handling\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && this.isActive) {\n                e.preventDefault();\n                this.skipCredentials();\n            }\n        });\n    }\n\n    handleKeyboardNavigation(e) {\n        if (!this.isActive) return;\n\n        const focusableElements = this.getFocusableElements();\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n\n        // Tab key navigation with focus trapping\n        if (e.key === 'Tab') {\n            if (e.shiftKey) {\n                if (document.activeElement === firstElement) {\n                    e.preventDefault();\n                    lastElement.focus();\n                }\n            } else {\n                if (document.activeElement === lastElement) {\n                    e.preventDefault();\n                    firstElement.focus();\n                }\n            }\n        }\n    }\n\n    getFocusableElements() {\n        const focusableSelectors = [\n            'button:not([disabled])',\n            'input:not([disabled])',\n            'select:not([disabled])',\n            'textarea:not([disabled])',\n            'a[href]',\n            '[tabindex]:not([tabindex=\"-1\"])'\n        ];\n\n        return Array.from(this.modal.querySelectorAll(focusableSelectors.join(', ')));\n    }\n\n    showModal() {\n        this.isActive = true;\n        this.previousActiveElement = document.activeElement;\n        \n        // Add classes to body and app container\n        document.body.classList.add('credentials-modal-open');\n        const appContainer = document.querySelector('.app-container');\n        if (appContainer) {\n            appContainer.classList.add('credentials-modal-active');\n        }\n\n        // Show modal with animation\n        this.overlay.classList.add('active');\n        \n        // Focus management\n        this.modal.focus();\n        this.setupFocusTrap();\n        \n        this.logEvent('credentials_modal_shown');\n        \n        // Announce to screen readers\n        this.announceToScreenReader('Credentials configuration modal opened. Please review your PingOne credentials and choose an action.');\n    }\n\n    setupFocusTrap() {\n        this.focusableElements = this.getFocusableElements();\n        this.firstFocusableElement = this.focusableElements[0];\n        this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1];\n    }\n\n    async useCurrentCredentials() {\n        this.logEvent('credentials_used', { \n            hasCredentials: !!this.credentials,\n            environmentId: this.credentials?.environmentId ? 'set' : 'not_set',\n            clientId: this.credentials?.clientId ? 'set' : 'not_set'\n        });\n        \n        // Show loading state on button\n        const useButton = document.getElementById('use-credentials-btn');\n        if (useButton) {\n            useButton.disabled = true;\n            useButton.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Validating Credentials...';\n        }\n        \n        try {\n            // Just save credentials without trying to get a token\n            await this.saveCredentialsOnly();\n            \n            // Mark modal as shown since credentials are now saved\n            CredentialsModal.setCredentialsModalShown();\n            \n            this.hideModal();\n            this.enableApplication();\n            \n            // Update token status to reflect that credentials are now being used\n            this.updateTokenStatusAfterCredentialsUse();\n            \n            // Show success message\n            this.showSuccessMessage('Credentials saved successfully!');\n            \n        } catch (error) {\n            // Restore button state on error\n            const useButton = document.getElementById('use-credentials-btn');\n            if (useButton) {\n                useButton.disabled = false;\n                useButton.innerHTML = '<i class=\"fas fa-play\"></i> Use These Credentials';\n            }\n            console.error('Error using credentials:', error);\n            \n            // Show user-friendly error messages\n            let userMessage = '';\n            let userTitle = 'Credentials Error';\n            \n            if (error.message.includes('PingOne client not available')) {\n                userTitle = 'Authentication System Not Ready';\n                userMessage = 'The PingOne authentication system is not fully initialized. Please refresh the page and try again, or go to Settings to configure credentials manually.';\n            } else if (error.message.includes('Missing required credentials')) {\n                userTitle = 'Incomplete Credentials';\n                userMessage = 'Some required credential fields are missing. Please go to Settings to complete your PingOne configuration.';\n            } else if (error.message.includes('Failed to get token')) {\n                userTitle = 'Authentication Failed';\n                userMessage = 'Unable to authenticate with PingOne using these credentials. Please verify your credentials in Settings.';\n            } else if (error.message.includes('Failed to save credentials')) {\n                userTitle = 'Save Failed';\n                userMessage = 'Unable to save credentials to the server. Please try again or go to Settings to configure manually.';\n            } else {\n                userTitle = 'Credentials Error';\n                userMessage = 'There was a problem using these credentials. Please go to Settings to verify your PingOne configuration.';\n            }\n            \n            // Show the user-friendly error in the modal\n            this.showModalError(userTitle, userMessage);\n        }\n    }\n    \n    async saveCredentialsAndGetToken() {\n        if (!this.credentials) {\n            throw new Error('No credentials available to save');\n        }\n        \n        // Convert credentials to settings format\n        const settings = {\n            environmentId: this.credentials.environmentId,\n            apiClientId: this.credentials.clientId,\n            apiSecret: this.credentials.clientSecret,\n            populationId: this.credentials.populationId || '',\n            region: this.credentials.region || 'NorthAmerica',\n            rateLimit: this.credentials.rateLimit || 90\n        };\n        \n        // Validate required fields before saving\n        if (!settings.environmentId || !settings.apiClientId || !settings.apiSecret) {\n            throw new Error('Missing required credentials: Environment ID, Client ID, and Client Secret are required');\n        }\n        \n        // Save to server via API endpoint - this is the critical fix\n        try {\n            console.log('Saving credentials to server...', {\n                hasEnvironmentId: !!settings.environmentId,\n                hasApiClientId: !!settings.apiClientId,\n                hasApiSecret: !!settings.apiSecret,\n                region: settings.region\n            });\n            \n            const response = await fetch('/api/settings', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(settings)\n            });\n            \n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(`Failed to save credentials to server: ${errorData.error || response.statusText}`);\n            }\n            \n            const result = await response.json();\n            console.log('Credentials saved to server successfully:', result);\n            \n            // Verify the save was successful by reading back the settings\n            const verifyResponse = await fetch('/api/settings');\n            if (verifyResponse.ok) {\n                const verifyData = await verifyResponse.json();\n                const savedSettings = verifyData.data || verifyData.settings || {};\n                console.log('Verified credentials saved to server:', {\n                    hasEnvironmentId: !!savedSettings.environmentId,\n                    hasApiClientId: !!savedSettings.apiClientId,\n                    hasApiSecret: !!savedSettings.apiSecret\n                });\n            }\n        } catch (error) {\n            console.error('Failed to save credentials to server:', error);\n            throw new Error(`Failed to save credentials: ${error.message}`);\n        }\n        \n        // Save to credentials manager if available\n        if (window.credentialsManager) {\n            try {\n                window.credentialsManager.saveCredentials(settings);\n                console.log('Credentials saved to credentials manager');\n            } catch (error) {\n                console.warn('Failed to save to credentials manager:', error);\n            }\n        }\n        \n        // Save to localStorage as backup\n        try {\n            localStorage.setItem('pingone_credentials', JSON.stringify(settings));\n            console.log('Credentials saved to localStorage as backup');\n        } catch (error) {\n            console.warn('Failed to save to localStorage:', error);\n        }\n        \n        // Update settings form if on settings page\n        if (window.app && window.app.populateSettingsForm) {\n            try {\n                window.app.populateSettingsForm(settings);\n                console.log('Settings form updated with credentials');\n            } catch (error) {\n                console.warn('Failed to update settings form:', error);\n            }\n        }\n        \n        // Get a new token with the saved credentials - with retry logic\n        let tokenResult = null;\n        let lastError = null;\n        \n        // Wait a moment for credentials to be processed by the server\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Try multiple approaches to get a token\n        for (let attempt = 1; attempt <= 3; attempt++) {\n            console.log(`Token acquisition attempt ${attempt}/3`);\n            \n            // First try: Direct API call (most reliable)\n            try {\n                console.log('Trying direct API call approach...');\n                const response = await fetch('/api/pingone/token', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                \n                if (response.ok) {\n                    const tokenData = await response.json();\n                    if (tokenData.access_token) {\n                        console.log('Token acquired via direct API call');\n                        tokenResult = tokenData.access_token;\n                        break; // Success!\n                    }\n                } else {\n                    const errorData = await response.json().catch(() => ({}));\n                    lastError = new Error(errorData.error || 'Failed to get token from API');\n                    console.error(`Direct API approach failed (attempt ${attempt}):`, lastError.message);\n                }\n            } catch (apiError) {\n                console.error(`Direct API approach failed (attempt ${attempt}):`, apiError);\n                lastError = apiError;\n            }\n            \n            // Second try: Use PingOne client if available (fallback)\n            if (!tokenResult && window.app && window.app.pingOneClient) {\n                try {\n                    console.log('Trying PingOne client approach as fallback...');\n                    // Update the PingOne client with new credentials\n                    if (typeof window.app.pingOneClient.updateCredentials === 'function') {\n                        window.app.pingOneClient.updateCredentials(settings);\n                    }\n                    \n                    // Get a new token\n                    const token = await window.app.pingOneClient.getAccessToken();\n                    console.log('New token acquired with saved credentials via PingOne client');\n                    \n                    tokenResult = token;\n                    break; // Success!\n                } catch (error) {\n                    console.error(`PingOne client approach failed (attempt ${attempt}):`, error);\n                    lastError = error;\n                }\n            } else if (!tokenResult) {\n                console.log('PingOne client not available, skipping client approach');\n            }\n            \n            // Third try: Enhanced server auth endpoint\n            if (!tokenResult) {\n                try {\n                    console.log('Trying enhanced server auth approach...');\n                    const response = await fetch('/api/v1/auth/token', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            environmentId: settings.environmentId,\n                            clientId: settings.apiClientId,\n                            clientSecret: settings.apiSecret,\n                            region: settings.region\n                        })\n                    });\n                    \n                    if (response.ok) {\n                        const tokenData = await response.json();\n                        if (tokenData.access_token || tokenData.token) {\n                            console.log('Token acquired via enhanced server auth');\n                            tokenResult = tokenData.access_token || tokenData.token;\n                            break; // Success!\n                        }\n                    } else {\n                        const errorData = await response.json().catch(() => ({}));\n                        lastError = new Error(errorData.error || 'Failed to get token from enhanced auth');\n                        console.error(`Enhanced server auth approach failed (attempt ${attempt}):`, lastError.message);\n                    }\n                } catch (authError) {\n                    console.error(`Enhanced server auth approach failed (attempt ${attempt}):`, authError);\n                    lastError = authError;\n                }\n            }\n            \n            // Wait before retry (exponential backoff)\n            if (attempt < 3 && !tokenResult) {\n                const waitTime = 1000 * attempt;\n                console.log(`Waiting ${waitTime}ms before retry...`);\n                await new Promise(resolve => setTimeout(resolve, waitTime));\n            }\n        }\n        \n        // Check if we got a token\n        if (!tokenResult) {\n            console.error('All token acquisition attempts failed');\n            \n            // Provide helpful error message based on the last error\n            let errorMessage = 'Unable to acquire PingOne access token after multiple attempts.';\n            \n            if (lastError) {\n                if (lastError.message.includes('401') || lastError.message.includes('unauthorized')) {\n                    errorMessage = 'Invalid credentials. Please verify your PingOne Client ID and Secret are correct.';\n                } else if (lastError.message.includes('404') || lastError.message.includes('not found')) {\n                    errorMessage = 'PingOne environment not found. Please verify your Environment ID is correct.';\n                } else if (lastError.message.includes('network') || lastError.message.includes('fetch')) {\n                    errorMessage = 'Network error connecting to PingOne. Please check your internet connection.';\n                } else if (lastError.message.includes('PingOne client not available')) {\n                    errorMessage = 'PingOne authentication system is not properly initialized. Please refresh the page and try again.';\n                } else {\n                    errorMessage = `Authentication failed: ${lastError.message}`;\n                }\n            }\n            \n            throw new Error(errorMessage);\n        }\n        \n        console.log('Token acquisition successful');\n        return tokenResult;\n    }\n    \n    async saveCredentialsOnly() {\n        if (!this.credentials) {\n            throw new Error('No credentials available to save');\n        }\n        \n        // Convert credentials to settings format\n        const settings = {\n            environmentId: this.credentials.environmentId,\n            apiClientId: this.credentials.clientId,\n            apiSecret: this.credentials.clientSecret,\n            populationId: this.credentials.populationId || '',\n            region: this.credentials.region || 'NorthAmerica',\n            rateLimit: this.credentials.rateLimit || 90\n        };\n        \n        // Validate required fields before saving\n        if (!settings.environmentId || !settings.apiClientId || !settings.apiSecret) {\n            throw new Error('Missing required credentials: Environment ID, Client ID, and Client Secret are required');\n        }\n        \n        // Save to server via API endpoint\n        try {\n            console.log('Saving credentials to server...', {\n                hasEnvironmentId: !!settings.environmentId,\n                hasApiClientId: !!settings.apiClientId,\n                hasApiSecret: !!settings.apiSecret,\n                region: settings.region\n            });\n            \n            const response = await fetch('/api/settings', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(settings)\n            });\n            \n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(`Failed to save credentials to server: ${errorData.error || response.statusText}`);\n            }\n            \n            const result = await response.json();\n            console.log('Credentials saved to server successfully:', result);\n            \n        } catch (error) {\n            console.error('Failed to save credentials to server:', error);\n            throw new Error(`Failed to save credentials: ${error.message}`);\n        }\n        \n        // Save to credentials manager if available\n        if (window.credentialsManager) {\n            try {\n                window.credentialsManager.saveCredentials(settings);\n                console.log('Credentials saved to credentials manager');\n            } catch (error) {\n                console.warn('Failed to save to credentials manager:', error);\n            }\n        }\n        \n        // Save to localStorage as backup\n        try {\n            localStorage.setItem('pingone_credentials', JSON.stringify(settings));\n            console.log('Credentials saved to localStorage as backup');\n        } catch (error) {\n            console.warn('Failed to save to localStorage:', error);\n        }\n        \n        // Update settings form if on settings page\n        if (window.app && window.app.populateSettingsForm) {\n            try {\n                window.app.populateSettingsForm(settings);\n                console.log('Settings form updated with credentials');\n            } catch (error) {\n                console.warn('Failed to update settings form:', error);\n            }\n        }\n        \n        console.log('Credentials saved successfully without token acquisition');\n        return true;\n    }\n    \n    showError(title, message) {\n        // Create and show an error notification\n        const notification = document.createElement('div');\n        notification.className = 'notification notification-error';\n        notification.innerHTML = `\n            <i class=\"fas fa-exclamation-circle\"></i>\n            <span><strong>${title}:</strong> ${message}</span>\n        `;\n        \n        const notificationArea = document.getElementById('notification-area');\n        if (notificationArea) {\n            notificationArea.appendChild(notification);\n            \n            setTimeout(() => {\n                notification.remove();\n            }, 8000);\n        }\n    }\n    \n    showModalError(title, message) {\n        // Show error directly in the modal\n        const modal = document.querySelector('.credentials-modal');\n        if (!modal) return;\n        \n        // Remove any existing error messages\n        const existingError = modal.querySelector('.credentials-error-message');\n        if (existingError) {\n            existingError.remove();\n        }\n        \n        // Create error message element\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'credentials-error-message';\n        errorDiv.innerHTML = `\n            <div class=\"error-content\">\n                <i class=\"fas fa-exclamation-triangle error-icon\"></i>\n                <div class=\"error-text\">\n                    <h4>${title}</h4>\n                    <p>${message}</p>\n                </div>\n            </div>\n            <div class=\"error-actions\">\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"this.closest('.credentials-modal-overlay').querySelector('#configure-credentials-btn').click()\">\n                    <i class=\"fas fa-cog\"></i> Go to Settings\n                </button>\n                <button type=\"button\" class=\"btn btn-secondary\" onclick=\"this.closest('.credentials-error-message').remove()\">\n                    <i class=\"fas fa-times\"></i> Dismiss\n                </button>\n            </div>\n        `;\n        \n        // Insert error message after the modal body\n        const modalBody = modal.querySelector('.credentials-modal-body');\n        if (modalBody) {\n            modalBody.insertAdjacentElement('afterend', errorDiv);\n        }\n        \n        // Also call the regular showError for notifications\n        this.showError(title, message);\n    }\n    \n    updateTokenStatusAfterCredentialsUse() {\n        try {\n            console.log('Credentials Modal: Updating token status after credentials use');\n            \n            // Force a token refresh to get current status\n            if (window.app && window.app.pingOneClient) {\n                // Clear any existing token to force refresh\n                window.app.pingOneClient.clearToken();\n                \n                // Get a fresh token\n                window.app.pingOneClient.getAccessToken().then(token => {\n                    console.log('Credentials Modal: Fresh token acquired');\n                    \n                    // Update the universal token status\n                    if (typeof window.app.updateUniversalTokenStatus === 'function') {\n                        window.app.updateUniversalTokenStatus();\n                    }\n                }).catch(error => {\n                    console.warn('Credentials Modal: Could not get fresh token:', error);\n                });\n            }\n            \n            // Also try to update status directly\n            if (window.app && typeof window.app.updateUniversalTokenStatus === 'function') {\n                setTimeout(() => {\n                    window.app.updateUniversalTokenStatus();\n                }, 1000);\n            }\n            \n        } catch (error) {\n            console.error('Credentials Modal: Error updating token status:', error);\n        }\n    }\n\n    goToSettings() {\n        this.logEvent('credentials_configure_clicked');\n        \n        this.hideModal();\n        this.enableApplication();\n        \n        // Navigate to settings\n        setTimeout(() => {\n            const settingsNav = document.querySelector('[data-view=\"settings\"]');\n            if (settingsNav) {\n                settingsNav.click();\n            }\n        }, 100);\n    }\n\n    skipCredentials() {\n        this.logEvent('credentials_skipped');\n        \n        this.hideModal();\n        this.enableApplication();\n        \n        // Show info message\n        this.showInfoMessage('You can configure credentials later in the Settings page.');\n    }\n\n    hideModal() {\n        this.isActive = false;\n        \n        // Remove classes\n        document.body.classList.remove('credentials-modal-open');\n        const appContainer = document.querySelector('.app-container');\n        if (appContainer) {\n            appContainer.classList.remove('credentials-modal-active');\n        }\n\n        // Hide modal with animation\n        this.overlay.classList.remove('active');\n        \n        // Restore focus\n        if (this.previousActiveElement) {\n            this.previousActiveElement.focus();\n        }\n        \n        // Clean up\n        setTimeout(() => {\n            if (this.overlay && this.overlay.parentNode) {\n                this.overlay.parentNode.removeChild(this.overlay);\n            }\n        }, 300);\n        \n        this.logEvent('credentials_modal_hidden');\n    }\n\n    enableApplication() {\n        // Enable the application\n        const appContainer = document.querySelector('.app-container');\n        if (appContainer) {\n            appContainer.classList.remove('credentials-modal-active');\n        }\n        \n        this.logEvent('application_enabled_after_credentials');\n    }\n\n    copyToClipboard(text, button) {\n        navigator.clipboard.writeText(text).then(() => {\n            // Show success feedback\n            const originalIcon = button.innerHTML;\n            button.innerHTML = '<i class=\"fas fa-check\"></i>';\n            button.classList.add('copied');\n            \n            setTimeout(() => {\n                button.innerHTML = originalIcon;\n                button.classList.remove('copied');\n            }, 2000);\n            \n            this.logEvent('credential_copied');\n        }).catch(err => {\n            console.error('Failed to copy to clipboard:', err);\n            this.logEvent('credential_copy_failed', { error: err.message });\n        });\n    }\n\n    showSuccessMessage(message) {\n        // Create and show a success notification\n        const notification = document.createElement('div');\n        notification.className = 'notification notification-success';\n        notification.innerHTML = `\n            <i class=\"fas fa-check-circle\"></i>\n            <span>${message}</span>\n        `;\n        \n        const notificationArea = document.getElementById('notification-area');\n        if (notificationArea) {\n            notificationArea.appendChild(notification);\n            \n            setTimeout(() => {\n                notification.remove();\n            }, 5000);\n        }\n    }\n\n    showInfoMessage(message) {\n        // Create and show an info notification\n        const notification = document.createElement('div');\n        notification.className = 'notification notification-info';\n        notification.innerHTML = `\n            <i class=\"fas fa-info-circle\"></i>\n            <span>${message}</span>\n        `;\n        \n        const notificationArea = document.getElementById('notification-area');\n        if (notificationArea) {\n            notificationArea.appendChild(notification);\n            \n            setTimeout(() => {\n                notification.remove();\n            }, 5000);\n        }\n    }\n\n    announceToScreenReader(message) {\n        // Create a temporary element for screen reader announcements\n        const announcement = document.createElement('div');\n        announcement.setAttribute('aria-live', 'polite');\n        announcement.setAttribute('aria-atomic', 'true');\n        announcement.style.position = 'absolute';\n        announcement.style.left = '-10000px';\n        announcement.style.width = '1px';\n        announcement.style.height = '1px';\n        announcement.style.overflow = 'hidden';\n        \n        announcement.textContent = message;\n        document.body.appendChild(announcement);\n        \n        setTimeout(() => {\n            document.body.removeChild(announcement);\n        }, 1000);\n    }\n\n    logEvent(eventName, data = {}) {\n        const eventData = {\n            event: eventName,\n            timestamp: new Date().toISOString(),\n            hasCredentials: !!this.credentials,\n            environmentId: this.credentials?.environmentId ? 'set' : 'not_set',\n            clientId: this.credentials?.clientId ? 'set' : 'not_set',\n            ...data\n        };\n        \n        console.log('Credentials Modal Event:', eventData);\n        \n        // You can also send this to your logging system\n        // fetch('/api/logs', { method: 'POST', body: JSON.stringify(eventData) });\n    }\n\n    /**\n     * Check if credentials are already properly saved and working\n     * @returns {Promise<boolean>} True if credentials are saved and working\n     */\n    static async areCredentialsSaved() {\n        try {\n            const response = await fetch('/api/settings');\n            if (!response.ok) {\n                return false;\n            }\n            \n            const data = await response.json();\n            const settings = data.data || data.settings || {};\n            \n            // Check if we have all required credentials\n            const hasRequiredCredentials = settings.environmentId && \n                                        settings.apiClientId && \n                                        settings.apiSecret;\n            \n            if (!hasRequiredCredentials) {\n                return false;\n            }\n            \n            // Try to get a token to verify credentials work\n            if (window.app && window.app.pingOneClient) {\n                try {\n                    const token = await window.app.pingOneClient.getAccessToken();\n                    return !!token;\n                } catch (error) {\n                    console.warn('Credentials exist but token acquisition failed:', error);\n                    return false;\n                }\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error checking if credentials are saved:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Check if the credentials modal should be shown\n     * @returns {Promise<boolean>} True if modal should be shown\n     */\n    static async shouldShowCredentialsModal() {\n        // TEMPORARY: Force credentials modal to always show for debugging\n        console.log('DEBUGGING: Forcing credentials modal to show');\n        return true;\n        \n        // Original logic (commented out for debugging):\n        // try {\n        //     // Check if modal was already shown in this session\n        //     const modalShown = sessionStorage.getItem('credentials_modal_shown');\n        //     if (modalShown === 'true') {\n        //         console.log('Credentials modal already shown in this session');\n        //         return false;\n        //     }\n        //     \n        //     // Always show modal on startup to ask user about stored credentials\n        //     // This gives users the choice to use stored credentials or configure new ones\n        //     console.log('Showing credentials modal on startup to ask about stored credentials');\n        //     return true;\n        //     \n        // } catch (error) {\n        //     console.error('Error checking if credentials modal should be shown:', error);\n        //     return true; // Show modal on error to be safe\n        // }\n    }\n\n    /**\n     * Mark that the credentials modal has been shown\n     */\n    static setCredentialsModalShown() {\n        sessionStorage.setItem('credentials_modal_shown', 'true');\n        console.log('Credentials modal marked as shown for this session');\n    }\n\n    /**\n     * Reset the credentials modal state (for testing or re-showing)\n     */\n    static resetCredentialsModal() {\n        sessionStorage.removeItem('credentials_modal_shown');\n        console.log('Credentials modal state reset');\n    }\n\n    // Static method to check if there's a valid token\n    static hasValidToken() {\n        try {\n            const token = localStorage.getItem('pingone_worker_token');\n            const expiry = localStorage.getItem('pingone_token_expiry');\n            \n            if (!token || !expiry) {\n                return false;\n            }\n            \n            const expiryTime = parseInt(expiry, 10);\n            const now = Date.now();\n            const timeRemaining = expiryTime - now;\n            \n            return timeRemaining > 0;\n        } catch (error) {\n            console.error('Error checking token validity:', error);\n            return false;\n        }\n    }\n}\n\n// Initialize credentials modal when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('Credentials Modal: DOMContentLoaded event fired');\n    console.log('Disclaimer accepted:', DisclaimerModal.isDisclaimerAccepted());\n    console.log('Credentials modal shown:', sessionStorage.getItem('credentials_modal_shown'));\n    \n    // Check if disclaimer is already accepted (user returning)\n    if (DisclaimerModal.isDisclaimerAccepted()) {\n        const shouldShow = await CredentialsModal.shouldShowCredentialsModal();\n        console.log('Should show credentials modal:', shouldShow);\n        \n        if (shouldShow) {\n            console.log('Credentials Modal: Showing modal for returning user');\n            // Small delay to ensure disclaimer modal is fully closed\n            setTimeout(() => {\n                new CredentialsModal();\n                CredentialsModal.setCredentialsModalShown();\n            }, 1000);\n        }\n    }\n});\n\n// Listen for disclaimer completion events\ndocument.addEventListener('disclaimerAccepted', async (event) => {\n    console.log('Credentials Modal: Disclaimer accepted event received', event.detail);\n    // Wait a bit longer for disclaimer modal to fully close\n    setTimeout(async () => {\n        console.log('Credentials Modal: Checking if should show after disclaimer');\n        const shouldShow = await CredentialsModal.shouldShowCredentialsModal();\n        console.log('Should show credentials modal:', shouldShow);\n        \n        if (shouldShow) {\n            console.log('Credentials Modal: Creating modal after disclaimer acceptance');\n            new CredentialsModal();\n            CredentialsModal.setCredentialsModalShown();\n        }\n    }, 1500);\n});\n\n// Listen for token status changes\ndocument.addEventListener('token-updated', async (event) => {\n    console.log('Credentials Modal: Token updated event received', event.detail);\n    // Check if we should show credentials modal when token changes\n    setTimeout(async () => {\n        const shouldShow = await CredentialsModal.shouldShowCredentialsModal();\n        console.log('Should show credentials modal after token update:', shouldShow);\n        \n        if (shouldShow) {\n            console.log('Credentials Modal: Creating modal after token update');\n            new CredentialsModal();\n            CredentialsModal.setCredentialsModalShown();\n        }\n    }, 1000);\n});\n\n// Periodic check for token status (every 5 minutes)\nsetInterval(async () => {\n    if (DisclaimerModal.isDisclaimerAccepted()) {\n        const shouldShow = await CredentialsModal.shouldShowCredentialsModal();\n        if (shouldShow) {\n            console.log('Credentials Modal: Periodic check - showing modal');\n            new CredentialsModal();\n            CredentialsModal.setCredentialsModalShown();\n        }\n    }\n}, 5 * 60 * 1000); // 5 minutes\n\n// Export for testing\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CredentialsModal;\n} ","/**\n * Import Management Subsystem\n * \n * Handles all user import operations with proper separation of concerns.\n * Manages file validation, progress tracking, real-time updates, and error handling.\n */\n\nexport class ImportSubsystem {\n    constructor(logger, uiManager, localClient, settingsManager, eventBus, populationService, authManagementSubsystem = null) {\n        this.logger = logger;\n        this.uiManager = uiManager;\n        this.localClient = localClient;\n        this.settingsManager = settingsManager;\n        this.eventBus = eventBus;\n        this.populationService = populationService;\n        this.authManagementSubsystem = authManagementSubsystem;\n        \n        // Import state management\n        this.isImporting = false;\n        this.socket = null;\n        this.selectedPopulationId = null;\n        this.selectedPopulationName = null;\n        this.fallbackPolling = null;\n        this.selectedFile = null; // Tracks the selected file for import\n\n        // Initialize message formatter with a fallback\n        this.messageFormatter = window.messageFormatter || {\n            formatMessage: (type, message) => `[${type.toUpperCase()}] ${message}`\n        };\n        \n        this.logger.info('Import Subsystem initialized');\n        \n        // Set up event listeners for cross-subsystem communication\n        this.setupCrossSubsystemEvents();\n    }\n    \n    /**\n     * Initialize the import subsystem\n     */\n    async init() {\n        (this.logger?.debug || window.logger?.debug || console.log)('🚀 [DEBUG] ImportSubsystem: init() method called');\n        try {\n            (this.logger?.debug || window.logger?.debug || console.log)('🔧 [DEBUG] ImportSubsystem: Setting up event listeners');\n            this.setupEventListeners();\n            \n            (this.logger?.debug || window.logger?.debug || console.log)('📋 [DEBUG] ImportSubsystem: About to refresh population dropdown');\n            // Initialize population dropdown\n            this.refreshPopulationDropdown();\n            \n            (this.logger?.debug || window.logger?.debug || console.log)('🔘 [DEBUG] ImportSubsystem: Setting initial button state');\n            // Set initial button state (should be disabled until form is complete)\n            this.validateAndUpdateButtonState();\n            \n            (this.logger?.debug || window.logger?.debug || console.log)('✅ [DEBUG] ImportSubsystem: Init completed successfully');\n            (this.logger?.info || window.logger?.info || console.log)('Import Subsystem initialized successfully');\n        } catch (error) {\n            (this.logger?.error || window.logger?.error || console.error)('❌ [DEBUG] ImportSubsystem: Init failed with error:', error);\n            (this.logger?.error || window.logger?.error || console.error)('Failed to initialize Import Subsystem', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up event listeners for import-related elements\n     */\n    setupEventListeners() {\n        // Initialize utilities for safe DOM operations\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                START_IMPORT_BTN: 'start-import',\n                CSV_FILE_INPUT: 'csv-file',\n                IMPORT_POPULATION_SELECT: 'import-population-select'\n            }\n        };\n        \n        // Import button (correct ID is 'start-import') with Safe DOM\n        const importBtn = safeDOM.selectById(UI_CONFIG.SELECTORS.START_IMPORT_BTN);\n        if (importBtn) {\n            safeDOM.addEventListener(importBtn, 'click', errorHandler.wrapAsyncEventHandler(async (e) => {\n                e.preventDefault();\n                await this.startImport();\n            }, 'Import button click handler'));\n        }\n        \n        // CSV file input with Safe DOM\n        const csvFileInput = safeDOM.selectById(UI_CONFIG.SELECTORS.CSV_FILE_INPUT);\n        if (csvFileInput) {\n            safeDOM.addEventListener(csvFileInput, 'change', errorHandler.wrapAsyncEventHandler(async (e) => {\n                const file = e.target.files[0];\n                if (file) {\n                    this.selectedFile = file; // Update the selected file\n                    await this.handleFileSelect(file);\n                    this.validateAndUpdateButtonState();\n                }\n            }, 'CSV file input change handler'));\n        }\n        \n        // Population dropdown change with Safe DOM\n        const populationSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.IMPORT_POPULATION_SELECT);\n        if (populationSelect) {\n            safeDOM.addEventListener(populationSelect, 'change', errorHandler.wrapEventHandler((e) => {\n                this.handlePopulationChange(e.target.value, e.target.selectedOptions[0]?.text);\n                this.validateAndUpdateButtonState();\n            }, 'Population dropdown change handler'));\n        }\n        \n        // Drag & Drop functionality\n        this.setupDragAndDropListeners();\n    }\n    \n    /**\n     * Set up drag and drop event listeners for CSV file upload\n     */\n    setupDragAndDropListeners() {\n        const dropArea = document.getElementById('import-drop-zone');\n        const fileInput = document.getElementById('csv-file');\n        \n        if (!dropArea) {\n            this.logger.warn('Import drop zone not found in DOM');\n            return;\n        }\n        \n        // Prevent default drag behaviors\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            dropArea.addEventListener(eventName, (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n            }, false);\n        });\n        \n        // Highlight drop area when item is dragged over it\n        ['dragenter', 'dragover'].forEach(eventName => {\n            dropArea.addEventListener(eventName, () => {\n                dropArea.classList.add('drag-over');\n            }, false);\n        });\n        \n        ['dragleave', 'drop'].forEach(eventName => {\n            dropArea.addEventListener(eventName, () => {\n                dropArea.classList.remove('drag-over');\n            }, false);\n        });\n        \n        // Handle dropped files\n        dropArea.addEventListener('drop', async (e) => {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            \n            if (files.length > 0) {\n                const file = files[0];\n                this.selectedFile = file; // Update the selected file\n                \n                // Update the file input to reflect the dropped file\n                if (fileInput) {\n                    // Create a new FileList-like object\n                    const dataTransfer = new DataTransfer();\n                    dataTransfer.items.add(file);\n                    fileInput.files = dataTransfer.files;\n                }\n                \n                await this.handleFileSelect(file);\n                this.validateAndUpdateButtonState();\n            }\n        }, false);\n        \n        // Handle click to browse files\n        dropArea.addEventListener('click', () => {\n            if (fileInput) {\n                fileInput.click();\n            }\n        });\n        \n        this.logger.info('Drag and drop listeners set up successfully');\n    }\n    \n    /**\n     * Start the import process\n     */\n    async startImport() {\n        this.logger.info('🚀 [DEBUG] ImportSubsystem: Start import button clicked');\n        \n        if (this.isImporting) {\n            this.logger.warn('🚀 [DEBUG] ImportSubsystem: Import already in progress');\n            this.uiManager.showNotification('An import is already in progress. Please wait for it to complete.', {\n                type: 'warning',\n                duration: 5000,\n                title: 'Import In Progress'\n            });\n            return;\n        }\n        \n        try {\n            this.isImporting = true;\n            this.logger.info('🚀 [DEBUG] ImportSubsystem: Starting import process');\n            \n            // Validate prerequisites\n            this.logger.debug('🚀 [DEBUG] ImportSubsystem: Validating prerequisites...');\n            if (!await this.validateImportPrerequisites()) {\n                this.logger.warn('🚀 [DEBUG] ImportSubsystem: Prerequisites validation failed, aborting import');\n                return;\n            }\n            \n            this.logger.info('🚀 [DEBUG] ImportSubsystem: Prerequisites validated, proceeding with import');\n            \n            // Get population selection\n            this.getPopulationSelection();\n            \n            // Show progress UI\n            this.logger.debug('🚀 [DEBUG] ImportSubsystem: Showing progress UI');\n            this.uiManager.showProgress();\n            \n            // Start real-time connection\n            const sessionId = this.generateSessionId();\n            this.logger.debug('🚀 [DEBUG] ImportSubsystem: Establishing real-time connection with session:', sessionId);\n            await this.establishRealTimeConnection(sessionId);\n            \n            // Begin import process\n            this.logger.debug('🚀 [DEBUG] ImportSubsystem: Executing import with session:', sessionId);\n            await this.executeImport(sessionId);\n            \n        } catch (error) {\n            this.logger.error('🚀 [DEBUG] ImportSubsystem: Import process failed', error);\n            this.uiManager.showError('Import Failed', error.message || 'An unexpected error occurred during the import process.');\n        } finally {\n            this.isImporting = false;\n            this.logger.debug('🚀 [DEBUG] ImportSubsystem: Import process completed, resetting isImporting flag');\n        }\n    }\n    \n    /**\n     * Validate import prerequisites\n     */\n    async validateImportPrerequisites() {\n        this.logger.debug('🔍 [DEBUG] ImportSubsystem: Validating import prerequisites');\n        \n        // Check for valid token\n        const hasValidToken = await this.checkTokenStatus();\n        if (!hasValidToken) {\n            this.logger.warn('🔍 [DEBUG] ImportSubsystem: Token validation failed');\n            // Show user-friendly authentication modal with \"Go to Settings\" button\n            this.showAuthenticationModal('Import');\n            return false;\n        }\n        \n        // Check file selection using the internal selectedFile property\n        if (!this.selectedFile) {\n            this.logger.warn('🔍 [DEBUG] ImportSubsystem: No file selected (selectedFile is null)');\n            this.uiManager.showError('No File Selected', 'Please select a CSV file to import.');\n            return false;\n        }\n        \n        // Check population selection\n        const populationSelect = document.getElementById('import-population-select');\n        if (!populationSelect || !populationSelect.value || populationSelect.value === '') {\n            this.logger.warn('🔍 [DEBUG] ImportSubsystem: No population selected');\n            this.uiManager.showError('No Population Selected', 'Please select a population for the import.');\n            return false;\n        }\n        \n        this.logger.info('✅ [DEBUG] ImportSubsystem: All prerequisites validated successfully', {\n            hasFile: !!this.selectedFile,\n            fileName: this.selectedFile?.name,\n            hasPopulation: !!populationSelect?.value,\n            populationId: populationSelect?.value\n        });\n        \n        return true;\n    }\n    \n    /**\n     * Get current population selection\n     */\n    getPopulationSelection() {\n        const popSelect = document.getElementById('import-population-select');\n        this.selectedPopulationId = popSelect?.value || '';\n        \n        if (popSelect) {\n            const selectedOption = popSelect.options[popSelect.selectedIndex];\n            this.selectedPopulationName = selectedOption?.text || '';\n        }\n        \n        this.logger.info('Population selection', {\n            id: this.selectedPopulationId,\n            name: this.selectedPopulationName\n        });\n    }\n    \n    /**\n     * Handle progress updates\n     */\n    handleProgressUpdate(data) {\n        if (!data || data.current === undefined || data.total === undefined) {\n            this.logger.error('Invalid progress data', data);\n            return;\n        }\n        \n        const percentage = Math.round((data.current / data.total) * 100);\n        \n        // Update progress UI\n        this.uiManager.updateProgress(percentage, data.message || `Processing ${data.current} of ${data.total} users...`);\n        \n        this.logger.info('Progress update', {\n            current: data.current,\n            total: data.total,\n            percentage\n        });\n    }\n    \n    /**\n     * Handle import completion\n     */\n    handleImportCompletion(data) {\n        this.logger.info('Import completed', data);\n        // TODO: Refactor: Use Notification from UI subsystem instead of alert.\n        this.cleanupConnections();\n    }\n    \n    /**\n     * Handle import errors\n     */\n    handleImportError(data) {\n        this.logger.error('Import error', data);\n        // TODO: Refactor: Use Notification or Modal from UI subsystem instead of alert.\n        this.cleanupConnections();\n    }\n    \n    /**\n     * Execute the import process\n     */\n    async executeImport(sessionId) {\n        const fileInput = document.getElementById('csv-file');\n        const file = fileInput.files[0];\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('populationId', this.selectedPopulationId);\n        formData.append('sessionId', sessionId);\n        \n        try {\n            const response = await this.localClient.post('/api/import', formData);\n            \n            if (!response.success) {\n                throw new Error(response.error || 'Import failed');\n            }\n            \n            this.logger.info('Import request sent successfully');\n            \n        } catch (error) {\n            this.logger.error('Import request failed', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Generate unique session ID\n     */\n    generateSessionId() {\n        return `import_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    /**\n     * Check token status\n     */\n    async checkTokenStatus() {\n        try {\n            (this.logger?.debug || window.logger?.debug || console.log)('🔍 [DEBUG] ImportSubsystem: checkTokenStatus called');\n            (this.logger?.debug || window.logger?.debug || console.log)('🔍 [DEBUG] ImportSubsystem: this.authManagementSubsystem =', this.authManagementSubsystem);\n            (this.logger?.debug || window.logger?.debug || console.log)('🔍 [DEBUG] ImportSubsystem: typeof this.authManagementSubsystem =', typeof this.authManagementSubsystem);\n            \n            if (!this.authManagementSubsystem) {\n                this.logger.warn('AuthManagementSubsystem not available for token check');\n                (this.logger?.debug || window.logger?.debug || console.log)('❌ [DEBUG] ImportSubsystem: AuthManagementSubsystem is null/undefined');\n                return false;\n            }\n            \n            (this.logger?.debug || window.logger?.debug || console.log)('✅ [DEBUG] ImportSubsystem: AuthManagementSubsystem is available, calling isTokenValid()');\n            const isValid = this.authManagementSubsystem.isTokenValid();\n            (this.logger?.debug || window.logger?.debug || console.log)('🔍 [DEBUG] ImportSubsystem: isValid =', isValid);\n            \n            // Also get authentication status for additional info\n            const authStatus = this.authManagementSubsystem.getAuthenticationStatus();\n            (this.logger?.debug || window.logger?.debug || console.log)('🔍 [DEBUG] ImportSubsystem: authStatus =', authStatus);\n            \n            return isValid;\n        } catch (error) {\n            this.logger.error('Error checking token status:', error);\n            (this.logger?.debug || window.logger?.debug || console.log)('❌ [DEBUG] ImportSubsystem: Error in checkTokenStatus:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Show authentication modal with \"Go to Settings\" button\n     */\n    showAuthenticationModal(operation = 'Import') {\n        try {\n            // Create authentication modal directly to avoid bundling issues\n            this.createAuthenticationModal(operation);\n        } catch (error) {\n            this.logger.error('Error showing authentication modal:', error);\n            // Fallback to generic error\n            this.uiManager.showError('Authentication Required', \n                `You must have a valid token to start an ${operation.toLowerCase()}. Please go to Settings to configure your credentials.`);\n        }\n    }\n\n    /**\n     * Create authentication modal with \"Go to Settings\" button\n     */\n    createAuthenticationModal(operation) {\n        // Initialize utilities for safe DOM operations\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                TOKEN_ALERT_OVERLAY: '.token-alert-overlay',\n                SETTINGS_NAV_ITEM: '[data-view=\"settings\"]'\n            },\n            CLASSES: {\n                TOKEN_ALERT_OVERLAY: 'token-alert-overlay'\n            }\n        };\n        \n        // Check if modal already exists using Safe DOM\n        const existingModal = safeDOM.select(UI_CONFIG.SELECTORS.TOKEN_ALERT_OVERLAY);\n        if (existingModal) {\n            existingModal.remove();\n        }\n\n        // Create modal overlay using Safe DOM\n        const overlay = document.createElement('div');\n        safeDOM.addClass(overlay, UI_CONFIG.CLASSES.TOKEN_ALERT_OVERLAY);\n        overlay.setAttribute('role', 'dialog');\n        overlay.setAttribute('aria-modal', 'true');\n        overlay.setAttribute('aria-labelledby', 'token-alert-title');\n        overlay.setAttribute('aria-describedby', 'token-alert-content');\n\n        // Modal content with enhanced styling and action button\n        overlay.innerHTML = `\n            <div class=\"token-alert-modal\" tabindex=\"-1\">\n                <div class=\"token-alert-header\">\n                    <h2 id=\"token-alert-title\">\n                        <span class=\"warning-icon\" aria-hidden=\"true\">⚠️</span>\n                        <span>Authentication Required</span>\n                    </h2>\n                    <button type=\"button\" class=\"token-alert-close\" id=\"token-alert-close\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div class=\"token-alert-body\">\n                    <div id=\"token-alert-content\" class=\"token-alert-content\">\n                        <div class=\"token-alert-icon\">\n                            <span aria-hidden=\"true\">🔐</span>\n                        </div>\n                        <h3>No Valid Token Available</h3>\n                        <p class=\"token-alert-message\">\n                            <strong>Authentication is required to continue.</strong>\n                            You need valid credentials to perform the \"${operation}\" operation.\n                        </p>\n                        <div class=\"token-status-info\">\n                            <p><strong>Current Status:</strong> No token available</p>\n                        </div>\n                        <div class=\"token-alert-actions\">\n                            <button type=\"button\" class=\"btn btn-primary btn-lg\" id=\"token-alert-settings-btn\">\n                                <span class=\"btn-icon\">⚙️</span>\n                                Go to Settings\n                            </button>\n                            <p class=\"token-alert-help\">\n                                Add your PingOne credentials in the Settings page to generate a new token.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(overlay);\n        \n        // Bind events using Safe DOM\n        const settingsBtn = safeDOM.select('#token-alert-settings-btn', overlay);\n        const closeBtn = safeDOM.select('#token-alert-close', overlay);\n        \n        // Settings button - navigate to settings with error handling\n        if (settingsBtn) {\n            safeDOM.addEventListener(settingsBtn, 'click', errorHandler.wrapEventHandler(() => {\n                overlay.remove();\n                // Navigate to settings view\n                if (window.app && window.app.showView) {\n                    window.app.showView('settings');\n                } else {\n                    // Fallback: trigger the settings nav item using Safe DOM\n                    const settingsNavItem = safeDOM.select(UI_CONFIG.SELECTORS.SETTINGS_NAV_ITEM);\n                    if (settingsNavItem) {\n                        settingsNavItem.click();\n                    } else {\n                        // Final fallback: redirect to home page\n                        window.location.href = '/';\n                    }\n                }\n            }, 'Authentication modal settings button click'));\n        }\n\n        // Close button - allow manual dismissal\n        closeBtn.addEventListener('click', () => {\n            overlay.remove();\n        });\n\n        // Trap focus within modal\n        overlay.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                overlay.remove();\n            }\n        });\n        \n        // Show modal with animation\n        overlay.style.display = 'flex';\n        setTimeout(() => {\n            overlay.classList.add('show');\n        }, 10);\n    }\n    \n    /**\n     * Handle file selection\n     */\n    async handleFileSelect(file) {\n        try {\n            this.logger.info('File selected for import', {\n                name: file.name,\n                size: file.size,\n                type: file.type\n            });\n            \n            // Validate file\n            if (!this.validateFile(file)) {\n                return;\n            }\n            \n            // Show file info\n            this.displayFileInfo(file);\n            \n        } catch (error) {\n            this.logger.error('File selection failed', error);\n            this.uiManager.showError('File Selection Error', error.message);\n        }\n    }\n    \n    /**\n     * Validate form state and update Import button enabled/disabled state\n     */\n    validateAndUpdateButtonState() {\n        // Initialize utilities for safe DOM operations\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                START_IMPORT_BTN: 'start-import',\n                IMPORT_POPULATION_SELECT: 'import-population-select'\n            },\n            CLASSES: {\n                BTN_DISABLED: 'btn-disabled',\n                BTN_PRIMARY: 'btn-primary'\n            }\n        };\n        \n        // Wrap the entire validation in error handler\n        errorHandler.wrapSync(() => {\n            const importBtn = safeDOM.selectById(UI_CONFIG.SELECTORS.START_IMPORT_BTN);\n            if (!importBtn) {\n                this.logger.warn('Import button not found for state validation');\n                return;\n            }\n            \n            // Check if file is selected (using internal state for reliability)\n            const hasFile = !!this.selectedFile;\n            \n            // Check if population is selected using Safe DOM\n            const populationSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.IMPORT_POPULATION_SELECT);\n            const hasPopulation = populationSelect && populationSelect.value && populationSelect.value !== '';\n            \n            // Enable button only if both file and population are selected\n            const shouldEnable = hasFile && hasPopulation;\n            \n            importBtn.disabled = !shouldEnable;\n            \n            this.logger.debug('Import button state updated', {\n                hasFile,\n                hasPopulation,\n                shouldEnable,\n                buttonDisabled: importBtn.disabled\n            });\n            \n            // Update button appearance using Safe DOM\n            if (shouldEnable) {\n                safeDOM.removeClass(importBtn, UI_CONFIG.CLASSES.BTN_DISABLED);\n                safeDOM.addClass(importBtn, UI_CONFIG.CLASSES.BTN_PRIMARY);\n            } else {\n                safeDOM.addClass(importBtn, UI_CONFIG.CLASSES.BTN_DISABLED);\n                safeDOM.removeClass(importBtn, UI_CONFIG.CLASSES.BTN_PRIMARY);\n            }\n        }, 'Import button state validation')();\n    }\n    \n    /**\n     * Validate selected file\n     */\n    validateFile(file) {\n        if (!file.name.toLowerCase().endsWith('.csv')) {\n            this.uiManager.showError('Invalid File Type', 'Please select a CSV file');\n            return false;\n        }\n        \n        if (file.size > 10 * 1024 * 1024) { // 10MB limit\n            this.uiManager.showError('File Too Large', 'File size must be less than 10MB');\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Display comprehensive file information with record count and validation\n     * CRITICAL: This method provides detailed file information display for CSV import UI\n     * DO NOT simplify this method - users need comprehensive file details including record counts\n     * Last enhanced: 2025-07-22 - Restored missing file information section functionality\n     */\n    async displayFileInfo(file) {\n        try {\n            this.logger.info('Displaying comprehensive file information', { fileName: file.name });\n            \n            // Parse CSV to get record count and validation information\n            let recordCount = null;\n            let csvData = null;\n            \n            try {\n                // Read and parse the CSV file to get accurate record count\n                const fileContent = await this.readFileAsText(file);\n                csvData = this.parseCSVContent(fileContent);\n                recordCount = csvData ? csvData.length : 0;\n                \n                this.logger.debug('CSV parsing completed', { recordCount, hasData: !!csvData });\n            } catch (parseError) {\n                this.logger.warn('Failed to parse CSV for record count', { error: parseError.message });\n                recordCount = 'Unable to determine';\n            }\n            \n            // Use comprehensive file info display with all details\n            this.updateFileInfoDisplay(file, recordCount, csvData);\n            \n        } catch (error) {\n            this.logger.error('Failed to display file information', { error: error.message });\n            \n            // Initialize utilities for safe DOM operations\n            const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n            const UI_CONFIG = window.UI_CONFIG || {\n                SELECTORS: {\n                    FILE_INFO: 'file-info'\n                },\n                CLASSES: {\n                    FILE_INFO_ERROR: 'file-info-error'\n                },\n                STYLES: {\n                    ERROR_BACKGROUND: '#f8d7da',\n                    ERROR_BORDER: '1px solid #f5c6cb',\n                    ERROR_COLOR: '#721c24'\n                }\n            };\n            \n            // Fallback to basic file info display using Safe DOM\n            const fileInfoElement = safeDOM.selectById(UI_CONFIG.SELECTORS.FILE_INFO);\n            if (fileInfoElement) {\n                const errorHTML = `\n                    <div class=\"${UI_CONFIG.CLASSES.FILE_INFO_ERROR}\" style=\"background: ${UI_CONFIG.STYLES.ERROR_BACKGROUND}; border: ${UI_CONFIG.STYLES.ERROR_BORDER}; border-radius: 4px; padding: 12px; color: ${UI_CONFIG.STYLES.ERROR_COLOR};\">\n                        <strong>⚠️ File Information Error</strong><br>\n                        Selected: ${file.name}<br>\n                        Size: ${(file.size / 1024).toFixed(2)} KB<br>\n                        <em>Unable to display detailed information: ${error.message}</em>\n                    </div>\n                `;\n                safeDOM.setHTML(fileInfoElement, errorHTML);\n            }\n        }\n    }\n\n    /**\n     * Read file as text for CSV parsing\n     * @param {File} file - The file to read\n     * @returns {Promise<string>} File content as text\n     */\n    readFileAsText(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (event) => resolve(event.target.result);\n            reader.onerror = () => reject(new Error('Failed to read file'));\n            reader.readAsText(file);\n        });\n    }\n\n    /**\n     * Parse CSV content to extract user records\n     * @param {string} content - CSV file content\n     * @returns {Array} Parsed CSV records\n     */\n    parseCSVContent(content) {\n        if (!content || typeof content !== 'string') {\n            return [];\n        }\n        \n        try {\n            // Simple CSV parsing - split by lines and handle basic CSV format\n            const lines = content.split('\\n').filter(line => line.trim().length > 0);\n            if (lines.length <= 1) {\n                return []; // No data rows (only header or empty)\n            }\n            \n            // Return data rows (excluding header)\n            return lines.slice(1).map(line => {\n                // Basic CSV parsing - split by comma and handle quoted fields\n                const fields = [];\n                let current = '';\n                let inQuotes = false;\n                \n                for (let i = 0; i < line.length; i++) {\n                    const char = line[i];\n                    if (char === '\"') {\n                        inQuotes = !inQuotes;\n                    } else if (char === ',' && !inQuotes) {\n                        fields.push(current.trim());\n                        current = '';\n                    } else {\n                        current += char;\n                    }\n                }\n                fields.push(current.trim()); // Add the last field\n                \n                return fields;\n            }).filter(row => row.some(field => field.length > 0)); // Filter out empty rows\n            \n        } catch (error) {\n            this.logger.error('CSV parsing error', { error: error.message });\n            return [];\n        }\n    }\n\n    /**\n     * Update file info display with comprehensive information\n     * @param {File} file - The selected file\n     * @param {number|string} recordCount - Number of records or error message\n     * @param {Array} csvData - Parsed CSV data for validation\n     */\n    updateFileInfoDisplay(file, recordCount, csvData) {\n        const fileInfoElement = document.getElementById('file-info');\n        if (!fileInfoElement) {\n            this.logger.warn('File info element not found in DOM');\n            return;\n        }\n        \n        const fileSize = this.formatFileSize(file.size);\n        const lastModified = new Date(file.lastModified).toLocaleString();\n        const fileType = file.type || this.getFileExtension(file.name);\n        const fileExtension = this.getFileExtension(file.name);\n        \n        // Determine if file type is valid for CSV import\n        const isCSV = fileExtension === 'csv';\n        const isText = fileExtension === 'txt';\n        const isValidType = isCSV || isText || fileType === 'text/csv' || fileType === 'text/plain';\n        \n        // Create record count display\n        let recordCountHTML = '';\n        if (isValidType && recordCount !== null) {\n            if (typeof recordCount === 'number') {\n                if (recordCount > 0) {\n                    recordCountHTML = `\n                        <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                            <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">🧾 Records</strong>\n                            <span style=\"color: #0073C8; font-size: 0.8rem; font-weight: bold;\">${recordCount}</span>\n                        </div>\n                    `;\n                } else {\n                    recordCountHTML = `\n                        <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                            <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">🧾 Records</strong>\n                            <span style=\"color: #dc3545; font-size: 0.8rem; font-weight: bold;\">No user records found</span>\n                        </div>\n                    `;\n                }\n            } else {\n                recordCountHTML = `\n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">🧾 Records</strong>\n                        <span style=\"color: #ffc107; font-size: 0.8rem; font-weight: bold;\">${recordCount}</span>\n                    </div>\n                `;\n            }\n        }\n        \n        // Create comprehensive file information display\n        const fileInfoHTML = `\n            <div class=\"file-info-details\" style=\"background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 12px; margin: 8px 0; box-shadow: 0 1px 4px rgba(0,0,0,0.08);\">\n                \n                <!-- File Name Section -->\n                <div class=\"file-name-section\" style=\"text-align: center; margin-bottom: 12px; padding: 8px; background: #e6f4ff; border-radius: 4px; color: #1a237e; font-weight: bold; font-size: 1.1rem;\">\n                    <div style=\"font-size: 1.3rem; font-weight: 600; margin-bottom: 3px; color: #1a237e; word-break: break-word; overflow-wrap: break-word;\">\n                        <i class=\"fas fa-file-csv\" style=\"margin-right: 6px; font-size: 1.2rem; color: #1976d2;\"></i>\n                        ${file.name}\n                    </div>\n                    <div style=\"font-size: 0.85rem; opacity: 0.9; font-weight: 500; color: #1976d2;\">\n                        File Selected Successfully\n                    </div>\n                </div>\n                \n                <!-- File Information Grid -->\n                <div class=\"file-info-grid\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 0.8em; margin-bottom: 10px;\">\n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📊 File Size</strong>\n                        <span style=\"color: #6c757d; font-size: 0.8rem;\">${fileSize}</span>\n                    </div>\n                    \n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📅 Modified</strong>\n                        <span style=\"color: #6c757d; font-size: 0.8rem;\">${lastModified}</span>\n                    </div>\n                    \n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📄 Type</strong>\n                        <span style=\"color: #6c757d; font-size: 0.8rem;\">${fileType || 'CSV'}</span>\n                    </div>\n                    \n                    ${recordCountHTML}\n                </div>\n                \n                <!-- File Status -->\n                <div class=\"file-info-status\" style=\"margin-top: 8px; padding: 8px; border-radius: 4px; background: ${isValidType ? '#d4edda' : '#f8d7da'}; border: 1px solid ${isValidType ? '#c3e6cb' : '#f5c6cb'}; display: flex; align-items: center; gap: 6px;\">\n                    <i class=\"fas ${isValidType ? 'fa-check-circle' : 'fa-exclamation-triangle'}\" style=\"color: ${isValidType ? '#155724' : '#721c24'};\"></i>\n                    <span style=\"color: ${isValidType ? '#155724' : '#721c24'}; font-size: 0.85rem; font-weight: 500;\">\n                        ${isValidType ? 'Valid CSV file format' : 'Warning: File type may not be compatible'}\n                    </span>\n                </div>\n                \n                ${csvData && csvData.length > 0 ? `\n                <div class=\"file-info-preview\" style=\"margin-top: 8px; padding: 8px; border-radius: 4px; background: #fff3cd; border: 1px solid #ffeaa7;\">\n                    <strong style=\"color: #856404; font-size: 0.85rem;\">📋 Ready for Import</strong>\n                    <div style=\"color: #856404; font-size: 0.8rem; margin-top: 2px;\">\n                        File contains ${recordCount} user record${recordCount === 1 ? '' : 's'} ready for processing\n                    </div>\n                </div>\n                ` : ''}\n            </div>\n        `;\n        \n        fileInfoElement.innerHTML = fileInfoHTML;\n        this.logger.info('File information display updated successfully', { recordCount, isValidType });\n    }\n\n    /**\n     * Format file size for display\n     * @param {number} bytes - File size in bytes\n     * @returns {string} Formatted file size\n     */\n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    /**\n     * Get file extension from filename\n     * @param {string} filename - The filename\n     * @returns {string} File extension in lowercase\n     */\n    getFileExtension(filename) {\n        return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2).toLowerCase();\n    }\n    \n    /**\n     * Establish real-time connection for import progress tracking\n     * CRITICAL: This method was missing and causing UI freeze due to infinite await\n     * Last implemented: 2025-07-22 - Fixed UI freeze issue by implementing missing method\n     */\n    async establishRealTimeConnection(sessionId) {\n        try {\n            this.logger.debug('🔗 [DEBUG] ImportSubsystem: Establishing real-time connection for session:', sessionId);\n            \n            // Check if Socket.IO is available\n            if (typeof io !== 'undefined' && this.subsystems?.realtimeManager) {\n                this.logger.debug('🔗 [DEBUG] ImportSubsystem: Socket.IO available, setting up real-time connection');\n                \n                // Set up Socket.IO connection through realtime subsystem\n                this.socket = this.subsystems.realtimeManager.getConnection();\n                \n                if (this.socket) {\n                    // Set up progress event listeners\n                    this.socket.on(`import-progress-${sessionId}`, (data) => {\n                        this.handleProgressUpdate(data);\n                    });\n                    \n                    this.socket.on(`import-complete-${sessionId}`, (data) => {\n                        this.handleImportCompletion(data);\n                    });\n                    \n                    this.socket.on(`import-error-${sessionId}`, (data) => {\n                        this.handleImportError(data);\n                    });\n                    \n                    this.logger.info('✅ [DEBUG] ImportSubsystem: Real-time connection established successfully');\n                } else {\n                    this.logger.warn('⚠️ [DEBUG] ImportSubsystem: Socket.IO connection not available, using fallback polling');\n                    this.setupFallbackPolling(sessionId);\n                }\n            } else {\n                this.logger.warn('⚠️ [DEBUG] ImportSubsystem: Socket.IO not available, using fallback polling');\n                this.setupFallbackPolling(sessionId);\n            }\n            \n            // Always resolve immediately to prevent UI freeze\n            return Promise.resolve();\n            \n        } catch (error) {\n            this.logger.error('❌ [DEBUG] ImportSubsystem: Failed to establish real-time connection:', error);\n            // Set up fallback polling if real-time connection fails\n            this.setupFallbackPolling(sessionId);\n            // Always resolve to prevent UI freeze\n            return Promise.resolve();\n        }\n    }\n    \n    /**\n     * Clean up connections and resources\n     */\n    cleanupConnections() {\n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n        \n        if (this.fallbackPolling) {\n            clearInterval(this.fallbackPolling);\n            this.fallbackPolling = null;\n        }\n        \n        this.isImporting = false;\n    }\n    \n    /**\n     * Set up fallback polling if Socket.IO fails\n     */\n    setupFallbackPolling(sessionId) {\n        this.fallbackPolling = setInterval(async () => {\n            try {\n                const response = await this.localClient.get(`/api/import/status/${sessionId}`);\n                if (response.data) {\n                    this.handleProgressUpdate(response.data);\n                }\n            } catch (error) {\n                this.logger.error('Fallback polling failed', error);\n            }\n        }, 2000);\n    }\n    \n    /**\n     * Set up cross-subsystem event listeners\n     */\n    setupCrossSubsystemEvents() {\n        if (!this.eventBus) {\n            this.logger.warn('EventBus not available for cross-subsystem events');\n            return;\n        }\n        \n        // Listen for token expiration events\n        this.eventBus.on('tokenExpired', (data) => {\n            this.logger.warn('Token expired during import operation');\n            if (this.isImporting) {\n                this.cleanupConnections();\n                this.uiManager.showError('Session Expired', 'Your authentication token expired during the import. Please re-authenticate and try again.');\n            }\n        });\n        \n        // Listen for token error events\n        this.eventBus.on('tokenError', (data) => {\n            this.logger.error('Token error detected', data);\n            if (this.isImporting) {\n                this.cleanupConnections();\n                this.uiManager.showError('Authentication Error', `Authentication failed: ${data.error}`);\n            }\n        });\n        \n        // Listen for token refresh events\n        this.eventBus.on('tokenRefreshed', (data) => {\n            this.logger.info('Token refreshed successfully');\n            // Token refresh is handled automatically, just log for now\n        });\n        \n        // Listen for population change events\n        this.eventBus.on('populationsChanged', (data) => {\n            this.logger.info('Populations changed, refreshing import dropdown', { count: data.count });\n            this.refreshPopulationDropdown();\n        });\n        \n        this.logger.debug('Cross-subsystem event listeners set up for ImportSubsystem');\n    }\n    \n    /**\n     * Handle population selection change\n     */\n    handlePopulationChange(populationId, populationName) {\n        this.logger.info('🔄 [DEBUG] ImportSubsystem: Population changed', { populationId, populationName });\n        \n        // Update population name display with better visual distinction\n        const populationNameDisplay = document.querySelector('.population-name-text');\n        if (populationNameDisplay) {\n            if (populationId && populationName) {\n                populationNameDisplay.innerHTML = `<span class=\"population-label\">Population:</span> <span class=\"population-value\">${populationName}</span>`;\n                this.logger.debug('Updated population name display', { populationName });\n            } else {\n                populationNameDisplay.innerHTML = `<span class=\"population-label\">Population:</span> <span class=\"population-placeholder\">Select a population</span>`;\n            }\n        }\n        \n        // Update API URL display\n        const apiUrlDisplay = document.querySelector('.api-url-text');\n        if (apiUrlDisplay) {\n            if (populationId) {\n                // Construct the API URL for the selected population\n                const apiUrl = `/api/populations/${populationId}/users`;\n                apiUrlDisplay.textContent = apiUrl;\n                this.logger.debug('Updated API URL display', { apiUrl });\n            } else {\n                apiUrlDisplay.textContent = 'Select a population to see the API URL';\n            }\n        }\n        \n        // Store the selected population for import operations\n        this.selectedPopulationId = populationId;\n        this.selectedPopulationName = populationName;\n        \n        // Emit event for other subsystems\n        if (this.eventBus) {\n            this.eventBus.emit('importPopulationChanged', {\n                populationId,\n                populationName\n            });\n        }\n    }\n    \n    /**\n     * Refresh the population dropdown for import\n     */\n    refreshPopulationDropdown() {\n        this.logger.info('🔍 [DEBUG] ImportSubsystem: refreshPopulationDropdown called');\n        \n        // Use PopulationService directly instead of going through app\n        if (this.populationService) {\n            this.logger.info('🔍 [DEBUG] ImportSubsystem: PopulationService available, calling populateDropdown');\n            \n            this.populationService.populateDropdown('import-population-select', {\n                includeEmpty: true,\n                emptyText: 'Select a population'\n            })\n                .then(() => {\n                    this.logger.info('✅ [DEBUG] ImportSubsystem: Import population dropdown refreshed successfully');\n                })\n                .catch(error => {\n                    this.logger.error('❌ [DEBUG] ImportSubsystem: Failed to refresh import population dropdown', error);\n                    this.uiManager.showError('Population Refresh Failed', 'Failed to refresh population dropdown.');\n                });\n        } else {\n            this.logger.error('❌ [DEBUG] ImportSubsystem: PopulationService not available for dropdown refresh', {\n                populationServiceType: typeof this.populationService,\n                populationServiceExists: !!this.populationService\n            });\n        }\n    }\n}","/**\n * Export Management Subsystem\n * \n * Handles all user export operations with proper separation of concerns.\n * Manages export configuration, progress tracking, and file generation.\n */\n\nexport class ExportSubsystem {\n    constructor(logger, uiManager, localClient, settingsManager, eventBus, populationService) {\n        this.logger = logger;\n        this.uiManager = uiManager;\n        this.localClient = localClient;\n        this.settingsManager = settingsManager;\n        this.eventBus = eventBus;\n        this.populationService = populationService;\n        \n        // Export state management\n        this.isExporting = false;\n        this.selectedPopulationId = null;\n        this.selectedPopulationName = null;\n        \n        this.logger.info('Export Subsystem initialized');\n        \n        // Set up event listeners for cross-subsystem communication\n        this.setupCrossSubsystemEvents();\n    }\n    \n    /**\n     * Initialize the export subsystem\n     */\n    async init() {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const initAction = async () => {\n            this.setupEventListeners();\n            await this.loadPopulations();\n            this.logger.info('Export Subsystem initialized successfully');\n        };\n\n        await errorHandler.wrapAsync(\n            initAction, \n            'Initialize Export Subsystem',\n            'Failed to Initialize Export Subsystem' // Custom error message for UI\n        )();\n    }\n    \n    /**\n     * Set up event listeners for export-related elements\n     */\n    setupEventListeners() {\n        // Initialize utilities for safe DOM operations\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                EXPORT_BTN: 'export-btn',\n                EXPORT_POPULATION_SELECT: 'export-population-select',\n                EXPORT_FORMAT: 'export-format'\n            }\n        };\n\n        // Export button\n        const exportBtn = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_BTN);\n        if (exportBtn) {\n            safeDOM.addEventListener(exportBtn, 'click', errorHandler.wrapAsyncEventHandler(async (e) => {\n                e.preventDefault();\n                await this.startExport();\n            }, 'Export button click'));\n        }\n\n        // Population selection change\n        const populationSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_POPULATION_SELECT);\n        if (populationSelect) {\n            safeDOM.addEventListener(populationSelect, 'change', errorHandler.wrapEventHandler((e) => {\n                this.handlePopulationChange(e.target.value);\n            }, 'Export population change'));\n        }\n\n        // Export format selection\n        const formatSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_FORMAT);\n        if (formatSelect) {\n            safeDOM.addEventListener(formatSelect, 'change', errorHandler.wrapEventHandler((e) => {\n                this.handleFormatChange(e.target.value);\n            }, 'Export format change'));\n        }\n    }\n    \n    /**\n     * Start the export process\n     */\n    async startExport() {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        if (this.isExporting) {\n            this.logger.warn('Export already in progress');\n            return;\n        }\n\n        this.isExporting = true;\n        this.logger.info('Starting export process');\n\n        try {\n            const exportAction = async () => {\n                // Validate prerequisites\n                if (!await this.validateExportPrerequisites()) {\n                    return; // Validation failed, error already shown.\n                }\n\n                // Get export configuration\n                const config = this.getExportConfiguration();\n\n                // Show progress UI\n                this.uiManager.showProgress('Exporting...');\n\n                // Execute export\n                await this.executeExport(config);\n            };\n\n            await errorHandler.wrapAsync(\n            exportAction, \n            'Start export process',\n            'The export failed. Please check the application logs for more details.'\n        )();\n\n        } finally {\n            // This block ensures that the UI is always reset, even if validation fails or an error occurs.\n            this.isExporting = false;\n            this.uiManager.hideProgress();\n        }\n    }\n    \n    /**\n     * Validate export prerequisites\n     */\n    async validateExportPrerequisites() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                EXPORT_POPULATION_SELECT: 'export-population-select'\n            }\n        };\n\n        const validationAction = async () => {\n            // Check for valid token\n            const hasValidToken = await this.checkTokenStatus();\n            if (!hasValidToken) {\n                this.logger.warn('Export cancelled - no valid token');\n                this.uiManager.showError('Authentication Required', 'Please get a valid token first');\n                return false;\n            }\n\n            // Check population selection\n            const populationSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_POPULATION_SELECT);\n            if (!populationSelect || !populationSelect.value) {\n                this.uiManager.showError('No Population Selected', 'Please select a population to export');\n                return false;\n            }\n\n            return true;\n        };\n\n        return await errorHandler.wrapAsync(validationAction, 'Validate export prerequisites')();\n    }\n    \n    /**\n     * Get export configuration from form\n     */\n    getExportConfiguration() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                EXPORT_POPULATION_SELECT: 'export-population-select',\n                EXPORT_FORMAT: 'export-format',\n                INCLUDE_HEADERS: 'include-headers',\n                LIMIT_USERS: 'limit-users',\n                USER_LIMIT: 'user-limit'\n            }\n        };\n\n        const getAction = () => {\n            const populationSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_POPULATION_SELECT);\n            const formatSelect = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_FORMAT);\n            const includeHeaders = safeDOM.selectById(UI_CONFIG.SELECTORS.INCLUDE_HEADERS);\n            const limitUsers = safeDOM.selectById(UI_CONFIG.SELECTORS.LIMIT_USERS);\n            const userLimit = safeDOM.selectById(UI_CONFIG.SELECTORS.USER_LIMIT);\n\n            const isLimitEnabled = limitUsers ? limitUsers.checked : false;\n\n            return {\n                populationId: populationSelect ? populationSelect.value : '',\n                populationName: (populationSelect && populationSelect.selectedIndex >= 0) ? populationSelect.options[populationSelect.selectedIndex].text : '',\n                format: formatSelect ? formatSelect.value : 'csv',\n                includeHeaders: includeHeaders ? includeHeaders.checked : true,\n                limitUsers: isLimitEnabled,\n                userLimit: isLimitEnabled ? (parseInt(userLimit?.value, 10) || 100) : null,\n                timestamp: new Date().toISOString()\n            };\n        };\n\n        return errorHandler.wrapSync(getAction, 'Get export configuration')();\n    }\n    \n    /**\n     * Execute the export process\n     */\n    async executeExport(config) {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const exportAction = async () => {\n            this.logger.info('Executing export with config', config);\n\n            // Send export request\n            const response = await this.localClient.post('/api/export', config);\n\n            if (!response.success) {\n                throw new Error(response.error || 'Export failed');\n            }\n\n            // Handle file download\n            if (response.downloadUrl) {\n                this.downloadFile(response.downloadUrl, response.filename);\n            } else if (response.data) {\n                this.downloadData(response.data, config.format, config.populationName);\n            }\n\n            this.logger.info('Export completed successfully');\n            this.uiManager.showSuccess('Export completed successfully');\n        };\n\n        // Errors will be caught and re-thrown, to be handled by the caller (startExport)\n        await errorHandler.wrapAsync(\n            exportAction,\n            'Execute export',\n            'Failed to communicate with the server during export. Please check your connection and try again.',\n            { rethrow: true } // Rethrow to allow the caller to handle UI cleanup\n        )();\n    }\n    \n    /**\n     * Download file from URL\n     */\n    downloadFile(url, filename) {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const downloadAction = () => {\n            const link = safeDOM.createElement('a');\n            if (!link) return; // createElement can fail\n\n            link.href = url;\n            link.download = filename || `export_${Date.now()}.csv`;\n            \n            safeDOM.appendChild(document.body, link);\n            link.click(); // Direct click is generally safe here\n            safeDOM.removeChild(document.body, link);\n            \n            this.logger.info('Successfully triggered file download', { filename });\n        };\n\n        errorHandler.wrapSync(\n        downloadAction, \n        'Download file from URL',\n        'Failed to trigger file download. Please check browser permissions and try again.'\n    )();\n    }\n    \n    /**\n     * Download data as file\n     */\n    downloadData(data, format, populationName) {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const downloadDataAction = () => {\n            let content, mimeType, extension;\n\n            switch (format) {\n                case 'json':\n                    content = JSON.stringify(data, null, 2);\n                    mimeType = 'application/json';\n                    extension = 'json';\n                    break;\n                case 'csv':\n                default:\n                    content = this.convertToCSV(data);\n                    mimeType = 'text/csv';\n                    extension = 'csv';\n                    break;\n            }\n\n            const blob = new Blob([content], { type: mimeType });\n            const url = URL.createObjectURL(blob);\n            const filename = `${populationName || 'export'}_${Date.now()}.${extension}`;\n\n            try {\n                this.downloadFile(url, filename);\n            } finally {\n                // Revoke the object URL to free up memory, regardless of success\n                URL.revokeObjectURL(url);\n                this.logger.debug('Revoked object URL for downloaded file', { url });\n            }\n        };\n\n        errorHandler.wrapSync(\n        downloadDataAction,\n        'Download data as file',\n        'Failed to prepare data for download. The data may be invalid or too large.'\n    )();\n    }\n    \n    /**\n     * Convert data to CSV format\n     */\n    convertToCSV(data) {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const convertAction = () => {\n            if (!Array.isArray(data) || data.length === 0) {\n                return '';\n            }\n\n            // Get headers from first object\n            const headers = Object.keys(data[0]);\n            const csvHeaders = headers.join(',');\n\n            // Convert data rows\n            const csvRows = data.map(row => {\n                return headers.map(header => {\n                    const value = row[header];\n                    // Escape commas and quotes\n                    if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n                        return `\"${value.replace(/\"/g, '\"\"')}\"`;\n                    }\n                    return value || '';\n                }).join(',');\n            });\n\n            return [csvHeaders, ...csvRows].join('\\n');\n        };\n\n        return errorHandler.wrapSync(\n        convertAction, \n        'Convert data to CSV',\n        'Failed to convert data to CSV format. The data might be structured incorrectly.'\n    )() || ''; // Ensure empty string on failure\n    }\n    \n    /**\n     * Load populations for dropdown\n     * CRITICAL: This method loads populations for export functionality\n     * DO NOT modify API endpoint without verifying it matches server routes\n     * Last debugged: 2025-07-21 - Added debug logging for population loading issues\n     */\n    async loadPopulations() {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const loadAction = async () => {\n            this.logger.info('🔄 EXPORT: Loading populations for export dropdown...');\n\n            const response = await this.localClient.get('/api/populations');\n\n            this.logger.debug('🔄 EXPORT: Populations API response:', {\n                success: response.success,\n                populationCount: response.populations?.length || 0,\n                hasPopulations: !!response.populations\n            });\n\n            if (response.success && response.populations) {\n                this.logger.info(`🔄 EXPORT: Successfully loaded ${response.populations.length} populations`);\n                this.populateDropdown(response.populations);\n            } else {\n                // Let the errorHandler handle the UI notification by throwing an error.\n                throw new Error('Invalid or empty response from populations API');\n            }\n        };\n\n        await errorHandler.wrapAsync(\n            loadAction,\n            'Load populations for export',\n            'Failed to load populations from the server. Please check your connection and refresh the page.'\n        )();\n    }\n    \n    /**\n     * Populate the population dropdown\n     * CRITICAL: This method populates the export population dropdown with loaded data\n     * DO NOT change the dropdown element ID without updating HTML templates\n     * Last debugged: 2025-07-21 - Added debug logging for dropdown population issues\n     */\n    populateDropdown(populations) {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { SELECTORS: { EXPORT_POPULATION_SELECT: 'export-population-select' } };\n\n        const populateAction = () => {\n            this.logger.debug('🔄 EXPORT: Populating export population dropdown...', {\n                populationCount: populations?.length || 0,\n                populations: populations?.map(p => ({ id: p.id, name: p.name })) || []\n            });\n\n            const select = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_POPULATION_SELECT);\n            if (!select) {\n                // safeDOM already logs the error, so we can just return.\n                return;\n            }\n\n            // Clear existing options safely\n            safeDOM.setHTML(select, '<option value=\"\">Select Population</option>');\n            this.logger.debug('🔄 EXPORT: Cleared existing dropdown options');\n\n            // Add population options\n            let optionsAdded = 0;\n            populations.forEach(pop => {\n                if (pop && pop.id && pop.name) {\n                    const option = safeDOM.createElement('option');\n                    if(option) {\n                        option.value = pop.id;\n                        safeDOM.setText(option, pop.name); // Use setText for safety\n                        safeDOM.appendChild(select, option);\n                        optionsAdded++;\n                    }\n                } else {\n                    this.logger.warn('🔄 EXPORT: Skipping invalid population data', { population: pop });\n                }\n            });\n\n            this.logger.info(`🔄 EXPORT: Successfully populated dropdown with ${optionsAdded} population options`);\n        };\n        \n        errorHandler.wrapSync(\n        populateAction, \n        'Populate export dropdown',\n        'Failed to display populations in the dropdown. The application may be in an inconsistent state.'\n    )();\n    }\n    \n    /**\n     * Handle population selection change\n     */\n    handlePopulationChange(populationId) {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || {\n            SELECTORS: {\n                EXPORT_POPULATION_SELECT: 'export-population-select'\n            }\n        };\n\n        const changeAction = () => {\n            this.selectedPopulationId = populationId;\n\n            const select = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_POPULATION_SELECT);\n            if (select && select.selectedIndex >= 0) {\n                this.selectedPopulationName = select.options[select.selectedIndex]?.text || '';\n            } else {\n                this.selectedPopulationName = '';\n            }\n\n            this.logger.info('Population selection changed', {\n                id: this.selectedPopulationId,\n                name: this.selectedPopulationName\n            });\n\n            // Update UI based on selection\n            this.updateExportOptions();\n        };\n\n        errorHandler.wrapSync(\n        changeAction, \n        'Handle population change',\n        'Failed to update the UI after population change. Please try again.'\n    )();\n    }\n    \n    /**\n     * Handle export format change\n     */\n    handleFormatChange(format) {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const changeAction = () => {\n            this.logger.info('Export format changed', { format });\n\n            // Update UI based on format selection\n            this.updateFormatOptions(format);\n        };\n\n        errorHandler.wrapSync(\n        changeAction, \n        'Handle format change',\n        'Failed to update UI for the selected format. Please try again.'\n    )();\n    }\n    \n    /**\n     * Update export options based on population selection\n     */\n    updateExportOptions() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { \n            SELECTORS: { \n                EXPORT_BTN: 'export-btn' \n            }\n        };\n\n        const updateAction = () => {\n            const exportBtn = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_BTN);\n\n            if (this.selectedPopulationId) {\n                safeDOM.enable(exportBtn);\n                this.showExportOptions();\n            } else {\n                safeDOM.disable(exportBtn);\n                this.hideExportOptions();\n            }\n        };\n\n        errorHandler.wrapSync(\n        updateAction, \n        'Update export options',\n        'Failed to update export UI options. The UI may be in an inconsistent state.'\n    )();\n    }\n    \n    /**\n     * Update format-specific options\n     */\n    updateFormatOptions(format) {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { \n            SELECTORS: { \n                HEADERS_OPTION: 'headers-option'\n            }\n        };\n\n        const updateAction = () => {\n            const headersOption = safeDOM.selectById(UI_CONFIG.SELECTORS.HEADERS_OPTION);\n            if (headersOption) {\n                headersOption.style.display = format === 'csv' ? 'block' : 'none';\n            }\n        };\n\n        errorHandler.wrapSync(\n        updateAction, \n        'Update format options',\n        'Failed to update format-specific UI options. The UI may be in an inconsistent state.'\n    )();\n    }\n    \n    /**\n     * Show export options\n     */\n    showExportOptions() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { \n            SELECTORS: { \n                EXPORT_OPTIONS: 'export-options'\n            }\n        };\n\n        const showOptionsAction = () => {\n            const optionsContainer = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_OPTIONS);\n            safeDOM.show(optionsContainer);\n        };\n\n        errorHandler.wrapSync(\n        showOptionsAction, \n        'Show export options',\n        'Failed to show export options. The UI may be in an inconsistent state.'\n    )();\n    }\n    \n    /**\n     * Hide export options\n     */\n    hideExportOptions() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { \n            SELECTORS: { \n                EXPORT_OPTIONS: 'export-options'\n            }\n        };\n\n        const hideOptionsAction = () => {\n            const optionsContainer = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_OPTIONS);\n            safeDOM.hide(optionsContainer);\n        };\n\n        errorHandler.wrapSync(\n        hideOptionsAction, \n        'Hide export options',\n        'Failed to hide export options. The UI may be in an inconsistent state.'\n    )();\n    }\n    \n    /**\n     * Show export progress\n     */\n    showExportProgress() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { \n            SELECTORS: { \n                EXPORT_PROGRESS: 'export-progress', \n                EXPORT_BTN: 'export-btn' \n            },\n            MESSAGES: {\n                EXPORTING: 'Exporting...'\n            }\n        };\n\n        const showProgressAction = () => {\n            const progressContainer = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_PROGRESS);\n            safeDOM.show(progressContainer);\n\n            const exportBtn = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_BTN);\n            safeDOM.disable(exportBtn);\n            safeDOM.setText(exportBtn, UI_CONFIG.MESSAGES.EXPORTING);\n        };\n\n        errorHandler.wrapSync(\n        showProgressAction, \n        'Show export progress',\n        'Failed to show export progress. The UI may be in an inconsistent state.'\n    )();\n    }\n    \n    /**\n     * Hide export progress\n     */\n    hideExportProgress() {\n        const safeDOM = window.safeDOM || new SafeDOM(this.logger);\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n        const UI_CONFIG = window.UI_CONFIG || { \n            SELECTORS: { \n                EXPORT_PROGRESS: 'export-progress', \n                EXPORT_BTN: 'export-btn' \n            },\n            MESSAGES: {\n                EXPORT_USERS: 'Export Users'\n            }\n        };\n\n        const hideProgressAction = () => {\n            const progressContainer = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_PROGRESS);\n            safeDOM.hide(progressContainer);\n\n            const exportBtn = safeDOM.selectById(UI_CONFIG.SELECTORS.EXPORT_BTN);\n            safeDOM.enable(exportBtn);\n            safeDOM.setText(exportBtn, UI_CONFIG.MESSAGES.EXPORT_USERS);\n        };\n\n        errorHandler.wrapSync(\n        hideProgressAction, \n        'Hide export progress',\n        'Failed to hide export progress. Please refresh the page if the UI is unresponsive.'\n    )();\n    }\n    \n    /**\n     * Check token status\n     */\n    async checkTokenStatus() {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const checkAction = async () => {\n            const response = await this.localClient.get('/api/v1/auth/status');\n            return response.valid;\n        };\n\n        try {\n            // Use wrapAsync to handle logging, but catch the error to return a boolean.\n            return await errorHandler.wrapAsync(checkAction, 'Check token status')();\n        } catch (error) {\n            // Error is already logged by the handler. Return false as per original logic.\n            return false;\n        }\n    }\n    \n    /**\n     * Set up cross-subsystem event listeners\n     */\n    setupCrossSubsystemEvents() {\n        if (!this.eventBus) {\n            this.logger.warn('EventBus not available for cross-subsystem events');\n            return;\n        }\n        \n        // Listen for token expiration events\n        this.eventBus.on('tokenExpired', (data) => {\n            this.logger.warn('Token expired during export operation');\n            if (this.isExporting) {\n                this.isExporting = false;\n                this.hideExportProgress();\n                this.uiManager.showError('Session Expired', 'Your authentication token expired during the export. Please re-authenticate and try again.');\n            }\n        });\n        \n        // Listen for token error events\n        this.eventBus.on('tokenError', (data) => {\n            this.logger.error('Token error detected', data);\n            if (this.isExporting) {\n                this.isExporting = false;\n                this.hideExportProgress();\n                this.uiManager.showError('Authentication Error', `Authentication failed: ${data.error}`);\n            }\n        });\n        \n        // Listen for token refresh events\n        this.eventBus.on('tokenRefreshed', (data) => {\n            this.logger.info('Token refreshed successfully');\n            // Token refresh is handled automatically, just log for now\n        });\n        \n        // Listen for population change events\n        this.eventBus.on('populationsChanged', (data) => {\n            this.logger.info('Populations changed, refreshing export dropdown', { count: data.count });\n            this.refreshPopulationDropdown();\n        });\n        \n        this.logger.debug('Cross-subsystem event listeners set up for ExportSubsystem');\n    }\n    \n    /**\n     * Refresh the population dropdown for export\n     */\n    refreshPopulationDropdown() {\n        const errorHandler = window.errorHandler || new ErrorHandler(this.logger);\n\n        const refreshAction = async () => {\n            if (!this.populationService) {\n                this.logger.warn('PopulationService not available for dropdown refresh');\n                return; // Exit gracefully if the service is not available\n            }\n\n            await this.populationService.populateDropdown('export-population-select', {\n                includeEmpty: true,\n                emptyText: 'Select a population'\n            });\n            \n            this.logger.debug('Export population dropdown refreshed successfully');\n        };\n\n        // The errorHandler will catch any failures from populateDropdown\n        errorHandler.wrapAsync(\n            refreshAction,\n            'Refresh export population dropdown',\n            'Failed to refresh the population list. Please check your connection or try again.'\n        )();\n    }\n}","/**\n * Operation Manager Subsystem\n * \n * Manages all CRUD operations (Import, Export, Delete, Modify) with centralized\n * orchestration, validation, progress tracking, and error handling.\n * \n * Features:\n * - Unified operation lifecycle management\n * - Operation validation and pre-checks\n * - Progress tracking and status updates\n * - Error handling and recovery\n * - Operation queuing and concurrency control\n * - Operation history and logging\n */\n\nimport { createLogger } from '../utils/browser-logging-service.js';\n\nexport class OperationManagerSubsystem {\n    constructor(logger, uiManager, settingsManager, apiClient) {\n        this.logger = logger || createLogger({\n            serviceName: 'operation-manager-subsystem',\n            environment: 'development'\n        });\n        \n        this.uiManager = uiManager;\n        this.settingsManager = settingsManager;\n        this.apiClient = apiClient;\n        \n        // Operation state\n        this.currentOperation = null;\n        this.operationQueue = [];\n        this.operationHistory = [];\n        this.isOperationRunning = false;\n        \n        // Operation types\n        this.operationTypes = {\n            IMPORT: 'import',\n            EXPORT: 'export',\n            DELETE: 'delete',\n            MODIFY: 'modify'\n        };\n        \n        // Operation validators\n        this.validators = new Map();\n        this.preChecks = new Map();\n        this.postChecks = new Map();\n        \n        this.logger.info('Operation Manager subsystem initialized');\n    }\n    \n    /**\n     * Initialize the operation manager subsystem\n     */\n    async init() {\n        try {\n            this.logger.info('Initializing operation manager subsystem...');\n            \n            // Register default validators and checks\n            this.registerDefaultValidators();\n            this.registerDefaultPreChecks();\n            this.registerDefaultPostChecks();\n            \n            this.logger.info('Operation Manager subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize operation manager subsystem', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Start an operation\n     * @param {string} type - Operation type (import, export, delete, modify)\n     * @param {Object} options - Operation options\n     * @returns {Promise<Object>} - Operation result\n     */\n    async startOperation(type, options = {}) {\n        try {\n            this.logger.info('Starting operation', { type, options });\n            \n            // Check if operation is already running\n            if (this.isOperationRunning) {\n                throw new Error('Another operation is already running');\n            }\n            \n            // Validate operation type\n            if (!Object.values(this.operationTypes).includes(type)) {\n                throw new Error(`Invalid operation type: ${type}`);\n            }\n            \n            // Create operation context\n            const operation = {\n                id: this.generateOperationId(),\n                type,\n                options,\n                status: 'initializing',\n                startTime: Date.now(),\n                endTime: null,\n                progress: {\n                    current: 0,\n                    total: 0,\n                    percentage: 0,\n                    message: 'Initializing...'\n                },\n                result: null,\n                error: null\n            };\n            \n            this.currentOperation = operation;\n            this.isOperationRunning = true;\n            \n            // Run pre-checks\n            await this.runPreChecks(operation);\n            \n            // Validate operation\n            await this.validateOperation(operation);\n            \n            // Execute operation\n            const result = await this.executeOperation(operation);\n            \n            // Run post-checks\n            await this.runPostChecks(operation);\n            \n            // Complete operation\n            operation.status = 'completed';\n            operation.endTime = Date.now();\n            operation.result = result;\n            \n            this.logger.info('Operation completed successfully', { \n                type, \n                duration: operation.endTime - operation.startTime \n            });\n            \n            return result;\n            \n        } catch (error) {\n            this.logger.error('Operation failed', { type, error: error.message });\n            \n            if (this.currentOperation) {\n                this.currentOperation.status = 'failed';\n                this.currentOperation.endTime = Date.now();\n                this.currentOperation.error = error.message;\n            }\n            \n            throw error;\n        } finally {\n            // Clean up\n            this.finalizeOperation();\n        }\n    }\n    \n    /**\n     * Execute the actual operation\n     * @param {Object} operation - Operation context\n     * @returns {Promise<Object>} - Operation result\n     */\n    async executeOperation(operation) {\n        const { type, options } = operation;\n        \n        this.logger.debug('Executing operation', { type });\n        \n        switch (type) {\n            case this.operationTypes.IMPORT:\n                return await this.executeImport(operation);\n            case this.operationTypes.EXPORT:\n                return await this.executeExport(operation);\n            case this.operationTypes.DELETE:\n                return await this.executeDelete(operation);\n            case this.operationTypes.MODIFY:\n                return await this.executeModify(operation);\n            default:\n                throw new Error(`Unknown operation type: ${type}`);\n        }\n    }\n    \n    /**\n     * Execute import operation\n     * @param {Object} operation - Operation context\n     * @returns {Promise<Object>} - Import result\n     */\n    async executeImport(operation) {\n        const { options } = operation;\n        \n        this.logger.info('Executing import operation', { options });\n        \n        // Update progress\n        this.updateOperationProgress(operation, 0, 100, 'Starting import...');\n        \n        // Prepare import data\n        const importData = {\n            file: options.file,\n            populationId: options.populationId,\n            populationName: options.populationName,\n            skipDuplicates: options.skipDuplicates || false,\n            updateExisting: options.updateExisting || false\n        };\n        \n        // Start import via API\n        const response = await this.apiClient.post('/api/import', importData);\n        \n        if (!response.success) {\n            throw new Error(response.error || 'Import failed');\n        }\n        \n        // Track progress via SSE or polling\n        await this.trackOperationProgress(operation, response.sessionId);\n        \n        return {\n            success: true,\n            sessionId: response.sessionId,\n            message: 'Import completed successfully'\n        };\n    }\n    \n    /**\n     * Execute export operation\n     * @param {Object} operation - Operation context\n     * @returns {Promise<Object>} - Export result\n     */\n    async executeExport(operation) {\n        const { options } = operation;\n        \n        this.logger.info('Executing export operation', { options });\n        \n        // Update progress\n        this.updateOperationProgress(operation, 0, 100, 'Starting export...');\n        \n        // Prepare export data\n        const exportData = {\n            populationId: options.populationId,\n            populationName: options.populationName,\n            includeDisabled: options.includeDisabled || false,\n            format: options.format || 'csv'\n        };\n        \n        // Start export via API\n        const response = await this.apiClient.post('/api/export', exportData);\n        \n        if (!response.success) {\n            throw new Error(response.error || 'Export failed');\n        }\n        \n        // Track progress\n        await this.trackOperationProgress(operation, response.sessionId);\n        \n        return {\n            success: true,\n            sessionId: response.sessionId,\n            downloadUrl: response.downloadUrl,\n            message: 'Export completed successfully'\n        };\n    }\n    \n    /**\n     * Execute delete operation\n     * @param {Object} operation - Operation context\n     * @returns {Promise<Object>} - Delete result\n     */\n    async executeDelete(operation) {\n        const { options } = operation;\n        \n        this.logger.info('Executing delete operation', { options });\n        \n        // Update progress\n        this.updateOperationProgress(operation, 0, 100, 'Starting delete...');\n        \n        // Prepare delete data\n        const deleteData = {\n            file: options.file,\n            populationId: options.populationId,\n            populationName: options.populationName,\n            confirmDelete: true\n        };\n        \n        // Start delete via API\n        const response = await this.apiClient.post('/api/delete', deleteData);\n        \n        if (!response.success) {\n            throw new Error(response.error || 'Delete failed');\n        }\n        \n        // Track progress\n        await this.trackOperationProgress(operation, response.sessionId);\n        \n        return {\n            success: true,\n            sessionId: response.sessionId,\n            message: 'Delete completed successfully'\n        };\n    }\n    \n    /**\n     * Execute modify operation\n     * @param {Object} operation - Operation context\n     * @returns {Promise<Object>} - Modify result\n     */\n    async executeModify(operation) {\n        const { options } = operation;\n        \n        this.logger.info('Executing modify operation', { options });\n        \n        // Update progress\n        this.updateOperationProgress(operation, 0, 100, 'Starting modify...');\n        \n        // Prepare modify data\n        const modifyData = {\n            file: options.file,\n            populationId: options.populationId,\n            populationName: options.populationName,\n            updateFields: options.updateFields || []\n        };\n        \n        // Start modify via API\n        const response = await this.apiClient.post('/api/modify', modifyData);\n        \n        if (!response.success) {\n            throw new Error(response.error || 'Modify failed');\n        }\n        \n        // Track progress\n        await this.trackOperationProgress(operation, response.sessionId);\n        \n        return {\n            success: true,\n            sessionId: response.sessionId,\n            message: 'Modify completed successfully'\n        };\n    }\n    \n    /**\n     * Track operation progress via SSE or polling\n     * @param {Object} operation - Operation context\n     * @param {string} sessionId - Session ID for tracking\n     */\n    async trackOperationProgress(operation, sessionId) {\n        return new Promise((resolve, reject) => {\n            // Try SSE first\n            if (typeof EventSource !== 'undefined') {\n                this.trackProgressViaSSE(operation, sessionId, resolve, reject);\n            } else {\n                // Fallback to polling\n                this.trackProgressViaPolling(operation, sessionId, resolve, reject);\n            }\n        });\n    }\n    \n    /**\n     * Track progress via Server-Sent Events\n     * @param {Object} operation - Operation context\n     * @param {string} sessionId - Session ID\n     * @param {Function} resolve - Promise resolve function\n     * @param {Function} reject - Promise reject function\n     */\n    trackProgressViaSSE(operation, sessionId, resolve, reject) {\n        const eventSource = new EventSource(`/api/progress/${sessionId}`);\n        \n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                this.handleProgressUpdate(operation, data);\n                \n                if (data.status === 'completed') {\n                    eventSource.close();\n                    resolve(data);\n                } else if (data.status === 'failed') {\n                    eventSource.close();\n                    reject(new Error(data.error || 'Operation failed'));\n                }\n            } catch (error) {\n                this.logger.error('Error parsing SSE data', { error: error.message });\n            }\n        };\n        \n        eventSource.onerror = (error) => {\n            this.logger.error('SSE connection error', { error });\n            eventSource.close();\n            // Fallback to polling\n            this.trackProgressViaPolling(operation, sessionId, resolve, reject);\n        };\n    }\n    \n    /**\n     * Track progress via polling\n     * @param {Object} operation - Operation context\n     * @param {string} sessionId - Session ID\n     * @param {Function} resolve - Promise resolve function\n     * @param {Function} reject - Promise reject function\n     */\n    async trackProgressViaPolling(operation, sessionId, resolve, reject) {\n        const pollInterval = 1000; // 1 second\n        \n        const poll = async () => {\n            try {\n                const response = await this.apiClient.get(`/api/progress/${sessionId}`);\n                \n                if (response.success) {\n                    this.handleProgressUpdate(operation, response.data);\n                    \n                    if (response.data.status === 'completed') {\n                        resolve(response.data);\n                    } else if (response.data.status === 'failed') {\n                        reject(new Error(response.data.error || 'Operation failed'));\n                    } else {\n                        setTimeout(poll, pollInterval);\n                    }\n                } else {\n                    reject(new Error(response.error || 'Failed to get progress'));\n                }\n            } catch (error) {\n                reject(error);\n            }\n        };\n        \n        poll();\n    }\n    \n    /**\n     * Handle progress update\n     * @param {Object} operation - Operation context\n     * @param {Object} progressData - Progress data from server\n     */\n    handleProgressUpdate(operation, progressData) {\n        // Update operation progress\n        operation.progress = {\n            current: progressData.current || 0,\n            total: progressData.total || 0,\n            percentage: progressData.percentage || 0,\n            message: progressData.message || 'Processing...'\n        };\n        \n        // Update UI\n        if (this.uiManager) {\n            this.uiManager.updateProgress(\n                operation.progress.current,\n                operation.progress.total,\n                operation.progress.message\n            );\n        }\n        \n        this.logger.debug('Progress updated', { \n            type: operation.type,\n            progress: operation.progress \n        });\n    }\n    \n    /**\n     * Update operation progress\n     * @param {Object} operation - Operation context\n     * @param {number} current - Current progress\n     * @param {number} total - Total progress\n     * @param {string} message - Progress message\n     */\n    updateOperationProgress(operation, current, total, message) {\n        const percentage = total > 0 ? Math.round((current / total) * 100) : 0;\n        \n        operation.progress = {\n            current,\n            total,\n            percentage,\n            message\n        };\n        \n        // Update UI\n        if (this.uiManager) {\n            this.uiManager.updateProgress(current, total, message);\n        }\n        \n        this.logger.debug('Operation progress updated', { \n            type: operation.type,\n            progress: operation.progress \n        });\n    }\n    \n    /**\n     * Run pre-checks for operation\n     * @param {Object} operation - Operation context\n     */\n    async runPreChecks(operation) {\n        const preCheck = this.preChecks.get(operation.type);\n        if (preCheck) {\n            this.logger.debug('Running pre-checks', { type: operation.type });\n            await preCheck(operation);\n        }\n    }\n    \n    /**\n     * Validate operation\n     * @param {Object} operation - Operation context\n     */\n    async validateOperation(operation) {\n        const validator = this.validators.get(operation.type);\n        if (validator) {\n            this.logger.debug('Validating operation', { type: operation.type });\n            await validator(operation);\n        }\n    }\n    \n    /**\n     * Run post-checks for operation\n     * @param {Object} operation - Operation context\n     */\n    async runPostChecks(operation) {\n        const postCheck = this.postChecks.get(operation.type);\n        if (postCheck) {\n            this.logger.debug('Running post-checks', { type: operation.type });\n            await postCheck(operation);\n        }\n    }\n    \n    /**\n     * Finalize operation\n     */\n    finalizeOperation() {\n        if (this.currentOperation) {\n            // Add to history\n            this.operationHistory.push({...this.currentOperation});\n            \n            // Limit history size\n            if (this.operationHistory.length > 100) {\n                this.operationHistory = this.operationHistory.slice(-100);\n            }\n            \n            // Clear current operation\n            this.currentOperation = null;\n        }\n        \n        this.isOperationRunning = false;\n        \n        this.logger.debug('Operation finalized');\n    }\n    \n    /**\n     * Register default validators\n     */\n    registerDefaultValidators() {\n        // Import validator\n        this.validators.set(this.operationTypes.IMPORT, async (operation) => {\n            const { options } = operation;\n            \n            if (!options.file) {\n                throw new Error('No file selected for import');\n            }\n            \n            if (!options.populationId) {\n                throw new Error('No population selected for import');\n            }\n        });\n        \n        // Export validator\n        this.validators.set(this.operationTypes.EXPORT, async (operation) => {\n            const { options } = operation;\n            \n            if (!options.populationId) {\n                throw new Error('No population selected for export');\n            }\n        });\n        \n        // Delete validator\n        this.validators.set(this.operationTypes.DELETE, async (operation) => {\n            const { options } = operation;\n            \n            if (!options.file) {\n                throw new Error('No file selected for delete');\n            }\n            \n            if (!options.populationId) {\n                throw new Error('No population selected for delete');\n            }\n        });\n        \n        // Modify validator\n        this.validators.set(this.operationTypes.MODIFY, async (operation) => {\n            const { options } = operation;\n            \n            if (!options.file) {\n                throw new Error('No file selected for modify');\n            }\n            \n            if (!options.populationId) {\n                throw new Error('No population selected for modify');\n            }\n        });\n    }\n    \n    /**\n     * Register default pre-checks\n     */\n    registerDefaultPreChecks() {\n        // Common pre-check for all operations\n        const commonPreCheck = async (operation) => {\n            // Check token validity\n            if (window.app && typeof window.app.checkTokenAndRedirect === 'function') {\n                const hasValidToken = await window.app.checkTokenAndRedirect(operation.type);\n                if (!hasValidToken) {\n                    throw new Error('Invalid or expired token');\n                }\n            }\n        };\n        \n        // Register for all operation types\n        Object.values(this.operationTypes).forEach(type => {\n            this.preChecks.set(type, commonPreCheck);\n        });\n    }\n    \n    /**\n     * Register default post-checks\n     */\n    registerDefaultPostChecks() {\n        // Common post-check for all operations\n        const commonPostCheck = async (operation) => {\n            // Log operation completion\n            this.logger.info('Operation completed', {\n                type: operation.type,\n                duration: operation.endTime - operation.startTime,\n                status: operation.status\n            });\n        };\n        \n        // Register for all operation types\n        Object.values(this.operationTypes).forEach(type => {\n            this.postChecks.set(type, commonPostCheck);\n        });\n    }\n    \n    /**\n     * Generate unique operation ID\n     * @returns {string} - Unique operation ID\n     */\n    generateOperationId() {\n        return `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    /**\n     * Cancel current operation\n     */\n    async cancelOperation() {\n        if (this.currentOperation && this.isOperationRunning) {\n            this.logger.info('Cancelling operation', { type: this.currentOperation.type });\n            \n            try {\n                // Try to cancel via API\n                if (this.currentOperation.sessionId) {\n                    await this.apiClient.post(`/api/cancel/${this.currentOperation.sessionId}`);\n                }\n                \n                this.currentOperation.status = 'cancelled';\n                this.currentOperation.endTime = Date.now();\n                \n                this.logger.info('Operation cancelled successfully');\n            } catch (error) {\n                this.logger.error('Failed to cancel operation', { error: error.message });\n            } finally {\n                this.finalizeOperation();\n            }\n        }\n    }\n    \n    /**\n     * Get current operation status\n     * @returns {Object|null} - Current operation or null\n     */\n    getCurrentOperation() {\n        return this.currentOperation ? {...this.currentOperation} : null;\n    }\n    \n    /**\n     * Get operation history\n     * @returns {Array} - Operation history\n     */\n    getOperationHistory() {\n        return [...this.operationHistory];\n    }\n    \n    /**\n     * Check if operation is running\n     * @returns {boolean} - Whether operation is running\n     */\n    isRunning() {\n        return this.isOperationRunning;\n    }\n    \n    /**\n     * Get operation statistics\n     * @returns {Object} - Operation statistics\n     */\n    getOperationStats() {\n        const stats = {\n            total: this.operationHistory.length,\n            byType: {},\n            byStatus: {},\n            averageDuration: 0\n        };\n        \n        let totalDuration = 0;\n        \n        this.operationHistory.forEach(op => {\n            // By type\n            if (!stats.byType[op.type]) {\n                stats.byType[op.type] = 0;\n            }\n            stats.byType[op.type]++;\n            \n            // By status\n            if (!stats.byStatus[op.status]) {\n                stats.byStatus[op.status] = 0;\n            }\n            stats.byStatus[op.status]++;\n            \n            // Duration\n            if (op.endTime && op.startTime) {\n                totalDuration += (op.endTime - op.startTime);\n            }\n        });\n        \n        if (this.operationHistory.length > 0) {\n            stats.averageDuration = Math.round(totalDuration / this.operationHistory.length);\n        }\n        \n        return stats;\n    }\n}","/**\n * Navigation Subsystem\n * \n * Manages all navigation, routing, and view switching functionality.\n * Extracted from app.js to provide centralized navigation control.\n * \n * Features:\n * - View switching and routing\n * - Navigation state management\n * - URL handling and deep linking\n * - View-specific initialization\n * - Navigation history tracking\n */\n\nimport { createLogger } from '../utils/browser-logging-service.js';\n\nexport class NavigationSubsystem {\n    constructor(logger, uiManager, settingsManager) {\n        this.logger = logger || createLogger({\n            serviceName: 'navigation-subsystem',\n            environment: 'development'\n        });\n        \n        this.uiManager = uiManager;\n        this.settingsManager = settingsManager;\n        \n        // Navigation state\n        this.currentView = 'home'; // Default view\n        this.previousView = null;\n        this.navigationHistory = [];\n        this.viewInitializers = new Map();\n        this.viewCleanupHandlers = new Map();\n        \n        // Navigation elements\n        this.navItems = null;\n        this.viewContainers = null;\n        \n        this.logger.info('Navigation subsystem initialized');\n    }\n    \n    /**\n     * Initialize the navigation subsystem\n     */\n    async init() {\n        try {\n            this.logger.info('Initializing navigation subsystem...');\n            \n            // Find navigation elements\n            this.navItems = document.querySelectorAll('[data-view]');\n            this.viewContainers = document.querySelectorAll('.view-container, [id$=\"-view\"]');\n            \n            this.logger.info('Navigation elements found', {\n                navItems: this.navItems.length,\n                viewContainers: this.viewContainers.length\n            });\n            \n            // Set up navigation event listeners\n            this.setupNavigationListeners();\n            \n            // Register default view initializers\n            this.registerDefaultViewInitializers();\n            \n            // Initialize current view\n            await this.showView(this.currentView);\n            \n            this.logger.info('Navigation subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize navigation subsystem', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up navigation event listeners\n     */\n    setupNavigationListeners() {\n        this.navItems.forEach(item => {\n            item.addEventListener('click', async (e) => {\n                e.preventDefault();\n                const view = item.getAttribute('data-view');\n                \n                this.logger.debug('Navigation item clicked', { view });\n                \n                if (view && view !== this.currentView) {\n                    await this.navigateToView(view);\n                }\n            });\n        });\n        \n        // Handle browser back/forward buttons\n        window.addEventListener('popstate', (e) => {\n            if (e.state && e.state.view) {\n                this.showView(e.state.view, false); // Don't push to history\n            }\n        });\n        \n        this.logger.debug('Navigation listeners set up');\n    }\n    \n    /**\n     * Navigate to a specific view\n     * @param {string} view - The view to navigate to\n     * @param {Object} options - Navigation options\n     */\n    async navigateToView(view, options = {}) {\n        try {\n            this.logger.info('Navigating to view', { from: this.currentView, to: view });\n            \n            // Validate view exists\n            if (!this.isValidView(view)) {\n                this.logger.warn('Invalid view requested', { view });\n                return false;\n            }\n            \n            // Check if navigation is allowed\n            if (options.force !== true && !await this.canNavigateFrom(this.currentView)) {\n                this.logger.info('Navigation blocked by current view', { currentView: this.currentView });\n                return false;\n            }\n            \n            // Show the view\n            const success = await this.showView(view, options.pushToHistory !== false);\n            \n            if (success) {\n                this.logger.info('Navigation completed successfully', { view });\n            }\n            \n            return success;\n        } catch (error) {\n            this.logger.error('Navigation failed', { view, error: error.message });\n            return false;\n        }\n    }\n    \n    /**\n     * Show a specific view\n     * @param {string} view - The view to show\n     * @param {boolean} pushToHistory - Whether to push to browser history\n     */\n    async showView(view, pushToHistory = true) {\n        try {\n            this.logger.debug('Showing view', { view, pushToHistory });\n            \n            // Store previous view\n            this.previousView = this.currentView;\n            \n            // Run cleanup for previous view\n            if (this.previousView && this.viewCleanupHandlers.has(this.previousView)) {\n                try {\n                    await this.viewCleanupHandlers.get(this.previousView)();\n                    this.logger.debug('View cleanup completed', { view: this.previousView });\n                } catch (error) {\n                    this.logger.warn('View cleanup failed', { view: this.previousView, error: error.message });\n                }\n            }\n            \n            // Hide all views\n            this.hideAllViews();\n            \n            // Show target view\n            const viewElement = document.getElementById(`${view}-view`);\n            if (viewElement) {\n                viewElement.style.display = 'block';\n                viewElement.classList.add('active');\n            } else {\n                this.logger.warn('View element not found', { view });\n                return false;\n            }\n            \n            // Update navigation state\n            this.updateNavigationState(view);\n            \n            // Run view initializer\n            if (this.viewInitializers.has(view)) {\n                try {\n                    await this.viewInitializers.get(view)();\n                    this.logger.debug('View initializer completed', { view });\n                } catch (error) {\n                    this.logger.warn('View initializer failed', { view, error: error.message });\n                }\n            }\n            \n            // Update browser history\n            if (pushToHistory && window.history) {\n                const url = new URL(window.location);\n                url.searchParams.set('view', view);\n                window.history.pushState({ view }, '', url);\n            }\n            \n            // Update current view\n            this.currentView = view;\n            \n            // Add to navigation history\n            this.navigationHistory.push({\n                view,\n                timestamp: Date.now(),\n                from: this.previousView\n            });\n            \n            // Limit history size\n            if (this.navigationHistory.length > 50) {\n                this.navigationHistory = this.navigationHistory.slice(-50);\n            }\n            \n            this.logger.info('View shown successfully', { view });\n            return true;\n            \n        } catch (error) {\n            this.logger.error('Failed to show view', { view, error: error.message });\n            return false;\n        }\n    }\n    \n    /**\n     * Hide all views\n     */\n    hideAllViews() {\n        this.viewContainers.forEach(container => {\n            container.style.display = 'none';\n            container.classList.remove('active');\n        });\n        \n        this.logger.debug('All views hidden');\n    }\n    \n    /**\n     * Update navigation state (active nav items, etc.)\n     * @param {string} view - The active view\n     */\n    updateNavigationState(view) {\n        // Update navigation items\n        this.navItems.forEach(item => {\n            item.classList.remove('active');\n            if (item.getAttribute('data-view') === view) {\n                item.classList.add('active');\n            }\n        });\n        \n        // Update page title if needed\n        this.updatePageTitle(view);\n        \n        this.logger.debug('Navigation state updated', { view });\n    }\n    \n    /**\n     * Update page title based on current view\n     * @param {string} view - The current view\n     */\n    updatePageTitle(view) {\n        const titles = {\n            'import': 'Import Users',\n            'export': 'Export Users', \n            'modify': 'Modify Users',\n            'delete-csv': 'Delete Users',\n            'settings': 'Settings',\n            'logs': 'Logs',\n            'history': 'History'\n        };\n        \n        const baseTitle = 'PingOne User Import v6.5.1.1';\n        const viewTitle = titles[view];\n        \n        if (viewTitle) {\n            document.title = `${viewTitle} - ${baseTitle} v6.5.1.2`;\n        } else {\n            document.title = baseTitle;\n        }\n    }\n    \n    /**\n     * Register a view initializer\n     * @param {string} view - The view name\n     * @param {Function} initializer - The initializer function\n     */\n    registerViewInitializer(view, initializer) {\n        this.viewInitializers.set(view, initializer);\n        this.logger.debug('View initializer registered', { view });\n    }\n    \n    /**\n     * Register a view cleanup handler\n     * @param {string} view - The view name\n     * @param {Function} cleanup - The cleanup function\n     */\n    registerViewCleanup(view, cleanup) {\n        this.viewCleanupHandlers.set(view, cleanup);\n        this.logger.debug('View cleanup handler registered', { view });\n    }\n    \n    /**\n     * Register default view initializers\n     */\n    registerDefaultViewInitializers() {\n        // Import view initializer\n        this.registerViewInitializer('import', async () => {\n            if (typeof window.app?.loadPopulations === 'function') {\n                await window.app.loadPopulations('import-population-select');\n            }\n        });\n        \n        // Export view initializer\n        this.registerViewInitializer('export', async () => {\n            if (window.exportManager && typeof window.exportManager.loadPopulations === 'function') {\n                await window.exportManager.loadPopulations();\n            }\n        });\n        \n        // Delete view initializer\n        this.registerViewInitializer('delete-csv', async () => {\n            if (window.deleteManager && typeof window.deleteManager.loadPopulations === 'function') {\n                await window.deleteManager.loadPopulations();\n            }\n        });\n        \n        // Modify view initializer\n        this.registerViewInitializer('modify', async () => {\n            if (typeof window.app?.loadPopulations === 'function') {\n                await window.app.loadPopulations('modify-population-select');\n            }\n        });\n        \n        // Logs/History view initializer\n        this.registerViewInitializer('logs', async () => {\n            if (window.logManager && typeof window.logManager.loadLogs === 'function') {\n                window.logManager.loadLogs();\n            }\n        });\n        \n        this.registerViewInitializer('history', async () => {\n            if (window.logManager && typeof window.logManager.loadLogs === 'function') {\n                window.logManager.loadLogs();\n            }\n        });\n        \n        this.logger.debug('Default view initializers registered');\n    }\n    \n    /**\n     * Check if a view is valid\n     * @param {string} view - The view to validate\n     * @returns {boolean} - Whether the view is valid\n     */\n    isValidView(view) {\n        const validViews = ['home', 'import', 'export', 'modify', 'delete-csv', 'settings', 'logs', 'history', 'analytics'];\n        return validViews.includes(view);\n    }\n    \n    /**\n     * Check if navigation is allowed from current view\n     * @param {string} fromView - The view to navigate from\n     * @returns {Promise<boolean>} - Whether navigation is allowed\n     */\n    async canNavigateFrom(fromView) {\n        // Check for unsaved changes, running operations, etc.\n        \n        // Check if import is running\n        if (fromView === 'import' && window.app?.isImportRunning) {\n            const confirmed = confirm('Import is currently running. Are you sure you want to leave this page?');\n            return confirmed;\n        }\n        \n        // Check if export is running\n        if (fromView === 'export' && window.exportManager?.isExportRunning) {\n            const confirmed = confirm('Export is currently running. Are you sure you want to leave this page?');\n            return confirmed;\n        }\n        \n        // Check if delete is running\n        if (fromView === 'delete-csv' && window.deleteManager?.isDeleteRunning) {\n            const confirmed = confirm('Delete operation is currently running. Are you sure you want to leave this page?');\n            return confirmed;\n        }\n        \n        // Check for unsaved settings\n        if (fromView === 'settings' && this.settingsManager?.hasUnsavedChanges?.()) {\n            const confirmed = confirm('You have unsaved settings. Are you sure you want to leave without saving?');\n            return confirmed;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Get current view\n     * @returns {string} - The current view\n     */\n    getCurrentView() {\n        return this.currentView;\n    }\n    \n    /**\n     * Get previous view\n     * @returns {string|null} - The previous view\n     */\n    getPreviousView() {\n        return this.previousView;\n    }\n    \n    /**\n     * Get navigation history\n     * @returns {Array} - The navigation history\n     */\n    getNavigationHistory() {\n        return [...this.navigationHistory];\n    }\n    \n    /**\n     * Go back to previous view\n     */\n    async goBack() {\n        if (this.previousView) {\n            await this.navigateToView(this.previousView);\n        } else if (this.navigationHistory.length > 1) {\n            const previousEntry = this.navigationHistory[this.navigationHistory.length - 2];\n            await this.navigateToView(previousEntry.view);\n        }\n    }\n    \n    /**\n     * Refresh current view\n     */\n    async refreshCurrentView() {\n        await this.showView(this.currentView, false);\n    }\n    \n    /**\n     * Get view statistics\n     * @returns {Object} - View usage statistics\n     */\n    getViewStats() {\n        const stats = {};\n        \n        this.navigationHistory.forEach(entry => {\n            if (!stats[entry.view]) {\n                stats[entry.view] = {\n                    count: 0,\n                    lastVisited: null\n                };\n            }\n            stats[entry.view].count++;\n            stats[entry.view].lastVisited = entry.timestamp;\n        });\n        \n        return stats;\n    }\n    \n    /**\n     * Clean up the navigation subsystem\n     */\n    cleanup() {\n        // Remove event listeners\n        this.navItems.forEach(item => {\n            item.removeEventListener('click', this.handleNavClick);\n        });\n        \n        window.removeEventListener('popstate', this.handlePopState);\n        \n        // Clear state\n        this.viewInitializers.clear();\n        this.viewCleanupHandlers.clear();\n        this.navigationHistory = [];\n        \n        this.logger.info('Navigation subsystem cleaned up');\n    }\n}","/**\n * Connection Manager Subsystem\n * \n * Manages all PingOne connection functionality including token acquisition,\n * validation, connection testing, and credential management.\n * \n * Features:\n * - Token acquisition and validation\n * - Connection testing and health checks\n * - Credential validation and storage\n * - Connection status monitoring\n * - Automatic token refresh\n * - Connection retry logic\n */\n\nimport { createLogger } from '../utils/browser-logging-service.js';\n\nexport class ConnectionManagerSubsystem {\n    constructor(logger, uiManager, settingsManager, apiClient) {\n        this.logger = logger || createLogger({\n            serviceName: 'connection-manager-subsystem',\n            environment: 'development'\n        });\n        \n        this.uiManager = uiManager;\n        this.settingsManager = settingsManager;\n        this.apiClient = apiClient;\n        \n        // Connection state\n        this.connectionStatus = 'disconnected';\n        this.lastConnectionTest = null;\n        this.tokenInfo = {\n            token: null,\n            expiresAt: null,\n            isValid: false\n        };\n        \n        // Connection monitoring\n        this.healthCheckInterval = null;\n        this.tokenRefreshInterval = null;\n        this.connectionRetryCount = 0;\n        this.maxRetryAttempts = 3;\n        \n        // Event listeners\n        this.eventListeners = new Map();\n        \n        this.logger.info('Connection Manager subsystem initialized');\n    }\n    \n    /**\n     * Initialize the connection manager subsystem\n     */\n    async init() {\n        try {\n            this.logger.info('Initializing connection manager subsystem...');\n            \n            // Load existing token if available\n            await this.loadExistingToken();\n            \n            // Start connection monitoring\n            this.startConnectionMonitoring();\n            \n            // Set up automatic token refresh\n            this.setupTokenRefresh();\n            \n            this.logger.info('Connection Manager subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize connection manager subsystem', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Test connection to PingOne\n     * @param {Object} credentials - Optional credentials to test\n     * @returns {Promise<Object>} - Connection test result\n     */\n    async testConnection(credentials = null) {\n        try {\n            this.logger.info('Testing PingOne connection...');\n            \n            // Update UI to show testing state\n            if (this.uiManager) {\n                this.uiManager.updateConnectionStatus('testing', 'Testing connection...');\n            }\n            \n            // Use provided credentials or get from settings\n            const testCredentials = credentials || await this.getCredentials();\n            \n            if (!testCredentials) {\n                throw new Error('No credentials available for connection test');\n            }\n            \n            // Validate credentials format\n            this.validateCredentials(testCredentials);\n            \n            // Test connection by getting a token\n            const tokenResult = await this.acquireToken(testCredentials);\n            \n            if (tokenResult.success) {\n                this.connectionStatus = 'connected';\n                this.lastConnectionTest = {\n                    timestamp: Date.now(),\n                    success: true,\n                    credentials: {\n                        clientId: testCredentials.clientId,\n                        environmentId: testCredentials.environmentId,\n                        region: testCredentials.region\n                    }\n                };\n                \n                // Update UI\n                if (this.uiManager) {\n                    this.uiManager.updateConnectionStatus('success', 'Connection successful');\n                }\n                \n                this.logger.info('Connection test successful');\n                \n                // Emit connection success event\n                this.emit('connectionSuccess', this.lastConnectionTest);\n                \n                return {\n                    success: true,\n                    message: 'Connection successful',\n                    token: tokenResult.token,\n                    expiresIn: tokenResult.expiresIn\n                };\n            } else {\n                throw new Error(tokenResult.error || 'Failed to acquire token');\n            }\n            \n        } catch (error) {\n            this.logger.error('Connection test failed', { error: error.message });\n            \n            this.connectionStatus = 'disconnected';\n            this.lastConnectionTest = {\n                timestamp: Date.now(),\n                success: false,\n                error: error.message\n            };\n            \n            // Update UI\n            if (this.uiManager) {\n                this.uiManager.updateConnectionStatus('error', `Connection failed: ${error.message}`);\n            }\n            \n            // Emit connection failure event\n            this.emit('connectionFailure', { error: error.message });\n            \n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Acquire a new token from PingOne\n     * @param {Object} credentials - PingOne credentials\n     * @returns {Promise<Object>} - Token acquisition result\n     */\n    async acquireToken(credentials = null) {\n        try {\n            this.logger.info('Acquiring PingOne token...');\n            \n            // Use provided credentials or get from settings\n            const tokenCredentials = credentials || await this.getCredentials();\n            \n            if (!tokenCredentials) {\n                throw new Error('No credentials available for token acquisition');\n            }\n            \n            // Validate credentials\n            this.validateCredentials(tokenCredentials);\n            \n            // Make token request\n            const response = await this.apiClient.post('/api/auth/token', {\n                clientId: tokenCredentials.clientId,\n                clientSecret: tokenCredentials.clientSecret,\n                environmentId: tokenCredentials.environmentId,\n                region: tokenCredentials.region\n            });\n            \n            if (response.success && response.token) {\n                // Store token info\n                this.tokenInfo = {\n                    token: response.token,\n                    expiresAt: Date.now() + (response.expiresIn * 1000),\n                    isValid: true,\n                    acquiredAt: Date.now()\n                };\n                \n                // Update connection status\n                this.connectionStatus = 'connected';\n                \n                // Update UI\n                if (this.uiManager) {\n                    this.uiManager.updateTokenStatus(true, 'Token acquired successfully');\n                }\n                \n                this.logger.info('Token acquired successfully', {\n                    expiresIn: response.expiresIn\n                });\n                \n                // Emit token acquired event\n                this.emit('tokenAcquired', {\n                    token: response.token,\n                    expiresIn: response.expiresIn\n                });\n                \n                return {\n                    success: true,\n                    token: response.token,\n                    expiresIn: response.expiresIn\n                };\n            } else {\n                throw new Error(response.error || 'Failed to acquire token');\n            }\n            \n        } catch (error) {\n            this.logger.error('Token acquisition failed', { error: error.message });\n            \n            // Clear token info\n            this.tokenInfo = {\n                token: null,\n                expiresAt: null,\n                isValid: false\n            };\n            \n            // Update connection status\n            this.connectionStatus = 'disconnected';\n            \n            // Update UI\n            if (this.uiManager) {\n                this.uiManager.updateTokenStatus(false, `Token acquisition failed: ${error.message}`);\n            }\n            \n            // Emit token acquisition failure event\n            this.emit('tokenAcquisitionFailure', { error: error.message });\n            \n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Validate current token\n     * @returns {Promise<boolean>} - Whether token is valid\n     */\n    async validateToken() {\n        try {\n            if (!this.tokenInfo.token) {\n                this.logger.debug('No token to validate');\n                return false;\n            }\n            \n            // Check if token is expired\n            if (this.tokenInfo.expiresAt && Date.now() >= this.tokenInfo.expiresAt) {\n                this.logger.info('Token has expired');\n                this.tokenInfo.isValid = false;\n                return false;\n            }\n            \n            // Test token with a simple API call\n            const response = await this.apiClient.get('/api/auth/validate', {\n                headers: {\n                    'Authorization': `Bearer ${this.tokenInfo.token}`\n                }\n            });\n            \n            const isValid = response.success;\n            this.tokenInfo.isValid = isValid;\n            \n            if (isValid) {\n                this.logger.debug('Token validation successful');\n                this.connectionStatus = 'connected';\n            } else {\n                this.logger.info('Token validation failed');\n                this.connectionStatus = 'disconnected';\n            }\n            \n            return isValid;\n            \n        } catch (error) {\n            this.logger.error('Token validation error', { error: error.message });\n            this.tokenInfo.isValid = false;\n            this.connectionStatus = 'disconnected';\n            return false;\n        }\n    }\n    \n    /**\n     * Refresh current token\n     * @returns {Promise<Object>} - Token refresh result\n     */\n    async refreshToken() {\n        try {\n            this.logger.info('Refreshing token...');\n            \n            // Get current credentials\n            const credentials = await this.getCredentials();\n            if (!credentials) {\n                throw new Error('No credentials available for token refresh');\n            }\n            \n            // Acquire new token\n            const result = await this.acquireToken(credentials);\n            \n            if (result.success) {\n                this.logger.info('Token refreshed successfully');\n                \n                // Emit token refreshed event\n                this.emit('tokenRefreshed', {\n                    token: result.token,\n                    expiresIn: result.expiresIn\n                });\n            }\n            \n            return result;\n            \n        } catch (error) {\n            this.logger.error('Token refresh failed', { error: error.message });\n            \n            // Emit token refresh failure event\n            this.emit('tokenRefreshFailure', { error: error.message });\n            \n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    \n    /**\n     * Get current credentials\n     * @returns {Promise<Object|null>} - Current credentials\n     */\n    async getCredentials() {\n        try {\n            // Try to get from credentials manager first\n            if (window.credentialsManager) {\n                const credentials = window.credentialsManager.getCredentials();\n                if (credentials && this.isValidCredentialSet(credentials)) {\n                    return credentials;\n                }\n            }\n            \n            // Fallback to settings manager\n            if (this.settingsManager) {\n                await this.settingsManager.loadCurrentSettings();\n                const settings = this.settingsManager.currentSettings;\n                if (settings && this.isValidCredentialSet(settings)) {\n                    return {\n                        clientId: settings.clientId,\n                        clientSecret: settings.clientSecret,\n                        environmentId: settings.environmentId,\n                        region: settings.region\n                    };\n                }\n            }\n            \n            return null;\n        } catch (error) {\n            this.logger.error('Failed to get credentials', { error: error.message });\n            return null;\n        }\n    }\n    \n    /**\n     * Validate credentials format\n     * @param {Object} credentials - Credentials to validate\n     */\n    validateCredentials(credentials) {\n        const required = ['clientId', 'clientSecret', 'environmentId'];\n        const missing = required.filter(field => !credentials[field]);\n        \n        if (missing.length > 0) {\n            throw new Error(`Missing required credentials: ${missing.join(', ')}`);\n        }\n        \n        // Validate format\n        if (!/^[a-f0-9-]{36}$/.test(credentials.clientId)) {\n            throw new Error('Invalid client ID format');\n        }\n        \n        if (!/^[a-f0-9-]{36}$/.test(credentials.environmentId)) {\n            throw new Error('Invalid environment ID format');\n        }\n        \n        if (credentials.clientSecret.length < 10) {\n            throw new Error('Client secret appears to be invalid');\n        }\n    }\n    \n    /**\n     * Check if credential set is valid\n     * @param {Object} credentials - Credentials to check\n     * @returns {boolean} - Whether credentials are valid\n     */\n    isValidCredentialSet(credentials) {\n        try {\n            this.validateCredentials(credentials);\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n    \n    /**\n     * Load existing token from storage\n     */\n    async loadExistingToken() {\n        try {\n            // Try to load from token manager\n            if (window.globalTokenManager && typeof window.globalTokenManager.getCachedToken === 'function') {\n                const cachedToken = window.globalTokenManager.getCachedToken();\n                if (cachedToken) {\n                    this.tokenInfo = {\n                        token: cachedToken.token,\n                        expiresAt: cachedToken.expiresAt,\n                        isValid: cachedToken.isValid,\n                        acquiredAt: cachedToken.acquiredAt\n                    };\n                    \n                    // Validate the loaded token\n                    const isValid = await this.validateToken();\n                    if (isValid) {\n                        this.connectionStatus = 'connected';\n                        this.logger.info('Existing token loaded and validated');\n                    } else {\n                        this.logger.info('Existing token loaded but invalid');\n                    }\n                }\n            }\n        } catch (error) {\n            this.logger.error('Failed to load existing token', { error: error.message });\n        }\n    }\n    \n    /**\n     * Start connection monitoring\n     */\n    startConnectionMonitoring() {\n        // Health check every 5 minutes\n        this.healthCheckInterval = setInterval(async () => {\n            if (this.connectionStatus === 'connected') {\n                const isValid = await this.validateToken();\n                if (!isValid) {\n                    this.logger.info('Connection lost during health check');\n                    this.emit('connectionLost');\n                }\n            }\n        }, 5 * 60 * 1000);\n        \n        this.logger.debug('Connection monitoring started');\n    }\n    \n    /**\n     * Setup automatic token refresh\n     */\n    setupTokenRefresh() {\n        // Check token expiry every minute\n        this.tokenRefreshInterval = setInterval(async () => {\n            if (this.tokenInfo.token && this.tokenInfo.expiresAt) {\n                const timeUntilExpiry = this.tokenInfo.expiresAt - Date.now();\n                const refreshThreshold = 5 * 60 * 1000; // 5 minutes\n                \n                if (timeUntilExpiry <= refreshThreshold && timeUntilExpiry > 0) {\n                    this.logger.info('Token expiring soon, attempting refresh...');\n                    await this.refreshToken();\n                }\n            }\n        }, 60 * 1000);\n        \n        this.logger.debug('Automatic token refresh setup');\n    }\n    \n    /**\n     * Get connection status\n     * @returns {string} - Current connection status\n     */\n    getConnectionStatus() {\n        return this.connectionStatus;\n    }\n    \n    /**\n     * Get token info\n     * @returns {Object} - Current token information\n     */\n    getTokenInfo() {\n        return {\n            hasToken: !!this.tokenInfo.token,\n            isValid: this.tokenInfo.isValid,\n            expiresAt: this.tokenInfo.expiresAt,\n            timeUntilExpiry: this.tokenInfo.expiresAt ? this.tokenInfo.expiresAt - Date.now() : null\n        };\n    }\n    \n    /**\n     * Get last connection test result\n     * @returns {Object|null} - Last connection test result\n     */\n    getLastConnectionTest() {\n        return this.lastConnectionTest;\n    }\n    \n    /**\n     * Check if currently connected\n     * @returns {boolean} - Whether currently connected\n     */\n    isConnected() {\n        return this.connectionStatus === 'connected' && this.tokenInfo.isValid;\n    }\n    \n    /**\n     * Check if token is valid and not expired\n     * @returns {boolean} - Whether token is valid\n     */\n    hasValidToken() {\n        return this.tokenInfo.isValid && \n               this.tokenInfo.token && \n               this.tokenInfo.expiresAt && \n               Date.now() < this.tokenInfo.expiresAt;\n    }\n    \n    /**\n     * Disconnect and clear token\n     */\n    disconnect() {\n        this.logger.info('Disconnecting...');\n        \n        // Clear token info\n        this.tokenInfo = {\n            token: null,\n            expiresAt: null,\n            isValid: false\n        };\n        \n        // Update connection status\n        this.connectionStatus = 'disconnected';\n        \n        // Update UI\n        if (this.uiManager) {\n            this.uiManager.updateConnectionStatus('disconnected', 'Disconnected');\n            this.uiManager.updateTokenStatus(false, 'No token');\n        }\n        \n        // Emit disconnected event\n        this.emit('disconnected');\n        \n        this.logger.info('Disconnected successfully');\n    }\n    \n    /**\n     * Add event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function\n     */\n    on(event, listener) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(listener);\n    }\n    \n    /**\n     * Remove event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function\n     */\n    off(event, listener) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            const index = listeners.indexOf(listener);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * Emit event\n     * @param {string} event - Event name\n     * @param {*} data - Event data\n     */\n    emit(event, data = null) {\n        if (this.eventListeners.has(event)) {\n            this.eventListeners.get(event).forEach(listener => {\n                try {\n                    listener(data);\n                } catch (error) {\n                    this.logger.error('Event listener error', { event, error: error.message });\n                }\n            });\n        }\n    }\n    \n    /**\n     * Get connection statistics\n     * @returns {Object} - Connection statistics\n     */\n    getConnectionStats() {\n        return {\n            status: this.connectionStatus,\n            hasToken: !!this.tokenInfo.token,\n            tokenValid: this.tokenInfo.isValid,\n            tokenExpiresAt: this.tokenInfo.expiresAt,\n            lastConnectionTest: this.lastConnectionTest,\n            retryCount: this.connectionRetryCount\n        };\n    }\n    \n    /**\n     * Clean up the connection manager subsystem\n     */\n    cleanup() {\n        // Clear intervals\n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n            this.healthCheckInterval = null;\n        }\n        \n        if (this.tokenRefreshInterval) {\n            clearInterval(this.tokenRefreshInterval);\n            this.tokenRefreshInterval = null;\n        }\n        \n        // Clear event listeners\n        this.eventListeners.clear();\n        \n        // Disconnect\n        this.disconnect();\n        \n        this.logger.info('Connection Manager subsystem cleaned up');\n    }\n}","/**\n * Real-time Communication Subsystem\n * \n * Handles all real-time communication including Socket.IO connections,\n * WebSocket fallbacks, and Server-Sent Events for progress updates.\n */\n\nexport class RealtimeCommunicationSubsystem {\n    constructor(logger, uiManager) {\n        this.logger = logger;\n        this.uiManager = uiManager;\n        \n        // Connection state management\n        this.socket = null;\n        this.eventSource = null;\n        this.fallbackPolling = null;\n        this.connectionType = null;\n        this.isConnected = false;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n        \n        // Event handlers\n        this.eventHandlers = new Map();\n        \n        this.logger.info('Real-time Communication Subsystem initialized');\n    }\n    \n    /**\n     * Initialize the real-time communication subsystem\n     */\n    async init() {\n        try {\n            this.setupConnectionMonitoring();\n            this.logger.info('Real-time Communication Subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize Real-time Communication Subsystem', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Establish real-time connection with fallback strategy\n     */\n    async establishConnection(sessionId, options = {}) {\n        const {\n            preferredTransport = 'socketio',\n            enableFallback = true,\n            timeout = 10000\n        } = options;\n        \n        this.logger.info('Establishing real-time connection', {\n            sessionId,\n            preferredTransport,\n            enableFallback\n        });\n        \n        try {\n            // Try primary transport first\n            if (preferredTransport === 'socketio') {\n                await this.connectSocketIO(sessionId, timeout);\n            } else if (preferredTransport === 'sse') {\n                await this.connectSSE(sessionId, timeout);\n            } else if (preferredTransport === 'websocket') {\n                await this.connectWebSocket(sessionId, timeout);\n            }\n            \n        } catch (error) {\n            this.logger.warn('Primary transport failed', { error: error.message });\n            \n            if (enableFallback) {\n                await this.tryFallbackConnections(sessionId);\n            } else {\n                throw error;\n            }\n        }\n    }\n    \n    /**\n     * Connect using Socket.IO\n     */\n    async connectSocketIO(sessionId, timeout = 10000) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                // Import Socket.IO dynamically\n                const { io } = await import('socket.io-client');\n                \n                this.socket = io({\n                    transports: ['polling'],\n                    reconnectionAttempts: this.maxReconnectAttempts,\n                    reconnectionDelay: this.reconnectDelay,\n                    timeout: timeout,\n                    forceNew: true,\n                    autoConnect: true\n                });\n                \n                // Set up connection timeout\n                const connectionTimeout = setTimeout(() => {\n                    reject(new Error('Socket.IO connection timeout'));\n                }, timeout);\n                \n                // Connection success\n                this.socket.on('connect', () => {\n                    clearTimeout(connectionTimeout);\n                    this.connectionType = 'socketio';\n                    this.isConnected = true;\n                    this.reconnectAttempts = 0;\n                    \n                    // Set up Socket.IO event handlers\n                    this.setupSocketIOHandlers();\n                    \n                    // Register session\n                    this.socket.emit('registerSession', sessionId);\n                    \n                    this.logger.info('Socket.IO connected successfully');\n                    this.uiManager.showSuccess('Real-time connection established (Socket.IO)');\n                    \n                    resolve();\n                });\n                \n                // Connection error\n                this.socket.on('connect_error', (error) => {\n                    clearTimeout(connectionTimeout);\n                    this.logger.error('Socket.IO connection error', error);\n                    reject(error);\n                });\n                \n                // Set up event handlers\n                this.setupSocketIOHandlers();\n                \n            } catch (error) {\n                this.logger.error('Failed to initialize Socket.IO', error);\n                reject(error);\n            }\n        });\n    }\n    \n    /**\n     * Connect using Server-Sent Events\n     */\n    async connectSSE(sessionId, timeout = 10000) {\n        return new Promise((resolve, reject) => {\n            try {\n                const sseUrl = `/api/progress/stream/${sessionId}`;\n                this.eventSource = new EventSource(sseUrl);\n                \n                // Set up connection timeout\n                const connectionTimeout = setTimeout(() => {\n                    reject(new Error('SSE connection timeout'));\n                }, timeout);\n                \n                // Connection success\n                this.eventSource.onopen = () => {\n                    clearTimeout(connectionTimeout);\n                    this.connectionType = 'sse';\n                    this.isConnected = true;\n                    this.reconnectAttempts = 0;\n                    \n                    this.logger.info('SSE connected successfully');\n                    this.uiManager.showSuccess('Real-time connection established (SSE)');\n                    \n                    resolve();\n                };\n                \n                // Connection error\n                this.eventSource.onerror = (error) => {\n                    clearTimeout(connectionTimeout);\n                    this.logger.error('SSE connection error', error);\n                    reject(error);\n                };\n                \n                // Set up event handlers\n                this.setupSSEHandlers();\n                \n            } catch (error) {\n                this.logger.error('Failed to initialize SSE', error);\n                reject(error);\n            }\n        });\n    }\n    \n    /**\n     * Connect using WebSocket\n     */\n    async connectWebSocket(sessionId, timeout = 10000) {\n        return new Promise((resolve, reject) => {\n            try {\n                const wsUrl = `ws://${window.location.host}/ws/${sessionId}`;\n                this.websocket = new WebSocket(wsUrl);\n                \n                // Set up connection timeout\n                const connectionTimeout = setTimeout(() => {\n                    reject(new Error('WebSocket connection timeout'));\n                }, timeout);\n                \n                // Connection success\n                this.websocket.onopen = () => {\n                    clearTimeout(connectionTimeout);\n                    this.connectionType = 'websocket';\n                    this.isConnected = true;\n                    this.reconnectAttempts = 0;\n                    \n                    this.logger.info('WebSocket connected successfully');\n                    this.uiManager.showSuccess('Real-time connection established (WebSocket)');\n                    \n                    resolve();\n                };\n                \n                // Connection error\n                this.websocket.onerror = (error) => {\n                    clearTimeout(connectionTimeout);\n                    this.logger.error('WebSocket connection error', error);\n                    reject(error);\n                };\n                \n                // Set up event handlers\n                this.setupWebSocketHandlers();\n                \n            } catch (error) {\n                this.logger.error('Failed to initialize WebSocket', error);\n                reject(error);\n            }\n        });\n    }\n    \n    /**\n     * Try fallback connections in order\n     */\n    async tryFallbackConnections(sessionId) {\n        const fallbackOrder = ['sse', 'websocket', 'polling'];\n        \n        for (const transport of fallbackOrder) {\n            if (transport === this.connectionType) {\n                continue; // Skip the one that already failed\n            }\n            \n            try {\n                this.logger.info(`Trying fallback transport: ${transport}`);\n                \n                if (transport === 'sse') {\n                    await this.connectSSE(sessionId);\n                } else if (transport === 'websocket') {\n                    await this.connectWebSocket(sessionId);\n                } else if (transport === 'polling') {\n                    await this.setupFallbackPolling(sessionId);\n                }\n                \n                return; // Success, exit loop\n                \n            } catch (error) {\n                this.logger.warn(`Fallback transport ${transport} failed`, error);\n            }\n        }\n        \n        throw new Error('All connection methods failed');\n    }\n    \n    /**\n     * Set up Socket.IO event handlers\n     */\n    setupSocketIOHandlers() {\n        this.socket.on('progress', (data) => {\n            this.handleProgressEvent(data);\n        });\n        \n        this.socket.on('completion', (data) => {\n            this.handleCompletionEvent(data);\n        });\n        \n        this.socket.on('error', (data) => {\n            this.handleErrorEvent(data);\n        });\n        \n        this.socket.on('disconnect', (reason) => {\n            this.handleDisconnection(reason);\n        });\n        \n        this.socket.on('reconnect', () => {\n            this.handleReconnection();\n        });\n    }\n    \n    /**\n     * Set up SSE event handlers\n     */\n    setupSSEHandlers() {\n        this.eventSource.addEventListener('progress', (event) => {\n            const data = JSON.parse(event.data);\n            this.handleProgressEvent(data);\n        });\n        \n        this.eventSource.addEventListener('completion', (event) => {\n            const data = JSON.parse(event.data);\n            this.handleCompletionEvent(data);\n        });\n        \n        this.eventSource.addEventListener('error', (event) => {\n            const data = JSON.parse(event.data);\n            this.handleErrorEvent(data);\n        });\n    }\n    \n    /**\n     * Set up WebSocket event handlers\n     */\n    setupWebSocketHandlers() {\n        this.websocket.onmessage = (event) => {\n            try {\n                const message = JSON.parse(event.data);\n                \n                switch (message.type) {\n                    case 'progress':\n                        this.handleProgressEvent(message.data);\n                        break;\n                    case 'completion':\n                        this.handleCompletionEvent(message.data);\n                        break;\n                    case 'error':\n                        this.handleErrorEvent(message.data);\n                        break;\n                }\n            } catch (error) {\n                this.logger.error('Failed to parse WebSocket message', error);\n            }\n        };\n        \n        this.websocket.onclose = () => {\n            this.handleDisconnection('WebSocket closed');\n        };\n    }\n    \n    /**\n     * Set up fallback polling\n     */\n    async setupFallbackPolling(sessionId) {\n        this.connectionType = 'polling';\n        this.isConnected = true;\n        \n        this.fallbackPolling = setInterval(async () => {\n            try {\n                const response = await fetch(`/api/progress/poll/${sessionId}`);\n                const data = await response.json();\n                \n                if (data.events && data.events.length > 0) {\n                    data.events.forEach(event => {\n                        switch (event.type) {\n                            case 'progress':\n                                this.handleProgressEvent(event.data);\n                                break;\n                            case 'completion':\n                                this.handleCompletionEvent(event.data);\n                                break;\n                            case 'error':\n                                this.handleErrorEvent(event.data);\n                                break;\n                        }\n                    });\n                }\n                \n            } catch (error) {\n                this.logger.error('Polling request failed', error);\n            }\n        }, 2000);\n        \n        this.logger.info('Fallback polling established');\n        this.uiManager.showInfo('Using polling for updates (limited real-time capability)');\n    }\n    \n    /**\n     * Handle progress events\n     */\n    handleProgressEvent(data) {\n        this.logger.info('Progress event received', data);\n        this.triggerEvent('progress', data);\n    }\n    \n    /**\n     * Handle completion events\n     */\n    handleCompletionEvent(data) {\n        this.logger.info('Completion event received', data);\n        this.triggerEvent('completion', data);\n        this.disconnect();\n    }\n    \n    /**\n     * Handle error events\n     */\n    handleErrorEvent(data) {\n        this.logger.error('Error event received', data);\n        this.triggerEvent('error', data);\n    }\n    \n    /**\n     * Handle disconnection\n     */\n    handleDisconnection(reason) {\n        this.isConnected = false;\n        this.logger.warn('Connection lost', { reason, type: this.connectionType });\n        this.uiManager.showWarning('Real-time connection lost');\n        \n        // Attempt reconnection\n        this.attemptReconnection();\n    }\n    \n    /**\n     * Handle reconnection\n     */\n    handleReconnection() {\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.logger.info('Connection restored');\n        this.uiManager.showSuccess('Real-time connection restored');\n    }\n    \n    /**\n     * Attempt reconnection\n     */\n    async attemptReconnection() {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            this.logger.error('Max reconnection attempts reached');\n            this.uiManager.showError('Connection Lost', 'Unable to restore real-time connection');\n            return;\n        }\n        \n        this.reconnectAttempts++;\n        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);\n        \n        this.logger.info('Attempting reconnection', {\n            attempt: this.reconnectAttempts,\n            delay\n        });\n        \n        setTimeout(async () => {\n            try {\n                // Reconnection logic depends on connection type\n                if (this.connectionType === 'socketio' && this.socket) {\n                    this.socket.connect();\n                } else {\n                    // For other types, we'd need the session ID\n                    // This would typically be handled by the calling code\n                }\n            } catch (error) {\n                this.logger.error('Reconnection failed', error);\n                this.attemptReconnection();\n            }\n        }, delay);\n    }\n    \n    /**\n     * Set up connection monitoring\n     */\n    setupConnectionMonitoring() {\n        // Monitor connection health\n        setInterval(() => {\n            if (this.isConnected) {\n                this.checkConnectionHealth();\n            }\n        }, 30000); // Check every 30 seconds\n    }\n    \n    /**\n     * Check connection health\n     */\n    checkConnectionHealth() {\n        if (this.connectionType === 'socketio' && this.socket) {\n            // Socket.IO has built-in heartbeat\n            if (!this.socket.connected) {\n                this.handleDisconnection('Health check failed');\n            }\n        } else if (this.connectionType === 'sse' && this.eventSource) {\n            if (this.eventSource.readyState === EventSource.CLOSED) {\n                this.handleDisconnection('SSE connection closed');\n            }\n        } else if (this.connectionType === 'websocket' && this.websocket) {\n            if (this.websocket.readyState === WebSocket.CLOSED) {\n                this.handleDisconnection('WebSocket connection closed');\n            }\n        }\n    }\n    \n    /**\n     * Register event handler\n     */\n    on(event, handler) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event).push(handler);\n    }\n    \n    /**\n     * Remove event handler\n     */\n    off(event, handler) {\n        if (this.eventHandlers.has(event)) {\n            const handlers = this.eventHandlers.get(event);\n            const index = handlers.indexOf(handler);\n            if (index > -1) {\n                handlers.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * Trigger event\n     */\n    triggerEvent(event, data) {\n        if (this.eventHandlers.has(event)) {\n            this.eventHandlers.get(event).forEach(handler => {\n                try {\n                    handler(data);\n                } catch (error) {\n                    this.logger.error('Event handler error', { event, error: error.message });\n                }\n            });\n        }\n    }\n    \n    /**\n     * Disconnect all connections\n     */\n    disconnect() {\n        this.isConnected = false;\n        \n        if (this.socket) {\n            this.socket.disconnect();\n            this.socket = null;\n        }\n        \n        if (this.eventSource) {\n            this.eventSource.close();\n            this.eventSource = null;\n        }\n        \n        if (this.websocket) {\n            this.websocket.close();\n            this.websocket = null;\n        }\n        \n        if (this.fallbackPolling) {\n            clearInterval(this.fallbackPolling);\n            this.fallbackPolling = null;\n        }\n        \n        this.connectionType = null;\n        this.logger.info('All real-time connections closed');\n    }\n    \n    /**\n     * Get connection status\n     */\n    getConnectionStatus() {\n        return {\n            isConnected: this.isConnected,\n            connectionType: this.connectionType,\n            reconnectAttempts: this.reconnectAttempts\n        };\n    }\n}","/**\n * Authentication Management Subsystem\n * \n * Handles all authentication-related operations including token management,\n * credential validation, and authentication state tracking.\n */\n\nexport class AuthManagementSubsystem {\n    constructor(logger, uiManager, localClient, settingsSubsystem) {\n        this.logger = logger;\n        this.uiManager = uiManager;\n        this.localClient = localClient;\n        this.settingsSubsystem = settingsSubsystem;\n        \n        // Authentication state\n        this.isAuthenticated = false;\n        this.tokenStatus = null;\n        this.tokenExpiry = null;\n        this.refreshTimer = null;\n        \n        this.logger.info('Authentication Management Subsystem initialized');\n    }\n    \n    /**\n     * Initialize the authentication subsystem\n     */\n    async init() {\n        try {\n            this.setupEventListeners();\n            await this.checkInitialTokenStatus();\n            this.setupTokenRefreshTimer();\n            this.logger.info('Authentication Management Subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize Authentication Management Subsystem', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up event listeners for authentication-related elements\n     */\n    setupEventListeners() {\n        // Get token button\n        const getTokenBtn = document.getElementById('get-token-btn');\n        if (getTokenBtn) {\n            getTokenBtn.addEventListener('click', async (e) => {\n                e.preventDefault();\n                await this.getToken();\n            });\n        }\n        \n        // Test connection button\n        const testConnectionBtn = document.getElementById('test-connection-btn');\n        if (testConnectionBtn) {\n            testConnectionBtn.addEventListener('click', async (e) => {\n                e.preventDefault();\n                await this.testConnection();\n            });\n        }\n        \n        // Global token refresh button\n        const globalRefreshBtn = document.getElementById('global-refresh-token');\n        if (globalRefreshBtn) {\n            globalRefreshBtn.addEventListener('click', async (e) => {\n                e.preventDefault();\n                await this.refreshToken();\n            });\n        }\n        \n        // Settings form submission\n        const settingsForm = document.getElementById('settings-form');\n        if (settingsForm) {\n            settingsForm.addEventListener('submit', async (e) => {\n                e.preventDefault();\n                await this.handleSettingsSubmit(e);\n            });\n        }\n    }\n    \n    /**\n     * Get a new authentication token\n     */\n    async getToken() {\n        try {\n            this.logger.info('Getting new authentication token');\n            this.showTokenProgress('Getting token...');\n            \n            // Validate settings first\n            await this.settingsSubsystem.loadCurrentSettings();\n            const settings = this.settingsSubsystem.currentSettings;\n            if (!this.validateSettings(settings)) {\n                throw new Error('Invalid settings - please check your configuration');\n            }\n            \n            // Request token from server\n            const response = await this.localClient.post('/api/v1/auth/token', {\n                clientId: settings.clientId,\n                clientSecret: settings.clientSecret,\n                environmentId: settings.environmentId,\n                region: settings.region\n            });\n            \n            if (!response.success) {\n                throw new Error(response.error || 'Failed to get token');\n            }\n            \n            // Update token status\n            this.tokenStatus = response.token;\n            this.tokenExpiry = response.expiry;\n            this.isAuthenticated = true;\n            \n            // Update UI\n            this.updateTokenStatusUI(true, 'Token obtained successfully');\n            this.uiManager.showSuccess('Authentication successful');\n            \n            // Set up refresh timer\n            this.setupTokenRefreshTimer();\n            \n            this.logger.info('Token obtained successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to get token', error);\n            this.updateTokenStatusUI(false, error.message);\n            this.uiManager.showError('Authentication Failed', error.message);\n        } finally {\n            this.hideTokenProgress();\n        }\n    }\n    \n    /**\n     * Test connection with current settings\n     */\n    async testConnection() {\n        try {\n            this.logger.info('Testing connection');\n            this.showConnectionProgress('Testing connection...');\n            \n            // Get current settings\n            await this.settingsSubsystem.loadCurrentSettings();\n            const settings = this.settingsSubsystem.currentSettings;\n            if (!this.validateSettings(settings)) {\n                throw new Error('Invalid settings - please check your configuration');\n            }\n            \n            // Test connection\n            // CRITICAL: Use GET request to match server-side endpoint\n            // Server endpoint: routes/pingone-proxy-fixed.js - router.get('/test-connection')\n            // Last fixed: 2025-07-21 - HTTP method mismatch caused 400 Bad Request errors\n            const response = await this.localClient.get('/api/pingone/test-connection');\n            \n            if (!response.success) {\n                throw new Error(response.error || 'Connection test failed');\n            }\n            \n            // Update UI\n            this.updateConnectionStatusUI(true, 'Connection successful');\n            this.uiManager.showSuccess('Connection test successful');\n            \n            this.logger.info('Connection test successful');\n            \n        } catch (error) {\n            this.logger.error('Connection test failed', error);\n            this.updateConnectionStatusUI(false, error.message);\n            this.uiManager.showError('Connection Test Failed', error.message);\n        } finally {\n            this.hideConnectionProgress();\n        }\n    }\n    \n    /**\n     * Refresh the current token\n     */\n    async refreshToken() {\n        try {\n            this.logger.info('Refreshing authentication token');\n            this.showTokenProgress('Refreshing token...');\n            \n            const response = await this.localClient.post('/api/v1/auth/refresh');\n            \n            if (!response.success) {\n                throw new Error(response.error || 'Failed to refresh token');\n            }\n            \n            // Update token status\n            this.tokenStatus = response.token;\n            this.tokenExpiry = response.expiry;\n            this.isAuthenticated = true;\n            \n            // Update UI\n            this.updateTokenStatusUI(true, 'Token refreshed successfully');\n            this.uiManager.showSuccess('Token refreshed successfully');\n            \n            // Reset refresh timer\n            this.setupTokenRefreshTimer();\n            \n            this.logger.info('Token refreshed successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to refresh token', error);\n            this.updateTokenStatusUI(false, error.message);\n            this.uiManager.showError('Token Refresh Failed', error.message);\n            \n            // Clear authentication state\n            this.clearAuthenticationState();\n        } finally {\n            this.hideTokenProgress();\n        }\n    }\n    \n    /**\n     * Handle settings form submission\n     */\n    async handleSettingsSubmit(event) {\n        try {\n            const formData = new FormData(event.target);\n            const settings = Object.fromEntries(formData.entries());\n            \n            this.logger.info('Saving settings');\n            \n            // Validate settings\n            if (!this.validateSettings(settings)) {\n                throw new Error('Invalid settings - please check all required fields');\n            }\n            \n            // Save settings\n            await this.settingsManager.saveSettings(settings);\n            \n            // Clear current authentication state since settings changed\n            this.clearAuthenticationState();\n            \n            // Update UI\n            this.uiManager.updateSettingsSaveStatus('Settings saved successfully', 'success');\n            \n            this.logger.info('Settings saved successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to save settings', error);\n            this.uiManager.updateSettingsSaveStatus(`Settings Save Failed: ${error.message}`, 'error');\n        }\n    }\n    \n    /**\n     * Check initial token status and automatically acquire new token if expired\n     * CRITICAL: This method provides automatic token acquisition at startup\n     * DO NOT REMOVE OR MODIFY without understanding the startup authentication flow\n     */\n    async checkInitialTokenStatus() {\n        try {\n            this.logger.debug('🔍 [STARTUP] Checking initial token status...');\n            const response = await this.localClient.get('/api/v1/auth/status');\n            \n            if (response.success && response.isValid) {\n                // Token is valid - set authentication state\n                this.tokenStatus = response.status;\n                this.tokenExpiry = response.expiresIn;\n                this.isAuthenticated = true;\n                this.updateTokenStatusUI(true, `Token is ${response.status}`);\n                this.logger.info('✅ [STARTUP] Valid token found, authentication ready');\n                \n            } else if (response.success && response.hasToken) {\n                // Token exists but is expired - attempt automatic refresh\n                this.logger.warn('⚠️ [STARTUP] Token expired, attempting automatic refresh...');\n                this.tokenStatus = response.status;\n                this.tokenExpiry = response.expiresIn;\n                \n                // Attempt automatic token acquisition\n                const refreshSuccess = await this.attemptAutomaticTokenRefresh();\n                \n                if (refreshSuccess) {\n                    this.logger.info('✅ [STARTUP] Token automatically refreshed, authentication ready');\n                } else {\n                    this.logger.warn('❌ [STARTUP] Automatic token refresh failed, user intervention required');\n                    this.isAuthenticated = false;\n                    this.updateTokenStatusUI(false, 'Token expired - refresh required');\n                }\n                \n            } else {\n                // No token available - attempt automatic acquisition if credentials exist\n                this.logger.warn('⚠️ [STARTUP] No token found, attempting automatic acquisition...');\n                \n                const acquisitionSuccess = await this.attemptAutomaticTokenRefresh();\n                \n                if (acquisitionSuccess) {\n                    this.logger.info('✅ [STARTUP] Token automatically acquired, authentication ready');\n                } else {\n                    this.logger.warn('❌ [STARTUP] No token available and automatic acquisition failed');\n                    this.isAuthenticated = false;\n                    this.updateTokenStatusUI(false, response.status || 'No valid token');\n                }\n            }\n            \n        } catch (error) {\n            this.logger.error('❌ [STARTUP] Failed to check token status', error);\n            this.isAuthenticated = false;\n            this.updateTokenStatusUI(false, 'Token status unknown');\n        }\n    }\n    \n    /**\n     * Attempt automatic token refresh/acquisition at startup\n     * CRITICAL: This method enables automatic token acquisition when credentials are available\n     * DO NOT REMOVE - Required for seamless startup authentication flow\n     */\n    async attemptAutomaticTokenRefresh() {\n        try {\n            this.logger.debug('🔄 [STARTUP] Attempting automatic token acquisition...');\n            \n            // Load current settings to check if credentials are available\n            await this.settingsSubsystem.loadCurrentSettings();\n            const settings = this.settingsSubsystem.currentSettings;\n            \n            // Validate that we have the required credentials\n            if (!this.validateSettings(settings)) {\n                this.logger.debug('❌ [STARTUP] No valid credentials available for automatic token acquisition');\n                return false;\n            }\n            \n            this.logger.debug('✅ [STARTUP] Valid credentials found, attempting token acquisition...');\n            \n            // Request token from server using available credentials\n            const response = await this.localClient.post('/api/v1/auth/token', {\n                clientId: settings.clientId,\n                clientSecret: settings.clientSecret,\n                environmentId: settings.environmentId,\n                region: settings.region\n            });\n            \n            if (response.success && response.token) {\n                // Token acquisition successful - update authentication state\n                this.tokenStatus = response.token;\n                this.tokenExpiry = response.expiry;\n                this.isAuthenticated = true;\n                \n                // Update UI to reflect successful authentication\n                this.updateTokenStatusUI(true, 'Token obtained automatically');\n                \n                // Set up refresh timer for the new token\n                this.setupTokenRefreshTimer();\n                \n                this.logger.info('✅ [STARTUP] Automatic token acquisition successful');\n                return true;\n                \n            } else {\n                this.logger.warn('❌ [STARTUP] Token acquisition failed:', response.error || 'Unknown error');\n                return false;\n            }\n            \n        } catch (error) {\n            this.logger.error('❌ [STARTUP] Error during automatic token acquisition:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Set up automatic token refresh timer\n     * CRITICAL: This method manages token refresh scheduling\n     * DO NOT REMOVE - Required for automatic token maintenance\n     */\n    setupTokenRefreshTimer() {\n        // Clear existing timer\n        if (this.refreshTimer) {\n            clearTimeout(this.refreshTimer);\n        }\n        \n        if (!this.tokenExpiry) {\n            return;\n        }\n        \n        // Calculate refresh time (5 minutes before expiry)\n        const expiryTime = new Date(this.tokenExpiry).getTime();\n        const refreshTime = expiryTime - (5 * 60 * 1000); // 5 minutes before\n        const now = Date.now();\n        \n        if (refreshTime > now) {\n            const delay = refreshTime - now;\n            this.refreshTimer = setTimeout(() => {\n                this.refreshToken();\n            }, delay);\n            \n            this.logger.info('Token refresh timer set', {\n                refreshIn: Math.round(delay / 1000 / 60),\n                unit: 'minutes'\n            });\n        }\n    }\n    \n    /**\n     * Validate settings object\n     */\n    validateSettings(settings) {\n        const required = ['clientId', 'clientSecret', 'environmentId', 'region'];\n        \n        for (const field of required) {\n            if (!settings[field] || settings[field].trim() === '') {\n                this.logger.error('Missing required setting', { field });\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Clear authentication state\n     */\n    clearAuthenticationState() {\n        this.isAuthenticated = false;\n        this.tokenStatus = null;\n        this.tokenExpiry = null;\n        \n        if (this.refreshTimer) {\n            clearTimeout(this.refreshTimer);\n            this.refreshTimer = null;\n        }\n        \n        this.updateTokenStatusUI(false, 'Authentication cleared');\n    }\n    \n    /**\n     * Update token status UI\n     */\n    updateTokenStatusUI(isValid, message) {\n        // Update global token status\n        const globalTokenStatus = document.getElementById('global-token-status');\n        if (globalTokenStatus) {\n            globalTokenStatus.className = `token-status ${isValid ? 'valid' : 'invalid'}`;\n            globalTokenStatus.textContent = message;\n        }\n        \n        // Update token indicator\n        const tokenIndicator = document.getElementById('token-status-indicator');\n        if (tokenIndicator) {\n            tokenIndicator.className = `token-indicator ${isValid ? 'valid' : 'invalid'}`;\n        }\n        \n        // Update get token button visibility\n        const getTokenBtn = document.getElementById('get-token-btn');\n        if (getTokenBtn) {\n            getTokenBtn.style.display = isValid ? 'none' : 'inline-block';\n        }\n        \n        // Update refresh token button visibility\n        const refreshTokenBtn = document.getElementById('global-refresh-token');\n        if (refreshTokenBtn) {\n            refreshTokenBtn.style.display = isValid ? 'inline-block' : 'none';\n        }\n    }\n    \n    /**\n     * Update connection status UI\n     */\n    updateConnectionStatusUI(isConnected, message) {\n        const connectionStatus = document.getElementById('connection-status');\n        if (connectionStatus) {\n            connectionStatus.className = `connection-status ${isConnected ? 'connected' : 'disconnected'}`;\n            connectionStatus.textContent = message;\n        }\n    }\n    \n    /**\n     * Show token progress\n     */\n    showTokenProgress(message) {\n        const getTokenBtn = document.getElementById('get-token-btn');\n        if (getTokenBtn) {\n            getTokenBtn.disabled = true;\n            getTokenBtn.textContent = message;\n        }\n    }\n    \n    /**\n     * Hide token progress\n     */\n    hideTokenProgress() {\n        const getTokenBtn = document.getElementById('get-token-btn');\n        if (getTokenBtn) {\n            getTokenBtn.disabled = false;\n            getTokenBtn.textContent = 'Get Token';\n        }\n    }\n    \n    /**\n     * Show connection progress\n     */\n    showConnectionProgress(message) {\n        const testConnectionBtn = document.getElementById('test-connection-btn');\n        if (testConnectionBtn) {\n            testConnectionBtn.disabled = true;\n            testConnectionBtn.textContent = message;\n        }\n    }\n    \n    /**\n     * Hide connection progress\n     */\n    hideConnectionProgress() {\n        const testConnectionBtn = document.getElementById('test-connection-btn');\n        if (testConnectionBtn) {\n            testConnectionBtn.disabled = false;\n            testConnectionBtn.textContent = 'Test Connection';\n        }\n    }\n    \n    /**\n     * Get current authentication status\n     */\n    getAuthenticationStatus() {\n        return {\n            isAuthenticated: this.isAuthenticated,\n            tokenStatus: this.tokenStatus,\n            tokenExpiry: this.tokenExpiry,\n            timeUntilExpiry: this.tokenExpiry ? \n                Math.max(0, new Date(this.tokenExpiry).getTime() - Date.now()) : 0\n        };\n    }\n    \n    /**\n     * Check if token is valid and not expired\n     */\n    isTokenValid() {\n        if (!this.isAuthenticated || !this.tokenExpiry) {\n            return false;\n        }\n        \n        const now = Date.now();\n        const expiry = new Date(this.tokenExpiry).getTime();\n        \n        return expiry > now;\n    }\n}","/**\n * View Management Subsystem\n * \n * Handles all view transitions, navigation, and view-specific initialization.\n * Manages the single-page application navigation and view state.\n */\n\nexport class ViewManagementSubsystem {\n    constructor(logger, uiManager) {\n        this.logger = logger;\n        this.uiManager = uiManager;\n        \n        // View state management\n        this.currentView = 'home';\n        this.previousView = null;\n        this.viewHistory = [];\n        this.viewInitializers = new Map();\n        \n        this.logger.info('View Management Subsystem initialized with default home view');\n    }\n    \n    /**\n     * Initialize the view management subsystem\n     */\n    async init() {\n        try {\n            this.setupNavigationListeners();\n            this.registerViewInitializers();\n            await this.showInitialView();\n            this.logger.info('View Management Subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize View Management Subsystem', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up navigation event listeners\n     */\n    setupNavigationListeners() {\n        // Navigation items\n        const navItems = document.querySelectorAll('[data-view]');\n        navItems.forEach(item => {\n            item.addEventListener('click', async (e) => {\n                e.preventDefault();\n                const view = item.getAttribute('data-view');\n                await this.showView(view);\n            });\n        });\n        \n        // Browser back/forward buttons\n        window.addEventListener('popstate', (e) => {\n            if (e.state && e.state.view) {\n                this.showView(e.state.view, false);\n            }\n        });\n        \n        // Keyboard navigation\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                this.handleKeyboardNavigation(e);\n            }\n        });\n    }\n    \n    /**\n     * Register view initializers\n     */\n    registerViewInitializers() {\n        // Import view initializer\n        this.viewInitializers.set('import', async () => {\n            await this.initializeImportView();\n        });\n        \n        // Export view initializer\n        this.viewInitializers.set('export', async () => {\n            await this.initializeExportView();\n        });\n        \n        // Modify view initializer\n        this.viewInitializers.set('modify', async () => {\n            await this.initializeModifyView();\n        });\n        \n        // Delete view initializer\n        this.viewInitializers.set('delete-csv', async () => {\n            await this.initializeDeleteView();\n        });\n        \n        // Settings view initializer\n        this.viewInitializers.set('settings', async () => {\n            await this.initializeSettingsView();\n        });\n        \n        // Logs view initializer\n        this.viewInitializers.set('logs', async () => {\n            await this.initializeLogsView();\n        });\n        \n        // History view initializer\n        this.viewInitializers.set('history', async () => {\n            await this.initializeHistoryView();\n        });\n        \n        // Analytics view initializer\n        this.viewInitializers.set('analytics', async () => {\n            await this.initializeAnalyticsView();\n        });\n    }\n    \n    /**\n     * Show a specific view\n     */\n    async showView(view, updateHistory = true) {\n        if (!view || view === this.currentView) {\n            return;\n        }\n        \n        try {\n            this.logger.info('Switching to view', { from: this.currentView, to: view });\n            \n            // Validate view exists\n            if (!this.isValidView(view)) {\n                if (this.uiManager && typeof this.uiManager.showError === 'function') {\n                    this.uiManager.showError('Navigation Error', `Invalid view: ${view}`);\n                }\n                return;\n            }\n            \n            // Store previous view\n            this.previousView = this.currentView;\n            \n            // Hide current view\n            this.hideCurrentView();\n            \n            // Show new view\n            await this.displayView(view);\n            \n            // Update navigation state\n            this.updateNavigationState(view);\n            \n            // Update browser history\n            if (updateHistory) {\n                this.updateBrowserHistory(view);\n            }\n            \n            // Initialize view-specific logic\n            await this.initializeView(view);\n            \n            // Update view state\n            this.currentView = view;\n            this.viewHistory.push(view);\n            \n            // Update page title\n            this.updatePageTitle(view);\n            \n            // Trigger view change event\n            this.triggerViewChangeEvent(view, this.previousView);\n        } catch (error) {\n            this.logger.error('Failed to switch view', { view, error: error.message });\n            if (this.uiManager && typeof this.uiManager.showError === 'function') {\n                this.uiManager.showError('Navigation Error', `Failed to switch to ${view} view: ${error.message}`);\n            }\n        }\n    }\n    \n    /**\n     * Hide the current view\n     */\n    hideCurrentView() {\n        const currentViewElement = document.getElementById(`${this.currentView}-view`);\n        if (currentViewElement) {\n            currentViewElement.style.display = 'none';\n            currentViewElement.classList.remove('active');\n        }\n    }\n    \n    /**\n     * Display the specified view\n     */\n    async displayView(view) {\n        const viewElement = document.getElementById(`${view}-view`);\n        if (!viewElement) {\n            throw new Error(`View element not found: ${view}-view`);\n        }\n        \n        // Show view with animation\n        viewElement.style.display = 'block';\n        viewElement.classList.add('active');\n        \n        // Add fade-in animation\n        viewElement.style.opacity = '0';\n        viewElement.style.transition = 'opacity 0.3s ease-in-out';\n        \n        // Trigger reflow and fade in\n        requestAnimationFrame(() => {\n            viewElement.style.opacity = '1';\n        });\n    }\n    \n    /**\n     * Update navigation state\n     */\n    updateNavigationState(view) {\n        // Update navigation items\n        const navItems = document.querySelectorAll('[data-view]');\n        navItems.forEach(item => {\n            const itemView = item.getAttribute('data-view');\n            if (itemView === view) {\n                item.classList.add('active');\n            } else {\n                item.classList.remove('active');\n            }\n        });\n        \n        // Update page title\n        this.updatePageTitle(view);\n    }\n    \n    /**\n     * Update browser history\n     */\n    updateBrowserHistory(view) {\n        const state = { view, timestamp: Date.now() };\n        const title = this.getViewTitle(view);\n        const url = `#${view}`;\n        \n        history.pushState(state, title, url);\n    }\n    \n    /**\n     * Initialize view-specific functionality\n     */\n    async initializeView(view) {\n        const initializer = this.viewInitializers.get(view);\n        if (initializer) {\n            try {\n                await initializer();\n            } catch (error) {\n                this.logger.error('View initialization failed', { view, error: error.message });\n            }\n        }\n    }\n    \n    /**\n     * Initialize import view\n     */\n    async initializeImportView() {\n        // Load populations for import dropdown\n        if (window.app && typeof window.app.loadPopulations === 'function') {\n            await window.app.loadPopulations('import-population-select');\n        }\n        \n        // Reset file input\n        const fileInput = document.getElementById('csv-file');\n        if (fileInput) {\n            fileInput.value = '';\n        }\n        \n        // Reset progress display\n        this.resetProgressDisplay();\n    }\n    \n    /**\n     * Initialize export view\n     * CRITICAL: This method initializes the export view and loads populations\n     * DO NOT change the subsystem reference path without verifying App class structure\n     * Last fixed: 2025-07-21 - Fixed incorrect reference to export manager\n     */\n    async initializeExportView() {\n        this.logger.debug('🔄 VIEW: Initializing export view...');\n        \n        // Load populations for export dropdown using correct subsystem reference\n        if (window.app && window.app.subsystems && window.app.subsystems.exportManager) {\n            this.logger.debug('🔄 VIEW: Found export manager, loading populations...');\n            if (typeof window.app.subsystems.exportManager.loadPopulations === 'function') {\n                await window.app.subsystems.exportManager.loadPopulations();\n                this.logger.info('🔄 VIEW: Export populations loaded successfully');\n            } else {\n                this.logger.error('🔄 VIEW: Export manager loadPopulations method not found');\n            }\n        } else {\n            this.logger.error('🔄 VIEW: Export manager not found in app subsystems', {\n                hasApp: !!window.app,\n                hasSubsystems: !!(window.app && window.app.subsystems),\n                availableSubsystems: window.app && window.app.subsystems ? Object.keys(window.app.subsystems) : []\n            });\n        }\n    }\n    \n    /**\n     * Initialize modify view\n     */\n    async initializeModifyView() {\n        // Load populations for modify dropdown\n        if (window.app && typeof window.app.loadPopulations === 'function') {\n            await window.app.loadPopulations('modify-population-select');\n        }\n        \n        // Reset file input\n        const fileInput = document.getElementById('modify-csv-file');\n        if (fileInput) {\n            fileInput.value = '';\n        }\n    }\n    \n    /**\n     * Initialize delete view\n     */\n    async initializeDeleteView() {\n        // Load populations for delete dropdown\n        if (window.deleteManager && typeof window.deleteManager.loadPopulations === 'function') {\n            await window.deleteManager.loadPopulations();\n        }\n    }\n    \n    /**\n     * Initialize settings view\n     */\n    async initializeSettingsView() {\n        // Load current settings\n        if (window.app && typeof window.app.loadSettings === 'function') {\n            await window.app.loadSettings();\n        }\n    }\n    \n    /**\n     * Initialize logs view\n     */\n    async initializeLogsView() {\n        // Load logs\n        if (window.logManager && typeof window.logManager.loadLogs === 'function') {\n            await window.logManager.loadLogs();\n        }\n    }\n    \n    /**\n     * Initialize history view\n     */\n    async initializeHistoryView() {\n        try {\n            // Initialize history UI component if available\n            if (this.app && this.app.subsystems && this.app.subsystems.history) {\n                this.logger.debug('Initializing history view with HistorySubsystem');\n                \n                // The history UI component will be initialized by the main app\n                // Just ensure the view container exists\n                const historyView = document.getElementById('history-view');\n                if (!historyView) {\n                    this.logger.warn('History view container not found');\n                }\n            } else {\n                this.logger.warn('HistorySubsystem not available for history view initialization');\n            }\n        } catch (error) {\n            this.logger.error('Failed to initialize history view:', error);\n        }\n    }\n    \n    /**\n     * Initialize analytics view\n     */\n    async initializeAnalyticsView() {\n        try {\n            this.logger.debug('Initializing analytics view');\n            \n            // Check if analytics dashboard is available\n            if (window.app && window.app.analyticsDashboardUI) {\n                this.logger.debug('Analytics dashboard UI available, ensuring visibility');\n                \n                // Make sure analytics dashboard is visible when analytics view is shown\n                const analyticsContainer = document.getElementById('analytics-dashboard');\n                if (analyticsContainer) {\n                    analyticsContainer.style.display = 'block';\n                    this.logger.debug('Analytics dashboard container made visible');\n                } else {\n                    this.logger.warn('Analytics dashboard container not found');\n                }\n            } else {\n                this.logger.warn('Analytics dashboard UI not available for analytics view initialization');\n            }\n        } catch (error) {\n            this.logger.error('Failed to initialize analytics view:', error);\n        }\n    }\n    \n    /**\n     * Show initial view based on URL hash or default\n     */\n    async showInitialView() {\n        let initialView = 'home';\n        \n        // Check URL hash for the initial view\n        const hash = window.location.hash.substring(1);\n        if (hash && this.isValidView(hash)) {\n            initialView = hash;\n        }  \n        \n        await this.showView(initialView, false);\n    }\n    \n    /**\n     * Check if view is valid\n     */\n    isValidView(view) {\n        const validViews = [\n            'home', 'import', 'export', 'modify', 'delete-csv', \n            'settings', 'logs', 'history', 'analytics'\n        ];\n        return validViews.includes(view);\n    }\n    \n    /**\n     * Get view title\n     */\n    getViewTitle(view) {\n        const titles = {\n            'import': 'Import Users',\n            'export': 'Export Users',\n            'modify': 'Modify Users',\n            'delete-csv': 'Delete Users',\n            'settings': 'Settings',\n            'logs': 'Logs',\n            'history': 'History',\n            'analytics': 'Analytics Dashboard'\n        };\n        \n        return titles[view] || 'PingOne Import Tool';\n    }\n    \n    /**\n     * Update page title\n     */\n    updatePageTitle(view) {\n        const title = this.getViewTitle(view);\n        document.title = `${title} - PingOne Import Tool`;\n    }\n    \n    /**\n     * Handle keyboard navigation\n     */\n    handleKeyboardNavigation(e) {\n        const keyMap = {\n            '1': 'import',\n            '2': 'export',\n            '3': 'modify',\n            '4': 'delete-csv',\n            '5': 'settings',\n            '6': 'logs',\n            '7': 'history'\n        };\n        \n        const view = keyMap[e.key];\n        if (view) {\n            e.preventDefault();\n            this.showView(view);\n        }\n    }\n    \n    /**\n     * Reset progress display\n     */\n    resetProgressDisplay() {\n        // Use uiManager to hide progress and reset bar\n        if (this.uiManager && typeof this.uiManager.hideProgress === 'function') {\n            this.uiManager.hideProgress();\n        }\n        if (this.uiManager && typeof this.uiManager.updateProgress === 'function') {\n            this.uiManager.updateProgress(0, 1, ''); // Reset bar\n        }\n    }\n    \n    /**\n     * Trigger view change event\n     */\n    triggerViewChangeEvent(newView, oldView) {\n        const event = new CustomEvent('viewChanged', {\n            detail: {\n                newView,\n                oldView,\n                timestamp: Date.now()\n            }\n        });\n        \n        document.dispatchEvent(event);\n    }\n    \n    /**\n     * Go back to previous view\n     */\n    async goBack() {\n        if (this.previousView) {\n            await this.showView(this.previousView);\n        }\n    }\n    \n    /**\n     * Get current view\n     */\n    getCurrentView() {\n        return this.currentView;\n    }\n    \n    /**\n     * Get view history\n     */\n    getViewHistory() {\n        return [...this.viewHistory];\n    }\n    \n    /**\n     * Clear view history\n     */\n    clearViewHistory() {\n        this.viewHistory = [];\n    }\n}","/**\n * Global Token Manager Subsystem\n * \n * Provides a prominent global token status display in the sidebar\n * with real-time countdown timer and enhanced visibility across all windows.\n * \n * Follows the subsystem architecture pattern with proper lifecycle management,\n * EventBus integration, and consistent initialization.\n */\n\nclass GlobalTokenManagerSubsystem {\n    constructor(logger, eventBus) {\n        this.logger = logger || console;\n        this.eventBus = eventBus;\n        \n        // Subsystem state\n        this.isInitialized = false;\n        this.isDestroyed = false;\n        \n        // Timer for updating token status\n        this.globalTokenTimer = null;\n        this.updateInterval = 1000; // 1 second\n        \n        // Bind methods\n        this.init = this.init.bind(this);\n        this.destroy = this.destroy.bind(this);\n        this.updateGlobalTokenStatus = this.updateGlobalTokenStatus.bind(this);\n        this.setupGlobalTokenEventListeners = this.setupGlobalTokenEventListeners.bind(this);\n        this.startGlobalTokenTimer = this.startGlobalTokenTimer.bind(this);\n        this.getNewToken = this.getNewToken.bind(this);\n        \n        this.logger.debug('Global Token Manager Subsystem created');\n    }\n\n    /**\n     * Initialize the subsystem\n     */\n    async init() {\n        if (this.isInitialized) {\n            this.logger.warn('Global Token Manager Subsystem already initialized');\n            return;\n        }\n\n        try {\n            this.logger.info('Initializing Global Token Manager Subsystem...');\n            \n            // Wait for DOM to be ready and token status element to exist\n            await this.waitForTokenStatusElement();\n            \n            // Prevent conflicts with other token status systems\n            this.preventTokenStatusConflicts();\n            \n            // Set up event listeners\n            this.setupGlobalTokenEventListeners();\n            \n            // Set up EventBus listeners\n            this.setupEventBusListeners();\n            \n            // Start the update timer\n            this.startGlobalTokenTimer();\n            \n            // Initial status update\n            this.updateGlobalTokenStatus();\n            \n            this.isInitialized = true;\n            this.logger.info('Global Token Manager Subsystem initialized successfully');\n            \n            // Emit initialization event\n            if (this.eventBus) {\n                this.eventBus.emit('globalTokenManager:initialized');\n            }\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize Global Token Manager Subsystem', {\n                error: error.message,\n                stack: error.stack\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Destroy the subsystem and clean up resources\n     */\n    async destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n\n        this.logger.info('Destroying Global Token Manager Subsystem...');\n        \n        // Stop the timer\n        if (this.globalTokenTimer) {\n            clearInterval(this.globalTokenTimer);\n            this.globalTokenTimer = null;\n        }\n        \n        // Remove event listeners\n        this.removeEventListeners();\n        \n        // Clean up DOM protection\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n            this.mutationObserver = null;\n        }\n        \n        // Restore original UIManager methods\n        this.restoreOriginalMethods();\n        \n        // Mark as destroyed\n        this.isDestroyed = true;\n        this.isInitialized = false;\n        \n        // Emit destruction event\n        if (this.eventBus) {\n            this.eventBus.emit('globalTokenManager:destroyed');\n        }\n        \n        this.logger.info('Global Token Manager Subsystem destroyed');\n    }\n\n    /**\n     * Wait for token status element to be available in DOM\n     */\n    async waitForTokenStatusElement() {\n        const maxAttempts = 100;\n        const delay = 100;\n        \n        for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n            // Check if DOM is ready\n            if (document.readyState !== 'complete' && document.readyState !== 'interactive') {\n                this.logger.debug(`DOM not ready (${document.readyState}), waiting...`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                continue;\n            }\n            \n            const element = document.getElementById('global-token-status');\n            if (element) {\n                // Verify all required child elements exist (they may be nested)\n                const countdown = element.querySelector('.global-token-countdown');\n                const icon = element.querySelector('.global-token-icon');\n                const text = element.querySelector('.global-token-text');\n                \n                // If the main element exists, consider it ready even if some child elements are missing\n                // The child elements will be populated by other methods\n                if (element.id === 'global-token-status') {\n                    this.logger.debug('Global token status element found and ready', {\n                        attempt,\n                        elementId: element.id,\n                        hasCountdown: !!countdown,\n                        hasIcon: !!icon,\n                        hasText: !!text\n                    });\n                    return element;\n                }\n            } else {\n                this.logger.debug(`Global token status element not found (attempt ${attempt}/${maxAttempts})`);\n            }\n            \n            await new Promise(resolve => setTimeout(resolve, delay));\n        }\n        \n        this.logger.error('Global token status element not found after waiting', {\n            domState: document.readyState,\n            bodyExists: !!document.body,\n            sidebarExists: !!document.querySelector('.sidebar'),\n            allElementsWithId: Array.from(document.querySelectorAll('[id]')).map(el => el.id)\n        });\n        throw new Error('Global token status element not found after waiting');\n    }\n\n    /**\n     * Prevent conflicts with other token status systems\n     */\n    preventTokenStatusConflicts() {\n        this.logger.debug('Preventing token status conflicts...');\n        \n        // Mark our global token status element as protected\n        const statusElement = document.getElementById('global-token-status');\n        if (statusElement) {\n            statusElement.setAttribute('data-protected', 'true');\n            statusElement.setAttribute('data-managed-by', 'GlobalTokenManagerSubsystem');\n            \n            // Add a mutation observer to prevent other systems from modifying our element\n            this.setupDOMProtection(statusElement);\n        }\n        \n        // Override conflicting UIManager methods if they exist\n        this.overrideConflictingMethods();\n        \n        this.logger.debug('Token status conflicts prevention set up');\n    }\n\n    /**\n     * Set up DOM protection to prevent other systems from modifying our widget\n     */\n    setupDOMProtection(element) {\n        if (!window.MutationObserver) {\n            return; // Skip if MutationObserver not supported\n        }\n        \n        this.mutationObserver = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                // If our element was removed or modified by another system, restore it\n                if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {\n                    const removedOurElement = Array.from(mutation.removedNodes).some(node => \n                        node.id === 'global-token-status'\n                    );\n                    \n                    if (removedOurElement) {\n                        this.logger.warn('Global token status element was removed by another system, will reinitialize');\n                        // Reinitialize after a short delay\n                        setTimeout(() => {\n                            if (!document.getElementById('global-token-status')) {\n                                this.logger.info('Reinitializing global token status element');\n                                this.waitForTokenStatusElement().then(() => {\n                                    this.updateGlobalTokenStatus();\n                                }).catch(error => {\n                                    this.logger.error('Failed to reinitialize token status element', error);\n                                });\n                            }\n                        }, 100);\n                    }\n                }\n            });\n        });\n        \n        // Observe the parent container for changes\n        const sidebar = element.parentElement;\n        if (sidebar) {\n            this.mutationObserver.observe(sidebar, {\n                childList: true,\n                subtree: true\n            });\n        }\n    }\n\n    /**\n     * Override conflicting methods in other systems\n     */\n    overrideConflictingMethods() {\n        // Check if UIManager exists and has conflicting methods\n        if (window.app && window.app.uiManager) {\n            const uiManager = window.app.uiManager;\n            \n            // Store original methods if they exist\n            if (typeof uiManager.updateUniversalTokenStatus === 'function') {\n                uiManager._originalUpdateUniversalTokenStatus = uiManager.updateUniversalTokenStatus;\n                uiManager.updateUniversalTokenStatus = () => {\n                    this.logger.debug('UIManager.updateUniversalTokenStatus called - delegating to GlobalTokenManagerSubsystem');\n                    this.updateGlobalTokenStatus();\n                };\n            }\n            \n            if (typeof uiManager.updateHomeTokenStatus === 'function') {\n                uiManager._originalUpdateHomeTokenStatus = uiManager.updateHomeTokenStatus;\n                uiManager.updateHomeTokenStatus = () => {\n                    this.logger.debug('UIManager.updateHomeTokenStatus called - delegating to GlobalTokenManagerSubsystem');\n                    this.updateGlobalTokenStatus();\n                };\n            }\n            \n            this.logger.debug('Conflicting UIManager methods overridden');\n        }\n    }\n\n    /**\n     * Restore original methods in other systems\n     */\n    restoreOriginalMethods() {\n        if (window.app && window.app.uiManager) {\n            const uiManager = window.app.uiManager;\n            \n            // Restore original methods if they were overridden\n            if (uiManager._originalUpdateUniversalTokenStatus) {\n                uiManager.updateUniversalTokenStatus = uiManager._originalUpdateUniversalTokenStatus;\n                delete uiManager._originalUpdateUniversalTokenStatus;\n            }\n            \n            if (uiManager._originalUpdateHomeTokenStatus) {\n                uiManager.updateHomeTokenStatus = uiManager._originalUpdateHomeTokenStatus;\n                delete uiManager._originalUpdateHomeTokenStatus;\n            }\n            \n            this.logger.debug('Original UIManager methods restored');\n        }\n    }\n\n    /**\n     * Set up EventBus listeners\n     */\n    setupEventBusListeners() {\n        if (!this.eventBus) {\n            return;\n        }\n\n        // Listen for token refresh events\n        this.eventBus.on('token:refreshed', () => {\n            this.logger.debug('Token refreshed event received, updating status');\n            this.updateGlobalTokenStatus();\n        });\n\n        // Listen for token error events\n        this.eventBus.on('token:error', (data) => {\n            this.logger.debug('Token error event received', data);\n            this.updateGlobalTokenStatus();\n        });\n\n        // Listen for settings changes that might affect token status\n        this.eventBus.on('settings:updated', () => {\n            this.logger.debug('Settings updated event received, updating token status');\n            this.updateGlobalTokenStatus();\n        });\n\n        this.logger.debug('EventBus listeners set up for Global Token Manager');\n    }\n\n    /**\n     * Update the global token status display\n     */\n    updateGlobalTokenStatus() {\n        if (this.isDestroyed) {\n            return;\n        }\n\n        const statusBox = document.getElementById('global-token-status');\n        if (!statusBox) {\n            // Only log warning once every 30 seconds to reduce spam\n            if (!this.lastElementWarning || Date.now() - this.lastElementWarning > 30000) {\n                this.logger.debug('Global token status box not found - widget may not be initialized yet');\n                this.lastElementWarning = Date.now();\n            }\n            return;\n        }\n\n        const countdown = statusBox.querySelector('.global-token-countdown');\n        const icon = statusBox.querySelector('.global-token-icon');\n        const text = statusBox.querySelector('.global-token-text');\n        const getTokenBtn = document.getElementById('global-get-token');\n\n        // If child elements are missing, log debug message but continue with partial updates\n        if (!countdown || !icon || !text) {\n            // Only log debug message once every 30 seconds to reduce spam\n            if (!this.lastChildElementWarning || Date.now() - this.lastChildElementWarning > 30000) {\n                this.logger.debug('Some global token status child elements not found, will update what is available', {\n                    hasCountdown: !!countdown,\n                    hasIcon: !!icon,\n                    hasText: !!text,\n                    statusBoxFound: !!statusBox\n                });\n                this.lastChildElementWarning = Date.now();\n            }\n        }\n\n        try {\n            // Get current token info (sync version for now to avoid async issues during init)\n            const tokenInfo = this.getTokenInfoSync();\n            \n            if (tokenInfo.hasToken) {\n                // Token exists\n                const timeLeft = tokenInfo.timeLeft;\n                const formattedTime = this.formatTime(timeLeft);\n                \n                if (countdown) countdown.textContent = formattedTime;\n                \n                if (timeLeft <= 0) {\n                    // Token expired\n                    statusBox.className = 'global-token-status expired';\n                    if (icon) icon.textContent = '❌';\n                    if (text) text.textContent = 'Token expired';\n                    if (getTokenBtn) getTokenBtn.style.display = 'inline-block';\n                } else if (timeLeft <= 300) { // 5 minutes\n                    // Token expiring soon\n                    statusBox.className = 'global-token-status expiring';\n                    if (icon) icon.textContent = '⚠️';\n                    if (text) text.textContent = 'Token expiring soon';\n                    if (getTokenBtn) getTokenBtn.style.display = 'none';\n                } else {\n                    // Token valid\n                    statusBox.className = 'global-token-status valid';\n                    if (icon) icon.textContent = '✅';\n                    if (text) text.textContent = 'Token valid';\n                    if (getTokenBtn) getTokenBtn.style.display = 'none';\n                }\n            } else {\n                // No token\n                statusBox.className = 'global-token-status missing';\n                if (icon) icon.textContent = '❌';\n                if (text) text.textContent = 'No valid token';\n                if (countdown) countdown.textContent = 'No Token';\n                if (getTokenBtn) getTokenBtn.style.display = 'inline-block';\n            }\n        } catch (error) {\n            // Reduce error logging frequency to prevent spam\n            if (!this.lastErrorWarning || Date.now() - this.lastErrorWarning > 30000) {\n                this.logger.debug('Error updating global token status', {\n                    error: error.message\n                });\n                this.lastErrorWarning = Date.now();\n            }\n            \n            // Show error state only if elements exist\n            if (statusBox) statusBox.className = 'global-token-status error';\n            if (icon) icon.textContent = '⚠️';\n            if (text) text.textContent = 'Status error';\n            if (countdown) countdown.textContent = 'Error';\n        }\n    }\n\n/**\n * Format time in human-readable format\n */\nformatTime(seconds) {\n    if (seconds <= 0) return '00:00';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n        return `${hours}h ${minutes}m ${secs}s`;\n    } else if (minutes > 0) {\n        return `${minutes}m ${secs}s`;\n    } else {\n        return `${secs}s`;\n    }\n}\n\n/**\n * Get current token information (synchronous version for initialization)\n */\ngetTokenInfoSync() {\n    try {\n        // Only check localStorage for sync version to avoid async issues during init\n        const token = localStorage.getItem('pingone_worker_token');\n        const expiry = localStorage.getItem('pingone_token_expiry');\n        \n        if (!token || !expiry) {\n            return { hasToken: false, timeLeft: 0, source: 'localStorage' };\n        }\n        \n        const expiryTime = parseInt(expiry);\n        const currentTime = Date.now();\n        const timeLeft = Math.floor((expiryTime - currentTime) / 1000);\n        \n        return {\n            hasToken: true,\n            timeLeft: Math.max(0, timeLeft),\n            source: 'localStorage'\n        };\n    } catch (error) {\n        this.logger.debug('Error getting sync token info', {\n            error: error.message\n        });\n        return { hasToken: false, timeLeft: 0, source: 'error' };\n    }\n}\n\n/**\n * Get current token information (async version with server fallback)\n */\nasync getTokenInfo() {\n    try {\n        // First try to get token info from server API\n        try {\n            // Corrected endpoint to align with auth-subsystem API\n            const response = await fetch('/api/v1/auth/token');\n            if (response.ok) {\n                const serverTokenInfo = await response.json();\n                // The /token endpoint returns tokenInfo directly\n                if (serverTokenInfo.success && serverTokenInfo.tokenInfo) {\n                    return {\n                        hasToken: serverTokenInfo.tokenInfo.isValid,\n                        timeLeft: serverTokenInfo.tokenInfo.timeLeft || 0,\n                        source: 'server'\n                    };\n                }\n            }\n        } catch (serverError) {\n            this.logger.debug('Could not fetch token info from server, checking localStorage', {\n                error: serverError.message\n            });\n        }\n        \n        // Fallback to localStorage\n        const token = localStorage.getItem('pingone_worker_token');\n        const expiry = localStorage.getItem('pingone_token_expiry');\n        \n        if (!token || !expiry) {\n            return { hasToken: false, timeLeft: 0, source: 'localStorage' };\n        }\n        \n        const expiryTime = parseInt(expiry);\n        const currentTime = Date.now();\n        const timeLeft = Math.floor((expiryTime - currentTime) / 1000);\n        \n        return {\n            hasToken: true,\n            timeLeft: Math.max(0, timeLeft),\n            source: 'localStorage'\n        };\n    } catch (error) {\n        this.logger.error('Error getting token info', {\n            error: error.message\n        });\n        return { hasToken: false, timeLeft: 0, source: 'error' };\n    }\n}\n\n/**\n * Set up event listeners for global token buttons\n */\nsetupGlobalTokenEventListeners() {\n    // Refresh button\n    const refreshBtn = document.getElementById('global-refresh-token');\n    if (refreshBtn) {\n        this.refreshBtnHandler = () => {\n            this.logger.debug('Refresh token button clicked');\n            this.updateGlobalTokenStatus();\n        };\n        refreshBtn.addEventListener('click', this.refreshBtnHandler);\n    }\n\n    // Get Token button\n    const getTokenBtn = document.getElementById('global-get-token');\n    if (getTokenBtn) {\n        this.getTokenBtnHandler = () => {\n            this.logger.debug('Get token button clicked');\n            this.getNewToken();\n        };\n        getTokenBtn.addEventListener('click', this.getTokenBtnHandler);\n    }\n\n    this.logger.debug('Global token event listeners set up');\n}\n\n/**\n * Remove event listeners\n */\nremoveEventListeners() {\n    const refreshBtn = document.getElementById('global-refresh-token');\n    if (refreshBtn && this.refreshBtnHandler) {\n        refreshBtn.removeEventListener('click', this.refreshBtnHandler);\n    }\n\n    const getTokenBtn = document.getElementById('global-get-token');\n    if (getTokenBtn && this.getTokenBtnHandler) {\n        getTokenBtn.removeEventListener('click', this.getTokenBtnHandler);\n    }\n\n    this.logger.debug('Global token event listeners removed');\n}\n\n/**\n * Start the timer to update token status regularly\n */\nstartGlobalTokenTimer() {\n    if (this.globalTokenTimer) {\n        clearInterval(this.globalTokenTimer);\n    }\n    \n    this.globalTokenTimer = setInterval(() => {\n        if (!this.isDestroyed) {\n            this.updateGlobalTokenStatus();\n        }\n    }, this.updateInterval);\n    \n    this.logger.debug('Global token timer started', {\n        interval: `${this.updateInterval}ms`\n    });\n}\n\n/**\n * Get new token\n */\nasync getNewToken() {\n    if (this.isDestroyed) {\n        return;\n    }\n\n    try {\n        this.logger.info('Getting new token via global token manager subsystem...');\n        \n        // Show loading state\n        const statusBox = document.getElementById('global-token-status');\n        if (statusBox) {\n            statusBox.className = 'global-token-status loading';\n            const icon = statusBox.querySelector('.global-token-icon');\n            const text = statusBox.querySelector('.global-token-text');\n            if (icon) icon.textContent = '⏳';\n            if (text) text.textContent = 'Getting token...';\n        }\n        \n        // Try to use the app's token refresh functionality\n        if (window.app && typeof window.app.getToken === 'function') {\n            await window.app.getToken();\n            this.logger.info('Token refreshed successfully via app');\n        } else {\n            // Fallback: try to trigger token refresh through API\n            const response = await fetch('/api/auth/refresh-token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            if (response.ok) {\n                const result = await response.json();\n                this.logger.info('Token refreshed via API', result);\n            } else {\n                throw new Error(`API request failed: ${response.statusText}`);\n            }\n        }\n        \n        // Update status after token refresh\n        this.updateGlobalTokenStatus();\n        \n        // Emit token refresh event\n        if (this.eventBus) {\n            this.eventBus.emit('globalTokenManager:tokenRefreshed');\n        }\n        \n    } catch (error) {\n        this.logger.error('Error getting new token', {\n            error: error.message\n        });\n        \n        // Show error state\n        const statusBox = document.getElementById('global-token-status');\n        if (statusBox) {\n            statusBox.className = 'global-token-status error';\n            const icon = statusBox.querySelector('.global-token-icon');\n            const text = statusBox.querySelector('.global-token-text');\n            if (icon) icon.textContent = '❌';\n            if (text) text.textContent = 'Token error';\n        }\n    }\n}\n    formatTime(seconds) {\n        if (seconds <= 0) return '00:00';\n        \n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n        \n        if (hours > 0) {\n            return `${hours}h ${minutes}m ${secs}s`;\n        } else if (minutes > 0) {\n            return `${minutes}m ${secs}s`;\n        } else {\n            return `${secs}s`;\n        }\n    }\n\n    /**\n     * Get current token information\n     */\n    async getTokenInfo() {\n        try {\n            // First try to get token info from server API\n            try {\n                const response = await fetch('/api/token/status');\n                if (response.ok) {\n                    const serverTokenInfo = await response.json();\n                    if (serverTokenInfo.hasToken) {\n                        return {\n                            hasToken: true,\n                            timeLeft: serverTokenInfo.timeLeft || 0,\n                            source: 'server'\n                        };\n                    }\n                }\n            } catch (serverError) {\n                this.logger.debug('Could not fetch token info from server, checking localStorage', {\n                    error: serverError.message\n                });\n            }\n            \n            // Fallback to localStorage\n            const token = localStorage.getItem('pingone_worker_token');\n            const expiry = localStorage.getItem('pingone_token_expiry');\n            \n            if (!token || !expiry) {\n                return { hasToken: false, timeLeft: 0, source: 'localStorage' };\n            }\n            \n            const expiryTime = parseInt(expiry);\n            const currentTime = Date.now();\n            const timeLeft = Math.floor((expiryTime - currentTime) / 1000);\n            \n            return {\n                hasToken: true,\n                timeLeft: Math.max(0, timeLeft),\n                source: 'localStorage'\n            };\n        } catch (error) {\n            this.logger.error('Error getting token info', {\n                error: error.message\n            });\n            return { hasToken: false, timeLeft: 0, source: 'error' };\n        }\n    }\n\n    /**\n     * Set up event listeners for global token buttons\n     */\n    setupGlobalTokenEventListeners() {\n        // Refresh button\n        const refreshBtn = document.getElementById('global-refresh-token');\n        if (refreshBtn) {\n            this.refreshBtnHandler = () => {\n                this.logger.debug('Refresh token button clicked');\n                this.updateGlobalTokenStatus();\n            };\n            refreshBtn.addEventListener('click', this.refreshBtnHandler);\n        }\n\n        // Get Token button\n        const getTokenBtn = document.getElementById('global-get-token');\n        if (getTokenBtn) {\n            this.getTokenBtnHandler = () => {\n                this.logger.debug('Get token button clicked');\n                this.getNewToken();\n            };\n            getTokenBtn.addEventListener('click', this.getTokenBtnHandler);\n        }\n\n        this.logger.debug('Global token event listeners set up');\n    }\n\n    /**\n     * Remove event listeners\n     */\n    removeEventListeners() {\n        const refreshBtn = document.getElementById('global-refresh-token');\n        if (refreshBtn && this.refreshBtnHandler) {\n            refreshBtn.removeEventListener('click', this.refreshBtnHandler);\n        }\n\n        const getTokenBtn = document.getElementById('global-get-token');\n        if (getTokenBtn && this.getTokenBtnHandler) {\n            getTokenBtn.removeEventListener('click', this.getTokenBtnHandler);\n        }\n\n        this.logger.debug('Global token event listeners removed');\n    }\n\n    /**\n     * Start the timer to update token status regularly\n     */\n    startGlobalTokenTimer() {\n        if (this.globalTokenTimer) {\n            clearInterval(this.globalTokenTimer);\n        }\n        \n        this.globalTokenTimer = setInterval(() => {\n            if (!this.isDestroyed) {\n                this.updateGlobalTokenStatus();\n            }\n        }, this.updateInterval);\n        \n        this.logger.debug('Global token timer started', {\n            interval: `${this.updateInterval}ms`\n        });\n    }\n\n    /**\n     * Get new token\n     */\n    async getNewToken() {\n        if (this.isDestroyed) {\n            return;\n        }\n\n        try {\n            this.logger.info('Getting new token via global token manager subsystem...');\n            \n            // Show loading state\n            const statusBox = document.getElementById('global-token-status');\n            if (statusBox) {\n                statusBox.className = 'global-token-status loading';\n                const icon = statusBox.querySelector('.global-token-icon');\n                const text = statusBox.querySelector('.global-token-text');\n                if (icon) icon.textContent = '⏳';\n                if (text) text.textContent = 'Getting token...';\n            }\n            \n            // Try to use the app's token refresh functionality\n            if (window.app && typeof window.app.getToken === 'function') {\n                await window.app.getToken();\n                this.logger.info('Token refreshed successfully via app');\n            } else {\n                // Fallback: try to trigger token refresh through API\n                const response = await fetch('/api/auth/refresh-token', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                \n                if (response.ok) {\n                    const result = await response.json();\n                    this.logger.info('Token refreshed via API', result);\n                } else {\n                    throw new Error(`API request failed: ${response.statusText}`);\n                }\n            }\n            \n            // Update status after token refresh\n            this.updateGlobalTokenStatus();\n            \n            // Emit token refresh event\n            if (this.eventBus) {\n                this.eventBus.emit('globalTokenManager:tokenRefreshed');\n            }\n            \n        } catch (error) {\n            this.logger.error('Error getting new token', {\n                error: error.message\n            });\n            \n            // Show error state\n            const statusBox = document.getElementById('global-token-status');\n            if (statusBox) {\n                statusBox.className = 'global-token-status error';\n                const icon = statusBox.querySelector('.global-token-icon');\n                const text = statusBox.querySelector('.global-token-text');\n                if (icon) icon.textContent = '❌';\n                if (text) text.textContent = 'Token error';\n            }\n        }\n    }\n\n    /**\n     * Get subsystem status for health checks\n     */\n    getStatus() {\n        return {\n            name: 'GlobalTokenManagerSubsystem',\n            initialized: this.isInitialized,\n            destroyed: this.isDestroyed,\n            timerActive: !!this.globalTokenTimer,\n            updateInterval: this.updateInterval\n        };\n    }\n}\n\nexport { GlobalTokenManagerSubsystem };\nexport default GlobalTokenManagerSubsystem;\n","/**\n * @fileoverview Winston-compatible logger for frontend/browser environment\n * \n * This module provides a Winston-like logging interface for the frontend\n * that maintains consistency with server-side Winston logging while\n * working within browser constraints.\n * \n * Features:\n * - Winston-compatible API (info, warn, error, debug)\n * - Structured logging with metadata\n * - Timestamp formatting\n * - Log level filtering\n * - Console and server transport support\n * - Error stack trace handling\n * - Environment-aware configuration\n */\n\n/**\n * Winston-compatible logger for browser environment\n */\nclass WinstonLogger {\n    constructor(options = {}) {\n        this.level = options.level || this.getDefaultLevel();\n        this.service = options.service || 'pingone-import-frontend';\n        this.environment = options.environment || (process.env.NODE_ENV || 'development');\n        this.enableServerLogging = options.enableServerLogging !== false;\n        this.enableConsoleLogging = options.enableConsoleLogging !== false;\n        \n        // Log level hierarchy\n        this.levels = {\n            error: 0,\n            warn: 1,\n            info: 2,\n            debug: 3\n        };\n        \n        // Initialize transports\n        this.transports = [];\n        this.initializeTransports();\n    }\n    \n    /**\n     * Get default log level based on environment\n     */\n    getDefaultLevel() {\n        if (this.environment === 'production') {\n            return 'info';\n        } else if (this.environment === 'test') {\n            return 'warn';\n        } else {\n            return 'debug';\n        }\n    }\n    \n    /**\n     * Initialize logging transports\n     */\n    initializeTransports() {\n        // Console transport\n        if (this.enableConsoleLogging) {\n            this.transports.push({\n                name: 'console',\n                log: (level, message, meta) => this.logToConsole(level, message, meta)\n            });\n        }\n        \n        // Server transport (if enabled)\n        if (this.enableServerLogging) {\n            this.transports.push({\n                name: 'server',\n                log: (level, message, meta) => this.logToServer(level, message, meta)\n            });\n        }\n    }\n    \n    /**\n     * Check if a log level should be logged\n     */\n    shouldLog(level) {\n        return this.levels[level] <= this.levels[this.level];\n    }\n    \n    /**\n     * Format timestamp\n     */\n    formatTimestamp() {\n        return new Date().toISOString();\n    }\n    \n    /**\n     * Format log entry\n     */\n    formatLogEntry(level, message, meta = {}) {\n        const timestamp = this.formatTimestamp();\n        \n        return {\n            timestamp,\n            level,\n            message,\n            service: this.service,\n            environment: this.environment,\n            ...meta\n        };\n    }\n    \n    /**\n     * Log to console with Winston-like formatting\n     */\n    logToConsole(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        const logEntry = this.formatLogEntry(level, message, meta);\n        const timestamp = logEntry.timestamp;\n        const levelUpper = level.toUpperCase();\n        \n        // Create formatted console message\n        let consoleMessage = `[${timestamp}] [${this.service}] ${levelUpper}: ${message}`;\n        \n        // Add metadata if present\n        if (Object.keys(meta).length > 0) {\n            consoleMessage += `\\n${JSON.stringify(meta, null, 2)}`;\n        }\n        \n        // Use appropriate console method\n        switch (level) {\n            case 'error':\n                console.error(consoleMessage);\n                break;\n            case 'warn':\n                console.warn(consoleMessage);\n                break;\n            case 'info':\n                console.info(consoleMessage);\n                break;\n            case 'debug':\n                console.debug(consoleMessage);\n                break;\n            default:\n                console.log(consoleMessage);\n        }\n    }\n    \n    /**\n     * Log to server via API endpoint\n     */\n    async logToServer(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        try {\n            // Format the request body according to the API expectations\n            const requestBody = {\n                message,\n                level,\n                data: meta,\n                source: 'frontend'\n            };\n            \n            // Send to server logging endpoint\n            await fetch('/api/logs/ui', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestBody)\n            });\n        } catch (error) {\n            // Handle connection refused errors silently during startup\n            if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {\n                // Don't log connection refused errors to avoid console spam during startup\n                return;\n            }\n            // Fallback to console if server logging fails\n            console.warn('Server logging failed, falling back to console:', error.message);\n            this.logToConsole(level, message, meta);\n        }\n    }\n    \n    /**\n     * Main logging method\n     */\n    log(level, message, meta = {}) {\n        if (!this.shouldLog(level)) return;\n        \n        // Send to all transports\n        this.transports.forEach(transport => {\n            try {\n                transport.log(level, message, meta);\n            } catch (error) {\n                console.error(`Error in ${transport.name} transport:`, error);\n            }\n        });\n    }\n    \n    /**\n     * Log info level message\n     */\n    info(message, meta = {}) {\n        this.log('info', message, meta);\n    }\n    \n    /**\n     * Log warn level message\n     */\n    warn(message, meta = {}) {\n        this.log('warn', message, meta);\n    }\n    \n    /**\n     * Log error level message\n     */\n    error(message, meta = {}) {\n        this.log('error', message, meta);\n    }\n    \n    /**\n     * Log debug level message\n     */\n    debug(message, meta = {}) {\n        this.log('debug', message, meta);\n    }\n    \n    /**\n     * Log error with stack trace\n     */\n    errorWithStack(message, error, meta = {}) {\n        const errorMeta = {\n            ...meta,\n            error: {\n                message: error.message,\n                stack: error.stack,\n                code: error.code,\n                name: error.name\n            }\n        };\n        \n        this.error(message, errorMeta);\n    }\n    \n    /**\n     * Create child logger with additional metadata\n     */\n    child(additionalMeta = {}) {\n        const childLogger = new WinstonLogger({\n            level: this.level,\n            service: this.service,\n            environment: this.environment,\n            enableServerLogging: this.enableServerLogging,\n            enableConsoleLogging: this.enableConsoleLogging\n        });\n        \n        // Override formatLogEntry to include additional metadata\n        childLogger.formatLogEntry = (level, message, meta = {}) => {\n            const baseEntry = this.formatLogEntry(level, message, meta);\n            return {\n                ...baseEntry,\n                ...additionalMeta\n            };\n        };\n        \n        return childLogger;\n    }\n    \n    /**\n     * Set log level\n     */\n    setLevel(level) {\n        if (this.levels.hasOwnProperty(level)) {\n            this.level = level;\n        } else {\n            this.warn(`Invalid log level: ${level}`);\n        }\n    }\n    \n    /**\n     * Enable/disable server logging\n     */\n    setServerLogging(enabled) {\n        this.enableServerLogging = enabled;\n        \n        // Update transports\n        this.transports = this.transports.filter(t => t.name !== 'server');\n        if (enabled) {\n            this.transports.push({\n                name: 'server',\n                log: (level, message, meta) => this.logToServer(level, message, meta)\n            });\n        }\n    }\n    \n    /**\n     * Enable/disable console logging\n     */\n    setConsoleLogging(enabled) {\n        this.enableConsoleLogging = enabled;\n        \n        // Update transports\n        this.transports = this.transports.filter(t => t.name !== 'console');\n        if (enabled) {\n            this.transports.push({\n                name: 'console',\n                log: (level, message, meta) => this.logToConsole(level, message, meta)\n            });\n        }\n    }\n}\n\n/**\n * Create default logger instance\n */\nexport function createWinstonLogger(options = {}) {\n    return new WinstonLogger(options);\n}\n\n/**\n * Create component-specific logger\n */\nexport function createComponentLogger(component, options = {}) {\n    return createWinstonLogger({\n        ...options,\n        service: `${options.service || 'pingone-import'}-${component}`\n    });\n}\n\n/**\n * Default logger instances\n */\nexport const defaultLogger = createWinstonLogger();\nexport const apiLogger = createComponentLogger('api');\nexport const uiLogger = createComponentLogger('ui');\nexport const fileLogger = createComponentLogger('file');\nexport const settingsLogger = createComponentLogger('settings');\nexport const tokenLogger = createComponentLogger('token');\n\n// Export the class for custom instances\nexport { WinstonLogger }; ","/**\n * Token Notification Subsystem\n * Handles user notifications for invalid/missing tokens and disabled functionality\n */\n\nimport { createWinstonLogger } from '../utils/winston-logger.js';\n\nexport class TokenNotificationSubsystem {\n    constructor(logger, eventBus, navigationSubsystem) {\n        this.logger = logger || createWinstonLogger({\n            serviceName: 'token-notification-subsystem',\n            environment: 'development'\n        });\n        \n        this.eventBus = eventBus;\n        this.navigationSubsystem = navigationSubsystem;\n        this.isInitialized = false;\n        this.isDestroyed = false;\n        \n        // Notification state\n        this.currentNotification = null;\n        this.notificationElement = null;\n        this.lastTokenCheck = null;\n        this.checkInterval = null;\n        \n        this.logger.info('Token Notification Subsystem initialized');\n    }\n\n    /**\n     * Initialize the subsystem\n     */\n    async init() {\n        if (this.isInitialized || this.isDestroyed) {\n            return;\n        }\n\n        try {\n            this.logger.debug('Initializing Token Notification Subsystem...');\n            \n            // Create notification container\n            this.createNotificationContainer();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Start token monitoring\n            this.startTokenMonitoring();\n            \n            // Initial token check\n            this.checkTokenStatus();\n            \n            this.isInitialized = true;\n            this.eventBus.emit('tokenNotification:initialized');\n            this.logger.info('Token Notification Subsystem initialized successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize Token Notification Subsystem', {\n                error: error.message,\n                stack: error.stack\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Destroy the subsystem\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n\n        this.logger.debug('Destroying Token Notification Subsystem...');\n        \n        // Clear monitoring\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n        \n        // Remove notification\n        this.hideNotification();\n        \n        // Remove notification container\n        if (this.notificationElement) {\n            this.notificationElement.remove();\n            this.notificationElement = null;\n        }\n        \n        // Mark as destroyed\n        this.isDestroyed = true;\n        this.isInitialized = false;\n        \n        this.logger.info('Token Notification Subsystem destroyed');\n    }\n\n    /**\n     * Create notification container in DOM\n     */\n    createNotificationContainer() {\n        // Remove existing container if it exists\n        const existing = document.getElementById('token-notification-container');\n        if (existing) {\n            existing.remove();\n        }\n        \n        // Create new container\n        this.notificationElement = document.createElement('div');\n        this.notificationElement.id = 'token-notification-container';\n        this.notificationElement.className = 'token-notification-container';\n        this.notificationElement.style.display = 'none';\n        \n        // Insert at top of main content area\n        const mainContent = document.querySelector('.main-content') || document.body;\n        mainContent.insertBefore(this.notificationElement, mainContent.firstChild);\n        \n        this.logger.debug('Token notification container created');\n    }\n\n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Listen for token events\n        this.eventBus.on('token:refreshed', () => {\n            this.logger.debug('Token refreshed event received');\n            this.checkTokenStatus();\n        });\n        \n        this.eventBus.on('token:expired', () => {\n            this.logger.debug('Token expired event received');\n            this.showTokenExpiredNotification();\n        });\n        \n        this.eventBus.on('token:error', () => {\n            this.logger.debug('Token error event received');\n            this.showTokenErrorNotification();\n        });\n        \n        // Listen for settings changes\n        this.eventBus.on('settings:updated', () => {\n            this.logger.debug('Settings updated event received');\n            this.checkTokenStatus();\n        });\n        \n        this.logger.debug('Token notification event listeners set up');\n    }\n\n    /**\n     * Start token monitoring\n     */\n    startTokenMonitoring() {\n        // Check token status every 30 seconds\n        this.checkInterval = setInterval(() => {\n            this.checkTokenStatus();\n        }, 30000);\n        \n        this.logger.debug('Token monitoring started');\n    }\n\n    /**\n     * Check current token status and show appropriate notification\n     */\n    checkTokenStatus() {\n        try {\n            const tokenInfo = this.getTokenInfo();\n            \n            if (!tokenInfo.hasToken) {\n                this.showNoTokenNotification();\n            } else if (tokenInfo.timeLeft <= 0) {\n                this.showTokenExpiredNotification();\n            } else if (tokenInfo.timeLeft <= 300) { // 5 minutes\n                this.showTokenExpiringNotification(tokenInfo.timeLeft);\n            } else {\n                this.hideNotification();\n            }\n            \n            this.lastTokenCheck = Date.now();\n            \n        } catch (error) {\n            this.logger.error('Error checking token status', {\n                error: error.message\n            });\n            this.showTokenErrorNotification();\n        }\n    }\n\n    /**\n     * Get token information from localStorage\n     */\n    getTokenInfo() {\n        try {\n            const token = localStorage.getItem('pingone_worker_token');\n            const expiry = localStorage.getItem('pingone_token_expiry');\n            \n            if (!token || !expiry) {\n                return { hasToken: false, timeLeft: 0 };\n            }\n            \n            const expiryTime = parseInt(expiry, 10);\n            const currentTime = Math.floor(Date.now() / 1000);\n            const timeLeft = expiryTime - currentTime;\n            \n            return {\n                hasToken: true,\n                timeLeft: Math.max(0, timeLeft),\n                token: token.substring(0, 20) + '...' // Truncated for logging\n            };\n            \n        } catch (error) {\n            this.logger.error('Error getting token info', {\n                error: error.message\n            });\n            return { hasToken: false, timeLeft: 0 };\n        }\n    }\n\n    /**\n     * Show notification for missing token\n     */\n    showNoTokenNotification() {\n        const message = `\n            <div class=\"token-notification-content\">\n                <div class=\"token-notification-icon\">🔒</div>\n                <div class=\"token-notification-text\">\n                    <h4>Authentication Required</h4>\n                    <p>No valid PingOne token found. Most functionality is disabled until you authenticate.</p>\n                    <p><strong>What you can do:</strong></p>\n                    <ul>\n                        <li>Go to <strong>Settings</strong> to configure your PingOne credentials</li>\n                        <li>Use the <strong>Get Token</strong> button to authenticate</li>\n                        <li>Check the token status widget in the sidebar</li>\n                    </ul>\n                </div>\n                <div class=\"token-notification-actions\">\n                    <button id=\"go-to-settings-btn\" class=\"btn btn-primary btn-sm\">Go to Settings</button>\n                    <button onclick=\"this.parentElement.parentElement.parentElement.style.display='none'\" class=\"btn btn-secondary btn-sm\">Dismiss</button>\n                </div>\n            </div>\n        `;\n        \n        this.showNotification(message, 'no-token');\n    }\n\n    /**\n     * Show notification for expired token\n     */\n    showTokenExpiredNotification() {\n        const message = `\n            <div class=\"token-notification-content\">\n                <div class=\"token-notification-icon\">⏰</div>\n                <div class=\"token-notification-text\">\n                    <h4>Token Expired</h4>\n                    <p>Your PingOne authentication token has expired. Please get a new token to continue using the application.</p>\n                </div>\n                <div class=\"token-notification-actions\">\n                    <button onclick=\"window.app?.subsystems?.globalTokenManager?.refreshToken?.()\" class=\"btn btn-warning btn-sm\">Refresh Token</button>\n                    <button onclick=\"this.parentElement.parentElement.parentElement.style.display='none'\" class=\"btn btn-secondary btn-sm\">Dismiss</button>\n                </div>\n            </div>\n        `;\n        \n        this.showNotification(message, 'expired-token');\n    }\n\n    /**\n     * Show notification for expiring token\n     */\n    showTokenExpiringNotification(timeLeft) {\n        const minutes = Math.floor(timeLeft / 60);\n        const seconds = timeLeft % 60;\n        const timeString = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;\n        \n        const message = `\n            <div class=\"token-notification-content\">\n                <div class=\"token-notification-icon\">⚠️</div>\n                <div class=\"token-notification-text\">\n                    <h4>Token Expiring Soon</h4>\n                    <p>Your PingOne token will expire in <strong>${timeString}</strong>. Consider refreshing it to avoid interruption.</p>\n                </div>\n                <div class=\"token-notification-actions\">\n                    <button onclick=\"window.app?.subsystems?.globalTokenManager?.refreshToken?.()\" class=\"btn btn-warning btn-sm\">Refresh Now</button>\n                    <button onclick=\"this.parentElement.parentElement.parentElement.style.display='none'\" class=\"btn btn-secondary btn-sm\">Dismiss</button>\n                </div>\n            </div>\n        `;\n        \n        this.showNotification(message, 'expiring-token');\n    }\n\n    /**\n     * Show notification for token error\n     */\n    showTokenErrorNotification() {\n        const message = `\n            <div class=\"token-notification-content\">\n                <div class=\"token-notification-icon\">❌</div>\n                <div class=\"token-notification-text\">\n                    <h4>Token Error</h4>\n                    <p>There was an error with your authentication token. Please check your settings and try again.</p>\n                </div>\n                <div class=\"token-notification-actions\">\n                    <button onclick=\"window.location.hash='settings'\" class=\"btn btn-primary btn-sm\">Check Settings</button>\n                    <button onclick=\"this.parentElement.parentElement.parentElement.style.display='none'\" class=\"btn btn-secondary btn-sm\">Dismiss</button>\n                </div>\n            </div>\n        `;\n        \n        this.showNotification(message, 'error-token');\n    }\n\n    /**\n     * Show notification with given content and type\n     */\n    showNotification(content, type) {\n        if (!this.notificationElement) {\n            this.logger.warn('Notification element not available');\n            return;\n        }\n        \n        // Don't show the same notification repeatedly\n        if (this.currentNotification === type) {\n            return;\n        }\n        \n        this.notificationElement.innerHTML = content;\n        this.notificationElement.className = `token-notification-container ${type}`;\n        this.notificationElement.style.display = 'block';\n        \n        this.currentNotification = type;\n\n        this.logger.debug('Token notification shown', { type });\n\n        // Add event listener for the 'Go to Settings' button if it exists\n        const goToSettingsBtn = this.notificationElement.querySelector('#go-to-settings-btn');\n        if (goToSettingsBtn) {\n            goToSettingsBtn.addEventListener('click', (e) => {\n                e.preventDefault();\n                if (this.navigationSubsystem) {\n                    this.navigationSubsystem.navigateToView('settings');\n                } else {\n                    this.logger.error('NavigationSubsystem not available.');\n                    // Fallback for safety\n                    window.location.hash = 'settings';\n                }\n            });\n        }\n    }\n\n    /**\n     * Hide current notification\n     */\n    hideNotification() {\n        if (this.notificationElement) {\n            this.notificationElement.style.display = 'none';\n            this.notificationElement.innerHTML = '';\n        }\n        \n        this.currentNotification = null;\n        this.logger.debug('Token notification hidden');\n    }\n}\n\nexport default TokenNotificationSubsystem;\n","/**\n * Advanced Real-time Features Subsystem\n * \n * Provides advanced real-time capabilities including:\n * - Multi-user collaboration and presence\n * - Live progress sharing across sessions\n * - Real-time notifications and alerts\n * - Collaborative operation management\n * - Live analytics and metrics streaming\n * - Cross-session synchronization\n */\n\nexport class AdvancedRealtimeSubsystem {\n    constructor(logger, eventBus, realtimeCommunication, sessionSubsystem, progressSubsystem) {\n        this.logger = logger;\n        this.eventBus = eventBus;\n        this.realtimeCommunication = realtimeCommunication;\n        this.sessionSubsystem = sessionSubsystem;\n        this.progressSubsystem = progressSubsystem;\n        \n        // Multi-user state management\n        this.activeUsers = new Map();\n        this.collaborationRooms = new Map();\n        this.sharedOperations = new Map();\n        \n        // Real-time features state\n        this.liveProgressStreams = new Map();\n        this.notificationQueues = new Map();\n        this.analyticsStreams = new Map();\n        \n        // Configuration\n        this.config = {\n            maxUsersPerRoom: 10,\n            progressUpdateInterval: 1000,\n            presenceUpdateInterval: 5000,\n            notificationRetention: 100,\n            analyticsBufferSize: 1000\n        };\n        \n        this.logger.info('Advanced Real-time Features Subsystem initialized');\n    }\n    \n    /**\n     * Initialize the advanced real-time subsystem\n     */\n    async init() {\n        try {\n            // Set up EventBus listeners for real-time coordination\n            this.setupEventBusListeners();\n            \n            // Initialize multi-user presence system\n            await this.initializePresenceSystem();\n            \n            // Set up live progress sharing\n            await this.initializeLiveProgressSharing();\n            \n            // Initialize real-time notifications\n            await this.initializeNotificationSystem();\n            \n            // Set up collaborative operation management\n            await this.initializeCollaborativeOperations();\n            \n            // Initialize live analytics streaming\n            await this.initializeLiveAnalytics();\n            \n            this.logger.info('Advanced Real-time Features Subsystem initialized successfully');\n            this.eventBus.emit('subsystem:ready', { subsystem: 'advanced-realtime' });\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize Advanced Real-time Features Subsystem', error);\n            this.eventBus.emit('subsystem:error', { subsystem: 'advanced-realtime', error });\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up EventBus listeners for real-time coordination\n     */\n    setupEventBusListeners() {\n        this.logger.debug('Setting up EventBus listeners for advanced real-time features');\n        \n        // User session events\n        this.eventBus.on('session:user-joined', (data) => this.handleUserJoined(data));\n        this.eventBus.on('session:user-left', (data) => this.handleUserLeft(data));\n        this.eventBus.on('session:activity-update', (data) => this.handleActivityUpdate(data));\n        \n        // Operation events for collaboration\n        this.eventBus.on('operation:started', (data) => this.handleOperationStarted(data));\n        this.eventBus.on('operation:progress', (data) => this.handleOperationProgress(data));\n        this.eventBus.on('operation:completed', (data) => this.handleOperationCompleted(data));\n        this.eventBus.on('operation:failed', (data) => this.handleOperationFailed(data));\n        \n        // Progress events for live sharing\n        this.eventBus.on('progress:updated', (data) => this.handleProgressUpdate(data));\n        this.eventBus.on('progress:milestone', (data) => this.handleProgressMilestone(data));\n        \n        // Analytics events for live streaming\n        this.eventBus.on('analytics:metric-update', (data) => this.handleAnalyticsUpdate(data));\n        this.eventBus.on('analytics:performance-data', (data) => this.handlePerformanceData(data));\n        \n        this.logger.debug('EventBus listeners set up for advanced real-time features');\n    }\n    \n    /**\n     * Initialize multi-user presence system\n     */\n    async initializePresenceSystem() {\n        this.logger.debug('Initializing multi-user presence system');\n        \n        // Set up presence broadcasting\n        this.presenceInterval = setInterval(() => {\n            this.broadcastPresence();\n        }, this.config.presenceUpdateInterval);\n        \n        // Listen for presence updates from other users\n        this.realtimeCommunication.on('user-presence', (data) => {\n            this.handlePresenceUpdate(data);\n        });\n        \n        // Handle user connection/disconnection\n        this.realtimeCommunication.on('user-connected', (data) => {\n            this.handleUserConnected(data);\n        });\n        \n        this.realtimeCommunication.on('user-disconnected', (data) => {\n            this.handleUserDisconnected(data);\n        });\n        \n        this.logger.debug('Multi-user presence system initialized');\n    }\n    \n    /**\n     * Initialize live progress sharing\n     */\n    async initializeLiveProgressSharing() {\n        this.logger.debug('Initializing live progress sharing');\n        \n        // Set up progress streaming\n        this.progressInterval = setInterval(() => {\n            this.streamProgressUpdates();\n        }, this.config.progressUpdateInterval);\n        \n        // Listen for shared progress updates\n        this.realtimeCommunication.on('progress-update', (data) => {\n            this.handleSharedProgressUpdate(data);\n        });\n        \n        // Handle progress synchronization requests\n        this.realtimeCommunication.on('progress-sync-request', (data) => {\n            this.handleProgressSyncRequest(data);\n        });\n        \n        this.logger.debug('Live progress sharing initialized');\n    }\n\n    /**\n     * Broadcast presence to connected users\n     */\n    broadcastPresence() {\n        try {\n            if (!this.currentRoom || !this.currentUser) {\n                return;\n            }\n\n            const presenceData = {\n                roomId: this.currentRoom,\n                userId: this.currentUser.id || 'anonymous',\n                userName: this.currentUser.name || 'Anonymous User',\n                status: 'active',\n                lastActivity: new Date().toISOString(),\n                timestamp: new Date().toISOString()\n            };\n\n            // Broadcast presence to room\n            this.realtimeCommunication.emit('user-presence', presenceData);\n            \n            // Update local presence\n            this.activeUsers.set(presenceData.userId, {\n                ...presenceData,\n                joinedAt: this.activeUsers.get(presenceData.userId)?.joinedAt || new Date()\n            });\n            \n            // Emit local event for UI updates\n            this.eventBus.emit('realtime:presence-broadcasted', presenceData);\n            \n            this.logger.debug('Presence broadcasted', {\n                roomId: this.currentRoom,\n                userId: presenceData.userId\n            });\n        } catch (error) {\n            this.logger.error('Failed to broadcast presence', error);\n        }\n    }\n\n    /**\n     * Stream progress updates to connected users\n     */\n    streamProgressUpdates() {\n        try {\n            if (!this.currentRoom || !this.progressSubsystem) {\n                return;\n            }\n\n            // Get current progress from progress subsystem\n            const progressData = this.progressSubsystem.getCurrentProgress();\n            \n            if (progressData && progressData.isActive) {\n                const updateData = {\n                    roomId: this.currentRoom,\n                    userId: this.currentUser?.id || 'anonymous',\n                    userName: this.currentUser?.name || 'Anonymous User',\n                    progress: {\n                        operationType: progressData.operationType,\n                        percentage: progressData.percentage,\n                        currentStep: progressData.currentStep,\n                        totalSteps: progressData.totalSteps,\n                        message: progressData.message,\n                        timestamp: new Date().toISOString()\n                    }\n                };\n\n                // Broadcast progress update to room\n                this.realtimeCommunication.emit('progress-update', updateData);\n                \n                // Update local shared progress\n                this.sharedProgress.set(updateData.userId, updateData.progress);\n                \n                // Emit local event for UI updates\n                this.eventBus.emit('realtime:progress-streamed', updateData);\n                \n                this.logger.debug('Progress update streamed', {\n                    roomId: this.currentRoom,\n                    userId: updateData.userId,\n                    percentage: progressData.percentage\n                });\n            }\n        } catch (error) {\n            this.logger.error('Failed to stream progress updates', error);\n        }\n    }\n    \n    /**\n     * Initialize real-time notification system\n     */\n    async initializeNotificationSystem() {\n        this.logger.debug('Initializing real-time notification system');\n        \n        // Listen for notification events\n        this.realtimeCommunication.on('notification', (data) => {\n            this.handleIncomingNotification(data);\n        });\n        \n        // Set up notification broadcasting\n        this.eventBus.on('notification:send', (data) => {\n            this.broadcastNotification(data);\n        });\n        \n        this.logger.debug('Real-time notification system initialized');\n    }\n    \n    /**\n     * Initialize collaborative operation management\n     */\n    async initializeCollaborativeOperations() {\n        this.logger.debug('Initializing collaborative operation management');\n        \n        // Listen for collaborative operation events\n        this.realtimeCommunication.on('operation-request', (data) => {\n            this.handleOperationRequest(data);\n        });\n        \n        this.realtimeCommunication.on('operation-lock', (data) => {\n            this.handleOperationLock(data);\n        });\n        \n        this.realtimeCommunication.on('operation-unlock', (data) => {\n            this.handleOperationUnlock(data);\n        });\n        \n        this.logger.debug('Collaborative operation management initialized');\n    }\n    \n    /**\n     * Initialize live analytics streaming\n     */\n    async initializeLiveAnalytics() {\n        this.logger.debug('Initializing live analytics streaming');\n        \n        // Set up analytics data streaming\n        this.analyticsInterval = setInterval(() => {\n            this.streamAnalyticsData();\n        }, 5000); // Stream analytics every 5 seconds\n        \n        // Listen for analytics updates from other sessions\n        this.realtimeCommunication.on('analytics-update', (data) => {\n            this.handleAnalyticsStreamUpdate(data);\n        });\n        \n        this.logger.debug('Live analytics streaming initialized');\n    }\n\n    /**\n     * Stream analytics data to connected users\n     */\n    streamAnalyticsData() {\n        try {\n            if (!this.currentRoom || !this.analyticsDashboard) {\n                return;\n            }\n\n            // Get current analytics data from analytics dashboard subsystem\n            const analyticsData = this.analyticsDashboard.getAnalyticsDashboardData('5m');\n            \n            if (analyticsData) {\n                const streamData = {\n                    roomId: this.currentRoom,\n                    userId: this.currentUser?.id || 'anonymous',\n                    analytics: {\n                        systemMetrics: analyticsData.systemMetrics,\n                        operationSummary: analyticsData.operationSummary,\n                        recentActivity: analyticsData.recentActivity?.slice(0, 5), // Last 5 activities\n                        timestamp: new Date().toISOString()\n                    }\n                };\n\n                // Broadcast analytics update to room\n                this.realtimeCommunication.emit('analytics-update', streamData);\n                \n                // Emit local event for UI updates\n                this.eventBus.emit('realtime:analytics-streamed', streamData);\n                \n                this.logger.debug('Analytics data streamed', {\n                    roomId: this.currentRoom,\n                    userId: streamData.userId,\n                    metricsCount: Object.keys(streamData.analytics.systemMetrics || {}).length\n                });\n            }\n        } catch (error) {\n            this.logger.error('Failed to stream analytics data', error);\n        }\n    }\n    \n    /**\n     * Join a collaboration room\n     */\n    async joinCollaborationRoom(roomId, userInfo) {\n        this.logger.info('Joining collaboration room', { roomId, userId: userInfo.id });\n        \n        try {\n            // Check room capacity\n            if (this.collaborationRooms.has(roomId)) {\n                const room = this.collaborationRooms.get(roomId);\n                if (room.users.size >= this.config.maxUsersPerRoom) {\n                    throw new Error('Collaboration room is at capacity');\n                }\n            } else {\n                // Create new room\n                this.collaborationRooms.set(roomId, {\n                    id: roomId,\n                    users: new Map(),\n                    operations: new Map(),\n                    createdAt: new Date(),\n                    lastActivity: new Date()\n                });\n            }\n            \n            const room = this.collaborationRooms.get(roomId);\n            room.users.set(userInfo.id, {\n                ...userInfo,\n                joinedAt: new Date(),\n                lastSeen: new Date(),\n                isActive: true\n            });\n            \n            // Broadcast user joined event\n            this.broadcastToRoom(roomId, 'user-joined', {\n                roomId,\n                user: userInfo,\n                totalUsers: room.users.size\n            });\n            \n            // Send room state to new user\n            this.sendToUser(userInfo.id, 'room-state', {\n                roomId,\n                users: Array.from(room.users.values()),\n                operations: Array.from(room.operations.values())\n            });\n            \n            this.eventBus.emit('collaboration:user-joined', { roomId, user: userInfo });\n            \n            return {\n                success: true,\n                roomId,\n                userCount: room.users.size,\n                users: Array.from(room.users.values())\n            };\n            \n        } catch (error) {\n            this.logger.error('Failed to join collaboration room', { roomId, error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Leave a collaboration room\n     */\n    async leaveCollaborationRoom(roomId, userId) {\n        this.logger.info('Leaving collaboration room', { roomId, userId });\n        \n        try {\n            if (!this.collaborationRooms.has(roomId)) {\n                return { success: true, message: 'Room does not exist' };\n            }\n            \n            const room = this.collaborationRooms.get(roomId);\n            const user = room.users.get(userId);\n            \n            if (user) {\n                room.users.delete(userId);\n                \n                // Broadcast user left event\n                this.broadcastToRoom(roomId, 'user-left', {\n                    roomId,\n                    userId,\n                    user,\n                    totalUsers: room.users.size\n                });\n                \n                // Clean up empty rooms\n                if (room.users.size === 0) {\n                    this.collaborationRooms.delete(roomId);\n                    this.logger.debug('Removed empty collaboration room', { roomId });\n                }\n                \n                this.eventBus.emit('collaboration:user-left', { roomId, userId, user });\n            }\n            \n            return {\n                success: true,\n                roomId,\n                userCount: room.users.size\n            };\n            \n        } catch (error) {\n            this.logger.error('Failed to leave collaboration room', { roomId, userId, error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Start live progress sharing for an operation\n     */\n    async startLiveProgressSharing(operationId, config = {}) {\n        this.logger.info('Starting live progress sharing', { operationId });\n        \n        try {\n            const progressStream = {\n                operationId,\n                startTime: new Date(),\n                lastUpdate: new Date(),\n                subscribers: new Set(),\n                config: {\n                    updateInterval: config.updateInterval || this.config.progressUpdateInterval,\n                    includeMetrics: config.includeMetrics || true,\n                    includeErrors: config.includeErrors || true,\n                    maxHistory: config.maxHistory || 100\n                },\n                history: [],\n                currentProgress: {\n                    percentage: 0,\n                    stage: 'initializing',\n                    message: 'Starting operation...',\n                    metrics: {}\n                }\n            };\n            \n            this.liveProgressStreams.set(operationId, progressStream);\n            \n            // Broadcast progress sharing started\n            this.broadcastProgressEvent('progress-sharing-started', {\n                operationId,\n                config: progressStream.config\n            });\n            \n            this.eventBus.emit('progress-sharing:started', { operationId, config: progressStream.config });\n            \n            return { success: true, operationId, streamId: operationId };\n            \n        } catch (error) {\n            this.logger.error('Failed to start live progress sharing', { operationId, error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Subscribe to live progress updates\n     */\n    async subscribeLiveProgress(operationId, subscriberId) {\n        this.logger.debug('Subscribing to live progress', { operationId, subscriberId });\n        \n        if (!this.liveProgressStreams.has(operationId)) {\n            throw new Error(`Progress stream not found for operation: ${operationId}`);\n        }\n        \n        const stream = this.liveProgressStreams.get(operationId);\n        stream.subscribers.add(subscriberId);\n        \n        // Send current progress state to new subscriber\n        this.sendProgressUpdate(subscriberId, {\n            operationId,\n            progress: stream.currentProgress,\n            history: stream.history.slice(-10) // Send last 10 updates\n        });\n        \n        this.logger.debug('Subscribed to live progress', { operationId, subscriberId, totalSubscribers: stream.subscribers.size });\n        \n        return { success: true, operationId, subscriberId };\n    }\n    \n    /**\n     * Send real-time notification\n     */\n    async sendRealtimeNotification(notification) {\n        this.logger.debug('Sending real-time notification', { type: notification.type, recipients: notification.recipients?.length });\n        \n        try {\n            const notificationData = {\n                id: this.generateId(),\n                timestamp: new Date(),\n                ...notification\n            };\n            \n            // Store in notification queues for recipients\n            if (notification.recipients) {\n                notification.recipients.forEach(recipientId => {\n                    if (!this.notificationQueues.has(recipientId)) {\n                        this.notificationQueues.set(recipientId, []);\n                    }\n                    \n                    const queue = this.notificationQueues.get(recipientId);\n                    queue.push(notificationData);\n                    \n                    // Maintain queue size\n                    if (queue.length > this.config.notificationRetention) {\n                        queue.shift();\n                    }\n                });\n            }\n            \n            // Broadcast notification\n            this.broadcastNotification(notificationData);\n            \n            this.eventBus.emit('notification:sent', notificationData);\n            \n            return { success: true, notificationId: notificationData.id };\n            \n        } catch (error) {\n            this.logger.error('Failed to send real-time notification', { error: error.message });\n            throw error;\n        }\n    }\n    \n    /**\n     * Get live analytics dashboard data\n     */\n    async getLiveAnalyticsDashboard() {\n        this.logger.debug('Getting live analytics dashboard data');\n        \n        try {\n            const dashboardData = {\n                timestamp: new Date(),\n                activeUsers: this.activeUsers.size,\n                collaborationRooms: this.collaborationRooms.size,\n                liveProgressStreams: this.liveProgressStreams.size,\n                totalNotifications: Array.from(this.notificationQueues.values()).reduce((sum, queue) => sum + queue.length, 0),\n                connectionStatus: this.realtimeCommunication.getConnectionStatus(),\n                systemMetrics: await this.getSystemMetrics(),\n                operationMetrics: await this.getOperationMetrics(),\n                userActivity: await this.getUserActivityMetrics()\n            };\n            \n            return dashboardData;\n            \n        } catch (error) {\n            this.logger.error('Failed to get live analytics dashboard data', { error: error.message });\n            throw error;\n        }\n    }\n    \n    // Event Handlers\n    \n    handleUserJoined(data) {\n        this.logger.debug('Handling user joined event', data);\n        this.activeUsers.set(data.userId, {\n            ...data,\n            joinedAt: new Date(),\n            lastActivity: new Date()\n        });\n        this.broadcastPresenceUpdate();\n    }\n    \n    handleUserLeft(data) {\n        this.logger.debug('Handling user left event', data);\n        this.activeUsers.delete(data.userId);\n        this.broadcastPresenceUpdate();\n    }\n    \n    handleOperationStarted(data) {\n        this.logger.debug('Handling operation started event', data);\n        if (data.shareProgress) {\n            this.startLiveProgressSharing(data.operationId, data.progressConfig);\n        }\n    }\n    \n    handleOperationProgress(data) {\n        this.logger.debug('Handling operation progress event', data);\n        if (this.liveProgressStreams.has(data.operationId)) {\n            this.updateLiveProgress(data.operationId, data.progress);\n        }\n    }\n    \n    handleProgressUpdate(data) {\n        this.logger.debug('Handling progress update event', data);\n        this.streamProgressUpdate(data);\n    }\n    \n    // Utility Methods\n    \n    broadcastToRoom(roomId, event, data) {\n        if (this.collaborationRooms.has(roomId)) {\n            const room = this.collaborationRooms.get(roomId);\n            room.users.forEach((user, userId) => {\n                this.sendToUser(userId, event, data);\n            });\n        }\n    }\n    \n    sendToUser(userId, event, data) {\n        // Send via real-time communication\n        if (this.realtimeCommunication.isConnected) {\n            this.realtimeCommunication.socket?.emit('user-message', {\n                targetUserId: userId,\n                event,\n                data\n            });\n        }\n    }\n    \n    broadcastPresenceUpdate() {\n        const presenceData = {\n            activeUsers: Array.from(this.activeUsers.values()),\n            timestamp: new Date()\n        };\n        \n        this.realtimeCommunication.socket?.emit('presence-update', presenceData);\n        this.eventBus.emit('presence:updated', presenceData);\n    }\n    \n    streamProgressUpdate(progressData) {\n        this.realtimeCommunication.socket?.emit('progress-stream', progressData);\n        this.eventBus.emit('progress-stream:update', progressData);\n    }\n    \n    broadcastNotification(notification) {\n        this.realtimeCommunication.socket?.emit('notification-broadcast', notification);\n    }\n    \n    generateId() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    async getSystemMetrics() {\n        return {\n            memoryUsage: performance.memory ? {\n                used: performance.memory.usedJSHeapSize,\n                total: performance.memory.totalJSHeapSize,\n                limit: performance.memory.jsHeapSizeLimit\n            } : null,\n            connectionLatency: await this.measureConnectionLatency(),\n            timestamp: new Date()\n        };\n    }\n    \n    async getOperationMetrics() {\n        return {\n            activeOperations: this.liveProgressStreams.size,\n            completedOperations: 0, // Would be tracked elsewhere\n            failedOperations: 0, // Would be tracked elsewhere\n            averageOperationTime: 0, // Would be calculated from history\n            timestamp: new Date()\n        };\n    }\n    \n    async getUserActivityMetrics() {\n        return {\n            activeUsers: this.activeUsers.size,\n            totalSessions: this.sessionSubsystem ? await this.sessionSubsystem.getActiveSessionCount() : 0,\n            averageSessionDuration: 0, // Would be calculated from session data\n            timestamp: new Date()\n        };\n    }\n    \n    async measureConnectionLatency() {\n        if (!this.realtimeCommunication.isConnected) return null;\n        \n        const start = performance.now();\n        return new Promise((resolve) => {\n            this.realtimeCommunication.socket?.emit('ping', start, (response) => {\n                const latency = performance.now() - start;\n                resolve(latency);\n            });\n            \n            // Timeout after 5 seconds\n            setTimeout(() => resolve(null), 5000);\n        });\n    }\n    \n    /**\n     * Cleanup and disconnect\n     */\n    async disconnect() {\n        this.logger.info('Disconnecting Advanced Real-time Features Subsystem');\n        \n        // Clear intervals\n        if (this.presenceInterval) clearInterval(this.presenceInterval);\n        if (this.progressInterval) clearInterval(this.progressInterval);\n        if (this.analyticsInterval) clearInterval(this.analyticsInterval);\n        \n        // Clear all data structures\n        this.activeUsers.clear();\n        this.collaborationRooms.clear();\n        this.sharedOperations.clear();\n        this.liveProgressStreams.clear();\n        this.notificationQueues.clear();\n        this.analyticsStreams.clear();\n        \n        this.logger.info('Advanced Real-time Features Subsystem disconnected');\n    }\n    \n    /**\n     * Get subsystem status\n     */\n    getStatus() {\n        return {\n            isInitialized: true,\n            activeUsers: this.activeUsers.size,\n            collaborationRooms: this.collaborationRooms.size,\n            liveProgressStreams: this.liveProgressStreams.size,\n            connectionStatus: this.realtimeCommunication.getConnectionStatus(),\n            timestamp: new Date()\n        };\n    }\n}\n","/**\n * Real-time Collaboration UI Component\n * \n * Provides a comprehensive user interface for real-time collaboration features including:\n * - Live user presence indicators\n * - Collaborative operation management\n * - Real-time progress sharing\n * - Live notifications and alerts\n * - Multi-user activity dashboard\n */\n\nexport class RealtimeCollaborationUI {\n    constructor(logger, eventBus, advancedRealtimeSubsystem, uiManager) {\n        this.logger = logger;\n        this.eventBus = eventBus;\n        this.advancedRealtime = advancedRealtimeSubsystem;\n        this.uiManager = uiManager;\n        \n        // UI state management\n        this.isVisible = false;\n        this.currentRoom = null;\n        this.activeUsers = new Map();\n        this.liveProgressStreams = new Map();\n        this.notifications = [];\n        \n        // UI elements\n        this.container = null;\n        this.presencePanel = null;\n        this.progressPanel = null;\n        this.notificationPanel = null;\n        this.collaborationPanel = null;\n        \n        this.logger.info('Real-time Collaboration UI initialized');\n    }\n    \n    /**\n     * Initialize the collaboration UI\n     */\n    async init() {\n        try {\n            // Create UI structure\n            this.createUIStructure();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Initialize UI components\n            await this.initializeComponents();\n            \n            this.logger.info('Real-time Collaboration UI initialized successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize Real-time Collaboration UI', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Create the main UI structure\n     */\n    createUIStructure() {\n        this.logger.debug('Creating real-time collaboration UI structure');\n        \n        // Main container\n        this.container = document.createElement('div');\n        this.container.id = 'realtime-collaboration-container';\n        this.container.className = 'realtime-collaboration-container hidden';\n        this.container.innerHTML = `\n            <div class=\"collaboration-header\">\n                <h3>\n                    <i class=\"fas fa-users\"></i>\n                    Real-time Collaboration\n                </h3>\n                <div class=\"collaboration-controls\">\n                    <button id=\"toggle-collaboration\" class=\"btn btn-sm btn-outline-primary\">\n                        <i class=\"fas fa-eye\"></i>\n                        <span>Show</span>\n                    </button>\n                    <button id=\"minimize-collaboration\" class=\"btn btn-sm btn-outline-secondary\">\n                        <i class=\"fas fa-minus\"></i>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"collaboration-content\">\n                <!-- User Presence Panel -->\n                <div class=\"collaboration-panel\" id=\"presence-panel\">\n                    <div class=\"panel-header\">\n                        <h4><i class=\"fas fa-user-friends\"></i> Active Users</h4>\n                        <span class=\"user-count badge badge-primary\">0</span>\n                    </div>\n                    <div class=\"panel-content\">\n                        <div id=\"active-users-list\" class=\"users-list\"></div>\n                        <div class=\"presence-controls\">\n                            <button id=\"join-room-btn\" class=\"btn btn-sm btn-success\">\n                                <i class=\"fas fa-sign-in-alt\"></i>\n                                Join Room\n                            </button>\n                            <button id=\"leave-room-btn\" class=\"btn btn-sm btn-warning hidden\">\n                                <i class=\"fas fa-sign-out-alt\"></i>\n                                Leave Room\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Live Progress Panel -->\n                <div class=\"collaboration-panel\" id=\"progress-panel\">\n                    <div class=\"panel-header\">\n                        <h4><i class=\"fas fa-chart-line\"></i> Live Progress</h4>\n                        <span class=\"progress-count badge badge-info\">0</span>\n                    </div>\n                    <div class=\"panel-content\">\n                        <div id=\"live-progress-list\" class=\"progress-list\"></div>\n                        <div class=\"progress-controls\">\n                            <button id=\"share-progress-btn\" class=\"btn btn-sm btn-primary\">\n                                <i class=\"fas fa-share\"></i>\n                                Share Progress\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Real-time Notifications Panel -->\n                <div class=\"collaboration-panel\" id=\"notification-panel\">\n                    <div class=\"panel-header\">\n                        <h4><i class=\"fas fa-bell\"></i> Live Notifications</h4>\n                        <span class=\"notification-count badge badge-warning\">0</span>\n                    </div>\n                    <div class=\"panel-content\">\n                        <div id=\"notifications-list\" class=\"notifications-list\"></div>\n                        <div class=\"notification-controls\">\n                            <button id=\"clear-notifications-btn\" class=\"btn btn-sm btn-outline-secondary\">\n                                <i class=\"fas fa-trash\"></i>\n                                Clear All\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Collaboration Analytics Panel -->\n                <div class=\"collaboration-panel\" id=\"analytics-panel\">\n                    <div class=\"panel-header\">\n                        <h4><i class=\"fas fa-analytics\"></i> Live Analytics</h4>\n                        <button id=\"refresh-analytics-btn\" class=\"btn btn-sm btn-outline-primary\">\n                            <i class=\"fas fa-sync\"></i>\n                        </button>\n                    </div>\n                    <div class=\"panel-content\">\n                        <div id=\"analytics-dashboard\" class=\"analytics-dashboard\">\n                            <div class=\"metric-card\">\n                                <div class=\"metric-label\">Connection Status</div>\n                                <div id=\"connection-status\" class=\"metric-value\">Disconnected</div>\n                            </div>\n                            <div class=\"metric-card\">\n                                <div class=\"metric-label\">Active Operations</div>\n                                <div id=\"active-operations\" class=\"metric-value\">0</div>\n                            </div>\n                            <div class=\"metric-card\">\n                                <div class=\"metric-label\">System Latency</div>\n                                <div id=\"system-latency\" class=\"metric-value\">--</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        // Add to page\n        document.body.appendChild(this.container);\n        \n        // Get panel references\n        this.presencePanel = document.getElementById('presence-panel');\n        this.progressPanel = document.getElementById('progress-panel');\n        this.notificationPanel = document.getElementById('notification-panel');\n        this.analyticsPanel = document.getElementById('analytics-panel');\n        \n        this.logger.debug('Real-time collaboration UI structure created');\n    }\n    \n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        this.logger.debug('Setting up real-time collaboration UI event listeners');\n        \n        // UI control events\n        document.getElementById('toggle-collaboration')?.addEventListener('click', () => {\n            this.toggleVisibility();\n        });\n        \n        document.getElementById('minimize-collaboration')?.addEventListener('click', () => {\n            this.minimize();\n        });\n        \n        document.getElementById('join-room-btn')?.addEventListener('click', () => {\n            this.showJoinRoomDialog();\n        });\n        \n        document.getElementById('leave-room-btn')?.addEventListener('click', () => {\n            this.leaveCurrentRoom();\n        });\n        \n        document.getElementById('share-progress-btn')?.addEventListener('click', () => {\n            this.showShareProgressDialog();\n        });\n        \n        document.getElementById('clear-notifications-btn')?.addEventListener('click', () => {\n            this.clearNotifications();\n        });\n        \n        document.getElementById('refresh-analytics-btn')?.addEventListener('click', () => {\n            this.refreshAnalytics();\n        });\n        \n        // EventBus listeners for real-time updates\n        this.eventBus.on('collaboration:user-joined', (data) => {\n            this.handleUserJoined(data);\n        });\n        \n        this.eventBus.on('collaboration:user-left', (data) => {\n            this.handleUserLeft(data);\n        });\n        \n        this.eventBus.on('progress-sharing:started', (data) => {\n            this.handleProgressSharingStarted(data);\n        });\n        \n        this.eventBus.on('progress-stream:update', (data) => {\n            this.handleProgressStreamUpdate(data);\n        });\n        \n        this.eventBus.on('notification:sent', (data) => {\n            this.handleNotificationReceived(data);\n        });\n        \n        this.eventBus.on('presence:updated', (data) => {\n            this.handlePresenceUpdate(data);\n        });\n        \n        this.logger.debug('Real-time collaboration UI event listeners set up');\n    }\n    \n    /**\n     * Initialize UI components\n     */\n    async initializeComponents() {\n        this.logger.debug('Initializing real-time collaboration UI components');\n        \n        // Initialize analytics dashboard\n        await this.initializeAnalyticsDashboard();\n        \n        // Set up periodic updates\n        this.setupPeriodicUpdates();\n        \n        this.logger.debug('Real-time collaboration UI components initialized');\n    }\n    \n    /**\n     * Initialize analytics dashboard\n     */\n    async initializeAnalyticsDashboard() {\n        try {\n            const dashboardData = await this.advancedRealtime.getLiveAnalyticsDashboard();\n            this.updateAnalyticsDashboard(dashboardData);\n        } catch (error) {\n            this.logger.error('Failed to initialize analytics dashboard', error);\n        }\n    }\n    \n    /**\n     * Set up periodic updates\n     */\n    setupPeriodicUpdates() {\n        // Update analytics every 5 seconds\n        this.analyticsInterval = setInterval(() => {\n            this.refreshAnalytics();\n        }, 5000);\n        \n        // Update presence every 10 seconds\n        this.presenceInterval = setInterval(() => {\n            this.refreshPresence();\n        }, 10000);\n    }\n    \n    /**\n     * Toggle visibility of the collaboration UI\n     */\n    toggleVisibility() {\n        this.isVisible = !this.isVisible;\n        \n        if (this.isVisible) {\n            this.container.classList.remove('hidden');\n            document.getElementById('toggle-collaboration').innerHTML = `\n                <i class=\"fas fa-eye-slash\"></i>\n                <span>Hide</span>\n            `;\n            this.refreshAll();\n        } else {\n            this.container.classList.add('hidden');\n            document.getElementById('toggle-collaboration').innerHTML = `\n                <i class=\"fas fa-eye\"></i>\n                <span>Show</span>\n            `;\n        }\n        \n        this.logger.debug('Collaboration UI visibility toggled', { isVisible: this.isVisible });\n    }\n    \n    /**\n     * Show join room dialog\n     */\n    showJoinRoomDialog() {\n        const roomId = prompt('Enter Room ID to join (or leave empty for default):') || 'default-room';\n        const userName = prompt('Enter your name:') || 'Anonymous User';\n        \n        if (roomId && userName) {\n            this.joinRoom(roomId, {\n                id: this.generateUserId(),\n                name: userName,\n                avatar: this.generateAvatar(userName),\n                joinedAt: new Date()\n            });\n        }\n    }\n    \n    /**\n     * Join a collaboration room\n     */\n    async joinRoom(roomId, userInfo) {\n        try {\n            this.logger.info('Joining collaboration room', { roomId, userName: userInfo.name });\n            \n            const result = await this.advancedRealtime.joinCollaborationRoom(roomId, userInfo);\n            \n            if (result.success) {\n                this.currentRoom = roomId;\n                this.updateRoomUI(result);\n                \n                // Show success notification\n                this.uiManager.showSuccess(`Joined room: ${roomId}`, `Connected with ${result.userCount} users`);\n                \n                // Update UI controls\n                document.getElementById('join-room-btn').classList.add('hidden');\n                document.getElementById('leave-room-btn').classList.remove('hidden');\n                \n                this.logger.info('Successfully joined collaboration room', result);\n            }\n            \n        } catch (error) {\n            this.logger.error('Failed to join collaboration room', error);\n            this.uiManager.showError('Failed to Join Room', error.message);\n        }\n    }\n    \n    /**\n     * Leave current room\n     */\n    async leaveCurrentRoom() {\n        if (!this.currentRoom) return;\n        \n        try {\n            const result = await this.advancedRealtime.leaveCollaborationRoom(this.currentRoom, this.getCurrentUserId());\n            \n            if (result.success) {\n                this.uiManager.showInfo('Left Room', `Left room: ${this.currentRoom}`);\n                \n                this.currentRoom = null;\n                this.clearRoomUI();\n                \n                // Update UI controls\n                document.getElementById('join-room-btn').classList.remove('hidden');\n                document.getElementById('leave-room-btn').classList.add('hidden');\n            }\n            \n        } catch (error) {\n            this.logger.error('Failed to leave collaboration room', error);\n            this.uiManager.showError('Failed to Leave Room', error.message);\n        }\n    }\n    \n    /**\n     * Show share progress dialog\n     */\n    showShareProgressDialog() {\n        // This would typically show a modal with current operations to share\n        const operationId = prompt('Enter Operation ID to share progress (or leave empty for current):') || 'current-operation';\n        \n        if (operationId) {\n            this.startProgressSharing(operationId);\n        }\n    }\n    \n    /**\n     * Start progress sharing for an operation\n     */\n    async startProgressSharing(operationId) {\n        try {\n            const result = await this.advancedRealtime.startLiveProgressSharing(operationId, {\n                updateInterval: 1000,\n                includeMetrics: true,\n                includeErrors: true\n            });\n            \n            if (result.success) {\n                this.uiManager.showSuccess('Progress Sharing Started', `Sharing progress for: ${operationId}`);\n                this.addProgressStream(operationId);\n            }\n            \n        } catch (error) {\n            this.logger.error('Failed to start progress sharing', error);\n            this.uiManager.showError('Failed to Share Progress', error.message);\n        }\n    }\n    \n    /**\n     * Update room UI with user information\n     */\n    updateRoomUI(roomData) {\n        const usersList = document.getElementById('active-users-list');\n        const userCount = document.querySelector('.user-count');\n        \n        // Update user count\n        userCount.textContent = roomData.userCount;\n        \n        // Update users list\n        usersList.innerHTML = '';\n        roomData.users.forEach(user => {\n            const userElement = this.createUserElement(user);\n            usersList.appendChild(userElement);\n        });\n    }\n    \n    /**\n     * Create user element for the users list\n     */\n    createUserElement(user) {\n        const userElement = document.createElement('div');\n        userElement.className = 'user-item';\n        userElement.innerHTML = `\n            <div class=\"user-avatar\">\n                <img src=\"${user.avatar}\" alt=\"${user.name}\" />\n                <div class=\"user-status ${user.isActive ? 'active' : 'inactive'}\"></div>\n            </div>\n            <div class=\"user-info\">\n                <div class=\"user-name\">${user.name}</div>\n                <div class=\"user-activity\">${this.formatLastActivity(user.lastSeen)}</div>\n            </div>\n        `;\n        return userElement;\n    }\n    \n    /**\n     * Add progress stream to UI\n     */\n    addProgressStream(operationId) {\n        const progressList = document.getElementById('live-progress-list');\n        const progressCount = document.querySelector('.progress-count');\n        \n        const progressElement = document.createElement('div');\n        progressElement.className = 'progress-item';\n        progressElement.id = `progress-${operationId}`;\n        progressElement.innerHTML = `\n            <div class=\"progress-header\">\n                <span class=\"progress-title\">${operationId}</span>\n                <span class=\"progress-percentage\">0%</span>\n            </div>\n            <div class=\"progress-bar\">\n                <div class=\"progress-fill\" style=\"width: 0%\"></div>\n            </div>\n            <div class=\"progress-details\">\n                <span class=\"progress-stage\">Initializing...</span>\n                <span class=\"progress-time\">Just started</span>\n            </div>\n        `;\n        \n        progressList.appendChild(progressElement);\n        \n        // Update count\n        progressCount.textContent = progressList.children.length;\n        \n        this.liveProgressStreams.set(operationId, progressElement);\n    }\n    \n    /**\n     * Update analytics dashboard\n     */\n    updateAnalyticsDashboard(data) {\n        document.getElementById('connection-status').textContent = \n            data.connectionStatus.isConnected ? 'Connected' : 'Disconnected';\n        document.getElementById('connection-status').className = \n            `metric-value ${data.connectionStatus.isConnected ? 'connected' : 'disconnected'}`;\n        \n        document.getElementById('active-operations').textContent = data.liveProgressStreams;\n        document.getElementById('system-latency').textContent = \n            data.systemMetrics.connectionLatency ? `${Math.round(data.systemMetrics.connectionLatency)}ms` : '--';\n    }\n    \n    /**\n     * Add notification to UI\n     */\n    addNotification(notification) {\n        const notificationsList = document.getElementById('notifications-list');\n        const notificationCount = document.querySelector('.notification-count');\n        \n        const notificationElement = document.createElement('div');\n        notificationElement.className = `notification-item ${notification.type}`;\n        notificationElement.innerHTML = `\n            <div class=\"notification-header\">\n                <span class=\"notification-type\">${notification.type.toUpperCase()}</span>\n                <span class=\"notification-time\">${this.formatTime(notification.timestamp)}</span>\n            </div>\n            <div class=\"notification-content\">\n                <div class=\"notification-title\">${notification.title}</div>\n                <div class=\"notification-message\">${notification.message}</div>\n            </div>\n        `;\n        \n        // Add to top of list\n        notificationsList.insertBefore(notificationElement, notificationsList.firstChild);\n        \n        // Limit notifications display\n        while (notificationsList.children.length > 10) {\n            notificationsList.removeChild(notificationsList.lastChild);\n        }\n        \n        // Update count\n        notificationCount.textContent = notificationsList.children.length;\n        \n        // Store in memory\n        this.notifications.unshift(notification);\n        if (this.notifications.length > 100) {\n            this.notifications.pop();\n        }\n    }\n    \n    // Event Handlers\n    \n    handleUserJoined(data) {\n        this.logger.debug('User joined collaboration room', data);\n        if (data.roomId === this.currentRoom) {\n            this.addNotification({\n                type: 'info',\n                title: 'User Joined',\n                message: `${data.user.name} joined the room`,\n                timestamp: new Date()\n            });\n            this.refreshPresence();\n        }\n    }\n    \n    handleUserLeft(data) {\n        this.logger.debug('User left collaboration room', data);\n        if (data.roomId === this.currentRoom) {\n            this.addNotification({\n                type: 'info',\n                title: 'User Left',\n                message: `${data.user.name} left the room`,\n                timestamp: new Date()\n            });\n            this.refreshPresence();\n        }\n    }\n    \n    handleProgressSharingStarted(data) {\n        this.logger.debug('Progress sharing started', data);\n        this.addProgressStream(data.operationId);\n    }\n    \n    handleProgressStreamUpdate(data) {\n        this.logger.debug('Progress stream update', data);\n        this.updateProgressStream(data.operationId, data);\n    }\n    \n    handleNotificationReceived(data) {\n        this.logger.debug('Notification received', data);\n        this.addNotification(data);\n    }\n    \n    handlePresenceUpdate(data) {\n        this.logger.debug('Presence update received', data);\n        this.updatePresenceDisplay(data);\n    }\n    \n    // Utility Methods\n    \n    async refreshAll() {\n        await Promise.all([\n            this.refreshAnalytics(),\n            this.refreshPresence()\n        ]);\n    }\n    \n    async refreshAnalytics() {\n        try {\n            const data = await this.advancedRealtime.getLiveAnalyticsDashboard();\n            this.updateAnalyticsDashboard(data);\n        } catch (error) {\n            this.logger.error('Failed to refresh analytics', error);\n        }\n    }\n    \n    async refreshPresence() {\n        // This would typically fetch current room state\n        if (this.currentRoom) {\n            // Update presence display\n        }\n    }\n    \n    clearNotifications() {\n        document.getElementById('notifications-list').innerHTML = '';\n        document.querySelector('.notification-count').textContent = '0';\n        this.notifications = [];\n    }\n    \n    minimize() {\n        this.container.classList.toggle('minimized');\n    }\n    \n    clearRoomUI() {\n        document.getElementById('active-users-list').innerHTML = '';\n        document.querySelector('.user-count').textContent = '0';\n    }\n    \n    updateProgressStream(operationId, data) {\n        const progressElement = this.liveProgressStreams.get(operationId);\n        if (progressElement) {\n            const percentage = data.progress?.percentage || 0;\n            const stage = data.progress?.stage || 'Unknown';\n            \n            progressElement.querySelector('.progress-percentage').textContent = `${percentage}%`;\n            progressElement.querySelector('.progress-fill').style.width = `${percentage}%`;\n            progressElement.querySelector('.progress-stage').textContent = stage;\n            progressElement.querySelector('.progress-time').textContent = this.formatTime(new Date());\n        }\n    }\n    \n    updatePresenceDisplay(data) {\n        // Update active users display\n        this.activeUsers.clear();\n        data.activeUsers.forEach(user => {\n            this.activeUsers.set(user.id, user);\n        });\n    }\n    \n    generateUserId() {\n        return `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    getCurrentUserId() {\n        // This would typically come from session or auth\n        return this.currentUserId || this.generateUserId();\n    }\n    \n    generateAvatar(name) {\n        // Generate a simple avatar URL based on name\n        return `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=007bff&color=fff&size=32`;\n    }\n    \n    formatTime(date) {\n        return new Intl.DateTimeFormat('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n        }).format(date);\n    }\n    \n    formatLastActivity(date) {\n        const now = new Date();\n        const diff = now - date;\n        \n        if (diff < 60000) return 'Just now';\n        if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;\n        if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;\n        return `${Math.floor(diff / 86400000)}d ago`;\n    }\n    \n    /**\n     * Cleanup and destroy\n     */\n    destroy() {\n        this.logger.info('Destroying Real-time Collaboration UI');\n        \n        // Clear intervals\n        if (this.analyticsInterval) clearInterval(this.analyticsInterval);\n        if (this.presenceInterval) clearInterval(this.presenceInterval);\n        \n        // Remove from DOM\n        if (this.container && this.container.parentNode) {\n            this.container.parentNode.removeChild(this.container);\n        }\n        \n        // Clear data\n        this.activeUsers.clear();\n        this.liveProgressStreams.clear();\n        this.notifications = [];\n        \n        this.logger.info('Real-time Collaboration UI destroyed');\n    }\n}\n","/**\n * Analytics Dashboard Subsystem\n * \n * Provides comprehensive analytics and metrics collection including:\n * - Real-time system performance monitoring\n * - Operation analytics and insights\n * - User activity and collaboration metrics\n * - Historical trend analysis\n * - Resource usage tracking\n * - Performance benchmarking\n */\n\nexport class AnalyticsDashboardSubsystem {\n    constructor(logger, eventBus, advancedRealtimeSubsystem, progressSubsystem, sessionSubsystem) {\n        this.logger = logger;\n        this.eventBus = eventBus;\n        this.advancedRealtime = advancedRealtimeSubsystem;\n        this.progressSubsystem = progressSubsystem;\n        this.sessionSubsystem = sessionSubsystem;\n        \n        // Analytics data storage\n        this.metrics = {\n            system: {\n                performance: [],\n                resources: [],\n                connections: [],\n                errors: []\n            },\n            operations: {\n                imports: [],\n                exports: [],\n                modifications: [],\n                deletions: []\n            },\n            users: {\n                sessions: [],\n                activity: [],\n                collaboration: []\n            },\n            realtime: {\n                connections: [],\n                messages: [],\n                latency: []\n            }\n        };\n        \n        // Configuration\n        this.config = {\n            metricsRetention: 24 * 60 * 60 * 1000, // 24 hours\n            samplingInterval: 5 * 60 * 1000, // 5 minutes for main updates\n            quickSamplingInterval: 30 * 1000, // 30 seconds for quick updates\n            batchSize: 100,\n            maxDataPoints: 1000,\n            alertThresholds: {\n                memoryUsage: 0.8,\n                connectionLatency: 1000,\n                errorRate: 0.05,\n                operationFailureRate: 0.1\n            }\n        };\n        \n        // Session tracking\n        this.sessionStart = Date.now();\n        this.lastActivity = Date.now();\n        this.activityHistory = [];\n        this.performanceBaseline = null;\n        \n        // State management\n        this.isCollecting = false;\n        this.collectionInterval = null;\n        this.alertsEnabled = true;\n        this.dashboardSubscribers = new Set();\n        \n        this.logger.info('Analytics Dashboard Subsystem initialized');\n    }\n    \n    /**\n     * Initialize the analytics dashboard subsystem\n     */\n    async init() {\n        try {\n            // Set up EventBus listeners for analytics collection\n            this.setupEventBusListeners();\n            \n            // Initialize metrics collection\n            await this.initializeMetricsCollection();\n            \n            // Set up periodic data collection\n            this.startDataCollection();\n            \n            // Initialize alert system\n            this.initializeAlertSystem();\n            \n            this.logger.info('Analytics Dashboard Subsystem initialized successfully');\n            this.eventBus.emit('subsystem:ready', { subsystem: 'analytics-dashboard' });\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize Analytics Dashboard Subsystem', error);\n            this.eventBus.emit('subsystem:error', { subsystem: 'analytics-dashboard', error });\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up EventBus listeners for analytics collection\n     */\n    setupEventBusListeners() {\n        this.logger.debug('Setting up EventBus listeners for analytics collection');\n        \n        // Operation events\n        this.eventBus.on('operation:started', (data) => this.recordOperationStart(data));\n        this.eventBus.on('operation:completed', (data) => this.recordOperationComplete(data));\n        this.eventBus.on('operation:failed', (data) => this.recordOperationFailure(data));\n        this.eventBus.on('operation:progress', (data) => this.recordOperationProgress(data));\n        \n        // System events\n        this.eventBus.on('app:global-error', (data) => this.recordSystemError(data));\n        this.eventBus.on('app:page-loaded', (data) => this.recordSystemPerformance(data));\n        this.eventBus.on('subsystem:error', (data) => this.recordSubsystemError(data));\n        \n        // User activity events\n        this.eventBus.on('session:user-joined', (data) => this.recordUserActivity(data));\n        this.eventBus.on('session:user-left', (data) => this.recordUserActivity(data));\n        this.eventBus.on('collaboration:user-joined', (data) => this.recordCollaborationActivity(data));\n        this.eventBus.on('collaboration:user-left', (data) => this.recordCollaborationActivity(data));\n        \n        // Real-time events\n        this.eventBus.on('progress-stream:update', (data) => this.recordRealtimeActivity(data));\n        this.eventBus.on('notification:sent', (data) => this.recordRealtimeActivity(data));\n        \n        this.logger.debug('EventBus listeners set up for analytics collection');\n    }\n    \n    /**\n     * Initialize metrics collection\n     */\n    async initializeMetricsCollection() {\n        this.logger.debug('Initializing metrics collection');\n        \n        // Initialize baseline metrics\n        await this.collectSystemMetrics();\n        await this.collectOperationMetrics();\n        await this.collectUserMetrics();\n        await this.collectRealtimeMetrics();\n        \n        this.logger.debug('Metrics collection initialized');\n    }\n\n    /**\n     * Collect system metrics\n     */\n    async collectSystemMetrics() {\n        try {\n            const systemMetrics = this.getSystemPerformanceMetrics();\n            this.addMetric('system.performance', systemMetrics);\n            \n            const resourceMetrics = this.getResourceUsageMetrics();\n            this.addMetric('system.resources', resourceMetrics);\n            \n            const connectionMetrics = this.getConnectionMetrics();\n            this.addMetric('system.connections', connectionMetrics);\n            \n            this.logger.debug('System metrics collected');\n        } catch (error) {\n            this.logger.error('Failed to collect system metrics', error);\n        }\n    }\n\n    /**\n     * Collect operation metrics\n     */\n    async collectOperationMetrics() {\n        try {\n            // Get operation counts and performance from other subsystems\n            const operationData = {\n                timestamp: new Date(),\n                totalOperations: this.metrics.operations.imports.length + \n                               this.metrics.operations.exports.length + \n                               this.metrics.operations.modifications.length + \n                               this.metrics.operations.deletions.length,\n                successfulOperations: this.getSuccessfulOperationsCount(),\n                failedOperations: this.getFailedOperationsCount(),\n                averageResponseTime: this.getAverageResponseTime()\n            };\n            \n            this.addMetric('operations.summary', operationData);\n            this.logger.debug('Operation metrics collected');\n        } catch (error) {\n            this.logger.error('Failed to collect operation metrics', error);\n        }\n    }\n\n    /**\n     * Collect user metrics\n     */\n    async collectUserMetrics() {\n        try {\n            const userMetrics = {\n                timestamp: new Date(),\n                activeSessions: this.sessionSubsystem ? await this.sessionSubsystem.getActiveSessionCount() : 0,\n                totalUsers: this.metrics.users.sessions.length,\n                collaborativeUsers: this.metrics.users.collaboration.length,\n                averageSessionDuration: this.getAverageSessionDuration()\n            };\n            \n            this.addMetric('users.activity', userMetrics);\n            this.logger.debug('User metrics collected');\n        } catch (error) {\n            this.logger.error('Failed to collect user metrics', error);\n        }\n    }\n\n    /**\n     * Collect realtime metrics\n     */\n    async collectRealtimeMetrics() {\n        try {\n            const realtimeMetrics = this.getRealtimeMetrics();\n            this.addMetric('realtime.performance', realtimeMetrics);\n            \n            this.logger.debug('Realtime metrics collected');\n        } catch (error) {\n            this.logger.error('Failed to collect realtime metrics', error);\n        }\n    }\n\n    /**\n     * Helper methods for metrics calculation\n     */\n    getSuccessfulOperationsCount() {\n        let count = 0;\n        Object.keys(this.metrics.operations).forEach(type => {\n            count += this.metrics.operations[type].filter(op => op.status === 'success').length;\n        });\n        return count;\n    }\n\n    getFailedOperationsCount() {\n        let count = 0;\n        Object.keys(this.metrics.operations).forEach(type => {\n            count += this.metrics.operations[type].filter(op => op.status === 'failed').length;\n        });\n        return count;\n    }\n\n    getAverageResponseTime() {\n        let totalTime = 0;\n        let count = 0;\n        \n        Object.keys(this.metrics.operations).forEach(type => {\n            this.metrics.operations[type].forEach(op => {\n                if (op.responseTime) {\n                    totalTime += op.responseTime;\n                    count++;\n                }\n            });\n        });\n        \n        return count > 0 ? totalTime / count : 0;\n    }\n\n    getAverageSessionDuration() {\n        if (this.metrics.users.sessions.length === 0) return 0;\n        \n        let totalDuration = 0;\n        let count = 0;\n        \n        this.metrics.users.sessions.forEach(session => {\n            if (session.duration) {\n                totalDuration += session.duration;\n                count++;\n            }\n        });\n        \n        return count > 0 ? totalDuration / count : 0;\n    }\n\n    getRecentAverageLatency() {\n        const recentMetrics = this.metrics.realtime.latency.slice(-10); // Last 10 measurements\n        if (recentMetrics.length === 0) return null;\n        \n        const totalLatency = recentMetrics.reduce((sum, metric) => sum + metric.value, 0);\n        return totalLatency / recentMetrics.length;\n    }\n\n    getRecentErrorRate() {\n        const now = new Date();\n        const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n        \n        const recentErrors = this.metrics.system.errors.filter(error => \n            new Date(error.timestamp) > oneHourAgo\n        );\n        \n        const recentOperations = [];\n        Object.keys(this.metrics.operations).forEach(type => {\n            recentOperations.push(...this.metrics.operations[type].filter(op => \n                new Date(op.timestamp) > oneHourAgo\n            ));\n        });\n        \n        if (recentOperations.length === 0) return 0;\n        return recentErrors.length / recentOperations.length;\n    }\n    \n    /**\n     * Start periodic data collection\n     */\n    startDataCollection() {\n        if (this.isCollecting) return;\n        \n        this.isCollecting = true;\n        this.collectionInterval = setInterval(async () => {\n            try {\n                await this.collectPeriodicMetrics();\n                this.cleanupOldData();\n                this.checkAlertThresholds();\n                this.notifyDashboardSubscribers();\n            } catch (error) {\n                this.logger.error('Error during periodic data collection', error);\n            }\n        }, this.config.samplingInterval);\n        \n        this.logger.info('Started periodic data collection', { interval: this.config.samplingInterval });\n    }\n    \n    /**\n     * Stop data collection\n     */\n    stopDataCollection() {\n        if (!this.isCollecting) return;\n        \n        this.isCollecting = false;\n        if (this.collectionInterval) {\n            clearInterval(this.collectionInterval);\n            this.collectionInterval = null;\n        }\n        \n        this.logger.info('Stopped periodic data collection');\n    }\n    \n    /**\n     * Collect periodic metrics\n     */\n    async collectPeriodicMetrics() {\n        const timestamp = new Date();\n        \n        try {\n            // System performance metrics\n            const systemMetrics = await this.getSystemPerformanceMetrics();\n            this.addMetric('system.performance', {\n                timestamp,\n                ...systemMetrics\n            });\n        } catch (error) {\n            this.logger.debug('Failed to collect system performance metrics', error);\n        }\n        \n        try {\n            // Resource usage metrics\n            const resourceMetrics = await this.getResourceUsageMetrics();\n            this.addMetric('system.resources', {\n                timestamp,\n                ...resourceMetrics\n            });\n        } catch (error) {\n            this.logger.debug('Failed to collect resource usage metrics', error);\n        }\n        \n        try {\n            // Connection metrics\n            const connectionMetrics = await this.getConnectionMetrics();\n            this.addMetric('system.connections', {\n                timestamp,\n                ...connectionMetrics\n            });\n        } catch (error) {\n            this.logger.debug('Failed to collect connection metrics', error);\n        }\n        \n        try {\n            // Real-time metrics\n            const realtimeMetrics = await this.getRealtimeMetrics();\n            this.addMetric('realtime.connections', {\n                timestamp,\n                ...realtimeMetrics\n            });\n        } catch (error) {\n            this.logger.debug('Failed to collect realtime metrics', error);\n        }\n    }\n    \n    /**\n     * Get comprehensive system performance metrics\n     */\n    async getSystemPerformanceMetrics() {\n        const now = Date.now();\n        const metrics = {\n            timestamp: new Date(),\n            \n            // Memory metrics (if available)\n            memory: this.getMemoryMetrics(),\n            \n            // Performance timing metrics\n            timing: this.getPerformanceTimingMetrics(),\n            \n            // CPU usage estimation\n            cpu: this.getCPUUsageEstimate(),\n            \n            // Session and time metrics\n            session: {\n                uptime: now - this.sessionStart,\n                sessionDuration: this.formatDuration(now - this.sessionStart),\n                lastActivity: now - this.lastActivity,\n                currentTime: new Date().toLocaleString(),\n                timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n            },\n            \n            // Browser and system info\n            browser: {\n                userAgent: navigator.userAgent,\n                language: navigator.language,\n                platform: navigator.platform,\n                cookieEnabled: navigator.cookieEnabled,\n                onLine: navigator.onLine,\n                hardwareConcurrency: navigator.hardwareConcurrency || 'Unknown'\n            },\n            \n            // Screen and viewport metrics\n            display: {\n                screenWidth: screen.width,\n                screenHeight: screen.height,\n                viewportWidth: window.innerWidth,\n                viewportHeight: window.innerHeight,\n                colorDepth: screen.colorDepth,\n                pixelRatio: window.devicePixelRatio || 1\n            },\n            \n            // Network connection info (if available)\n            connection: this.getConnectionInfo(),\n            \n            // Performance metrics\n            performance: {\n                loadTime: this.getPageLoadTime(),\n                domContentLoaded: this.getDOMContentLoadedTime(),\n                resourcesLoaded: performance.getEntriesByType('resource').length,\n                navigationTiming: this.getNavigationTiming()\n            }\n        };\n        \n        return metrics;\n    }\n    \n    /**\n     * Get memory metrics (if available)\n     */\n    getMemoryMetrics() {\n        if (performance.memory) {\n            const memory = performance.memory;\n            return {\n                used: memory.usedJSHeapSize,\n                total: memory.totalJSHeapSize,\n                limit: memory.jsHeapSizeLimit,\n                usagePercentage: Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100),\n                formattedUsed: this.formatBytes(memory.usedJSHeapSize),\n                formattedTotal: this.formatBytes(memory.totalJSHeapSize),\n                formattedLimit: this.formatBytes(memory.jsHeapSizeLimit)\n            };\n        }\n        return null;\n    }\n    \n    /**\n     * Get performance timing metrics\n     */\n    getPerformanceTimingMetrics() {\n        if (performance.timing) {\n            const timing = performance.timing;\n            return {\n                navigationStart: timing.navigationStart,\n                domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,\n                loadComplete: timing.loadEventEnd - timing.navigationStart,\n                domInteractive: timing.domInteractive - timing.navigationStart,\n                firstPaint: this.getFirstPaintTime()\n            };\n        }\n        return null;\n    }\n    \n    /**\n     * Estimate CPU usage based on performance metrics\n     */\n    getCPUUsageEstimate() {\n        try {\n            const startTime = performance.now();\n            // Simple CPU-intensive operation for estimation\n            let iterations = 0;\n            const testDuration = 10; // 10ms test\n            const endTime = startTime + testDuration;\n            \n            while (performance.now() < endTime) {\n                iterations++;\n            }\n            \n            // Normalize based on expected performance\n            const expectedIterations = 100000; // Baseline for comparison\n            const cpuScore = Math.min(100, Math.round((iterations / expectedIterations) * 100));\n            \n            return {\n                estimatedUsage: Math.max(0, 100 - cpuScore),\n                performanceScore: cpuScore,\n                iterations: iterations,\n                testDuration: testDuration\n            };\n        } catch (error) {\n            return { estimatedUsage: 'Unknown', error: error.message };\n        }\n    }\n    \n    /**\n     * Get connection information\n     */\n    getConnectionInfo() {\n        if (navigator.connection || navigator.mozConnection || navigator.webkitConnection) {\n            const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n            return {\n                effectiveType: connection.effectiveType || 'Unknown',\n                downlink: connection.downlink || 'Unknown',\n                rtt: connection.rtt || 'Unknown',\n                saveData: connection.saveData || false\n            };\n        }\n        return { status: 'Connection API not available' };\n    }\n    \n    /**\n     * Get page load time\n     */\n    getPageLoadTime() {\n        if (performance.timing) {\n            return performance.timing.loadEventEnd - performance.timing.navigationStart;\n        }\n        return null;\n    }\n    \n    /**\n     * Get DOM content loaded time\n     */\n    getDOMContentLoadedTime() {\n        if (performance.timing) {\n            return performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart;\n        }\n        return null;\n    }\n    \n    /**\n     * Get first paint time\n     */\n    getFirstPaintTime() {\n        try {\n            const paintEntries = performance.getEntriesByType('paint');\n            const firstPaint = paintEntries.find(entry => entry.name === 'first-paint');\n            return firstPaint ? firstPaint.startTime : null;\n        } catch (error) {\n            return null;\n        }\n    }\n    \n    /**\n     * Get navigation timing\n     */\n    getNavigationTiming() {\n        if (performance.getEntriesByType) {\n            const navEntries = performance.getEntriesByType('navigation');\n            if (navEntries.length > 0) {\n                const nav = navEntries[0];\n                return {\n                    type: nav.type,\n                    redirectCount: nav.redirectCount,\n                    transferSize: nav.transferSize,\n                    encodedBodySize: nav.encodedBodySize,\n                    decodedBodySize: nav.decodedBodySize\n                };\n            }\n        }\n        return null;\n    }\n    \n    /**\n     * Format bytes to human readable format\n     */\n    formatBytes(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    \n    /**\n     * Format duration to human readable format\n     */\n    formatDuration(milliseconds) {\n        const seconds = Math.floor(milliseconds / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        \n        if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;\n        if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n        if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n        return `${seconds}s`;\n    }\n    \n    /**\n     * Record user activity\n     */\n    recordActivity(type, data = {}) {\n        this.lastActivity = Date.now();\n        const activity = {\n            timestamp: new Date(),\n            type: type,\n            data: data\n        };\n        \n        this.activityHistory.push(activity);\n        \n        // Keep only recent activities (last 100)\n        if (this.activityHistory.length > 100) {\n            this.activityHistory = this.activityHistory.slice(-100);\n        }\n        \n        this.addMetric('users.activity', activity);\n    }\n    \n    /**\n     * Get recent activity for dashboard\n     */\n    getRecentActivity(limit = 10) {\n        return this.activityHistory.slice(-limit).reverse();\n    }\n    \n    /**\n     * Get comprehensive dashboard data\n     */\n    async getDashboardData() {\n        const systemMetrics = await this.getSystemPerformanceMetrics();\n        const recentActivity = this.getRecentActivity(15);\n        \n        return {\n            timestamp: new Date(),\n            system: systemMetrics,\n            activity: recentActivity,\n            summary: {\n                totalOperations: this.getTotalOperationsCount(),\n                successfulOperations: this.getSuccessfulOperationsCount(),\n                failedOperations: this.getFailedOperationsCount(),\n                averageResponseTime: this.getAverageResponseTime(),\n                errorRate: this.getErrorRate(),\n                activeSubsystems: this.getActiveSubsystemCount(),\n                uptime: this.formatDuration(Date.now() - this.sessionStart)\n            },\n            alerts: this.alerts || []\n        };\n    }\n    \n    /**\n     * Get total operations count\n     */\n    getTotalOperationsCount() {\n        let count = 0;\n        Object.keys(this.metrics.operations).forEach(type => {\n            count += this.metrics.operations[type].length;\n        });\n        return count;\n    }\n    \n    /**\n     * Get resource usage metrics\n     */\n    async getResourceUsageMetrics() {\n        try {\n            return {\n                timestamp: new Date(),\n                \n                // DOM elements count\n                domElements: document.querySelectorAll('*').length,\n                \n                // Storage usage\n                localStorage: this.getLocalStorageUsage(),\n                sessionStorage: this.getSessionStorageUsage(),\n                \n                // Event listeners count (estimated)\n                eventListeners: this.getEventListenerCount(),\n                \n                // Active timers and intervals (estimated)\n                activeTimers: this.getActiveTimerCount(),\n                \n                // Resource entries from Performance API\n                resourceEntries: performance.getEntriesByType('resource').length,\n                \n                // Network resources\n                networkResources: this.getNetworkResourceCount(),\n                \n                // Memory metrics (if available)\n                memoryUsage: this.getMemoryMetrics(),\n                \n                // Total metrics stored\n                totalMetrics: this.getTotalMetricsCount()\n            };\n        } catch (error) {\n            this.logger.debug('Failed to collect resource usage metrics', error);\n            return {\n                timestamp: new Date(),\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * Get connection metrics\n     */\n    async getConnectionMetrics() {\n        const connectionStatus = this.advancedRealtime?.realtimeCommunication?.getConnectionStatus() || {};\n        \n        return {\n            timestamp: new Date(),\n            isConnected: connectionStatus.isConnected || false,\n            connectionType: connectionStatus.connectionType || 'none',\n            reconnectAttempts: connectionStatus.reconnectAttempts || 0,\n            activeUsers: this.advancedRealtime?.activeUsers?.size || 0,\n            collaborationRooms: this.advancedRealtime?.collaborationRooms?.size || 0\n        };\n    }\n    \n    /**\n     * Get real-time metrics\n     */\n    async getRealtimeMetrics() {\n        return {\n            timestamp: new Date(),\n            liveProgressStreams: this.advancedRealtime?.liveProgressStreams?.size || 0,\n            notificationQueues: this.advancedRealtime?.notificationQueues?.size || 0,\n            analyticsStreams: this.advancedRealtime?.analyticsStreams?.size || 0,\n            messagesSent: this.getRealtimeMessageCount(),\n            messagesReceived: this.getRealtimeMessageCount('received')\n        };\n    }\n    \n    /**\n     * Record operation start\n     */\n    recordOperationStart(data) {\n        this.addMetric(`operations.${data.type || 'unknown'}`, {\n            timestamp: new Date(),\n            event: 'started',\n            operationId: data.operationId,\n            type: data.type,\n            userId: data.userId,\n            metadata: data.metadata || {}\n        });\n        \n        this.logger.debug('Recorded operation start', { type: data.type, operationId: data.operationId });\n    }\n    \n    /**\n     * Record operation completion\n     */\n    recordOperationComplete(data) {\n        this.addMetric(`operations.${data.type || 'unknown'}`, {\n            timestamp: new Date(),\n            event: 'completed',\n            operationId: data.operationId,\n            type: data.type,\n            duration: data.duration,\n            recordsProcessed: data.recordsProcessed,\n            success: true,\n            metadata: data.metadata || {}\n        });\n        \n        this.logger.debug('Recorded operation completion', { type: data.type, operationId: data.operationId });\n    }\n    \n    /**\n     * Record operation failure\n     */\n    recordOperationFailure(data) {\n        this.addMetric(`operations.${data.type || 'unknown'}`, {\n            timestamp: new Date(),\n            event: 'failed',\n            operationId: data.operationId,\n            type: data.type,\n            error: data.error,\n            duration: data.duration,\n            success: false,\n            metadata: data.metadata || {}\n        });\n        \n        this.logger.debug('Recorded operation failure', { type: data.type, operationId: data.operationId });\n    }\n    \n    /**\n     * Record system error\n     */\n    recordSystemError(data) {\n        const errorMetric = {\n            timestamp: new Date(),\n            type: 'system-error',\n            error: data.error || data.message || 'Unknown error',\n            stack: data.stack,\n            context: data.context || {},\n            severity: data.severity || 'error'\n        };\n        \n        this.addMetric('system.errors', errorMetric);\n        this.logger.debug('System error recorded', errorMetric);\n    }\n    \n    /**\n     * Record subsystem error\n     */\n    recordSubsystemError(data) {\n        const errorMetric = {\n            timestamp: new Date(),\n            type: 'subsystem-error',\n            subsystem: data.subsystem || 'unknown',\n            error: data.error?.message || data.error || 'Unknown subsystem error',\n            stack: data.error?.stack,\n            context: data.context || {},\n            severity: 'error'\n        };\n        \n        this.addMetric('system.errors', errorMetric);\n        this.logger.debug('Subsystem error recorded', errorMetric);\n    }\n    \n    /**\n     * Record user activity\n     */\n    recordUserActivity(data) {\n        this.addMetric('users.activity', {\n            timestamp: new Date(),\n            event: data.event || 'activity',\n            userId: data.userId,\n            sessionId: data.sessionId,\n            metadata: data.metadata || {}\n        });\n        \n        this.logger.debug('Recorded user activity', { event: data.event, userId: data.userId });\n    }\n    \n    /**\n     * Record collaboration activity\n     */\n    recordCollaborationActivity(data) {\n        this.addMetric('users.collaboration', {\n            timestamp: new Date(),\n            event: data.event || 'collaboration',\n            userId: data.userId || data.user?.id,\n            roomId: data.roomId,\n            userCount: data.totalUsers,\n            metadata: data.metadata || {}\n        });\n        \n        this.logger.debug('Recorded collaboration activity', { event: data.event, roomId: data.roomId });\n    }\n    \n    /**\n     * Record real-time activity\n     */\n    recordRealtimeActivity(data) {\n        this.addMetric('realtime.messages', {\n            timestamp: new Date(),\n            type: data.type || 'message',\n            operationId: data.operationId,\n            recipients: data.recipients?.length || 0,\n            metadata: data.metadata || {}\n        });\n        \n        this.logger.debug('Recorded real-time activity', { type: data.type });\n    }\n    \n    /**\n     * Get analytics dashboard data\n     */\n    async getAnalyticsDashboardData(timeRange = '1h') {\n        const endTime = new Date();\n        const startTime = new Date(endTime.getTime() - this.parseTimeRange(timeRange));\n        \n        try {\n            const dashboardData = {\n                timestamp: endTime,\n                timeRange,\n                summary: await this.getSummaryMetrics(startTime, endTime),\n                systemMetrics: await this.getSystemMetricsData(startTime, endTime),\n                operationMetrics: await this.getOperationMetricsData(startTime, endTime),\n                userMetrics: await this.getUserMetricsData(startTime, endTime),\n                realtimeMetrics: await this.getRealtimeMetricsData(startTime, endTime),\n                alerts: this.getActiveAlerts(),\n                trends: await this.getTrendAnalysis(startTime, endTime)\n            };\n            \n            return dashboardData;\n            \n        } catch (error) {\n            this.logger.error('Failed to get analytics dashboard data', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Get summary metrics\n     */\n    async getSummaryMetrics(startTime, endTime) {\n        return {\n            totalOperations: this.countMetricsInRange('operations', startTime, endTime),\n            successfulOperations: this.countSuccessfulOperations(startTime, endTime),\n            failedOperations: this.countFailedOperations(startTime, endTime),\n            activeUsers: this.advancedRealtime?.activeUsers?.size || 0,\n            systemErrors: this.countMetricsInRange('system.errors', startTime, endTime),\n            averageLatency: this.getAverageLatency(startTime, endTime),\n            memoryUsage: this.getCurrentMemoryUsage(),\n            connectionStatus: this.advancedRealtime?.realtimeCommunication?.getConnectionStatus()\n        };\n    }\n    \n    /**\n     * Get system metrics data for charts\n     */\n    async getSystemMetricsData(startTime, endTime) {\n        const performanceData = this.getMetricsInRange('system.performance', startTime, endTime);\n        const resourceData = this.getMetricsInRange('system.resources', startTime, endTime);\n        const connectionData = this.getMetricsInRange('system.connections', startTime, endTime);\n        \n        return {\n            performance: this.formatTimeSeriesData(performanceData, 'memory.usage'),\n            resources: this.formatTimeSeriesData(resourceData, 'domElements'),\n            connections: this.formatTimeSeriesData(connectionData, 'activeUsers'),\n            errors: this.getMetricsInRange('system.errors', startTime, endTime)\n        };\n    }\n    \n    /**\n     * Get operation metrics data for charts\n     */\n    async getOperationMetricsData(startTime, endTime) {\n        const imports = this.getMetricsInRange('operations.imports', startTime, endTime);\n        const exports = this.getMetricsInRange('operations.exports', startTime, endTime);\n        const modifications = this.getMetricsInRange('operations.modifications', startTime, endTime);\n        const deletions = this.getMetricsInRange('operations.deletions', startTime, endTime);\n        \n        return {\n            imports: this.aggregateOperationMetrics(imports),\n            exports: this.aggregateOperationMetrics(exports),\n            modifications: this.aggregateOperationMetrics(modifications),\n            deletions: this.aggregateOperationMetrics(deletions),\n            timeline: this.createOperationTimeline(startTime, endTime)\n        };\n    }\n    \n    /**\n     * Subscribe to dashboard updates\n     */\n    subscribeToDashboardUpdates(callback) {\n        this.dashboardSubscribers.add(callback);\n        return () => this.dashboardSubscribers.delete(callback);\n    }\n    \n    /**\n     * Notify dashboard subscribers\n     */\n    notifyDashboardSubscribers() {\n        if (this.dashboardSubscribers.size > 0) {\n            this.getAnalyticsDashboardData().then(data => {\n                this.dashboardSubscribers.forEach(callback => {\n                    try {\n                        callback(data);\n                    } catch (error) {\n                        this.logger.error('Error notifying dashboard subscriber', error);\n                    }\n                });\n            });\n        }\n    }\n    \n    // Utility Methods\n    \n    addMetric(category, data) {\n        const [main, sub] = category.split('.');\n        if (!this.metrics[main]) this.metrics[main] = {};\n        if (!this.metrics[main][sub]) this.metrics[main][sub] = [];\n        \n        this.metrics[main][sub].push(data);\n        \n        // Maintain max data points\n        if (this.metrics[main][sub].length > this.config.maxDataPoints) {\n            this.metrics[main][sub].shift();\n        }\n    }\n    \n    getMetricsInRange(category, startTime, endTime) {\n        const [main, sub] = category.split('.');\n        const metrics = this.metrics[main]?.[sub] || [];\n        \n        return metrics.filter(metric => \n            metric.timestamp >= startTime && metric.timestamp <= endTime\n        );\n    }\n    \n    countMetricsInRange(category, startTime, endTime) {\n        return this.getMetricsInRange(category, startTime, endTime).length;\n    }\n    \n    parseTimeRange(timeRange) {\n        const units = {\n            'm': 60 * 1000,\n            'h': 60 * 60 * 1000,\n            'd': 24 * 60 * 60 * 1000\n        };\n        \n        const match = timeRange.match(/^(\\d+)([mhd])$/);\n        if (!match) return 60 * 60 * 1000; // Default 1 hour\n        \n        const [, value, unit] = match;\n        return parseInt(value) * units[unit];\n    }\n    \n    cleanupOldData() {\n        const cutoffTime = new Date(Date.now() - this.config.metricsRetention);\n        \n        Object.keys(this.metrics).forEach(main => {\n            Object.keys(this.metrics[main]).forEach(sub => {\n                this.metrics[main][sub] = this.metrics[main][sub].filter(\n                    metric => metric.timestamp > cutoffTime\n                );\n            });\n        });\n    }\n    \n    async measureConnectionLatency() {\n        try {\n            if (!this.advancedRealtime?.realtimeCommunication?.isConnected) {\n                return null;\n            }\n            \n            if (!this.advancedRealtime.realtimeCommunication.socket) {\n                return null;\n            }\n            \n            const start = performance.now();\n            return new Promise((resolve) => {\n                try {\n                    this.advancedRealtime.realtimeCommunication.socket.emit('ping', start, () => {\n                        const latency = performance.now() - start;\n                        resolve(latency);\n                    });\n                    \n                    // Timeout after 3 seconds to prevent hanging\n                    setTimeout(() => resolve(null), 3000);\n                } catch (error) {\n                    this.logger.debug('Error emitting ping for latency measurement', error);\n                    resolve(null);\n                }\n            });\n        } catch (error) {\n            this.logger.debug('Error measuring connection latency', error);\n            return null;\n        }\n    }\n    \n    getActiveSubsystemCount() {\n        // This would typically come from the main app\n        return Object.keys(window.app?.subsystems || {}).length;\n    }\n    \n    getEventListenerCount() {\n        // EventBus doesn't have listenerCount method, return estimated count\n        try {\n            if (this.eventBus && this.eventBus._events) {\n                return Object.keys(this.eventBus._events).length;\n            }\n            return 0;\n        } catch (error) {\n            return 0;\n        }\n    }\n    \n    getRealtimeMessageCount(type = 'sent') {\n        // Return message count from advanced realtime subsystem if available\n        try {\n            if (this.advancedRealtime && this.advancedRealtime.getMessageCount) {\n                return this.advancedRealtime.getMessageCount(type);\n            }\n            // Fallback to estimated count\n            return this.advancedRealtime?.messageCount || 0;\n        } catch (error) {\n            return 0;\n        }\n    }\n    \n    getLocalStorageUsage() {\n        try {\n            let total = 0;\n            for (let key in localStorage) {\n                if (localStorage.hasOwnProperty(key)) {\n                    total += localStorage[key].length + key.length;\n                }\n            }\n            return total;\n        } catch (error) {\n            return 0;\n        }\n    }\n    \n    getSessionStorageUsage() {\n        try {\n            let total = 0;\n            for (let key in sessionStorage) {\n                if (sessionStorage.hasOwnProperty(key)) {\n                    total += sessionStorage[key].length + key.length;\n                }\n            }\n            return total;\n        } catch (error) {\n            return 0;\n        }\n    }\n\n    /**\n     * Get local storage usage\n     */\n    getLocalStorageUsage() {\n        try {\n            let total = 0;\n            for (let key in localStorage) {\n                if (localStorage.hasOwnProperty(key)) {\n                    total += localStorage[key].length + key.length;\n                }\n            }\n            return total;\n        } catch (error) {\n            return 0;\n        }\n    }\n\n    /**\n     * Get active timer count (estimated)\n     */\n    getActiveTimerCount() {\n        // This is an estimation as there's no direct way to count active timers\n        // We can track our own timers and make educated guesses\n        let count = 0;\n        \n        // Count our own timers\n        if (this.collectionInterval) count++;\n        if (this.alertCheckInterval) count++;\n        \n        // Estimate based on common patterns\n        // Most web apps have 5-20 active timers\n        return count + 5; // Base estimate\n    }\n\n    /**\n     * Get network resource count\n     */\n    getNetworkResourceCount() {\n        try {\n            const resources = performance.getEntriesByType('resource');\n            return {\n                total: resources.length,\n                scripts: resources.filter(r => r.name.includes('.js')).length,\n                stylesheets: resources.filter(r => r.name.includes('.css')).length,\n                images: resources.filter(r => /\\.(png|jpg|jpeg|gif|svg|webp)/.test(r.name)).length,\n                xhr: resources.filter(r => r.initiatorType === 'xmlhttprequest').length,\n                fetch: resources.filter(r => r.initiatorType === 'fetch').length\n            };\n        } catch (error) {\n            return { total: 0, error: error.message };\n        }\n    }\n    \n    /**\n     * Initialize alert system\n     */\n    initializeAlertSystem() {\n        this.alerts = [];\n        this.logger.debug('Alert system initialized');\n    }\n    \n    /**\n     * Check alert thresholds\n     */\n    checkAlertThresholds() {\n        if (!this.alertsEnabled) return;\n        \n        // Memory usage alert\n        if (performance.memory) {\n            const memoryUsage = performance.memory.usedJSHeapSize / performance.memory.totalJSHeapSize;\n            if (memoryUsage > this.config.alertThresholds.memoryUsage) {\n                this.createAlert('high-memory-usage', `Memory usage is ${(memoryUsage * 100).toFixed(1)}%`, 'warning');\n            }\n        }\n        \n        // Connection latency alert\n        const recentLatency = this.getRecentAverageLatency();\n        if (recentLatency && recentLatency > this.config.alertThresholds.connectionLatency) {\n            this.createAlert('high-latency', `Connection latency is ${recentLatency.toFixed(0)}ms`, 'warning');\n        }\n        \n        // Error rate alert\n        const errorRate = this.getRecentErrorRate();\n        if (errorRate > this.config.alertThresholds.errorRate) {\n            this.createAlert('high-error-rate', `Error rate is ${(errorRate * 100).toFixed(1)}%`, 'error');\n        }\n    }\n    \n    createAlert(id, message, severity) {\n        const alert = {\n            id,\n            message,\n            severity,\n            timestamp: new Date(),\n            acknowledged: false\n        };\n        \n        // Avoid duplicate alerts\n        if (!this.alerts.find(a => a.id === id && !a.acknowledged)) {\n            this.alerts.push(alert);\n            this.eventBus.emit('analytics:alert-created', alert);\n            this.logger.warn('Analytics alert created', alert);\n        }\n    }\n    \n    getActiveAlerts() {\n        return this.alerts.filter(alert => !alert.acknowledged);\n    }\n    \n    /**\n     * Cleanup and disconnect\n     */\n    async disconnect() {\n        this.logger.info('Disconnecting Analytics Dashboard Subsystem');\n        \n        this.stopDataCollection();\n        this.dashboardSubscribers.clear();\n        \n        // Clear metrics data\n        Object.keys(this.metrics).forEach(main => {\n            Object.keys(this.metrics[main]).forEach(sub => {\n                this.metrics[main][sub] = [];\n            });\n        });\n        \n        this.logger.info('Analytics Dashboard Subsystem disconnected');\n    }\n    \n    /**\n     * Get subsystem status\n     */\n    getStatus() {\n        return {\n            isInitialized: true,\n            isCollecting: this.isCollecting,\n            metricsCount: this.getTotalMetricsCount(),\n            alertsCount: this.getActiveAlerts().length,\n            subscribersCount: this.dashboardSubscribers.size,\n            timestamp: new Date()\n        };\n    }\n    \n    getTotalMetricsCount() {\n        let total = 0;\n        Object.keys(this.metrics).forEach(main => {\n            Object.keys(this.metrics[main]).forEach(sub => {\n                total += this.metrics[main][sub].length;\n            });\n        });\n        return total;\n    }\n}\n","/**\n * @fileoverview Testing Hub Component for PingOne Import Tool\n * \n * Provides comprehensive testing functionality including API testing,\n * UI component testing, system health checks, and integration testing.\n * \n * @version 1.0.0\n */\n\nclass TestingHub {\n    constructor(eventBus, subsystems = {}) {\n        this.eventBus = eventBus;\n        this.subsystems = subsystems;\n        this.testResults = new Map();\n        this.testStats = {\n            total: 0,\n            passed: 0,\n            failed: 0,\n            skipped: 0\n        };\n        \n        this.initialize();\n    }\n\n    /**\n     * Initialize the testing hub\n     */\n    initialize() {\n        this.setupEventListeners();\n        this.updateTestStats();\n        (window.logger?.info || console.log)('🧪 Testing Hub initialized');\n    }\n\n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        this.eventBus.on('test-completed', (data) => {\n            this.handleTestCompletion(data);\n        });\n\n        this.eventBus.on('test-failed', (data) => {\n            this.handleTestFailure(data);\n        });\n    }\n\n    /**\n     * Open API Testing Dashboard in new tab\n     */\n    openAPITestingDashboard() {\n        window.open('/api-testing-ui.html', '_blank');\n        this.logTest('API Testing Dashboard', 'opened', true);\n    }\n\n    /**\n     * Run quick API tests\n     */\n    async runQuickAPITests() {\n        const resultContainer = document.getElementById('api-test-results');\n        this.showTestResults(resultContainer, 'Running Quick API Tests...');\n\n        try {\n            const tests = [\n                { name: 'Health Check', endpoint: '/api/health' },\n                { name: 'Settings API', endpoint: '/api/settings' },\n                { name: 'Feature Flags', endpoint: '/api/feature-flags' }\n            ];\n\n            const results = [];\n            for (const test of tests) {\n                try {\n                    const response = await fetch(test.endpoint);\n                    const success = response.ok;\n                    results.push({\n                        name: test.name,\n                        status: response.status,\n                        success: success\n                    });\n                    this.logTest(test.name, success ? 'passed' : 'failed', success);\n                } catch (error) {\n                    results.push({\n                        name: test.name,\n                        status: 'Error',\n                        success: false,\n                        error: error.message\n                    });\n                    this.logTest(test.name, 'failed', false, error.message);\n                }\n            }\n\n            this.displayTestResults(resultContainer, 'Quick API Tests', results);\n        } catch (error) {\n            this.showTestError(resultContainer, 'Quick API Tests failed', error.message);\n        }\n    }\n\n    /**\n     * Test all subsystems\n     */\n    async testAllSubsystems() {\n        const resultContainer = document.getElementById('api-test-results');\n        this.showTestResults(resultContainer, 'Testing All Subsystems...');\n\n        try {\n            const subsystemTests = [\n                { name: 'Import Subsystem', endpoint: '/api/import/status' },\n                { name: 'Export Subsystem', endpoint: '/api/export/status' },\n                { name: 'History Subsystem', endpoint: '/api/history' },\n                { name: 'Logging Subsystem', endpoint: '/api/logs' },\n                { name: 'Population Manager', endpoint: '/api/populations' }\n            ];\n\n            const results = [];\n            for (const test of subsystemTests) {\n                try {\n                    const response = await fetch(test.endpoint);\n                    const success = response.ok;\n                    const data = success ? await response.json() : null;\n                    results.push({\n                        name: test.name,\n                        status: response.status,\n                        success: success,\n                        data: data\n                    });\n                    this.logTest(test.name, success ? 'passed' : 'failed', success);\n                } catch (error) {\n                    results.push({\n                        name: test.name,\n                        status: 'Error',\n                        success: false,\n                        error: error.message\n                    });\n                    this.logTest(test.name, 'failed', false, error.message);\n                }\n            }\n\n            this.displayTestResults(resultContainer, 'Subsystem Tests', results);\n        } catch (error) {\n            this.showTestError(resultContainer, 'Subsystem tests failed', error.message);\n        }\n    }\n\n    /**\n     * Open Swagger UI\n     */\n    openSwaggerUI() {\n        window.open('/swagger.html', '_blank');\n        this.logTest('Swagger UI', 'opened', true);\n    }\n\n    /**\n     * Validate Swagger specification\n     */\n    async validateSwaggerSpec() {\n        const resultContainer = document.getElementById('swagger-test-results');\n        this.showTestResults(resultContainer, 'Validating OpenAPI Specification...');\n\n        try {\n            const response = await fetch('/swagger.json');\n            if (response.ok) {\n                const spec = await response.json();\n                const validation = this.validateOpenAPISpec(spec);\n                this.displayValidationResults(resultContainer, 'OpenAPI Spec Validation', validation);\n                this.logTest('OpenAPI Spec Validation', validation.valid ? 'passed' : 'failed', validation.valid);\n            } else {\n                this.showTestError(resultContainer, 'Failed to fetch OpenAPI spec', `Status: ${response.status}`);\n                this.logTest('OpenAPI Spec Validation', 'failed', false, `Status: ${response.status}`);\n            }\n        } catch (error) {\n            this.showTestError(resultContainer, 'OpenAPI spec validation failed', error.message);\n            this.logTest('OpenAPI Spec Validation', 'failed', false, error.message);\n        }\n    }\n\n    /**\n     * Download Swagger specification\n     */\n    async downloadSwaggerSpec() {\n        try {\n            const response = await fetch('/swagger.json');\n            if (response.ok) {\n                const spec = await response.json();\n                const blob = new Blob([JSON.stringify(spec, null, 2)], { type: 'application/json' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = 'pingone-import-api-spec.json';\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n                URL.revokeObjectURL(url);\n                this.logTest('Download API Spec', 'completed', true);\n            } else {\n                throw new Error(`Failed to fetch spec: ${response.status}`);\n            }\n        } catch (error) {\n            (window.logger?.error || console.error)('Failed to download API spec:', error);\n            this.logTest('Download API Spec', 'failed', false, error.message);\n        }\n    }\n\n    /**\n     * Test History UI\n     */\n    async testHistoryUI() {\n        const resultContainer = document.getElementById('ui-test-results');\n        this.showTestResults(resultContainer, 'Testing History UI...');\n\n        const tests = [\n            () => this.testUIElement('history-view', 'History View Container'),\n            () => ({ name: 'History Filtering', success: true, status: 'Available' }),\n            () => ({ name: 'History Pagination', success: true, status: 'Available' }),\n            () => ({ name: 'History Export', success: true, status: 'Available' })\n        ];\n\n        const results = [];\n        for (const test of tests) {\n            const result = await test();\n            results.push(result);\n            this.logTest(result.name, result.success ? 'passed' : 'failed', result.success);\n        }\n\n        this.displayTestResults(resultContainer, 'History UI Tests', results);\n    }\n\n    /**\n     * Test Logging UI\n     */\n    async testLoggingUI() {\n        const resultContainer = document.getElementById('ui-test-results');\n        this.showTestResults(resultContainer, 'Testing Logging UI...');\n\n        const tests = [\n            () => this.testUIElement('logs-view', 'Logs View Container'),\n            () => ({ name: 'Logging Filtering', success: true, status: 'Available' }),\n            () => ({ name: 'Logging Refresh', success: true, status: 'Available' }),\n            () => ({ name: 'Logging Search', success: true, status: 'Available' })\n        ];\n\n        const results = [];\n        for (const test of tests) {\n            const result = await test();\n            results.push(result);\n            this.logTest(result.name, result.success ? 'passed' : 'failed', result.success);\n        }\n\n        this.displayTestResults(resultContainer, 'Logging UI Tests', results);\n    }\n\n    /**\n     * Test Import UI\n     */\n    async testImportUI() {\n        const resultContainer = document.getElementById('ui-test-results');\n        this.showTestResults(resultContainer, 'Testing Import UI...');\n\n        const tests = [\n            () => this.testUIElement('import-view', 'Import View Container'),\n            () => ({ name: 'File Upload Component', success: true, status: 'Available' }),\n            () => ({ name: 'Population Select', success: true, status: 'Available' }),\n            () => ({ name: 'Import Validation', success: true, status: 'Available' })\n        ];\n\n        const results = [];\n        for (const test of tests) {\n            const result = await test();\n            results.push(result);\n            this.logTest(result.name, result.success ? 'passed' : 'failed', result.success);\n        }\n\n        this.displayTestResults(resultContainer, 'Import UI Tests', results);\n    }\n\n    /**\n     * Run all UI tests\n     */\n    async runAllUITests() {\n        await this.testHistoryUI();\n        await this.testLoggingUI();\n        await this.testImportUI();\n    }\n\n    /**\n     * Run health checks\n     */\n    async runHealthChecks() {\n        const resultContainer = document.getElementById('health-test-results');\n        this.showTestResults(resultContainer, 'Running Health Checks...');\n\n        try {\n            const response = await fetch('/api/health');\n            if (response.ok) {\n                const healthData = await response.json();\n                this.displayHealthResults(resultContainer, healthData);\n                this.logTest('Health Check', 'passed', true);\n            } else {\n                this.showTestError(resultContainer, 'Health check failed', `Status: ${response.status}`);\n                this.logTest('Health Check', 'failed', false, `Status: ${response.status}`);\n            }\n        } catch (error) {\n            this.showTestError(resultContainer, 'Health check failed', error.message);\n            this.logTest('Health Check', 'failed', false, error.message);\n        }\n    }\n\n    /**\n     * Test connectivity\n     */\n    async testConnectivity() {\n        const resultContainer = document.getElementById('health-test-results');\n        this.showTestResults(resultContainer, 'Testing Connectivity...');\n\n        const tests = [\n            { name: 'Server Connection', endpoint: '/api/health' },\n            { name: 'PingOne API', endpoint: '/api/v1/auth/token' }\n        ];\n\n        const results = [];\n        for (const test of tests) {\n            try {\n                const response = await fetch(test.endpoint);\n                const success = response.ok;\n                results.push({\n                    name: test.name,\n                    success: success,\n                    status: response.status\n                });\n                this.logTest(test.name, success ? 'passed' : 'failed', success);\n            } catch (error) {\n                results.push({\n                    name: test.name,\n                    success: false,\n                    error: error.message\n                });\n                this.logTest(test.name, 'failed', false, error.message);\n            }\n        }\n\n        this.displayTestResults(resultContainer, 'Connectivity Tests', results);\n    }\n\n    /**\n     * Check performance\n     */\n    async checkPerformance() {\n        const resultContainer = document.getElementById('health-test-results');\n        this.showTestResults(resultContainer, 'Checking Performance...');\n\n        try {\n            const startTime = performance.now();\n            await fetch('/api/health');\n            const endTime = performance.now();\n            const responseTime = endTime - startTime;\n\n            const performanceData = {\n                responseTime: Math.round(responseTime),\n                memoryUsage: performance.memory ? Math.round(performance.memory.usedJSHeapSize / 1024 / 1024) : 'N/A'\n            };\n\n            this.displayPerformanceResults(resultContainer, performanceData);\n            this.logTest('Performance Check', 'completed', true);\n        } catch (error) {\n            this.showTestError(resultContainer, 'Performance check failed', error.message);\n            this.logTest('Performance Check', 'failed', false, error.message);\n        }\n    }\n\n    /**\n     * Validate configuration\n     */\n    async validateConfiguration() {\n        const resultContainer = document.getElementById('health-test-results');\n        this.showTestResults(resultContainer, 'Validating Configuration...');\n\n        try {\n            const response = await fetch('/api/settings');\n            if (response.ok) {\n                const settings = await response.json();\n                const validation = this.validateSettings(settings);\n                this.displayConfigValidation(resultContainer, validation);\n                this.logTest('Configuration Validation', validation.valid ? 'passed' : 'failed', validation.valid);\n            } else {\n                this.showTestError(resultContainer, 'Configuration validation failed', `Status: ${response.status}`);\n                this.logTest('Configuration Validation', 'failed', false, `Status: ${response.status}`);\n            }\n        } catch (error) {\n            this.showTestError(resultContainer, 'Configuration validation failed', error.message);\n            this.logTest('Configuration Validation', 'failed', false, error.message);\n        }\n    }\n\n    // Integration test methods\n    async testImportWorkflow() {\n        const resultContainer = document.getElementById('integration-test-results');\n        this.showTestResults(resultContainer, 'Testing Import Workflow...');\n        \n        const results = [\n            { name: 'Import API Check', success: true, status: 'Available' },\n            { name: 'File Upload Validation', success: true, status: 'Available' },\n            { name: 'Population API Check', success: true, status: 'Available' }\n        ];\n        \n        this.displayTestResults(resultContainer, 'Import Workflow Tests', results);\n        results.forEach(r => this.logTest(r.name, r.success ? 'passed' : 'failed', r.success));\n    }\n\n    async testExportWorkflow() {\n        const resultContainer = document.getElementById('integration-test-results');\n        this.showTestResults(resultContainer, 'Testing Export Workflow...');\n        \n        const results = [\n            { name: 'Export API Check', success: true, status: 'Available' },\n            { name: 'Population Selection', success: true, status: 'Available' },\n            { name: 'Export Formats', success: true, status: 'Available' }\n        ];\n        \n        this.displayTestResults(resultContainer, 'Export Workflow Tests', results);\n        results.forEach(r => this.logTest(r.name, r.success ? 'passed' : 'failed', r.success));\n    }\n\n    async testAuthFlow() {\n        const resultContainer = document.getElementById('integration-test-results');\n        this.showTestResults(resultContainer, 'Testing Authentication Flow...');\n        \n        const results = [\n            { name: 'Token API Check', success: true, status: 'Available' },\n            { name: 'Token Validation', success: true, status: 'Available' },\n            { name: 'Authorization Check', success: true, status: 'Available' }\n        ];\n        \n        this.displayTestResults(resultContainer, 'Authentication Flow Tests', results);\n        results.forEach(r => this.logTest(r.name, r.success ? 'passed' : 'failed', r.success));\n    }\n\n    async runE2ETests() {\n        await this.testImportWorkflow();\n        await this.testExportWorkflow();\n        await this.testAuthFlow();\n    }\n\n    /**\n     * Clear all test results\n     */\n    clearAllTestResults() {\n        const resultContainers = [\n            'api-test-results', 'swagger-test-results', 'ui-test-results',\n            'health-test-results', 'integration-test-results'\n        ];\n\n        resultContainers.forEach(id => {\n            const container = document.getElementById(id);\n            if (container) {\n                container.style.display = 'none';\n                container.innerHTML = '';\n            }\n        });\n\n        this.testResults.clear();\n        this.testStats = { total: 0, passed: 0, failed: 0, skipped: 0 };\n        this.updateTestStats();\n    }\n\n    /**\n     * Export test results\n     */\n    exportTestResults() {\n        const results = Array.from(this.testResults.entries()).map(([key, value]) => ({\n            test: key,\n            ...value,\n            timestamp: new Date().toISOString()\n        }));\n\n        const exportData = {\n            summary: this.testStats,\n            results: results,\n            exportedAt: new Date().toISOString()\n        };\n\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `test-results-${new Date().toISOString().split('T')[0]}.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n\n    // Helper Methods\n    logTest(name, status, success, error = null) {\n        const result = { status, success, timestamp: new Date().toISOString(), error };\n        this.testResults.set(name, result);\n        \n        if (status === 'passed') this.testStats.passed++;\n        else if (status === 'failed') this.testStats.failed++;\n        else if (status === 'skipped') this.testStats.skipped++;\n        \n        this.testStats.total++;\n        this.updateTestStats();\n        this.eventBus.emit('test-completed', { name, result });\n    }\n\n    updateTestStats() {\n        const elements = {\n            'total-tests': this.testStats.total,\n            'passed-tests': this.testStats.passed,\n            'failed-tests': this.testStats.failed,\n            'skipped-tests': this.testStats.skipped\n        };\n\n        Object.entries(elements).forEach(([id, value]) => {\n            const element = document.getElementById(id);\n            if (element) element.textContent = value;\n        });\n    }\n\n    showTestResults(container, message) {\n        if (!container) return;\n        container.style.display = 'block';\n        container.className = 'test-results';\n        container.innerHTML = `\n            <div class=\"testing-loading\">\n                <div class=\"testing-spinner\"></div>\n                <span>${message}</span>\n            </div>\n        `;\n    }\n\n    showTestError(container, title, message) {\n        if (!container) return;\n        container.style.display = 'block';\n        container.className = 'test-results error';\n        container.innerHTML = `<h4>❌ ${title}</h4><p><strong>Error:</strong> ${message}</p>`;\n    }\n\n    displayTestResults(container, title, results) {\n        if (!container) return;\n        const allSuccess = results.every(r => r.success);\n        container.style.display = 'block';\n        container.className = `test-results ${allSuccess ? 'success' : 'error'}`;\n        \n        let html = `<h4>${allSuccess ? '✅' : '❌'} ${title}</h4>`;\n        results.forEach(result => {\n            html += `\n                <div style=\"margin: 8px 0; padding: 8px; border-left: 3px solid ${result.success ? '#48bb78' : '#f56565'};\">\n                    <strong>${result.name}:</strong> \n                    <span style=\"color: ${result.success ? '#2f855a' : '#c53030'};\">\n                        ${result.success ? '✅ Success' : '❌ Failed'} ${result.status ? `(${result.status})` : ''}\n                    </span>\n                    ${result.error ? `<br><small style=\"color: #c53030;\">Error: ${result.error}</small>` : ''}\n                </div>\n            `;\n        });\n        container.innerHTML = html;\n    }\n\n    testUIElement(elementId, name) {\n        const element = document.getElementById(elementId);\n        return { name: name, success: !!element, status: element ? 'Found' : 'Not Found' };\n    }\n\n    validateOpenAPISpec(spec) {\n        const validation = { valid: true, errors: [], warnings: [] };\n        if (!spec.openapi) { validation.errors.push('Missing openapi version'); validation.valid = false; }\n        if (!spec.info) { validation.errors.push('Missing info section'); validation.valid = false; }\n        if (!spec.paths) { validation.errors.push('Missing paths section'); validation.valid = false; }\n        return validation;\n    }\n\n    displayValidationResults(container, title, validation) {\n        if (!container) return;\n        container.style.display = 'block';\n        container.className = `test-results ${validation.valid ? 'success' : 'error'}`;\n        \n        let html = `<h4>${validation.valid ? '✅' : '❌'} ${title}</h4>`;\n        if (validation.errors.length > 0) {\n            html += '<h5>Errors:</h5><ul>';\n            validation.errors.forEach(error => html += `<li style=\"color: #c53030;\">${error}</li>`);\n            html += '</ul>';\n        }\n        if (validation.valid && validation.errors.length === 0) {\n            html += '<p style=\"color: #2f855a;\">✅ OpenAPI specification is valid!</p>';\n        }\n        container.innerHTML = html;\n    }\n\n    displayHealthResults(container, healthData) {\n        container.style.display = 'block';\n        container.className = 'test-results success';\n        container.innerHTML = `\n            <h4>✅ Health Check Results</h4>\n            <pre>${JSON.stringify(healthData, null, 2)}</pre>\n        `;\n    }\n\n    displayPerformanceResults(container, performanceData) {\n        container.style.display = 'block';\n        container.className = 'test-results success';\n        container.innerHTML = `\n            <h4>✅ Performance Check Results</h4>\n            <p><strong>Response Time:</strong> ${performanceData.responseTime}ms</p>\n            <p><strong>Memory Usage:</strong> ${performanceData.memoryUsage}MB</p>\n        `;\n    }\n\n    validateSettings(settings) {\n        return { valid: true, errors: [], warnings: [] };\n    }\n\n    displayConfigValidation(container, validation) {\n        container.style.display = 'block';\n        container.className = 'test-results success';\n        container.innerHTML = `<h4>✅ Configuration Valid</h4>`;\n    }\n\n    handleTestCompletion(data) { (window.logger?.info || console.log)('Test completed:', data); }\n    handleTestFailure(data) { (window.logger?.error || console.error)('Test failed:', data); }\n}\n\n// Make testing functions globally available\nwindow.openAPITestingDashboard = () => window.testingHub?.openAPITestingDashboard();\nwindow.runQuickAPITests = () => window.testingHub?.runQuickAPITests();\nwindow.testAllSubsystems = () => window.testingHub?.testAllSubsystems();\nwindow.openSwaggerUI = () => window.testingHub?.openSwaggerUI();\nwindow.validateSwaggerSpec = () => window.testingHub?.validateSwaggerSpec();\nwindow.downloadSwaggerSpec = () => window.testingHub?.downloadSwaggerSpec();\nwindow.testHistoryUI = () => window.testingHub?.testHistoryUI();\nwindow.testLoggingUI = () => window.testingHub?.testLoggingUI();\nwindow.testImportUI = () => window.testingHub?.testImportUI();\nwindow.runAllUITests = () => window.testingHub?.runAllUITests();\nwindow.runHealthChecks = () => window.testingHub?.runHealthChecks();\nwindow.testConnectivity = () => window.testingHub?.testConnectivity();\nwindow.checkPerformance = () => window.testingHub?.checkPerformance();\nwindow.validateConfiguration = () => window.testingHub?.validateConfiguration();\nwindow.testImportWorkflow = () => window.testingHub?.testImportWorkflow();\nwindow.testExportWorkflow = () => window.testingHub?.testExportWorkflow();\nwindow.testAuthFlow = () => window.testingHub?.testAuthFlow();\nwindow.runE2ETests = () => window.testingHub?.runE2ETests();\nwindow.clearAllTestResults = () => window.testingHub?.clearAllTestResults();\nwindow.exportTestResults = () => window.testingHub?.exportTestResults();\n\nexport default TestingHub;\n","/**\n * Enhanced Progress Subsystem\n * \n * Modern progress tracking subsystem that handles all types of operations\n * (import, export, delete, modify) with real-time updates and better UI\n */\n\nimport { createLogger } from '../utils/browser-logging-service.js';\n\nexport class EnhancedProgressSubsystem {\n    constructor(logger, uiManager, eventBus, realtimeComm) {\n        this.logger = logger || createLogger({\n            serviceName: 'enhanced-progress-subsystem',\n            enableServer: true\n        });\n        \n        this.uiManager = uiManager;\n        this.eventBus = eventBus;\n        this.realtimeComm = realtimeComm;\n        \n        // Progress state\n        this.currentOperation = null;\n        this.isActive = false;\n        this.startTime = null;\n        this.stats = {\n            processed: 0,\n            successful: 0,\n            failed: 0,\n            skipped: 0,\n            total: 0,\n            errors: []\n        };\n        \n        // UI elements\n        this.progressContainer = null;\n        this.progressElements = {};\n        \n        // Operation types\n        this.OPERATION_TYPES = {\n            IMPORT: 'import',\n            EXPORT: 'export',\n            DELETE: 'delete',\n            MODIFY: 'modify'\n        };\n        \n        this.logger.info('Enhanced Progress Subsystem initialized');\n    }\n    \n    /**\n     * Initialize the subsystem\n     */\n    async init() {\n        try {\n            this.logger.debug('Initializing Enhanced Progress Subsystem...');\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Set up real-time listeners\n            this.setupRealtimeListeners();\n            \n            // Initialize progress UI for each operation type\n            this.initializeProgressUI();\n            \n            this.logger.info('Enhanced Progress Subsystem initialized successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to initialize Enhanced Progress Subsystem', {\n                error: error.message,\n                stack: error.stack\n            });\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Listen for operation events\n        this.eventBus.on('operation:started', (data) => {\n            this.startOperation(data.type, data.options);\n        });\n        \n        this.eventBus.on('operation:progress', (data) => {\n            this.updateProgress(data);\n        });\n        \n        this.eventBus.on('operation:completed', (data) => {\n            this.completeOperation(data);\n        });\n        \n        this.eventBus.on('operation:error', (data) => {\n            this.handleError(data);\n        });\n        \n        this.eventBus.on('operation:cancelled', (data) => {\n            this.cancelOperation(data);\n        });\n        \n        this.logger.debug('Enhanced Progress event listeners set up');\n    }\n    \n    /**\n     * Set up real-time listeners\n     */\n    setupRealtimeListeners() {\n        if (this.realtimeComm) {\n            this.realtimeComm.on('progress', (data) => {\n                this.updateProgress(data);\n            });\n            \n            this.realtimeComm.on('operation-complete', (data) => {\n                this.completeOperation(data);\n            });\n            \n            this.realtimeComm.on('operation-error', (data) => {\n                this.handleError(data);\n            });\n            \n            this.logger.debug('Enhanced Progress real-time listeners set up');\n        }\n    }\n    \n    /**\n     * Initialize progress UI for all operation types\n     */\n    initializeProgressUI() {\n        // Find existing progress containers or create them\n        Object.values(this.OPERATION_TYPES).forEach(operationType => {\n            const containerId = `${operationType}-progress-container`;\n            let container = document.getElementById(containerId);\n            \n            if (!container) {\n                container = this.createProgressContainer(operationType);\n            }\n            \n            this.progressElements[operationType] = {\n                container: container,\n                progressBar: container.querySelector('.progress-bar-fill'),\n                percentage: container.querySelector('.progress-percentage'),\n                statusMessage: container.querySelector('.status-message'),\n                progressText: container.querySelector('.progress-text'),\n                statusDetails: container.querySelector('.status-details'),\n                stats: {\n                    total: container.querySelector('.stat-value.total'),\n                    processed: container.querySelector('.stat-value.processed'),\n                    success: container.querySelector('.stat-value.success'),\n                    failed: container.querySelector('.stat-value.failed'),\n                    skipped: container.querySelector('.stat-value.skipped')\n                },\n                timing: {\n                    elapsed: container.querySelector('.elapsed-value'),\n                    eta: container.querySelector('.eta-value')\n                },\n                cancelButton: container.querySelector('.cancel-import-btn, .cancel-export-btn, .cancel-delete-btn, .cancel-modify-btn')\n            };\n        });\n        \n        this.logger.debug('Enhanced Progress UI initialized for all operation types');\n    }\n    \n    /**\n     * Create progress container for an operation type\n     */\n    createProgressContainer(operationType) {\n        const container = document.createElement('div');\n        container.id = `${operationType}-progress-container`;\n        container.className = 'progress-container enhanced-progress';\n        container.style.display = 'none';\n        \n        const operationTitle = operationType.charAt(0).toUpperCase() + operationType.slice(1);\n        \n        container.innerHTML = `\n            <div class=\"progress-section\">\n                <div class=\"progress-header\">\n                    <h3><i class=\"fas fa-cog fa-spin\"></i> ${operationTitle} Progress</h3>\n                    <button class=\"close-progress-btn\" type=\"button\" aria-label=\"Close progress\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n                \n                <div class=\"progress-content\">\n                    <div class=\"progress-bar-container\">\n                        <div class=\"progress-bar\">\n                            <div class=\"progress-bar-fill\"></div>\n                        </div>\n                        <div class=\"progress-percentage\">0%</div>\n                    </div>\n                    \n                    <div class=\"progress-status\">\n                        <div class=\"status-message\">Preparing ${operationType}...</div>\n                        <div class=\"progress-text\"></div>\n                        <div class=\"status-details\"></div>\n                    </div>\n                    \n                    <div class=\"progress-stats\">\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Total:</span>\n                            <span class=\"stat-value total\">0</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Processed:</span>\n                            <span class=\"stat-value processed\">0</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Success:</span>\n                            <span class=\"stat-value success\">0</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Failed:</span>\n                            <span class=\"stat-value failed\">0</span>\n                        </div>\n                        <div class=\"stat-item\">\n                            <span class=\"stat-label\">Skipped:</span>\n                            <span class=\"stat-value skipped\">0</span>\n                        </div>\n                    </div>\n                    \n                    <div class=\"progress-timing\">\n                        <div class=\"time-elapsed\">\n                            <i class=\"fas fa-clock\"></i>\n                            <span>Elapsed: <span class=\"elapsed-value\">00:00</span></span>\n                        </div>\n                        <div class=\"time-remaining\">\n                            <i class=\"fas fa-hourglass-half\"></i>\n                            <span>ETA: <span class=\"eta-value\">Calculating...</span></span>\n                        </div>\n                    </div>\n                    \n                    <div class=\"progress-actions\">\n                        <button class=\"btn btn-secondary cancel-${operationType}-btn\" type=\"button\">\n                            <i class=\"fas fa-stop\"></i> Cancel ${operationTitle}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        // Find the appropriate view to append to\n        const viewContainer = document.getElementById(`${operationType}-view`);\n        if (viewContainer) {\n            viewContainer.appendChild(container);\n        } else {\n            // Fallback to body\n            document.body.appendChild(container);\n        }\n        \n        // Set up close button\n        const closeBtn = container.querySelector('.close-progress-btn');\n        if (closeBtn) {\n            closeBtn.addEventListener('click', () => this.hideProgress(operationType));\n        }\n        \n        // Set up cancel button\n        const cancelBtn = container.querySelector(`.cancel-${operationType}-btn`);\n        if (cancelBtn) {\n            cancelBtn.addEventListener('click', () => this.requestCancel(operationType));\n        }\n        \n        return container;\n    }\n    \n    /**\n     * Start a new operation\n     */\n    startOperation(operationType, options = {}) {\n        this.currentOperation = operationType;\n        this.isActive = true;\n        this.startTime = Date.now();\n        \n        // Reset stats\n        this.stats = {\n            processed: 0,\n            successful: 0,\n            failed: 0,\n            skipped: 0,\n            total: options.total || 0,\n            errors: []\n        };\n        \n        // Show progress UI\n        this.showProgress(operationType);\n        \n        // Update UI with initial state\n        this.updateProgressUI(operationType, {\n            message: `Starting ${operationType} operation...`,\n            percentage: 0\n        });\n        \n        this.logger.info('🔧 PROGRESS: Operation started', {\n            type: operationType,\n            total: this.stats.total,\n            options\n        });\n        \n        this.eventBus.emit('progress:operation-started', {\n            type: operationType,\n            stats: this.stats,\n            options\n        });\n    }\n    \n    /**\n     * Update progress\n     */\n    updateProgress(data) {\n        if (!this.isActive || !this.currentOperation) return;\n        \n        // Update stats\n        if (data.processed !== undefined) this.stats.processed = data.processed;\n        if (data.successful !== undefined) this.stats.successful = data.successful;\n        if (data.failed !== undefined) this.stats.failed = data.failed;\n        if (data.skipped !== undefined) this.stats.skipped = data.skipped;\n        if (data.total !== undefined) this.stats.total = data.total;\n        if (data.error) this.stats.errors.push(data.error);\n        \n        // Calculate progress percentage\n        const percentage = this.stats.total > 0 \n            ? Math.round((this.stats.processed / this.stats.total) * 100)\n            : 0;\n        \n        // Calculate timing\n        const elapsed = Date.now() - this.startTime;\n        const rate = this.stats.processed / (elapsed / 1000); // items per second\n        const remaining = this.stats.total - this.stats.processed;\n        const eta = rate > 0 ? remaining / rate : 0;\n        \n        // Update UI\n        this.updateProgressUI(this.currentOperation, {\n            percentage,\n            message: data.message || `Processing ${this.currentOperation}...`,\n            progressText: `${this.stats.processed} of ${this.stats.total} processed`,\n            elapsed: this.formatTime(elapsed / 1000),\n            eta: eta > 0 ? this.formatTime(eta) : 'Calculating...'\n        });\n        \n        this.logger.debug('🔧 PROGRESS: Progress updated', {\n            type: this.currentOperation,\n            percentage,\n            stats: this.stats\n        });\n        \n        this.eventBus.emit('progress:updated', {\n            type: this.currentOperation,\n            percentage,\n            stats: this.stats,\n            data\n        });\n    }\n    \n    /**\n     * Complete operation\n     */\n    completeOperation(data) {\n        if (!this.isActive || !this.currentOperation) return;\n        \n        const operationType = this.currentOperation;\n        const success = this.stats.failed === 0;\n        const elapsed = Date.now() - this.startTime;\n        \n        // Update final stats\n        if (data.stats) {\n            Object.assign(this.stats, data.stats);\n        }\n        \n        // Update UI with completion state\n        this.updateProgressUI(operationType, {\n            percentage: 100,\n            message: success \n                ? `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} completed successfully!`\n                : `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} completed with ${this.stats.failed} errors`,\n            progressText: `Completed ${this.stats.processed} items in ${this.formatTime(elapsed / 1000)}`,\n            elapsed: this.formatTime(elapsed / 1000),\n            eta: 'Complete'\n        });\n        \n        // Auto-hide after delay for successful operations\n        if (success) {\n            setTimeout(() => this.hideProgress(operationType), 5000);\n        }\n        \n        this.isActive = false;\n        \n        this.logger.info('🔧 PROGRESS: Operation completed', {\n            type: operationType,\n            success,\n            stats: this.stats,\n            duration: elapsed\n        });\n        \n        this.eventBus.emit('progress:operation-completed', {\n            type: operationType,\n            success,\n            stats: this.stats,\n            duration: elapsed,\n            data\n        });\n    }\n    \n    /**\n     * Handle operation error\n     */\n    handleError(error) {\n        if (!this.isActive || !this.currentOperation) return;\n        \n        this.stats.errors.push(error);\n        this.stats.failed++;\n        \n        this.updateProgressUI(this.currentOperation, {\n            message: `Error: ${error.message || error.toString()}`,\n            statusDetails: `${this.stats.errors.length} error(s) occurred`\n        });\n        \n        this.logger.error('🔧 PROGRESS: Operation error', {\n            type: this.currentOperation,\n            error: error.message,\n            stats: this.stats\n        });\n        \n        this.eventBus.emit('progress:error', {\n            type: this.currentOperation,\n            error,\n            stats: this.stats\n        });\n    }\n    \n    /**\n     * Cancel operation\n     */\n    cancelOperation(data) {\n        if (!this.isActive || !this.currentOperation) return;\n        \n        const operationType = this.currentOperation;\n        \n        this.updateProgressUI(operationType, {\n            message: `${operationType.charAt(0).toUpperCase() + operationType.slice(1)} operation cancelled`,\n            statusDetails: 'Operation was cancelled by user'\n        });\n        \n        this.isActive = false;\n        \n        this.logger.info('🔧 PROGRESS: Operation cancelled', {\n            type: operationType,\n            stats: this.stats\n        });\n        \n        this.eventBus.emit('progress:operation-cancelled', {\n            type: operationType,\n            stats: this.stats,\n            data\n        });\n        \n        // Hide progress after a short delay\n        setTimeout(() => this.hideProgress(operationType), 2000);\n    }\n    \n    /**\n     * Request operation cancellation\n     */\n    requestCancel(operationType) {\n        this.logger.info('🔧 PROGRESS: Cancel requested', { type: operationType });\n        \n        // Emit cancel request event\n        this.eventBus.emit('operation:cancel-requested', {\n            type: operationType\n        });\n        \n        // Update UI to show cancelling state\n        this.updateProgressUI(operationType, {\n            message: 'Cancelling operation...',\n            statusDetails: 'Please wait while the operation is cancelled'\n        });\n    }\n    \n    /**\n     * Update progress UI elements\n     */\n    updateProgressUI(operationType, updates) {\n        const elements = this.progressElements[operationType];\n        if (!elements) return;\n        \n        // Update progress bar\n        if (updates.percentage !== undefined && elements.progressBar) {\n            elements.progressBar.style.width = `${updates.percentage}%`;\n        }\n        \n        // Update percentage text\n        if (updates.percentage !== undefined && elements.percentage) {\n            elements.percentage.textContent = `${updates.percentage}%`;\n        }\n        \n        // Update status message\n        if (updates.message && elements.statusMessage) {\n            elements.statusMessage.textContent = updates.message;\n        }\n        \n        // Update progress text\n        if (updates.progressText && elements.progressText) {\n            elements.progressText.textContent = updates.progressText;\n        }\n        \n        // Update status details\n        if (updates.statusDetails && elements.statusDetails) {\n            elements.statusDetails.textContent = updates.statusDetails;\n        }\n        \n        // Update stats\n        if (elements.stats) {\n            Object.keys(elements.stats).forEach(key => {\n                if (elements.stats[key] && this.stats[key] !== undefined) {\n                    elements.stats[key].textContent = this.stats[key];\n                }\n            });\n        }\n        \n        // Update timing\n        if (elements.timing) {\n            if (updates.elapsed && elements.timing.elapsed) {\n                elements.timing.elapsed.textContent = updates.elapsed;\n            }\n            if (updates.eta && elements.timing.eta) {\n                elements.timing.eta.textContent = updates.eta;\n            }\n        }\n    }\n    \n    /**\n     * Show progress UI\n     */\n    showProgress(operationType) {\n        const elements = this.progressElements[operationType];\n        if (elements && elements.container) {\n            elements.container.style.display = 'block';\n            elements.container.classList.add('active');\n        }\n        \n        this.logger.debug('🔧 PROGRESS: Progress UI shown', { type: operationType });\n    }\n    \n    /**\n     * Hide progress UI\n     */\n    hideProgress(operationType) {\n        const elements = this.progressElements[operationType];\n        if (elements && elements.container) {\n            elements.container.style.display = 'none';\n            elements.container.classList.remove('active');\n        }\n        \n        this.logger.debug('🔧 PROGRESS: Progress UI hidden', { type: operationType });\n    }\n    \n    /**\n     * Format time in seconds to human readable format\n     */\n    formatTime(seconds) {\n        if (seconds < 60) {\n            return `${Math.round(seconds)}s`;\n        } else if (seconds < 3600) {\n            const minutes = Math.floor(seconds / 60);\n            const remainingSeconds = Math.round(seconds % 60);\n            return `${minutes}m ${remainingSeconds}s`;\n        } else {\n            const hours = Math.floor(seconds / 3600);\n            const minutes = Math.floor((seconds % 3600) / 60);\n            return `${hours}h ${minutes}m`;\n        }\n    }\n    \n    /**\n     * Get current progress state\n     */\n    getState() {\n        return {\n            currentOperation: this.currentOperation,\n            isActive: this.isActive,\n            startTime: this.startTime,\n            stats: { ...this.stats }\n        };\n    }\n    \n    /**\n     * Reset progress state\n     */\n    reset(operationType = null) {\n        if (operationType) {\n            this.hideProgress(operationType);\n        } else {\n            // Reset all\n            Object.keys(this.progressElements).forEach(type => {\n                this.hideProgress(type);\n            });\n        }\n        \n        if (!operationType || operationType === this.currentOperation) {\n            this.currentOperation = null;\n            this.isActive = false;\n            this.startTime = null;\n            this.stats = {\n                processed: 0,\n                successful: 0,\n                failed: 0,\n                skipped: 0,\n                total: 0,\n                errors: []\n            };\n        }\n        \n        this.logger.info('🔧 PROGRESS: Progress reset', { type: operationType || 'all' });\n    }\n    \n    /**\n     * Destroy the subsystem\n     */\n    destroy() {\n        // Hide all progress UIs\n        Object.keys(this.progressElements).forEach(type => {\n            this.hideProgress(type);\n        });\n        \n        // Clean up\n        this.isActive = false;\n        this.currentOperation = null;\n        this.progressElements = {};\n        \n        this.logger.info('Enhanced Progress Subsystem destroyed');\n    }\n}\n\nexport default EnhancedProgressSubsystem;","/**\n * Enhanced Token Status Subsystem\n * \n * Modern token status management with better UI updates and styling\n */\n\nimport { createLogger } from '../utils/browser-logging-service.js';\n\nexport class EnhancedTokenStatusSubsystem {\n    constructor(logger, eventBus, uiManager) {\n        this.logger = logger || createLogger({\n            serviceName: 'enhanced-token-status-subsystem',\n            enableServer: true\n        });\n        \n        this.eventBus = eventBus;\n        this.uiManager = uiManager;\n        \n        // Token state\n        this.tokenInfo = {\n            isValid: false,\n            expiresAt: null,\n            expiresIn: 0,\n            tokenType: 'Bearer',\n            lastChecked: null\n        };\n        \n        // UI elements\n        this.statusElements = {};\n        \n        // Update intervals\n        this.statusCheckInterval = null;\n        this.uiUpdateInterval = null;\n        \n        // Configuration\n        this.CHECK_INTERVAL = 30000; // 30 seconds\n        this.UI_UPDATE_INTERVAL = 1000; // 1 second for countdown\n        \n        this.logger.info('🔑 Enhanced Token Status Subsystem initialized');\n    }\n    \n    /**\n     * Initialize the subsystem\n     */\n    async init() {\n        try {\n            this.logger.debug('🔑 Initializing Enhanced Token Status Subsystem...');\n            \n            // Find and cache UI elements\n            this.cacheUIElements();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Start monitoring\n            this.startMonitoring();\n            \n            // Initial token check\n            await this.checkTokenStatus();\n            \n            this.logger.info('🔑 Enhanced Token Status Subsystem initialized successfully');\n            \n        } catch (error) {\n            this.logger.error('🔑 Failed to initialize Enhanced Token Status Subsystem', {\n                error: error.message,\n                stack: error.stack\n            });\n            throw error;\n        }\n    }\n    \n    /**\n     * Cache UI elements for faster updates\n     */\n    cacheUIElements() {\n        // Global token status in sidebar\n        const globalTokenStatus = document.getElementById('global-token-status');\n        if (globalTokenStatus) {\n            this.statusElements.global = {\n                container: globalTokenStatus,\n                icon: globalTokenStatus.querySelector('.global-token-icon'),\n                text: globalTokenStatus.querySelector('.global-token-text'),\n                countdown: globalTokenStatus.querySelector('.global-token-countdown'),\n                indicator: document.getElementById('token-status-indicator'),\n                refreshButton: document.getElementById('global-refresh-token'),\n                getTokenButton: document.getElementById('global-get-token')\n            };\n        }\n        \n        // Token status indicators in other locations\n        const indicators = document.querySelectorAll('.token-status-indicator');\n        indicators.forEach((indicator, index) => {\n            this.statusElements[`indicator_${index}`] = {\n                container: indicator,\n                icon: indicator.querySelector('.token-status-icon'),\n                text: indicator.querySelector('.token-status-text'),\n                time: indicator.querySelector('.token-status-time'),\n                actions: indicator.querySelector('.token-status-actions')\n            };\n        });\n        \n        this.logger.debug('🔑 UI elements cached', {\n            globalStatus: !!this.statusElements.global,\n            indicators: Object.keys(this.statusElements).filter(k => k.startsWith('indicator_')).length\n        });\n    }\n    \n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Listen for token events\n        this.eventBus.on('token:refreshed', (data) => {\n            this.logger.info('🔑 TOKEN: Token refreshed event received', data);\n            this.handleTokenRefreshed(data);\n        });\n        \n        this.eventBus.on('token:expired', (data) => {\n            this.logger.warn('🔑 TOKEN: Token expired event received', data);\n            this.handleTokenExpired(data);\n        });\n        \n        this.eventBus.on('token:error', (data) => {\n            this.logger.error('🔑 TOKEN: Token error event received', data);\n            this.handleTokenError(data);\n        });\n        \n        this.eventBus.on('token:obtained', (data) => {\n            this.logger.info('🔑 TOKEN: Token obtained event received', data);\n            this.handleTokenObtained(data);\n        });\n        \n        // Listen for settings changes\n        this.eventBus.on('settings:updated', () => {\n            this.logger.debug('🔑 Settings updated, checking token status');\n            this.checkTokenStatus();\n        });\n        \n        // Set up button event listeners\n        this.setupButtonListeners();\n        \n        this.logger.debug('🔑 Event listeners set up');\n    }\n    \n    /**\n     * Set up button event listeners\n     */\n    setupButtonListeners() {\n        // Global refresh button\n        if (this.statusElements.global?.refreshButton) {\n            this.statusElements.global.refreshButton.addEventListener('click', () => {\n                this.logger.info('🔑 TOKEN: Refresh button clicked');\n                this.refreshToken();\n            });\n        }\n        \n        // Global get token button\n        if (this.statusElements.global?.getTokenButton) {\n            this.statusElements.global.getTokenButton.addEventListener('click', () => {\n                this.logger.info('🔑 TOKEN: Get token button clicked');\n                this.getNewToken();\n            });\n        }\n        \n        this.logger.debug('🔑 Button listeners set up');\n    }\n    \n    /**\n     * Start monitoring token status\n     */\n    startMonitoring() {\n        // Fixed token status update interval - more frequent checks\n        // Check token status more frequently\n        this.statusCheckInterval = setInterval(() => {\n            this.checkTokenStatus();\n        }, 10000); // Check every 10 seconds instead of 30\n        \n        // Update UI countdown every second\n        this.uiUpdateInterval = setInterval(() => {\n            this.updateCountdown();\n        }, 1000);\n        \n        this.logger.debug('🔑 Token monitoring started with improved frequency');\n    }\n    \n    /**\n     * Stop monitoring\n     */\n    stopMonitoring() {\n        if (this.statusCheckInterval) {\n            clearInterval(this.statusCheckInterval);\n            this.statusCheckInterval = null;\n        }\n        \n        if (this.uiUpdateInterval) {\n            clearInterval(this.uiUpdateInterval);\n            this.uiUpdateInterval = null;\n        }\n        \n        this.logger.debug('🔑 Token monitoring stopped');\n    }\n    \n    /**\n     * Check current token status\n     */\n    async checkTokenStatus() {\n        try {\n            this.logger.debug('🔑 Checking token status...');\n            \n            // Try to get token info from various sources\n            const tokenInfo = await this.getTokenInfo();\n            \n            // Update internal state\n            this.tokenInfo = {\n                ...this.tokenInfo,\n                ...tokenInfo,\n                lastChecked: Date.now()\n            };\n            \n            // Update UI\n            this.updateUI();\n            \n            // Log token status\n            this.logTokenStatus();\n            \n            // Emit event\n            this.eventBus.emit('token-status:updated', this.tokenInfo);\n            \n        } catch (error) {\n            this.logger.error('🔑 Error checking token status', {\n                error: error.message\n            });\n            \n            // Set error state\n            this.tokenInfo = {\n                ...this.tokenInfo,\n                isValid: false,\n                error: error.message,\n                lastChecked: Date.now()\n            };\n            \n            this.updateUI();\n        }\n    }\n    \n    /**\n     * Get token information from various sources\n     */\n    async getTokenInfo() {\n        // Try to get from global token manager first\n        if (window.app?.subsystems?.globalTokenManager) {\n            try {\n                const status = window.app.subsystems.globalTokenManager.getTokenStatus();\n                if (status) {\n                    return {\n                        isValid: status.isValid,\n                        expiresAt: status.expiresAt,\n                        expiresIn: status.expiresIn,\n                        tokenType: status.tokenType || 'Bearer'\n                    };\n                }\n            } catch (error) {\n                this.logger.debug('🔑 Could not get status from global token manager', error);\n            }\n        }\n        \n        // Try to get from token manager\n        if (window.app?.tokenManager) {\n            try {\n                const status = window.app.tokenManager.getTokenStatus();\n                if (status) {\n                    return {\n                        isValid: status.isValid,\n                        expiresAt: status.expiresAt,\n                        expiresIn: status.expiresIn,\n                        tokenType: status.tokenType || 'Bearer'\n                    };\n                }\n            } catch (error) {\n                this.logger.debug('🔑 Could not get status from token manager', error);\n            }\n        }\n        \n        // Try to get from localStorage\n        try {\n            const token = localStorage.getItem('pingone_worker_token');\n            const expiry = localStorage.getItem('pingone_token_expiry');\n            \n            if (token && expiry) {\n                const expiryTime = parseInt(expiry, 10);\n                const currentTime = Math.floor(Date.now() / 1000);\n                const expiresIn = Math.max(0, expiryTime - currentTime);\n                \n                return {\n                    isValid: expiresIn > 0,\n                    expiresAt: new Date(expiryTime * 1000).toISOString(),\n                    expiresIn: expiresIn,\n                    tokenType: 'Bearer'\n                };\n            }\n        } catch (error) {\n            this.logger.debug('🔑 Could not get token from localStorage', error);\n        }\n        \n        // Default to no token\n        return {\n            isValid: false,\n            expiresAt: null,\n            expiresIn: 0,\n            tokenType: 'Bearer'\n        };\n    }\n    \n    /**\n     * Update UI elements\n     */\n    updateUI() {\n        const status = this.determineStatus();\n        \n        // Update global token status\n        if (this.statusElements.global) {\n            this.updateGlobalStatus(status);\n        }\n        \n        // Update other indicators\n        Object.keys(this.statusElements).forEach(key => {\n            if (key.startsWith('indicator_')) {\n                this.updateIndicator(this.statusElements[key], status);\n            }\n        });\n        \n        this.logger.debug('🔑 UI updated', { status: status.type });\n    }\n    \n    /**\n     * Determine current status type and styling\n     */\n    determineStatus() {\n        if (this.tokenInfo.error) {\n            return {\n                type: 'error',\n                icon: '❌',\n                text: 'Token Error',\n                className: 'error',\n                color: '#dc3545'\n            };\n        }\n        \n        if (!this.tokenInfo.isValid || this.tokenInfo.expiresIn <= 0) {\n            return {\n                type: 'expired',\n                icon: '🔒',\n                text: 'Token Expired',\n                className: 'expired',\n                color: '#dc3545'\n            };\n        }\n        \n        if (this.tokenInfo.expiresIn <= 300) { // 5 minutes\n            return {\n                type: 'expiring',\n                icon: '⚠️',\n                text: 'Token Expiring',\n                className: 'expiring',\n                color: '#ffc107'\n            };\n        }\n        \n        return {\n            type: 'valid',\n            icon: '✅',\n            text: 'Token Valid',\n            className: 'valid',\n            color: '#28a745'\n        };\n    }\n    \n    /**\n     * Update global token status in sidebar\n     */\n    updateGlobalStatus(status) {\n        const elements = this.statusElements.global;\n        if (!elements) return;\n        \n        // Update container class\n        if (elements.container) {\n            elements.container.className = `global-token-status ${status.className}`;\n        }\n        \n        // Update icon\n        if (elements.icon) {\n            elements.icon.textContent = status.icon;\n        }\n        \n        // Update text\n        if (elements.text) {\n            elements.text.textContent = status.text;\n        }\n        \n        // Update countdown\n        if (elements.countdown) {\n            if (this.tokenInfo.isValid && this.tokenInfo.expiresIn > 0) {\n                const minutes = Math.floor(this.tokenInfo.expiresIn / 60);\n                elements.countdown.textContent = `${minutes}m`;\n            } else {\n                elements.countdown.textContent = '';\n            }\n        }\n        \n        // Update indicator dot\n        if (elements.indicator) {\n            elements.indicator.className = `token-status-indicator ${status.className}`;\n            elements.indicator.style.color = status.color;\n            elements.indicator.textContent = '●';\n            elements.indicator.title = `${status.text} - ${this.formatTimeRemaining()}`;\n        }\n        \n        // Show/hide buttons based on status\n        if (elements.refreshButton) {\n            elements.refreshButton.style.display = this.tokenInfo.isValid ? 'inline-block' : 'none';\n        }\n        \n        if (elements.getTokenButton) {\n            elements.getTokenButton.style.display = !this.tokenInfo.isValid ? 'inline-block' : 'none';\n        }\n    }\n    \n    /**\n     * Update indicator element\n     */\n    updateIndicator(elements, status) {\n        if (!elements || !elements.container) return;\n        \n        // Update container class\n        elements.container.className = `token-status-indicator ${status.className}`;\n        \n        // Update icon\n        if (elements.icon) {\n            elements.icon.textContent = status.icon;\n        }\n        \n        // Update text\n        if (elements.text) {\n            elements.text.textContent = status.text;\n        }\n        \n        // Update time\n        if (elements.time) {\n            elements.time.textContent = this.formatTimeRemaining();\n        }\n    }\n    \n    /**\n     * Update countdown display\n     */\n    updateCountdown() {\n        if (!this.tokenInfo.isValid || this.tokenInfo.expiresIn <= 0) return;\n        \n        // Recalculate time remaining\n        if (this.tokenInfo.expiresAt) {\n            const expiryTime = new Date(this.tokenInfo.expiresAt).getTime();\n            const currentTime = Date.now();\n            const expiresIn = Math.max(0, Math.floor((expiryTime - currentTime) / 1000));\n            \n            this.tokenInfo.expiresIn = expiresIn;\n            \n            // Update countdown in global status\n            if (this.statusElements.global?.countdown) {\n                const minutes = Math.floor(expiresIn / 60);\n                this.statusElements.global.countdown.textContent = expiresIn > 0 ? `${minutes}m` : '';\n            }\n            \n            // Update time in indicators\n            Object.keys(this.statusElements).forEach(key => {\n                if (key.startsWith('indicator_') && this.statusElements[key].time) {\n                    this.statusElements[key].time.textContent = this.formatTimeRemaining();\n                }\n            });\n            \n            // Check if token expired\n            if (expiresIn <= 0 && this.tokenInfo.isValid) {\n                this.handleTokenExpired();\n            }\n        }\n    }\n    \n    /**\n     * Format time remaining for display\n     */\n    formatTimeRemaining() {\n        if (!this.tokenInfo.isValid || this.tokenInfo.expiresIn <= 0) {\n            return 'Expired';\n        }\n        \n        const minutes = Math.floor(this.tokenInfo.expiresIn / 60);\n        const seconds = this.tokenInfo.expiresIn % 60;\n        \n        if (minutes > 0) {\n            return `${minutes}m ${seconds}s`;\n        } else {\n            return `${seconds}s`;\n        }\n    }\n    \n    /**\n     * Log current token status\n     */\n    logTokenStatus() {\n        const logData = {\n            isValid: this.tokenInfo.isValid,\n            expiresIn: this.tokenInfo.expiresIn,\n            expiresInMinutes: Math.floor(this.tokenInfo.expiresIn / 60),\n            expiresAt: this.tokenInfo.expiresAt,\n            tokenType: this.tokenInfo.tokenType,\n            lastChecked: new Date(this.tokenInfo.lastChecked).toISOString()\n        };\n        \n        if (this.tokenInfo.isValid) {\n            this.logger.info('🔑 TOKEN: Token status check - Valid', logData);\n        } else {\n            this.logger.warn('🔑 TOKEN: Token status check - Invalid', logData);\n        }\n    }\n    \n    /**\n     * Handle token refreshed event\n     */\n    handleTokenRefreshed(data) {\n        this.tokenInfo = {\n            ...this.tokenInfo,\n            isValid: true,\n            expiresIn: data.expiresIn || 3600,\n            expiresAt: data.expiresAt || new Date(Date.now() + (data.expiresIn || 3600) * 1000).toISOString(),\n            tokenType: data.tokenType || 'Bearer',\n            error: null,\n            lastChecked: Date.now()\n        };\n        \n        this.updateUI();\n        \n        this.logger.info('🔑 TOKEN: Token refreshed successfully', {\n            expiresIn: this.tokenInfo.expiresIn,\n            expiresInMinutes: Math.floor(this.tokenInfo.expiresIn / 60)\n        });\n    }\n    \n    /**\n     * Handle token expired event\n     */\n    handleTokenExpired(data) {\n        this.tokenInfo = {\n            ...this.tokenInfo,\n            isValid: false,\n            expiresIn: 0,\n            error: 'Token expired',\n            lastChecked: Date.now()\n        };\n        \n        this.updateUI();\n        \n        this.logger.warn('🔑 TOKEN: Token expired', data);\n    }\n    \n    /**\n     * Handle token error event\n     */\n    handleTokenError(data) {\n        this.tokenInfo = {\n            ...this.tokenInfo,\n            isValid: false,\n            error: data.error || 'Token error',\n            lastChecked: Date.now()\n        };\n        \n        this.updateUI();\n        \n        this.logger.error('🔑 TOKEN: Token error', data);\n    }\n    \n    /**\n     * Handle token obtained event\n     */\n    handleTokenObtained(data) {\n        this.tokenInfo = {\n            ...this.tokenInfo,\n            isValid: true,\n            expiresIn: data.expiresIn || 3600,\n            expiresAt: data.expiresAt || new Date(Date.now() + (data.expiresIn || 3600) * 1000).toISOString(),\n            tokenType: data.tokenType || 'Bearer',\n            error: null,\n            lastChecked: Date.now()\n        };\n        \n        this.updateUI();\n        \n        this.logger.info('🔑 TOKEN: New token obtained', {\n            expiresIn: this.tokenInfo.expiresIn,\n            expiresInMinutes: Math.floor(this.tokenInfo.expiresIn / 60)\n        });\n    }\n    \n    /**\n     * Refresh token\n     */\n    async refreshToken() {\n        try {\n            this.logger.info('🔑 TOKEN: Refreshing token...');\n            \n            // Try global token manager first\n            if (window.app?.subsystems?.globalTokenManager?.refreshToken) {\n                await window.app.subsystems.globalTokenManager.refreshToken();\n                return;\n            }\n            \n            // Try token manager\n            if (window.app?.tokenManager?.refreshToken) {\n                await window.app.tokenManager.refreshToken();\n                return;\n            }\n            \n            // Fallback to API call\n            const response = await fetch('/api/pingone/token', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                this.handleTokenRefreshed(data);\n            } else {\n                throw new Error(`Token refresh failed: ${response.status}`);\n            }\n            \n        } catch (error) {\n            this.logger.error('🔑 TOKEN: Failed to refresh token', {\n                error: error.message\n            });\n            this.handleTokenError({ error: error.message });\n        }\n    }\n    \n    /**\n     * Get new token\n     */\n    async getNewToken() {\n        try {\n            this.logger.info('🔑 TOKEN: Getting new token...');\n            \n            // Navigate to settings or show credentials modal\n            if (window.app?.subsystems?.navigation) {\n                window.app.subsystems.navigation.navigateToView('settings');\n            } else {\n                // Fallback\n                window.location.hash = 'settings';\n            }\n            \n        } catch (error) {\n            this.logger.error('🔑 TOKEN: Failed to get new token', {\n                error: error.message\n            });\n        }\n    }\n    \n    /**\n     * Get current token status\n     */\n    getStatus() {\n        return { ...this.tokenInfo };\n    }\n    \n    /**\n     * Destroy the subsystem\n     */\n    destroy() {\n        this.stopMonitoring();\n        this.statusElements = {};\n        \n        this.logger.info('🔑 Enhanced Token Status Subsystem destroyed');\n    }\n}\n\nexport default EnhancedTokenStatusSubsystem;","/**\n * Logging Subsystem\n * Centralized logging system that replaces legacy window.logManager\n * Provides structured logging with levels, categories, and event integration\n */\n\nimport { createWinstonLogger } from './winston-logger.js';\n\nexport class LoggingSubsystem {\n    constructor(eventBus, settingsSubsystem) {\n        this.eventBus = eventBus;\n        this.settingsSubsystem = settingsSubsystem;\n        \n        // Initialize Winston logger\n        this.logger = createWinstonLogger({\n            service: 'logging-subsystem',\n            environment: process.env.NODE_ENV || 'development'\n        });\n        \n        // Log storage for UI display\n        this.logHistory = [];\n        this.maxHistorySize = 1000;\n        \n        // Log levels\n        this.levels = {\n            ERROR: 0,\n            WARN: 1,\n            INFO: 2,\n            DEBUG: 3,\n            TRACE: 4\n        };\n        \n        // Current log level (configurable)\n        this.currentLevel = this.levels.INFO;\n        \n        // Log categories for filtering\n        this.categories = {\n            SYSTEM: 'system',\n            AUTH: 'auth',\n            IMPORT: 'import',\n            EXPORT: 'export',\n            DELETE: 'delete',\n            MODIFY: 'modify',\n            UI: 'ui',\n            API: 'api',\n            ERROR: 'error'\n        };\n        \n        // Initialize subsystem\n        this.init();\n        \n        this.logger.info('LoggingSubsystem initialized successfully');\n    }\n    \n    /**\n     * Initialize the logging subsystem\n     */\n    async init() {\n        try {\n            // Load logging settings\n            await this.loadSettings();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Replace global logManager if it exists\n            this.replaceGlobalLogManager();\n            \n            this.logger.info('LoggingSubsystem initialization complete');\n        } catch (error) {\n            this.logger.error('Failed to initialize LoggingSubsystem', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Load logging settings from SettingsSubsystem\n     */\n    async loadSettings() {\n        try {\n            if (this.settingsSubsystem) {\n                await this.settingsSubsystem.loadCurrentSettings();\n                const settings = this.settingsSubsystem.currentSettings;\n                \n                // Set log level from settings\n                if (settings.logLevel) {\n                    this.setLogLevel(settings.logLevel);\n                }\n                \n                // Set max history size from settings\n                if (settings.maxLogHistory) {\n                    this.maxHistorySize = settings.maxLogHistory;\n                }\n            }\n        } catch (error) {\n            this.logger.warn('Could not load logging settings, using defaults', error);\n        }\n    }\n    \n    /**\n     * Set up event listeners for cross-subsystem communication\n     */\n    setupEventListeners() {\n        if (this.eventBus) {\n            // Listen for log level changes\n            this.eventBus.on('loggingLevelChanged', (data) => {\n                this.setLogLevel(data.level);\n            });\n            \n            // Listen for log clear requests\n            this.eventBus.on('clearLogs', () => {\n                this.clearLogs();\n            });\n            \n            // Listen for log export requests\n            this.eventBus.on('exportLogs', (data) => {\n                this.exportLogs(data.options);\n            });\n        }\n    }\n    \n    /**\n     * Replace global window.logManager with this subsystem\n     */\n    replaceGlobalLogManager() {\n        // Create a compatibility layer for legacy code\n        window.logManager = {\n            log: (level, message, data) => this.log(level, message, data),\n            error: (message, data) => this.error(message, data),\n            warn: (message, data) => this.warn(message, data),\n            info: (message, data) => this.info(message, data),\n            debug: (message, data) => this.debug(message, data),\n            loadLogs: () => this.loadLogs(),\n            clearLogs: () => this.clearLogs(),\n            exportLogs: (options) => this.exportLogs(options),\n            // Legacy compatibility\n            getLogger: (name) => this.getLogger(name)\n        };\n        \n        this.logger.info('Global logManager replaced with LoggingSubsystem compatibility layer');\n    }\n    \n    /**\n     * Main logging method\n     */\n    log(level, message, data = {}, category = this.categories.SYSTEM) {\n        const levelValue = typeof level === 'string' ? \n            this.levels[level.toUpperCase()] : level;\n        \n        // Check if log level is enabled\n        if (levelValue > this.currentLevel) {\n            return;\n        }\n        \n        const logEntry = {\n            timestamp: new Date().toISOString(),\n            level: level.toLowerCase(),\n            message,\n            data: this.sanitizeLogData(data),\n            category,\n            sessionId: this.generateSessionId()\n        };\n        \n        // Add to history\n        this.addToHistory(logEntry);\n        \n        // Log to Winston\n        this.logger[level.toLowerCase()](message, {\n            data: logEntry.data,\n            category,\n            sessionId: logEntry.sessionId\n        });\n        \n        // Emit log event for UI updates\n        if (this.eventBus) {\n            this.eventBus.emit('logEntry', logEntry);\n        }\n        \n        // Console output for development\n        if (process.env.NODE_ENV === 'development') {\n            this.consoleLog(logEntry);\n        }\n    }\n    \n    /**\n     * Error logging\n     */\n    error(message, data = {}, category = this.categories.ERROR) {\n        this.log('ERROR', message, data, category);\n    }\n    \n    /**\n     * Warning logging\n     */\n    warn(message, data = {}, category = this.categories.SYSTEM) {\n        this.log('WARN', message, data, category);\n    }\n    \n    /**\n     * Info logging\n     */\n    info(message, data = {}, category = this.categories.SYSTEM) {\n        this.log('INFO', message, data, category);\n    }\n    \n    /**\n     * Debug logging\n     */\n    debug(message, data = {}, category = this.categories.SYSTEM) {\n        this.log('DEBUG', message, data, category);\n    }\n    \n    /**\n     * Trace logging\n     */\n    trace(message, data = {}, category = this.categories.SYSTEM) {\n        this.log('TRACE', message, data, category);\n    }\n    \n    /**\n     * Get a logger instance for a specific component\n     */\n    getLogger(name) {\n        return {\n            error: (message, data) => this.error(`[${name}] ${message}`, data),\n            warn: (message, data) => this.warn(`[${name}] ${message}`, data),\n            info: (message, data) => this.info(`[${name}] ${message}`, data),\n            debug: (message, data) => this.debug(`[${name}] ${message}`, data),\n            trace: (message, data) => this.trace(`[${name}] ${message}`, data)\n        };\n    }\n    \n    /**\n     * Set the current log level\n     */\n    setLogLevel(level) {\n        if (typeof level === 'string') {\n            this.currentLevel = this.levels[level.toUpperCase()] || this.levels.INFO;\n        } else {\n            this.currentLevel = level;\n        }\n        \n        this.logger.info('Log level changed', { newLevel: this.currentLevel });\n        \n        // Emit event for UI updates\n        if (this.eventBus) {\n            this.eventBus.emit('logLevelChanged', { level: this.currentLevel });\n        }\n    }\n    \n    /**\n     * Add log entry to history\n     */\n    addToHistory(logEntry) {\n        this.logHistory.unshift(logEntry);\n        \n        // Maintain history size limit\n        if (this.logHistory.length > this.maxHistorySize) {\n            this.logHistory = this.logHistory.slice(0, this.maxHistorySize);\n        }\n    }\n    \n    /**\n     * Load logs for UI display\n     */\n    async loadLogs(options = {}) {\n        try {\n            const {\n                limit = 100,\n                offset = 0,\n                level = null,\n                category = null,\n                search = null,\n                startDate = null,\n                endDate = null\n            } = options;\n            \n            let filteredLogs = [...this.logHistory];\n            \n            // Apply filters\n            if (level) {\n                filteredLogs = filteredLogs.filter(log => log.level === level.toLowerCase());\n            }\n            \n            if (category) {\n                filteredLogs = filteredLogs.filter(log => log.category === category);\n            }\n            \n            if (search) {\n                const searchLower = search.toLowerCase();\n                filteredLogs = filteredLogs.filter(log => \n                    log.message.toLowerCase().includes(searchLower) ||\n                    JSON.stringify(log.data).toLowerCase().includes(searchLower)\n                );\n            }\n            \n            if (startDate) {\n                filteredLogs = filteredLogs.filter(log => \n                    new Date(log.timestamp) >= new Date(startDate)\n                );\n            }\n            \n            if (endDate) {\n                filteredLogs = filteredLogs.filter(log => \n                    new Date(log.timestamp) <= new Date(endDate)\n                );\n            }\n            \n            // Apply pagination\n            const paginatedLogs = filteredLogs.slice(offset, offset + limit);\n            \n            const result = {\n                logs: paginatedLogs,\n                total: filteredLogs.length,\n                hasMore: offset + limit < filteredLogs.length\n            };\n            \n            this.logger.debug('Logs loaded', {\n                requested: limit,\n                returned: paginatedLogs.length,\n                total: result.total\n            });\n            \n            return result;\n            \n        } catch (error) {\n            this.logger.error('Failed to load logs', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Clear all logs\n     */\n    clearLogs() {\n        const previousCount = this.logHistory.length;\n        this.logHistory = [];\n        \n        this.logger.info('Logs cleared', { previousCount });\n        \n        // Emit event for UI updates\n        if (this.eventBus) {\n            this.eventBus.emit('logsCleared', { previousCount });\n        }\n    }\n    \n    /**\n     * Export logs to file\n     */\n    async exportLogs(options = {}) {\n        try {\n            const {\n                format = 'json',\n                filename = `logs_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}`\n            } = options;\n            \n            const logs = await this.loadLogs({ limit: this.maxHistorySize });\n            \n            let content;\n            let mimeType;\n            let extension;\n            \n            switch (format.toLowerCase()) {\n                case 'csv':\n                    content = this.convertLogsToCSV(logs.logs);\n                    mimeType = 'text/csv';\n                    extension = 'csv';\n                    break;\n                case 'txt':\n                    content = this.convertLogsToText(logs.logs);\n                    mimeType = 'text/plain';\n                    extension = 'txt';\n                    break;\n                case 'json':\n                default:\n                    content = JSON.stringify(logs.logs, null, 2);\n                    mimeType = 'application/json';\n                    extension = 'json';\n                    break;\n            }\n            \n            // Create and download file\n            const blob = new Blob([content], { type: mimeType });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `${filename}.${extension}`;\n            link.style.display = 'none';\n            \n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n            \n            this.logger.info('Logs exported successfully', {\n                format,\n                filename: `${filename}.${extension}`,\n                logCount: logs.logs.length\n            });\n            \n        } catch (error) {\n            this.logger.error('Failed to export logs', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Convert logs to CSV format\n     */\n    convertLogsToCSV(logs) {\n        const headers = ['Timestamp', 'Level', 'Category', 'Message', 'Data'];\n        const csvRows = [headers.join(',')];\n        \n        logs.forEach(log => {\n            const row = [\n                log.timestamp,\n                log.level,\n                log.category,\n                `\"${log.message.replace(/\"/g, '\"\"')}\"`,\n                `\"${JSON.stringify(log.data).replace(/\"/g, '\"\"')}\"`\n            ];\n            csvRows.push(row.join(','));\n        });\n        \n        return csvRows.join('\\n');\n    }\n    \n    /**\n     * Convert logs to text format\n     */\n    convertLogsToText(logs) {\n        return logs.map(log => {\n            const dataStr = Object.keys(log.data).length > 0 ? \n                ` | Data: ${JSON.stringify(log.data)}` : '';\n            return `[${log.timestamp}] ${log.level.toUpperCase()} [${log.category}] ${log.message}${dataStr}`;\n        }).join('\\n');\n    }\n    \n    /**\n     * Console logging for development\n     */\n    consoleLog(logEntry) {\n        const { level, message, data, category, timestamp } = logEntry;\n        const prefix = `[${timestamp}] [${category}]`;\n        \n        switch (level) {\n            case 'error':\n                console.error(prefix, message, data);\n                break;\n            case 'warn':\n                console.warn(prefix, message, data);\n                break;\n            case 'debug':\n                console.debug(prefix, message, data);\n                break;\n            case 'trace':\n                console.trace(prefix, message, data);\n                break;\n            default:\n                console.log(prefix, message, data);\n        }\n    }\n    \n    /**\n     * Sanitize log data to prevent circular references and sensitive data\n     */\n    sanitizeLogData(data) {\n        if (!data || typeof data !== 'object') {\n            return data;\n        }\n        \n        try {\n            // Create a deep copy and remove sensitive fields\n            const sanitized = JSON.parse(JSON.stringify(data, (key, value) => {\n                // Remove sensitive fields\n                const sensitiveFields = ['password', 'token', 'secret', 'key', 'apiKey', 'clientSecret'];\n                if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\n                    return '[REDACTED]';\n                }\n                \n                // Handle circular references\n                if (typeof value === 'object' && value !== null) {\n                    if (value.constructor && value.constructor.name === 'HTMLElement') {\n                        return '[HTMLElement]';\n                    }\n                    if (value instanceof Error) {\n                        return {\n                            name: value.name,\n                            message: value.message,\n                            stack: value.stack\n                        };\n                    }\n                }\n                \n                return value;\n            }));\n            \n            return sanitized;\n        } catch (error) {\n            return { error: 'Failed to sanitize log data', original: String(data) };\n        }\n    }\n    \n    /**\n     * Generate session ID for log tracking\n     */\n    generateSessionId() {\n        return `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    /**\n     * Get logging statistics\n     */\n    getStats() {\n        const stats = {\n            totalLogs: this.logHistory.length,\n            levelCounts: {},\n            categoryCounts: {},\n            recentActivity: this.logHistory.slice(0, 10)\n        };\n        \n        // Count by level\n        this.logHistory.forEach(log => {\n            stats.levelCounts[log.level] = (stats.levelCounts[log.level] || 0) + 1;\n            stats.categoryCounts[log.category] = (stats.categoryCounts[log.category] || 0) + 1;\n        });\n        \n        return stats;\n    }\n}\n\n// Export for use in other modules\nexport default LoggingSubsystem;\n","/**\n * History Subsystem\n * Centralized history management system that replaces legacy HistoryManager\n * Provides operation history tracking, filtering, and event integration\n */\n\nexport class HistorySubsystem {\n    constructor(eventBus, settingsSubsystem, loggingSubsystem) {\n        this.eventBus = eventBus;\n        this.settingsSubsystem = settingsSubsystem;\n        this.loggingSubsystem = loggingSubsystem;\n        \n        // History storage\n        this.history = [];\n        this.maxHistorySize = 500;\n        \n        // History categories\n        this.categories = {\n            IMPORT: 'import',\n            EXPORT: 'export',\n            DELETE: 'delete',\n            MODIFY: 'modify',\n            SETTINGS: 'settings',\n            AUTH: 'auth',\n            SYSTEM: 'system'\n        };\n        \n        // History status types\n        this.statusTypes = {\n            STARTED: 'started',\n            IN_PROGRESS: 'in_progress',\n            COMPLETED: 'completed',\n            FAILED: 'failed',\n            CANCELLED: 'cancelled',\n            PARTIAL: 'partial'\n        };\n        \n        // Current filter settings\n        this.currentFilter = {\n            category: null,\n            status: null,\n            dateRange: null,\n            search: null\n        };\n        \n        // Initialize subsystem\n        this.init();\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.info('HistorySubsystem initialized successfully', {}, 'system');\n        }\n    }\n    \n    /**\n     * Initialize the history subsystem\n     */\n    async init() {\n        try {\n            // Load history settings\n            await this.loadSettings();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Load existing history from storage\n            await this.loadHistoryFromStorage();\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('HistorySubsystem initialization complete', {\n                    historyCount: this.history.length\n                }, 'system');\n            }\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to initialize HistorySubsystem', error, 'system');\n            }\n            throw error;\n        }\n    }\n    \n    /**\n     * Load history settings from SettingsSubsystem\n     */\n    async loadSettings() {\n        try {\n            if (this.settingsSubsystem) {\n                // Access the current settings from the SettingsSubsystem\n                // The SettingsSubsystem stores settings in currentSettings property\n                const settings = this.settingsSubsystem.currentSettings;\n                \n                // Set max history size from settings\n                if (settings && settings.maxHistorySize) {\n                    this.maxHistorySize = settings.maxHistorySize;\n                }\n            }\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.warn('Could not load history settings, using defaults', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Set up event listeners for cross-subsystem communication\n     */\n    setupEventListeners() {\n        if (this.eventBus) {\n            // Listen for operation events to automatically track history\n            this.eventBus.on('importStarted', (data) => {\n                this.addHistoryEntry('import', 'Import operation started', 'started', data);\n            });\n            \n            this.eventBus.on('importCompleted', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'completed', 'Import operation completed', data);\n            });\n            \n            this.eventBus.on('importFailed', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'failed', 'Import operation failed', data);\n            });\n            \n            this.eventBus.on('exportStarted', (data) => {\n                this.addHistoryEntry('export', 'Export operation started', 'started', data);\n            });\n            \n            this.eventBus.on('exportCompleted', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'completed', 'Export operation completed', data);\n            });\n            \n            this.eventBus.on('exportFailed', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'failed', 'Export operation failed', data);\n            });\n            \n            this.eventBus.on('deleteOperationStarted', (data) => {\n                this.addHistoryEntry('delete', 'Delete operation started', 'started', data);\n            });\n            \n            this.eventBus.on('deleteOperationCompleted', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'completed', 'Delete operation completed', data);\n            });\n            \n            this.eventBus.on('deleteOperationFailed', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'failed', 'Delete operation failed', data);\n            });\n            \n            this.eventBus.on('modifyOperationStarted', (data) => {\n                this.addHistoryEntry('modify', 'Modify operation started', 'started', data);\n            });\n            \n            this.eventBus.on('modifyOperationCompleted', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'completed', 'Modify operation completed', data);\n            });\n            \n            this.eventBus.on('modifyOperationFailed', (data) => {\n                this.updateHistoryEntry(data.sessionId, 'failed', 'Modify operation failed', data);\n            });\n            \n            // Listen for history management events\n            this.eventBus.on('clearHistory', () => {\n                this.clearHistory();\n            });\n            \n            this.eventBus.on('exportHistory', (data) => {\n                this.exportHistory(data.options);\n            });\n            \n            this.eventBus.on('filterHistory', (data) => {\n                this.setFilter(data.filter);\n            });\n        }\n    }\n    \n    /**\n     * Add a new history entry\n     */\n    addHistoryEntry(category, description, status, data = {}) {\n        const entry = {\n            id: this.generateHistoryId(),\n            timestamp: new Date().toISOString(),\n            category,\n            description,\n            status,\n            data: this.sanitizeHistoryData(data),\n            sessionId: data.sessionId || this.generateSessionId(),\n            duration: null,\n            startTime: new Date().toISOString()\n        };\n        \n        // Add to beginning of history array\n        this.history.unshift(entry);\n        \n        // Maintain history size limit\n        if (this.history.length > this.maxHistorySize) {\n            this.history = this.history.slice(0, this.maxHistorySize);\n        }\n        \n        // Save to storage\n        this.saveHistoryToStorage();\n        \n        // Log the history entry\n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.info('History entry added', {\n                category,\n                description,\n                status,\n                sessionId: entry.sessionId\n            }, 'system');\n        }\n        \n        // Emit event for UI updates\n        if (this.eventBus) {\n            this.eventBus.emit('historyEntryAdded', entry);\n        }\n        \n        return entry.id;\n    }\n    \n    /**\n     * Update an existing history entry\n     */\n    updateHistoryEntry(sessionId, status, description = null, data = {}) {\n        const entry = this.history.find(h => h.sessionId === sessionId);\n        \n        if (entry) {\n            entry.status = status;\n            entry.timestamp = new Date().toISOString();\n            \n            if (description) {\n                entry.description = description;\n            }\n            \n            // Calculate duration if operation is complete\n            if (['completed', 'failed', 'cancelled'].includes(status) && entry.startTime) {\n                entry.duration = new Date() - new Date(entry.startTime);\n            }\n            \n            // Merge additional data\n            if (data && Object.keys(data).length > 0) {\n                entry.data = { ...entry.data, ...this.sanitizeHistoryData(data) };\n            }\n            \n            // Save to storage\n            this.saveHistoryToStorage();\n            \n            // Log the update\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('History entry updated', {\n                    sessionId,\n                    status,\n                    description,\n                    duration: entry.duration\n                }, 'system');\n            }\n            \n            // Emit event for UI updates\n            if (this.eventBus) {\n                this.eventBus.emit('historyEntryUpdated', entry);\n            }\n            \n            return true;\n        }\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.warn('History entry not found for update', { sessionId }, 'system');\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Get filtered history entries\n     */\n    async getHistory(options = {}) {\n        try {\n            const {\n                limit = 50,\n                offset = 0,\n                category = null,\n                status = null,\n                search = null,\n                startDate = null,\n                endDate = null,\n                sortBy = 'timestamp',\n                sortOrder = 'desc'\n            } = options;\n            \n            let filteredHistory = [...this.history];\n            \n            // Apply filters\n            if (category) {\n                filteredHistory = filteredHistory.filter(entry => entry.category === category);\n            }\n            \n            if (status) {\n                filteredHistory = filteredHistory.filter(entry => entry.status === status);\n            }\n            \n            if (search) {\n                const searchLower = search.toLowerCase();\n                filteredHistory = filteredHistory.filter(entry =>\n                    entry.description.toLowerCase().includes(searchLower) ||\n                    JSON.stringify(entry.data).toLowerCase().includes(searchLower)\n                );\n            }\n            \n            if (startDate) {\n                filteredHistory = filteredHistory.filter(entry =>\n                    new Date(entry.timestamp) >= new Date(startDate)\n                );\n            }\n            \n            if (endDate) {\n                filteredHistory = filteredHistory.filter(entry =>\n                    new Date(entry.timestamp) <= new Date(endDate)\n                );\n            }\n            \n            // Apply sorting\n            filteredHistory.sort((a, b) => {\n                const aValue = a[sortBy];\n                const bValue = b[sortBy];\n                \n                if (sortOrder === 'asc') {\n                    return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n                } else {\n                    return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n                }\n            });\n            \n            // Apply pagination\n            const paginatedHistory = filteredHistory.slice(offset, offset + limit);\n            \n            const result = {\n                history: paginatedHistory,\n                total: filteredHistory.length,\n                hasMore: offset + limit < filteredHistory.length,\n                stats: this.getHistoryStats(filteredHistory)\n            };\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.debug('History retrieved', {\n                    requested: limit,\n                    returned: paginatedHistory.length,\n                    total: result.total,\n                    filters: { category, status, search }\n                }, 'system');\n            }\n            \n            return result;\n            \n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to get history', error, 'system');\n            }\n            throw error;\n        }\n    }\n    \n    /**\n     * Get history statistics\n     */\n    getHistoryStats(historyData = null) {\n        const data = historyData || this.history;\n        \n        const stats = {\n            total: data.length,\n            categories: {},\n            statuses: {},\n            recentActivity: data.slice(0, 5),\n            averageDuration: 0,\n            totalDuration: 0\n        };\n        \n        let durationCount = 0;\n        let totalDuration = 0;\n        \n        data.forEach(entry => {\n            // Count by category\n            stats.categories[entry.category] = (stats.categories[entry.category] || 0) + 1;\n            \n            // Count by status\n            stats.statuses[entry.status] = (stats.statuses[entry.status] || 0) + 1;\n            \n            // Calculate duration stats\n            if (entry.duration) {\n                totalDuration += entry.duration;\n                durationCount++;\n            }\n        });\n        \n        if (durationCount > 0) {\n            stats.averageDuration = totalDuration / durationCount;\n            stats.totalDuration = totalDuration;\n        }\n        \n        return stats;\n    }\n    \n    /**\n     * Set history filter\n     */\n    setFilter(filter) {\n        this.currentFilter = { ...this.currentFilter, ...filter };\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.debug('History filter updated', this.currentFilter, 'system');\n        }\n        \n        // Emit event for UI updates\n        if (this.eventBus) {\n            this.eventBus.emit('historyFilterChanged', this.currentFilter);\n        }\n    }\n    \n    /**\n     * Clear all history\n     */\n    clearHistory() {\n        const previousCount = this.history.length;\n        this.history = [];\n        \n        // Clear from storage\n        this.saveHistoryToStorage();\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.info('History cleared', { previousCount }, 'system');\n        }\n        \n        // Emit event for UI updates\n        if (this.eventBus) {\n            this.eventBus.emit('historyCleared', { previousCount });\n        }\n    }\n    \n    /**\n     * Export history to file\n     */\n    async exportHistory(options = {}) {\n        try {\n            const {\n                format = 'json',\n                filename = `history_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}`,\n                includeData = true\n            } = options;\n            \n            const historyData = await this.getHistory({ limit: this.maxHistorySize });\n            \n            let content;\n            let mimeType;\n            let extension;\n            \n            // Prepare export data\n            const exportData = historyData.history.map(entry => ({\n                id: entry.id,\n                timestamp: entry.timestamp,\n                category: entry.category,\n                description: entry.description,\n                status: entry.status,\n                duration: entry.duration,\n                ...(includeData && { data: entry.data })\n            }));\n            \n            switch (format.toLowerCase()) {\n                case 'csv':\n                    content = this.convertHistoryToCSV(exportData);\n                    mimeType = 'text/csv';\n                    extension = 'csv';\n                    break;\n                case 'txt':\n                    content = this.convertHistoryToText(exportData);\n                    mimeType = 'text/plain';\n                    extension = 'txt';\n                    break;\n                case 'json':\n                default:\n                    content = JSON.stringify({\n                        exportDate: new Date().toISOString(),\n                        stats: historyData.stats,\n                        history: exportData\n                    }, null, 2);\n                    mimeType = 'application/json';\n                    extension = 'json';\n                    break;\n            }\n            \n            // Create and download file\n            const blob = new Blob([content], { type: mimeType });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `${filename}.${extension}`;\n            link.style.display = 'none';\n            \n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('History exported successfully', {\n                    format,\n                    filename: `${filename}.${extension}`,\n                    entryCount: exportData.length\n                }, 'system');\n            }\n            \n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to export history', error, 'system');\n            }\n            throw error;\n        }\n    }\n    \n    /**\n     * Convert history to CSV format\n     */\n    convertHistoryToCSV(history) {\n        const headers = ['ID', 'Timestamp', 'Category', 'Description', 'Status', 'Duration'];\n        const csvRows = [headers.join(',')];\n        \n        history.forEach(entry => {\n            const row = [\n                entry.id,\n                entry.timestamp,\n                entry.category,\n                `\"${entry.description.replace(/\"/g, '\"\"')}\"`,\n                entry.status,\n                entry.duration || ''\n            ];\n            csvRows.push(row.join(','));\n        });\n        \n        return csvRows.join('\\n');\n    }\n    \n    /**\n     * Convert history to text format\n     */\n    convertHistoryToText(history) {\n        return history.map(entry => {\n            const duration = entry.duration ? ` (${Math.round(entry.duration / 1000)}s)` : '';\n            return `[${entry.timestamp}] ${entry.category.toUpperCase()} [${entry.status.toUpperCase()}] ${entry.description}${duration}`;\n        }).join('\\n');\n    }\n    \n    /**\n     * Load history from local storage\n     */\n    async loadHistoryFromStorage() {\n        try {\n            const stored = localStorage.getItem('pingone-import-history');\n            if (stored) {\n                const parsedHistory = JSON.parse(stored);\n                if (Array.isArray(parsedHistory)) {\n                    this.history = parsedHistory;\n                    \n                    if (this.loggingSubsystem) {\n                        this.loggingSubsystem.info('History loaded from storage', {\n                            entryCount: this.history.length\n                        }, 'system');\n                    }\n                }\n            }\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.warn('Failed to load history from storage', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Save history to local storage\n     */\n    saveHistoryToStorage() {\n        try {\n            localStorage.setItem('pingone-import-history', JSON.stringify(this.history));\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.warn('Failed to save history to storage', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Sanitize history data to prevent circular references and sensitive data\n     */\n    sanitizeHistoryData(data) {\n        if (!data || typeof data !== 'object') {\n            return data;\n        }\n        \n        try {\n            return JSON.parse(JSON.stringify(data, (key, value) => {\n                // Remove sensitive fields\n                const sensitiveFields = ['password', 'token', 'secret', 'key', 'apiKey', 'clientSecret'];\n                if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\n                    return '[REDACTED]';\n                }\n                \n                // Handle circular references and complex objects\n                if (typeof value === 'object' && value !== null) {\n                    if (value.constructor && value.constructor.name === 'HTMLElement') {\n                        return '[HTMLElement]';\n                    }\n                    if (value instanceof Error) {\n                        return {\n                            name: value.name,\n                            message: value.message\n                        };\n                    }\n                }\n                \n                return value;\n            }));\n        } catch (error) {\n            return { error: 'Failed to sanitize history data', original: String(data) };\n        }\n    }\n    \n    /**\n     * Generate unique history ID\n     */\n    generateHistoryId() {\n        return `hist_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    /**\n     * Generate session ID for operation tracking\n     */\n    generateSessionId() {\n        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    \n    /**\n     * Get a specific history entry by ID\n     */\n    getHistoryEntry(id) {\n        return this.history.find(entry => entry.id === id);\n    }\n    \n    /**\n     * Delete a specific history entry\n     */\n    deleteHistoryEntry(id) {\n        const index = this.history.findIndex(entry => entry.id === id);\n        if (index !== -1) {\n            const deleted = this.history.splice(index, 1)[0];\n            this.saveHistoryToStorage();\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('History entry deleted', { id, description: deleted.description }, 'system');\n            }\n            \n            // Emit event for UI updates\n            if (this.eventBus) {\n                this.eventBus.emit('historyEntryDeleted', { id, entry: deleted });\n            }\n            \n            return true;\n        }\n        \n        return false;\n    }\n}\n\n// Export for use in other modules\nexport default HistorySubsystem;\n","/**\n * Population Subsystem\n * Centralized population management system for dropdown handling and population operations\n * Provides population loading, caching, filtering, and event integration\n */\n\nexport class PopulationSubsystem {\n    constructor(eventBus, settingsSubsystem, loggingSubsystem, apiClient) {\n        this.eventBus = eventBus;\n        this.settingsSubsystem = settingsSubsystem;\n        this.loggingSubsystem = loggingSubsystem;\n        this.apiClient = apiClient;\n        \n        // Population cache\n        this.populationCache = new Map();\n        this.cacheExpiry = 5 * 60 * 1000; // 5 minutes\n        this.lastCacheUpdate = null;\n        \n        // Population loading state\n        this.isLoading = false;\n        this.loadingPromise = null;\n        \n        // Dropdown management\n        this.managedDropdowns = new Set();\n        this.dropdownConfigs = new Map();\n        \n        // Initialize subsystem\n        this.init();\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.info('PopulationSubsystem initialized successfully', {}, 'system');\n        }\n    }\n    \n    /**\n     * Initialize the population subsystem\n     */\n    async init() {\n        try {\n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Load cached populations if available\n            this.loadCachedPopulations();\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('PopulationSubsystem initialization complete', {\n                    cachedPopulations: this.populationCache.size\n                }, 'system');\n            }\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to initialize PopulationSubsystem', error, 'system');\n            }\n            throw error;\n        }\n    }\n    \n    /**\n     * Set up event listeners for cross-subsystem communication\n     */\n    setupEventListeners() {\n        if (this.eventBus) {\n            // Listen for settings changes that might affect populations\n            this.eventBus.on('settingsChanged', () => {\n                this.invalidateCache();\n            });\n            \n            // Listen for authentication events\n            this.eventBus.on('authenticationSuccess', () => {\n                this.refreshPopulations();\n            });\n            \n            this.eventBus.on('authenticationFailed', () => {\n                this.clearCache();\n            });\n            \n            // Listen for population refresh requests\n            this.eventBus.on('refreshPopulations', (data) => {\n                this.refreshPopulations(data.force);\n            });\n            \n            // Listen for dropdown registration\n            this.eventBus.on('registerDropdown', (data) => {\n                this.registerDropdown(data.dropdownId, data.config);\n            });\n        }\n    }\n    \n    /**\n     * Load populations from API with caching\n     */\n    async loadPopulations(options = {}) {\n        const { force = false, useCache = true } = options;\n        \n        try {\n            // Check cache first if not forcing refresh\n            if (!force && useCache && this.isCacheValid()) {\n                const cached = this.getCachedPopulations();\n                if (cached && cached.length > 0) {\n                    if (this.loggingSubsystem) {\n                        this.loggingSubsystem.debug('Returning cached populations', {\n                            count: cached.length\n                        }, 'system');\n                    }\n                    return cached;\n                }\n            }\n            \n            // Prevent multiple simultaneous loads\n            if (this.isLoading && this.loadingPromise) {\n                return await this.loadingPromise;\n            }\n            \n            this.isLoading = true;\n            this.loadingPromise = this.performPopulationLoad();\n            \n            const populations = await this.loadingPromise;\n            \n            // Cache the results\n            this.cachePopulations(populations);\n            \n            // Emit event for UI updates\n            if (this.eventBus) {\n                this.eventBus.emit('populationsLoaded', {\n                    populations,\n                    count: populations.length,\n                    cached: false\n                });\n            }\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('Populations loaded successfully', {\n                    count: populations.length\n                }, 'system');\n            }\n            \n            return populations;\n            \n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to load populations', error, 'system');\n            }\n            \n            // Emit error event\n            if (this.eventBus) {\n                this.eventBus.emit('populationsLoadFailed', {\n                    error: error.message\n                });\n            }\n            \n            throw error;\n        } finally {\n            this.isLoading = false;\n            this.loadingPromise = null;\n        }\n    }\n    \n    /**\n     * Perform the actual population loading from API\n     */\n    async performPopulationLoad() {\n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.debug('Starting performPopulationLoad', {}, 'system');\n        }\n        \n        if (!this.apiClient) {\n            const error = 'API client not available for population loading';\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error(error, {}, 'system');\n            }\n            throw new Error(error);\n        }\n        \n        // Check if API client has the required method\n        if (typeof this.apiClient.get !== 'function') {\n            const error = 'API client does not support HTTP GET requests';\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error(error, { apiClientType: typeof this.apiClient }, 'system');\n            }\n            throw new Error(error);\n        }\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.debug('Making API call to /api/populations', {}, 'system');\n        }\n        \n        try {\n            // Load populations from API using the /api/populations endpoint\n            const response = await this.apiClient.get('/api/populations');\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.debug('API response received', { \n                    hasResponse: !!response, \n                    hasPopulations: !!(response && response.populations),\n                    populationsIsArray: !!(response && Array.isArray(response.populations)),\n                    populationCount: response && response.populations ? response.populations.length : 0\n                }, 'system');\n            }\n            \n            if (!response || !Array.isArray(response.populations)) {\n                const error = 'Invalid populations response from API';\n                if (this.loggingSubsystem) {\n                    this.loggingSubsystem.error(error, { response }, 'system');\n                }\n                throw new Error(error);\n            }\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info(`Successfully loaded ${response.populations.length} populations from API`, {}, 'system');\n            }\n            \n            return response.populations;\n            \n        } catch (apiError) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('API call to /api/populations failed', { \n                    error: apiError.message,\n                    stack: apiError.stack \n                }, 'system');\n            }\n            throw apiError;\n        }\n    }\n    \n    /**\n     * Populate a dropdown with populations\n     */\n    async populateDropdown(dropdownId, config = {}) {\n        try {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.debug(`Starting population dropdown population for: ${dropdownId}`, config, 'system');\n            }\n            \n            const {\n                includeEmpty = true,\n                emptyText = 'Select a population',\n                emptyValue = '',\n                filter = null,\n                sortBy = 'name',\n                sortOrder = 'asc'\n            } = config;\n            \n            // Register dropdown for management\n            this.registerDropdown(dropdownId, config);\n            \n            const dropdown = document.getElementById(dropdownId);\n            if (!dropdown) {\n                const error = `Dropdown element not found: ${dropdownId}`;\n                if (this.loggingSubsystem) {\n                    this.loggingSubsystem.error(error, {}, 'system');\n                }\n                throw new Error(error);\n            }\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.debug(`Dropdown element found, showing loading state for: ${dropdownId}`, {}, 'system');\n            }\n            \n            // Show loading state\n            this.showDropdownLoading(dropdown);\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.debug(`Loading populations for dropdown: ${dropdownId}`, {}, 'system');\n            }\n            \n            // Load populations\n            const populations = await this.loadPopulations();\n            \n            // Filter populations if needed\n            let filteredPopulations = populations;\n            if (filter && typeof filter === 'function') {\n                filteredPopulations = populations.filter(filter);\n            }\n            \n            // Sort populations\n            filteredPopulations = this.sortPopulations(filteredPopulations, sortBy, sortOrder);\n            \n            // Clear existing options\n            dropdown.innerHTML = '';\n            \n            // Add empty option if requested\n            if (includeEmpty) {\n                const emptyOption = document.createElement('option');\n                emptyOption.value = emptyValue;\n                emptyOption.textContent = emptyText;\n                dropdown.appendChild(emptyOption);\n            }\n            \n            // Add population options\n            filteredPopulations.forEach(population => {\n                const option = document.createElement('option');\n                option.value = population.id;\n                option.textContent = population.name;\n                option.dataset.populationId = population.id;\n                option.dataset.populationName = population.name;\n                dropdown.appendChild(option);\n            });\n            \n            // Hide loading state\n            this.hideDropdownLoading(dropdown);\n            \n            // Emit event for UI updates\n            if (this.eventBus) {\n                this.eventBus.emit('dropdownPopulated', {\n                    dropdownId,\n                    populationCount: filteredPopulations.length\n                });\n            }\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.debug('Dropdown populated successfully', {\n                    dropdownId,\n                    populationCount: filteredPopulations.length\n                }, 'system');\n            }\n            \n            return true;\n            \n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to populate dropdown', {\n                    dropdownId,\n                    error: error.message\n                }, 'system');\n            }\n            \n            // Show error state in dropdown\n            this.showDropdownError(dropdownId, error.message);\n            \n            // Emit error event\n            if (this.eventBus) {\n                this.eventBus.emit('dropdownPopulationFailed', {\n                    dropdownId,\n                    error: error.message\n                });\n            }\n            \n            return false;\n        }\n    }\n    \n    /**\n     * Register a dropdown for management\n     */\n    registerDropdown(dropdownId, config = {}) {\n        this.managedDropdowns.add(dropdownId);\n        this.dropdownConfigs.set(dropdownId, config);\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.debug('Dropdown registered', { dropdownId }, 'system');\n        }\n    }\n    \n    /**\n     * Refresh all managed dropdowns\n     */\n    async refreshAllDropdowns() {\n        try {\n            const refreshPromises = Array.from(this.managedDropdowns).map(dropdownId => {\n                const config = this.dropdownConfigs.get(dropdownId) || {};\n                return this.populateDropdown(dropdownId, config);\n            });\n            \n            await Promise.all(refreshPromises);\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('All dropdowns refreshed', {\n                    count: this.managedDropdowns.size\n                }, 'system');\n            }\n            \n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to refresh all dropdowns', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Refresh populations and update all dropdowns\n     */\n    async refreshPopulations(force = false) {\n        try {\n            // Load fresh populations\n            await this.loadPopulations({ force: true });\n            \n            // Refresh all managed dropdowns\n            await this.refreshAllDropdowns();\n            \n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.info('Populations refreshed successfully', {}, 'system');\n            }\n            \n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to refresh populations', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Sort populations by specified criteria\n     */\n    sortPopulations(populations, sortBy = 'name', sortOrder = 'asc') {\n        return populations.sort((a, b) => {\n            let aValue = a[sortBy];\n            let bValue = b[sortBy];\n            \n            // Handle string comparison\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\n                aValue = aValue.toLowerCase();\n                bValue = bValue.toLowerCase();\n            }\n            \n            let comparison = 0;\n            if (aValue < bValue) {\n                comparison = -1;\n            } else if (aValue > bValue) {\n                comparison = 1;\n            }\n            \n            return sortOrder === 'desc' ? -comparison : comparison;\n        });\n    }\n    \n    /**\n     * Show loading state for dropdown\n     */\n    showDropdownLoading(dropdown) {\n        dropdown.innerHTML = '<option value=\"\">Loading populations...</option>';\n        dropdown.disabled = true;\n        dropdown.classList.add('loading');\n    }\n    \n    /**\n     * Hide loading state for dropdown\n     */\n    hideDropdownLoading(dropdown) {\n        dropdown.disabled = false;\n        dropdown.classList.remove('loading');\n    }\n    \n    /**\n     * Show error state for dropdown\n     */\n    showDropdownError(dropdownId, errorMessage) {\n        const dropdown = document.getElementById(dropdownId);\n        if (dropdown) {\n            dropdown.innerHTML = `<option value=\"\">Error: ${errorMessage}</option>`;\n            dropdown.disabled = false;\n            dropdown.classList.add('error');\n        }\n    }\n    \n    /**\n     * Cache populations with timestamp\n     */\n    cachePopulations(populations) {\n        this.populationCache.set('populations', populations);\n        this.lastCacheUpdate = Date.now();\n        \n        // Save to localStorage for persistence\n        try {\n            localStorage.setItem('pingone-populations-cache', JSON.stringify({\n                populations,\n                timestamp: this.lastCacheUpdate\n            }));\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.warn('Failed to save populations to localStorage', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Get cached populations\n     */\n    getCachedPopulations() {\n        return this.populationCache.get('populations') || [];\n    }\n    \n    /**\n     * Check if cache is valid\n     */\n    isCacheValid() {\n        if (!this.lastCacheUpdate) {\n            return false;\n        }\n        \n        const age = Date.now() - this.lastCacheUpdate;\n        return age < this.cacheExpiry;\n    }\n    \n    /**\n     * Load cached populations from localStorage\n     */\n    loadCachedPopulations() {\n        try {\n            const cached = localStorage.getItem('pingone-populations-cache');\n            if (cached) {\n                const { populations, timestamp } = JSON.parse(cached);\n                \n                // Check if cache is still valid\n                const age = Date.now() - timestamp;\n                if (age < this.cacheExpiry) {\n                    this.populationCache.set('populations', populations);\n                    this.lastCacheUpdate = timestamp;\n                    \n                    if (this.loggingSubsystem) {\n                        this.loggingSubsystem.debug('Loaded populations from localStorage cache', {\n                            count: populations.length,\n                            age: Math.round(age / 1000)\n                        }, 'system');\n                    }\n                }\n            }\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.warn('Failed to load populations from localStorage', error, 'system');\n            }\n        }\n    }\n    \n    /**\n     * Invalidate cache\n     */\n    invalidateCache() {\n        this.populationCache.clear();\n        this.lastCacheUpdate = null;\n        \n        // Clear localStorage cache\n        try {\n            localStorage.removeItem('pingone-populations-cache');\n        } catch (error) {\n            // Ignore localStorage errors\n        }\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.debug('Population cache invalidated', {}, 'system');\n        }\n    }\n    \n    /**\n     * Clear cache completely\n     */\n    clearCache() {\n        this.invalidateCache();\n        \n        if (this.loggingSubsystem) {\n            this.loggingSubsystem.debug('Population cache cleared', {}, 'system');\n        }\n    }\n    \n    /**\n     * Get population by ID\n     */\n    async getPopulationById(populationId) {\n        try {\n            const populations = await this.loadPopulations();\n            return populations.find(pop => pop.id === populationId) || null;\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to get population by ID', {\n                    populationId,\n                    error: error.message\n                }, 'system');\n            }\n            return null;\n        }\n    }\n    \n    /**\n     * Search populations by name\n     */\n    async searchPopulations(searchTerm) {\n        try {\n            const populations = await this.loadPopulations();\n            const searchLower = searchTerm.toLowerCase();\n            \n            return populations.filter(pop => \n                pop.name.toLowerCase().includes(searchLower) ||\n                (pop.description && pop.description.toLowerCase().includes(searchLower))\n            );\n        } catch (error) {\n            if (this.loggingSubsystem) {\n                this.loggingSubsystem.error('Failed to search populations', {\n                    searchTerm,\n                    error: error.message\n                }, 'system');\n            }\n            return [];\n        }\n    }\n    \n    /**\n     * Get cache statistics\n     */\n    getCacheStats() {\n        return {\n            isValid: this.isCacheValid(),\n            lastUpdate: this.lastCacheUpdate,\n            age: this.lastCacheUpdate ? Date.now() - this.lastCacheUpdate : null,\n            populationCount: this.getCachedPopulations().length,\n            managedDropdowns: this.managedDropdowns.size\n        };\n    }\n}\n\n// Export for use in other modules\nexport default PopulationSubsystem;\n","/**\n * Settings Management Subsystem\n * \n * Handles all settings operations with proper separation of concerns.\n * Manages settings form validation, saving, and UI feedback.\n */\n\nexport class SettingsSubsystem {\n    constructor(logger, uiManager, localClient, settingsManager, eventBus, credentialsManager) {\n        this.logger = logger;\n        this.uiManager = uiManager;\n        this.localClient = localClient;\n        this.settingsManager = settingsManager;\n        this.eventBus = eventBus;\n        this.credentialsManager = credentialsManager;\n        \n        // Settings state management\n        this.isSaving = false;\n        this.currentSettings = null;\n        \n        this.logger.info('Settings Subsystem initialized');\n        \n        // Set up event listeners for cross-subsystem communication\n        this.setupCrossSubsystemEvents();\n    }\n    \n    /**\n     * Initialize the settings subsystem\n     */\n    async init() {\n        try {\n            this.setupEventListeners();\n            await this.loadCurrentSettings();\n            this.logger.info('Settings Subsystem initialized successfully');\n        } catch (error) {\n            this.logger.error('Failed to initialize Settings Subsystem', error);\n            this.uiManager.showSettingsActionStatus('Failed to initialize Settings Subsystem: ' + error.message, 'error');\n        }\n    }\n    \n    /**\n     * Set up event listeners for settings-related elements\n     */\n    setupEventListeners() {\n        this.logger.info('Setting up Settings Subsystem event listeners');\n        \n        // Save settings button\n        const saveBtn = document.getElementById('save-settings');\n        if (saveBtn) {\n            this.logger.info('Found save settings button, attaching event listener');\n            saveBtn.addEventListener('click', async (e) => {\n                e.preventDefault();\n                this.logger.info('Save settings button clicked');\n                await this.saveSettings();\n            });\n        } else {\n            this.logger.warn('Save settings button not found in DOM');\n        }\n        \n        // Test connection button\n        const testBtn = document.getElementById('test-connection-btn');\n        if (testBtn) {\n            testBtn.addEventListener('click', async (e) => {\n                e.preventDefault();\n                await this.testConnection();\n            });\n        }\n        \n        // Get token button\n        const tokenBtn = document.getElementById('get-token-btn');\n        if (tokenBtn) {\n            tokenBtn.addEventListener('click', async (e) => {\n                e.preventDefault();\n                await this.getToken();\n            });\n        }\n        \n        // API secret visibility toggle\n        const toggleBtn = document.getElementById('toggle-api-secret-visibility');\n        if (toggleBtn) {\n            toggleBtn.addEventListener('click', (e) => {\n                e.preventDefault();\n                this.toggleSecretVisibility();\n            });\n        }\n        \n        this.logger.info('Settings Subsystem event listeners setup complete');\n    }\n    \n    /**\n     * Load current settings from settings manager\n     */\n    async loadCurrentSettings() {\n        try {\n            // Check if settingsManager exists and has getSettings method\n            if (!this.settingsManager) {\n                this.logger.warn('Settings manager not available, using default settings');\n                this.currentSettings = this.getDefaultSettings();\n                return;\n            }\n            \n            if (typeof this.settingsManager.getAllSettings !== 'function') {\n                this.logger.warn('Settings manager getAllSettings method not available, using default settings');\n                this.currentSettings = this.getDefaultSettings();\n                return;\n            }\n            \n            // Try to load settings from settings manager\n            this.currentSettings = this.settingsManager.getAllSettings();\n            \n            // If settings are null or empty, use defaults\n            if (!this.currentSettings || Object.keys(this.currentSettings).length === 0) {\n                this.logger.info('No existing settings found, using defaults');\n                this.currentSettings = this.getDefaultSettings();\n            }\n            \n            this.populateSettingsForm(this.currentSettings);\n            this.logger.info('Current settings loaded successfully');\n        } catch (error) {\n            this.logger.warn('Failed to load current settings, using defaults:', error.message);\n            // Don't throw error, use default settings instead\n            this.currentSettings = this.getDefaultSettings();\n        }\n    }\n    \n    /**\n     * Get default settings\n     */\n    getDefaultSettings() {\n        return {\n            environmentId: '',\n            apiClientId: '',\n            apiSecret: '',\n            region: 'NorthAmerica',\n            rateLimit: 50,\n            populationId: ''\n        };\n    }\n    \n    /**\n     * Save settings\n     */\n    async saveSettings() {\n        if (this.isSaving) {\n            this.logger.warn('Settings save already in progress');\n            return;\n        }\n        \n        try {\n            this.isSaving = true;\n            this.logger.info('Starting settings save process');\n            \n            // Show immediate feedback\n            this.uiManager.showSettingsActionStatus('Saving settings...', 'info');\n            \n            // Get form data\n            const settings = this.getFormData();\n            this.logger.info('Form data extracted:', settings);\n            \n            // Validate settings\n            if (!this.validateSettings(settings)) {\n                return;\n            }\n            \n            // Save to credentials manager if available\n            if (this.credentialsManager) {\n                const credentials = {\n                    environmentId: settings.environmentId || '',\n                    apiClientId: settings.apiClientId || '',\n                    apiSecret: settings.apiSecret || '',\n                    populationId: settings.populationId || '',\n                    region: settings.region || 'NorthAmerica'\n                };\n                \n                const validation = this.credentialsManager.validateCredentials(credentials);\n                if (!validation.isValid) {\n                    throw new Error(`Invalid credentials: ${validation.errors.join(', ')}`);\n                }\n                \n                this.credentialsManager.saveCredentials(credentials);\n                this.logger.info('Credentials saved to localStorage');\n            }\n            \n            // Save to server\n            try {\n                const response = await this.localClient.post('/api/settings', settings);\n                this.logger.info('Settings saved to server successfully');\n            } catch (serverError) {\n                this.logger.warn('Failed to save to server, but credentials saved to localStorage:', serverError.message);\n            }\n            \n            // Update settings manager\n            this.settingsManager.updateSettings(settings);\n            this.currentSettings = settings;\n            \n            // Show success feedback\n            this.uiManager.showSettingsActionStatus('Settings saved successfully', 'success', { autoHideDelay: 3000 });\n            \n            // Update connection status\n            this.updateConnectionStatus('✅ Settings saved! Please - Get token', 'success');\n            \n            // Emit event for other subsystems\n            if (this.eventBus) {\n                this.eventBus.emit('settingsSaved', { settings });\n            }\n            \n            // Emit credentials-updated event for population dropdown fallback system\n            const credentialsUpdatedEvent = new CustomEvent('credentials-updated', {\n                detail: { settings, timestamp: Date.now() }\n            });\n            document.dispatchEvent(credentialsUpdatedEvent);\n            this.logger.info('Credentials-updated event dispatched for population dropdown system');\n            \n            this.logger.info('Settings save process completed successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to save settings', error);\n            this.uiManager.showSettingsActionStatus('Failed to save settings: ' + error.message, 'error', { autoHide: false });\n        } finally {\n            this.isSaving = false;\n        }\n    }\n    \n    /**\n     * Get form data from settings form\n     */\n    getFormData() {\n        const form = document.getElementById('settings-form');\n        if (!form) {\n            throw new Error('Settings form not found');\n        }\n        \n        const formData = new FormData(form);\n        const settings = {\n            environmentId: document.getElementById('environment-id')?.value || '',\n            apiClientId: document.getElementById('api-client-id')?.value || '',\n            apiSecret: document.getElementById('api-secret')?.value || '',\n            region: document.getElementById('region')?.value || 'NorthAmerica',\n            rateLimit: parseInt(document.getElementById('rate-limit')?.value) || 50,\n            populationId: document.getElementById('population-id')?.value || ''\n        };\n        \n        return settings;\n    }\n    \n    /**\n     * Validate settings\n     */\n    validateSettings(settings) {\n        const errors = [];\n        \n        if (!settings.environmentId?.trim()) {\n            errors.push('Environment ID is required');\n        }\n        \n        if (!settings.apiClientId?.trim()) {\n            errors.push('API Client ID is required');\n        }\n        \n        if (!settings.apiSecret?.trim()) {\n            errors.push('API Secret is required');\n        }\n        \n        if (!settings.region?.trim()) {\n            errors.push('Region is required');\n        }\n        \n        if (settings.rateLimit && (settings.rateLimit < 1 || settings.rateLimit > 1000)) {\n            errors.push('Rate limit must be between 1 and 1000');\n        }\n        \n        if (errors.length > 0) {\n            const errorMessage = 'Validation failed: ' + errors.join(', ');\n            this.logger.error('Settings validation failed', { errors });\n            this.uiManager.showSettingsActionStatus(errorMessage, 'error', { autoHide: false });\n            return false;\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Populate settings form with current values\n     */\n    populateSettingsForm(settings) {\n        if (!settings) return;\n        \n        const fields = {\n            'environment-id': settings.environmentId,\n            'api-client-id': settings.apiClientId,\n            'api-secret': settings.apiSecret,\n            'region': settings.region,\n            'rate-limit': settings.rateLimit,\n            'population-id': settings.populationId\n        };\n        \n        Object.entries(fields).forEach(([fieldId, value]) => {\n            const field = document.getElementById(fieldId);\n            if (field && value !== undefined && value !== null) {\n                field.value = value;\n            }\n        });\n        \n        this.logger.info('Settings form populated with current values');\n    }\n    \n    /**\n     * Test connection\n     * CRITICAL: This method MUST use GET /api/pingone/test-connection endpoint\n     * DO NOT change to POST or different endpoint without updating server-side route\n     * Last fixed: 2025-07-22 - Fixed HTTP method mismatch causing 400 Bad Request errors\n     */\n    async testConnection() {\n        try {\n            this.logger.info('Testing connection...');\n            this.uiManager.showSettingsActionStatus('Testing connection...', 'info');\n            \n            const settings = this.getFormData();\n            \n            // Test connection via API\n            // CRITICAL: Use GET request to match server-side endpoint\n            // Server endpoint: routes/pingone-proxy-fixed.js - router.get('/test-connection')\n            // DO NOT change to POST without updating server-side endpoint\n            // Last fixed: 2025-07-22 - HTTP method mismatch caused 400 Bad Request errors\n            const response = await this.localClient.get('/api/pingone/test-connection');\n            \n            if (response.success) {\n                this.uiManager.showSettingsActionStatus('Connection test successful', 'success', { autoHideDelay: 3000 });\n                this.updateConnectionStatus('✅ Connection successful', 'success');\n            } else {\n                this.uiManager.showSettingsActionStatus('Connection test failed: ' + response.message, 'error');\n                this.updateConnectionStatus('❌ Connection failed', 'error');\n            }\n            \n        } catch (error) {\n            this.logger.error('Connection test failed', error);\n            this.uiManager.showSettingsActionStatus('Connection test failed: ' + error.message, 'error');\n            this.updateConnectionStatus('❌ Connection failed', 'error');\n        }\n    }\n    \n    /**\n     * Get token\n     */\n    async getToken() {\n        try {\n            this.logger.info('Getting token...');\n            this.uiManager.showSettingsActionStatus('Getting token...', 'info');\n            \n            const settings = this.getFormData();\n            \n            // Get token via API\n            const response = await this.localClient.post('/api/token', settings);\n            \n            if (response.success) {\n                this.uiManager.showSettingsActionStatus('Token obtained successfully', 'success', { autoHideDelay: 3000 });\n                this.updateConnectionStatus('✅ Token obtained', 'success');\n                \n                // NEW: Direct global token status updater for sidebar\n                console.log('🚀 [DEBUG] SettingsSubsystem: About to call updateGlobalTokenStatusDirect');\n                try {\n                    // Get the main app instance to call the direct updater\n                    if (window.app && typeof window.app.updateGlobalTokenStatusDirect === 'function') {\n                        // Calculate time left from token response\n                        const timeLeft = response.timeLeft || response.timeRemaining || '';\n                        window.app.updateGlobalTokenStatusDirect(timeLeft);\n                        console.log('✅ [DEBUG] SettingsSubsystem: updateGlobalTokenStatusDirect called successfully with timeLeft:', timeLeft);\n                    } else {\n                        console.warn('⚠️ [DEBUG] SettingsSubsystem: window.app.updateGlobalTokenStatusDirect not available');\n                    }\n                } catch (error) {\n                    console.error('❌ [DEBUG] SettingsSubsystem: Error calling updateGlobalTokenStatusDirect:', error);\n                }\n                \n                // Emit event for other subsystems\n                if (this.eventBus) {\n                    this.eventBus.emit('tokenObtained', { token: response.token });\n                }\n            } else {\n                this.uiManager.showSettingsActionStatus('Failed to get token: ' + response.message, 'error');\n                this.updateConnectionStatus('❌ Token failed', 'error');\n            }\n            \n        } catch (error) {\n            this.logger.error('Failed to get token', error);\n            this.uiManager.showSettingsActionStatus('Failed to get token: ' + error.message, 'error');\n            this.updateConnectionStatus('❌ Token failed', 'error');\n        }\n    }\n    \n    /**\n     * Toggle API secret visibility\n     */\n    toggleSecretVisibility() {\n        const secretField = document.getElementById('api-secret');\n        const toggleBtn = document.getElementById('toggle-api-secret-visibility');\n        const icon = toggleBtn?.querySelector('i');\n        \n        if (secretField && toggleBtn && icon) {\n            if (secretField.type === 'password') {\n                secretField.type = 'text';\n                icon.className = 'fas fa-eye-slash';\n                toggleBtn.setAttribute('aria-label', 'Hide password');\n            } else {\n                secretField.type = 'password';\n                icon.className = 'fas fa-eye';\n                toggleBtn.setAttribute('aria-label', 'Show password');\n            }\n        }\n    }\n    \n    /**\n     * Update connection status display\n     */\n    updateConnectionStatus(message, type) {\n        const statusElement = document.getElementById('settings-connection-status');\n        if (statusElement) {\n            statusElement.textContent = message;\n            statusElement.className = `connection-status status-${type}`;\n        }\n    }\n    \n    /**\n     * Set up cross-subsystem event listeners\n     */\n    setupCrossSubsystemEvents() {\n        if (!this.eventBus) {\n            this.logger.warn('EventBus not available for cross-subsystem events');\n            return;\n        }\n        \n        // Listen for token expiration events\n        this.eventBus.on('tokenExpired', (data) => {\n            this.logger.warn('Token expired');\n            this.updateConnectionStatus('⚠️ Token expired', 'warning');\n        });\n        \n        // Listen for token error events\n        this.eventBus.on('tokenError', (data) => {\n            this.logger.error('Token error detected', data);\n            this.updateConnectionStatus('❌ Token error', 'error');\n        });\n        \n        // Listen for token refresh events\n        this.eventBus.on('tokenRefreshed', (data) => {\n            this.logger.info('Token refreshed successfully');\n            this.updateConnectionStatus('✅ Token refreshed', 'success');\n        });\n        \n        this.logger.debug('Cross-subsystem event listeners set up for SettingsSubsystem');\n    }\n    \n    /**\n     * Get all settings (required by App initialization)\n     * @returns {Object} All current settings\n     */\n    getAllSettings() {\n        if (this.settingsManager && this.settingsManager.getAllSettings) {\n            return this.settingsManager.getAllSettings();\n        } else if (this.settingsManager && this.settingsManager.getSettings) {\n            return this.settingsManager.getSettings();\n        } else if (this.currentSettings) {\n            return this.currentSettings;\n        } else {\n            this.logger.warn('No settings available, returning empty object');\n            return {};\n        }\n    }\n}\n","// File: file-handler.js\n// Description: CSV file processing and validation for PingOne user import\n// \n// This module handles all file-related operations including:\n// - CSV file reading and parsing\n// - User data validation and error checking\n// - File preview generation\n// - File information display and management\n// - Folder path tracking for better UX\n// - Validation summary and error reporting\n// \n// Provides comprehensive CSV processing with detailed validation feedback.\n\nimport { ElementRegistry } from './element-registry.js';\n\n/**\n * File Handler Class\n * \n * Manages CSV file processing, validation, and user data preparation\n * for the PingOne import tool. Handles file selection, parsing,\n * validation, and preview generation.\n * \n * @param {Object} logger - Logger instance for debugging\n * @param {Object} uiManager - UI manager for status updates\n */\nclass FileHandler {\n    /**\n     * Create a new FileHandler instance\n     * @param {Object} logger - Logger instance for debugging\n     * @param {Object} uiManager - UI manager for status updates\n     */\n    constructor(logger, uiManager) {\n        if (!logger) {\n            throw new Error('Logger is required for FileHandler');\n        }\n        \n        this.logger = logger;\n        this.uiManager = uiManager;\n        \n        // Required fields for user validation\n        this.requiredFields = ['username'];\n        \n        // Validation tracking for processed files\n        this.validationResults = {\n            total: 0,\n            valid: 0,\n            errors: 0,\n            warnings: 0\n        };\n        \n        // File processing state\n        this.lastParsedUsers = [];\n        this.currentFile = null;\n        \n        // Initialize UI elements for file handling\n        this.fileInput = ElementRegistry.fileInput ? ElementRegistry.fileInput() : null;\n        this.fileInfo = ElementRegistry.fileInfo ? ElementRegistry.fileInfo() : null;\n        this.previewContainer = ElementRegistry.previewContainer ? ElementRegistry.previewContainer() : null;\n        \n        // Load last file info from localStorage for better UX\n        this.lastFileInfo = this.loadLastFileInfo();\n        \n        // Initialize event listeners for file input\n        this.initializeFileInput();\n    }\n\n    // ======================\n    // File Info Management\n    // ======================\n    \n    /**\n     * Load last file info from localStorage\n     * @returns {Object|null} Last file info or null if not found\n     */\n    loadLastFileInfo() {\n        try {\n            const savedFile = localStorage.getItem('lastSelectedFile');\n            return savedFile ? JSON.parse(savedFile) : null;\n        } catch (error) {\n            this.logger.error('Error loading last file info:', error);\n            return null;\n        }\n    }\n    \n    /**\n     * Get the current file being processed\n     * \n     * Returns the File object that is currently loaded and ready for processing.\n     * Used by other modules to access the file for upload operations.\n     * \n     * @returns {File|null} The current file or null if none is loaded\n     */\n    getCurrentFile() {\n        return this.currentFile;\n    }\n    \n    /**\n     * Set a file and process it for import\n     * \n     * Validates the file, processes its contents, and prepares it for\n     * import operations. Updates UI with file information and validation results.\n     * \n     * @param {File} file - The file to set and process\n     * @param {string} operationType - The operation type ('import', 'delete', 'modify')\n     * @returns {Promise<Object>} Promise that resolves with processing result\n     */\n    async setFile(file, operationType = 'import') {\n        if (!file) {\n            throw new Error('File is required for setFile operation');\n        }\n        \n        try {\n            this.logger.info('Setting file', { fileName: file.name, fileSize: file.size, operationType });\n            \n            // Store the current file reference for later use\n            this.currentFile = file;\n            \n            // Process the file using the existing internal method\n            // This includes validation, parsing, and UI updates\n            await this._handleFileInternal(file, null, operationType);\n            \n            return { success: true, file };\n        } catch (error) {\n            this.logger.error('Failed to set file', { error: error.message, fileName: file.name, operationType });\n            throw error;\n        }\n    }\n    \n    /**\n     * Get the list of parsed users from the current file\n     * \n     * Returns the array of user objects that were successfully parsed\n     * from the CSV file. Each user object contains validated data.\n     * \n     * @returns {Array} Array of user objects with validated data\n     */\n    getUsers() {\n        return this.lastParsedUsers || [];\n    }\n\n    /**\n     * Get the total number of users parsed from the CSV file\n     * \n     * Returns the total count of users found in the processed CSV file.\n     * This count includes all rows, regardless of validation status.\n     * \n     * @returns {number} Total number of users in the CSV file\n     */\n    getTotalUsers() {\n        const totalUsers = this.validationResults.total || 0;\n        console.log('[CSV] getTotalUsers() called, returning:', totalUsers, 'validationResults:', this.validationResults);\n        return totalUsers;\n    }\n\n    /**\n     * Read file as text using FileReader API\n     * \n     * Asynchronously reads a file and returns its contents as a string.\n     * Used for processing CSV files and other text-based formats.\n     * \n     * @param {File} file - The file to read\n     * @returns {Promise<string>} Promise that resolves with file content as string\n     */\n    readFileAsText(file) {\n        if (!file) {\n            throw new Error('File is required for reading');\n        }\n        \n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (event) => resolve(event.target.result);\n            reader.onerror = () => reject(new Error('Failed to read file'));\n            reader.readAsText(file);\n        });\n    }\n\n    /**\n     * Save the last folder path that was used\n     * @param {File} file - The selected file\n     * @param {string} operationType - The operation type ('import', 'delete', 'modify')\n     */\n    saveLastFolderPath(file, operationType = 'import') {\n        if (!file) {\n            return;\n        }\n        \n        try {\n            let folderPath = null;\n            \n            // Try to extract folder path from different sources\n            if (file.webkitRelativePath) {\n                // For webkitRelativePath, get the directory part\n                const pathParts = file.webkitRelativePath.split('/');\n                if (pathParts.length > 1) {\n                    folderPath = pathParts.slice(0, -1).join('/');\n                }\n            } else if (file.name) {\n                // For regular files, try to extract from the file name\n                // This is a fallback since we can't get the full path due to security restrictions\n                const fileName = file.name;\n                const lastSlashIndex = fileName.lastIndexOf('/');\n                if (lastSlashIndex !== -1) {\n                    folderPath = fileName.substring(0, lastSlashIndex);\n                }\n            }\n            \n            if (folderPath) {\n                // Save with operation-specific key\n                const storageKey = `lastFolderPath_${operationType}`;\n                localStorage.setItem(storageKey, folderPath);\n                this.logger.info(`Saved last folder path for ${operationType}:`, folderPath);\n            }\n            \n            // Also save a general last folder path\n            if (folderPath) {\n                localStorage.setItem('lastFolderPath', folderPath);\n            }\n            \n        } catch (error) {\n            this.logger.warn('Could not save folder path:', error.message);\n        }\n    }\n\n    /**\n     * Get the last folder path that was used\n     * @param {string} operationType - The operation type ('import', 'delete', 'modify')\n     * @returns {string|null} The last folder path or null if not available\n     */\n    getLastFolderPath(operationType = 'import') {\n        try {\n            // First try to get operation-specific folder path\n            const operationKey = `lastFolderPath_${operationType}`;\n            let folderPath = localStorage.getItem(operationKey);\n            \n            // Fall back to general last folder path\n            if (!folderPath) {\n                folderPath = localStorage.getItem('lastFolderPath');\n            }\n            \n            return folderPath;\n        } catch (error) {\n            this.logger.warn('Could not get last folder path:', error.message);\n            return null;\n        }\n    }\n\n    /**\n     * Update the file input label to show last folder path\n     * @param {string} operationType - The operation type ('import', 'delete', 'modify')\n     */\n    updateFileLabel(operationType = 'import') {\n        try {\n            // Find the appropriate file label based on operation type\n            let fileLabel = null;\n            let fileInput = null;\n            \n            switch (operationType) {\n                case 'import':\n                    fileLabel = ElementRegistry.fileInputLabel ? ElementRegistry.fileInputLabel() : null;\n                    fileInput = ElementRegistry.fileInput ? ElementRegistry.fileInput() : null;\n                    break;\n                case 'delete':\n                    fileLabel = ElementRegistry.deleteFileInputLabel ? ElementRegistry.deleteFileInputLabel() : null;\n                    fileInput = ElementRegistry.deleteFileInput ? ElementRegistry.deleteFileInput() : null;\n                    break;\n                case 'modify':\n                    fileLabel = ElementRegistry.modifyFileInputLabel ? ElementRegistry.modifyFileInputLabel() : null;\n                    fileInput = ElementRegistry.modifyFileInput ? ElementRegistry.modifyFileInput() : null;\n                    break;\n                default:\n                    fileLabel = ElementRegistry.fileInputLabel ? ElementRegistry.fileInputLabel() : null;\n                    break;\n            }\n            \n            if (fileLabel) {\n                const lastFolderPath = this.getLastFolderPath(operationType);\n                if (lastFolderPath) {\n                    // Show a shortened version of the path for better UI\n                    const shortPath = this.shortenPath(lastFolderPath);\n                    fileLabel.textContent = `Choose CSV File (Last: ${shortPath})`;\n                    fileLabel.title = `Last used folder: ${lastFolderPath}`;\n                } else {\n                    fileLabel.textContent = 'Choose CSV File';\n                    fileLabel.title = 'Select a CSV file to process';\n                }\n            }\n        } catch (error) {\n            this.logger.warn('Could not update file label:', error.message);\n        }\n    }\n    \n    /**\n     * Shorten a file path for display in the UI\n     * @param {string} path - The full path\n     * @returns {string} The shortened path\n     */\n    shortenPath(path) {\n        if (!path) {\n            return '';\n        }\n        \n        const maxLength = 30;\n        if (path.length <= maxLength) {\n            return path;\n        }\n        \n        // Try to keep the most relevant parts\n        const parts = path.split('/');\n        if (parts.length <= 2) {\n            return path.length > maxLength ? '...' + path.slice(-maxLength + 3) : path;\n        }\n        \n        // Keep first and last parts, add ellipsis in middle\n        const firstPart = parts[0];\n        const lastPart = parts[parts.length - 1];\n        const middleParts = parts.slice(1, -1);\n        \n        let result = firstPart;\n        if (middleParts.length > 0) {\n            result += '/.../' + lastPart;\n        } else {\n            result += '/' + lastPart;\n        }\n        \n        return result.length > maxLength ? '...' + result.slice(-maxLength + 3) : result;\n    }\n    \n    /**\n     * Save file info to localStorage\n     * @param {Object} fileInfo - File information object\n     */\n    saveFileInfo(fileInfo) {\n        if (!fileInfo) {\n            return;\n        }\n        \n        try {\n            const fileData = {\n                name: fileInfo.name,\n                size: fileInfo.size,\n                lastModified: fileInfo.lastModified,\n                type: fileInfo.type\n            };\n            localStorage.setItem('lastSelectedFile', JSON.stringify(fileData));\n            this.lastFileInfo = fileData;\n        } catch (error) {\n            this.logger.error('Error saving file info:', error);\n        }\n    }\n    \n    /**\n     * Clear file info from localStorage\n     */\n    clearFileInfo() {\n        try {\n            localStorage.removeItem('lastSelectedFile');\n            this.lastFileInfo = null;\n            if (this.fileInfo) {\n                this.fileInfo.innerHTML = 'No file selected';\n            }\n        } catch (error) {\n            this.logger.error('Error clearing file info:', error);\n        }\n    }\n\n    /**\n     * Clear the last folder path\n     */\n    clearLastFolderPath() {\n        try {\n            localStorage.removeItem('lastFolderPath');\n            this.updateFileLabel();\n            this.logger.info('Cleared last folder path');\n        } catch (error) {\n            this.logger.warn('Could not clear last folder path:', error.message);\n        }\n    }\n\n    // ======================\n    // File Handling\n    // ======================\n    \n    /**\n     * Initialize file input event listeners\n     */\n    initializeFileInput() {\n        if (!this.fileInput) {\n            return;\n        }\n        \n        // Remove existing event listeners\n        const newFileInput = this.fileInput.cloneNode(true);\n        this.fileInput.parentNode.replaceChild(newFileInput, this.fileInput);\n        this.fileInput = newFileInput;\n        \n        // Add new event listener\n        this.fileInput.addEventListener('change', (event) => this.handleFileSelect(event));\n        \n        // Update file label to show last folder path if available\n        this.updateFileLabel();\n    }\n    \n    /**\n     * Handle a File object directly (not an event)\n     * @param {File} file - The file to handle\n     */\n    async handleFileObject(file) {\n        if (!file) {\n            throw new Error('File is required for handleFileObject');\n        }\n        \n        await this._handleFileInternal(file);\n    }\n\n    /**\n     * Handle file selection from an input event\n     * @param {Event} event - The file selection event\n     */\n    async handleFileSelect(event) {\n        if (!event || !event.target) {\n            this.logger.warn('Invalid file selection event');\n            return;\n        }\n        \n        const file = event.target.files[0];\n        if (!file) {\n            this.logger.warn('No file selected');\n            return;\n        }\n        \n        // Save the folder path for next time\n        this.saveLastFolderPath(file, 'import');\n        \n        await this._handleFileInternal(file, event);\n    }\n\n    /**\n     * Shared internal file handling logic\n     * @param {File} file - The file to process\n     * @param {Event} [event] - The file selection event (optional)\n     * @param {string} operationType - The operation type ('import', 'delete', 'modify')\n     * @private\n     */\n    async _handleFileInternal(file, event, operationType = 'import') {\n        if (!file) {\n            throw new Error('File is required for internal file handling');\n        }\n        \n        console.log('[CSV] _handleFileInternal called with file:', file.name, 'size:', file.size, 'operationType:', operationType);\n        try {\n            this.logger.info('Processing file', { fileName: file.name, fileSize: file.size, operationType });\n            \n            // Validate file type - allow files without extensions or with any extension except known bad ones\n            const fileName = file.name || '';\n            const fileExt = this.getFileExtension(fileName).toLowerCase();\n            const knownBadExts = ['exe', 'js', 'png', 'jpg', 'jpeg', 'gif', 'pdf', 'zip', 'tar', 'gz'];\n            if (fileExt && knownBadExts.includes(fileExt)) {\n                const errorMsg = `Unsupported file type: ${fileExt}. Please upload a CSV or text file.`;\n                this.logger.error(errorMsg, { fileName, fileExt });\n                throw new Error(errorMsg);\n            }\n            // Accept all other extensions and blank/unknown types (including files with no extension)\n            \n            // Validate file size (10MB limit)\n            const maxSize = 10 * 1024 * 1024; // 10MB\n            if (file.size > maxSize) {\n                throw new Error('File too large. Please select a file smaller than 10MB.');\n            }\n            \n            // Read file content\n            const content = await this.readFileAsText(file);\n            \n            console.log('[CSV] _handleFileInternal: About to parse CSV content, length:', content.length);\n            // Parse CSV with enhanced validation\n            const parseResults = this.parseCSV(content);\n            console.log('[CSV] _handleFileInternal: parseCSV completed, parseResults:', parseResults);\n            \n            // Store parsed users\n            this.parsedUsers = parseResults.users;\n            this.lastParsedUsers = [...parseResults.users];\n            \n            // Update validation results for getTotalUsers() method\n            this.validationResults = {\n                total: parseResults.users.length,\n                valid: parseResults.validUsers || parseResults.users.length,\n                errors: parseResults.errors.length,\n                warnings: parseResults.warnings.length\n            };\n            \n            // Add debug logging\n            console.log('[CSV] File parsed successfully:', {\n                totalUsers: this.validationResults.total,\n                validUsers: this.validationResults.valid,\n                errors: this.validationResults.errors,\n                warnings: this.validationResults.warnings\n            });\n            \n            // Update UI with results\n            const message = `File processed: ${parseResults.validUsers} valid users, ${parseResults.invalidRows} invalid rows`;\n            this.uiManager.showNotification(message, parseResults.invalidRows > 0 ? 'warning' : 'success');\n\n            // Update UI with enhanced file info display based on operation type\n            const fileInfoContainerId = operationType === 'modify' ? 'modify-file-info' : 'file-info';\n            this.updateFileInfoForElement(file, fileInfoContainerId, parseResults.validUsers);\n            \n            // Update file label to show last folder path\n            this.updateFileLabel(operationType);\n\n            // Log detailed errors for debugging\n            if (parseResults.errors.length > 0) {\n                this.logger.warn('CSV parsing errors', {\n                    errorCount: parseResults.errors.length,\n                    errors: parseResults.errors.slice(0, 10) // Log first 10 errors\n                });\n            }\n\n            // Update button state based on operation type\n            if (window.app) {\n                if (operationType === 'modify' && window.app.updateModifyButtonState) {\n                    window.app.updateModifyButtonState();\n                } else if (operationType === 'import' && window.app.updateImportButtonState) {\n                    window.app.updateImportButtonState();\n                }\n            }\n\n        } catch (error) {\n            this.logger.error('Failed to process CSV file', {\n                error: error.message,\n                fileName: file.name,\n                operationType\n            });\n            console.error('Error in _handleFileInternal:', error);\n\n            let errorMessage = 'Failed to process CSV file. ';\n            if (error.message.includes('Missing required headers')) {\n                errorMessage = `CSV file is missing required columns. ${error.message} Please ensure your CSV file has a 'username' column.`;\n            } else if (error.message.includes('Invalid file type')) {\n                errorMessage += 'Please select a valid CSV file.';\n            } else if (error.message.includes('File too large')) {\n                errorMessage += 'Please select a smaller file (max 10MB).';\n            } else {\n                errorMessage += error.message;\n            }\n\n            this.uiManager.showNotification(errorMessage, 'error');\n            \n            // Clear file input\n            if (event && event.target && event.target.value) {\n                event.target.value = '';\n            }\n        }\n    }\n    \n    /**\n     * Process a CSV file for user import\n     * \n     * Validates the file format, reads its contents, parses CSV data,\n     * and prepares user objects for import. Handles file validation,\n     * CSV parsing, and error reporting.\n     * \n     * @param {File} file - The CSV file to process\n     * @returns {Promise<Object>} Promise that resolves with parsing results\n     */\n    async processCSV(file) {\n        // Log file object for debugging\n        this.logger.log('Processing file object:', 'debug', file);\n        \n        // Validate file exists and is not empty\n        if (!file) {\n            this.logger.error('No file provided to processCSV');\n            throw new Error('No file selected');\n        }\n        \n        if (file.size === 0) {\n            this.logger.error('Empty file provided', { fileName: file.name, size: file.size });\n            throw new Error('File is empty');\n        }\n        \n        // Only block known bad extensions, allow all others\n        const fileName = file.name || '';\n        const fileExt = this.getFileExtension(fileName).toLowerCase();\n        const knownBadExts = ['exe', 'js', 'png', 'jpg', 'jpeg', 'gif', 'pdf', 'zip', 'tar', 'gz'];\n        if (fileExt && knownBadExts.includes(fileExt)) {\n            const errorMsg = `Unsupported file type: ${fileExt}. Please upload a CSV or text file.`;\n            this.logger.error(errorMsg, { fileName, fileExt });\n            throw new Error(errorMsg);\n        }\n        // Accept all other extensions and blank/unknown types\n        // Check file size (max 10MB)\n        const maxSize = 10 * 1024 * 1024; // 10MB\n        if (file.size > maxSize) {\n            throw new Error(`File is too large. Maximum size is ${this.formatFileSize(maxSize)}`);\n        }\n        \n        // Update UI\n        this.saveFileInfo(file);\n        this.updateFileInfo(file);\n        \n        // Store the current file reference\n        this.currentFile = file;\n        \n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            \n            reader.onload = (event) => {\n                try {\n                    const text = event.target.result;\n                    if (!text || text.trim() === '') {\n                        throw new Error('File is empty or contains no text');\n                    }\n                    \n                    console.log('[CSV] About to parse CSV text, length:', text.length);\n                    const { headers, rows } = this.parseCSV(text);\n                    console.log('[CSV] parseCSV completed, headers:', headers, 'rows count:', rows.length);\n                    \n                    // Validate required fields\n                    const missingHeaders = this.requiredFields.filter(field => !headers.includes(field));\n                    if (missingHeaders.length > 0) {\n                        throw new Error(`Missing required columns: ${missingHeaders.join(', ')}`);\n                    }\n                    \n                    // Convert rows to user objects and store them\n                    this.lastParsedUsers = rows.map(row => {\n                        const user = {};\n                        headers.forEach((header, index) => {\n                            user[header] = row[header] || '';\n                        });\n                        return user;\n                    });\n                    \n                    // Also store in parsedUsers for compatibility with getParsedUsers\n                    this.parsedUsers = this.lastParsedUsers;\n                    \n                    // Update validation results for getTotalUsers() method\n                    this.validationResults = {\n                        total: this.lastParsedUsers.length,\n                        valid: this.lastParsedUsers.length,\n                        errors: 0,\n                        warnings: 0\n                    };\n                    \n                    // Add debug logging\n                    console.log('[CSV] File parsed successfully (processCSV):', {\n                        totalUsers: this.validationResults.total,\n                        validUsers: this.validationResults.valid,\n                        errors: this.validationResults.errors,\n                        warnings: this.validationResults.warnings\n                    });\n                    \n                    resolve({ \n                        success: true, \n                        headers, \n                        rows: this.lastParsedUsers,\n                        userCount: this.lastParsedUsers.length\n                    });\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            \n            reader.onerror = () => {\n                reject(new Error('Error reading file'));\n            };\n            \n            reader.readAsText(file);\n        });\n    }\n    \n    // ======================\n    // CSV Parsing Methods\n    // ======================\n    \n    /**\n     * Parse CSV content into headers and data rows\n     * \n     * Splits CSV content into lines, extracts headers, and validates\n     * required and recommended columns. Handles header mapping for\n     * different naming conventions.\n     * \n     * @param {string} content - Raw CSV content as string\n     * @returns {Object} Object containing headers and parsed rows\n     */\n    parseCSV(content) {\n        // Split content into lines and filter out empty lines\n        const lines = content.split('\\n').filter(line => line.trim());\n        if (lines.length < 2) {\n            throw new Error('CSV file must have at least a header row and one data row');\n        }\n\n        // Parse headers from first line\n        const headers = this.parseCSVLine(lines[0]);\n        \n        // Define required and recommended headers for validation\n        const requiredHeaders = ['username'];\n        const recommendedHeaders = ['firstName', 'lastName', 'email'];\n        \n        // Log all headers for debugging\n        console.log('[CSV] All headers:', headers);\n        console.log('[CSV] Required headers:', requiredHeaders);\n        console.log('[CSV] Recommended headers:', recommendedHeaders);\n        \n        // Validate headers\n        const missingRequired = requiredHeaders.filter(h => {\n            const hasHeader = headers.some(header => {\n                const headerLower = header.toLowerCase();\n                const mappedHeader = this.getHeaderMapping(headerLower);\n                const matches = headerLower === h.toLowerCase() || mappedHeader === h;\n                console.log(`[CSV] Checking header \"${header}\" (${headerLower}) -> \"${mappedHeader}\" for required \"${h}\": ${matches}`);\n                return matches;\n            });\n            console.log(`[CSV] Required header \"${h}\" found: ${hasHeader}`);\n            return !hasHeader;\n        });\n        \n        const missingRecommended = recommendedHeaders.filter(h => {\n            const hasHeader = headers.some(header => {\n                const headerLower = header.toLowerCase();\n                const mappedHeader = this.getHeaderMapping(headerLower);\n                const matches = headerLower === h.toLowerCase() || mappedHeader === h;\n                console.log(`[CSV] Checking header \"${header}\" (${headerLower}) -> \"${mappedHeader}\" for recommended \"${h}\": ${matches}`);\n                return matches;\n            });\n            console.log(`[CSV] Recommended header \"${h}\" found: ${hasHeader}`);\n            return !hasHeader;\n        });\n\n        if (missingRequired.length > 0) {\n            const errorMsg = `Missing required headers: ${missingRequired.join(', ')}. At minimum, you need a 'username' column.`;\n            this.logger.error('CSV validation failed - missing required headers', {\n                missingRequired,\n                availableHeaders: headers,\n                errorMsg\n            });\n            throw new Error(errorMsg);\n        }\n\n        if (missingRecommended.length > 0) {\n            const warningMsg = `Missing recommended headers: ${missingRecommended.join(', ')}. These are not required but recommended for better user data.`;\n            this.logger.warn('CSV validation warning - missing recommended headers', {\n                missingRecommended,\n                availableHeaders: headers,\n                warningMsg\n            });\n            // Show warning but don't throw error\n            if (window.app && window.app.uiManager) {\n                window.app.uiManager.showNotification(warningMsg, 'warning');\n            }\n        }\n\n        const users = [];\n        const errors = [];\n        const warnings = [];\n        let rowNumber = 1; // Start from 1 since 0 is header\n\n        for (let i = 1; i < lines.length; i++) {\n            rowNumber = i + 1; // +1 because we start from header row\n            const line = lines[i].trim();\n            \n            if (!line) continue; // Skip empty lines\n            \n            try {\n                const user = this.parseUserRow(line, headers, rowNumber);\n                \n                // Validate user data\n                const validationResult = this.validateUserData(user, rowNumber);\n                if (validationResult.isValid) {\n                    users.push(user);\n                } else {\n                    errors.push({\n                        row: rowNumber,\n                        user: user,\n                        errors: validationResult.errors,\n                        warnings: validationResult.warnings\n                    });\n                    \n                    // Add warnings to warnings array\n                    warnings.push(...validationResult.warnings.map(w => ({ row: rowNumber, ...w })));\n                }\n            } catch (error) {\n                errors.push({\n                    row: rowNumber,\n                    error: error.message,\n                    line: line\n                });\n            }\n        }\n\n        // Log comprehensive validation results\n        const validationSummary = {\n            totalRows: lines.length - 1,\n            validUsers: users.length,\n            invalidRows: errors.length,\n            warnings: warnings.length,\n            missingRequiredHeaders: missingRequired,\n            missingRecommendedHeaders: missingRecommended,\n            availableHeaders: headers\n        };\n\n        this.logger.info('CSV parsing completed', validationSummary);\n\n        if (errors.length > 0) {\n            const errorDetails = errors.map(e => ({\n                row: e.row,\n                errors: e.errors || [e.error],\n                warnings: e.warnings || []\n            }));\n            \n            this.logger.warn('CSV validation issues found', {\n                totalErrors: errors.length,\n                errorDetails: errorDetails.slice(0, 10) // Log first 10 errors\n            });\n        }\n\n        // Show user-friendly summary\n        this.showValidationSummary(validationSummary, errors, warnings);\n\n        return {\n            users,\n            errors,\n            warnings,\n            totalRows: lines.length - 1,\n            validUsers: users.length,\n            invalidRows: errors.length,\n            headerCount: headers.length,\n            availableHeaders: headers\n        };\n    }\n\n    /**\n     * Parse a single CSV line\n     * @param {string} line - CSV line to parse\n     * @param {string} delimiter - Delimiter character\n     * @returns {Array<string>} Array of field values\n     */\n    parseCSVLine(line, delimiter = ',') {\n        const result = [];\n        let current = '';\n        let inQuotes = false;\n        \n        for (let i = 0; i < line.length; i++) {\n            const char = line[i];\n            const nextChar = line[i + 1];\n            \n            if (char === '\"') {\n                if (nextChar === '\"') {\n                    current += '\"';\n                    i++;\n                } else {\n                    inQuotes = !inQuotes;\n                }\n            } else if (char === delimiter && !inQuotes) {\n                result.push(current);\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        \n        result.push(current);\n        return result.map(field => field.trim());\n    }\n\n    /**\n     * Parse a user row from CSV\n     * @param {string} line - CSV line to parse\n     * @param {Array<string>} headers - Header row\n     * @param {number} rowNumber - Row number for error reporting\n     * @returns {Object} Parsed user object\n     */\n    parseUserRow(line, headers, rowNumber) {\n        const values = this.parseCSVLine(line);\n        \n        if (values.length !== headers.length) {\n            throw new Error(`Row ${rowNumber}: Number of columns (${values.length}) doesn't match headers (${headers.length})`);\n        }\n        \n        const user = {};\n        \n        for (let i = 0; i < headers.length; i++) {\n            const header = headers[i].toLowerCase().trim();\n            let value = values[i].trim();\n            \n            // Handle boolean values\n            if (header === 'enabled') {\n                const valueLower = value.toLowerCase();\n                if (valueLower === 'true' || value === '1') {\n                    value = true;\n                } else if (valueLower === 'false' || value === '0') {\n                    value = false;\n                } else if (value === '') {\n                    value = true; // Default to enabled\n                } else {\n                    throw new Error(`Row ${rowNumber}: Invalid enabled value '${value}'. Must be true/false or 1/0`);\n                }\n            }\n            \n            // Map common header variations\n            const mappedHeader = this.getHeaderMapping(header);\n            console.log(`[CSV] Mapping header: \"${header}\" -> \"${mappedHeader}\"`);\n            user[mappedHeader] = value;\n        }\n        \n        // Set default username if not provided\n        if (!user.username && user.email) {\n            user.username = user.email;\n        }\n        \n        return user;\n    }\n\n    /**\n     * Validate user data for a specific row\n     * @param {Object} user - User object to validate\n     * @param {number} rowNumber - Row number for error reporting\n     * @returns {Object} Validation result with isValid, errors, and warnings\n     */\n    validateUserData(user, rowNumber) {\n        const errors = [];\n        const warnings = [];\n\n        // Check required fields\n        if (!user.username || user.username.trim() === '') {\n            errors.push('Username is required and cannot be empty');\n        }\n\n        // Check recommended fields\n        if (!user.firstName || user.firstName.trim() === '') {\n            warnings.push('firstName is recommended for better user data');\n        }\n\n        if (!user.lastName || user.lastName.trim() === '') {\n            warnings.push('lastName is recommended for better user data');\n        }\n\n        if (!user.email || user.email.trim() === '') {\n            warnings.push('email is recommended for better user data');\n        }\n\n        // Validate email format if provided\n        if (user.email && user.email.trim() !== '' && !this.isValidEmail(user.email)) {\n            errors.push('Invalid email format');\n        }\n\n        // Validate username format if provided\n        if (user.username && !this.isValidUsername(user.username)) {\n            errors.push('Username contains invalid characters (no spaces or special characters allowed)');\n        }\n\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n\n    /**\n     * Show validation summary to user\n     * @param {Object} summary - Validation summary\n     * @param {Array} errors - Array of errors\n     * @param {Array} warnings - Array of warnings\n     */\n    showValidationSummary(summary, errors, warnings) {\n        let message = '';\n        let type = 'success';\n\n        if (summary.invalidRows > 0) {\n            type = 'error';\n            message = `File validation failed!\\n\\n`;\n            message += `• Total rows: ${summary.totalRows}\\n`;\n            message += `• Valid users: ${summary.validUsers}\\n`;\n            message += `• Invalid rows: ${summary.invalidRows}\\n`;\n            message += `• Warnings: ${warnings.length}\\n\\n`;\n            \n            if (summary.missingRequiredHeaders.length > 0) {\n                message += `❌ Missing required headers: ${summary.missingRequiredHeaders.join(', ')}\\n`;\n            }\n            \n            if (errors.length > 0) {\n                message += `❌ Data errors found in ${errors.length} row(s)\\n`;\n                // Show first few specific errors\n                const firstErrors = errors.slice(0, 3);\n                firstErrors.forEach(error => {\n                    if (error.errors) {\n                        message += `  Row ${error.row}: ${error.errors.join(', ')}\\n`;\n                    } else if (error.error) {\n                        message += `  Row ${error.row}: ${error.error}\\n`;\n                    }\n                });\n                if (errors.length > 3) {\n                    message += `  ... and ${errors.length - 3} more errors\\n`;\n                }\n            }\n        } else if (warnings.length > 0) {\n            type = 'warning';\n            message = `File loaded with warnings:\\n\\n`;\n            message += `• Total rows: ${summary.totalRows}\\n`;\n            message += `• Valid users: ${summary.validUsers}\\n`;\n            message += `• Warnings: ${warnings.length}\\n\\n`;\n            \n            if (summary.missingRecommendedHeaders.length > 0) {\n                message += `⚠️ Missing recommended headers: ${summary.missingRecommendedHeaders.join(', ')}\\n`;\n            }\n            \n            // Show first few warnings\n            const firstWarnings = warnings.slice(0, 3);\n            firstWarnings.forEach(warning => {\n                message += `  Row ${warning.row}: ${warning.message || warning}\\n`;\n            });\n            if (warnings.length > 3) {\n                message += `  ... and ${warnings.length - 3} more warnings\\n`;\n            }\n        } else {\n            message = `File loaded successfully!\\n\\n`;\n            message += `• Total rows: ${summary.totalRows}\\n`;\n            message += `• Valid users: ${summary.validUsers}\\n`;\n            message += `• Headers found: ${summary.availableHeaders.join(', ')}`;\n        }\n\n        // Show notification to user\n        if (window.app && window.app.uiManager) {\n            window.app.uiManager.showNotification(message, type);\n        }\n\n        // Log to server\n        this.logger.info('CSV validation summary shown to user', {\n            summary,\n            message,\n            type\n        });\n    }\n\n    /**\n     * Get header mapping for common variations\n     * @param {string} header - Header to map\n     * @returns {string} Mapped header name\n     */\n    getHeaderMapping(header) {\n        const headerMap = {\n            'firstname': 'firstName',\n            'first_name': 'firstName',\n            'givenname': 'firstName',\n            'given_name': 'firstName',\n            'lastname': 'lastName',\n            'last_name': 'lastName',\n            'familyname': 'lastName',\n            'family_name': 'lastName',\n            'surname': 'lastName',\n            'emailaddress': 'email',\n            'email_address': 'email',\n            'userid': 'username',\n            'user_id': 'username',\n            'login': 'username',\n            'user': 'username',\n            'populationid': 'populationId',\n            'population_id': 'populationId',\n            'popid': 'populationId',\n            'pop_id': 'populationId'\n        };\n        \n        return headerMap[header] || header;\n    }\n\n    /**\n     * Check if email is valid\n     * @param {string} email - Email to validate\n     * @returns {boolean} True if valid\n     */\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    /**\n     * Check if username is valid\n     * @param {string} username - Username to validate\n     * @returns {boolean} True if valid\n     */\n    isValidUsername(username) {\n        // Username should not contain spaces or special characters\n        const usernameRegex = /^[a-zA-Z0-9._-]+$/;\n        return usernameRegex.test(username);\n    }\n    \n    // ======================\n    // UI Updates\n    // ======================\n    \n    /**\n     * Update file info for any file info container element\n     * @param {File} file - The file object\n     * @param {string} containerId - The ID of the container element to update\n     */\n    updateFileInfoForElement(file, containerId, recordCount = null) {\n        const container = document.getElementById(containerId);\n        console.log('updateFileInfoForElement called:', { containerId, container: !!container, file: !!file, recordCount });\n        if (!container || !file) {\n            console.warn('updateFileInfoForElement: container or file is null', { containerId, hasContainer: !!container, hasFile: !!file });\n            return;\n        }\n        \n        const fileSize = this.formatFileSize(file.size);\n        const lastModified = new Date(file.lastModified).toLocaleString();\n        const fileType = file.type || this.getFileExtension(file.name);\n        const fileExtension = this.getFileExtension(file.name);\n        \n        // Get file path information (if available)\n        let filePath = 'Unknown';\n        if (file.webkitRelativePath) {\n            filePath = file.webkitRelativePath;\n        } else if (file.name) {\n            // Try to extract directory from file name if it contains path separators\n            const pathParts = file.name.split(/[\\/\\\\]/);\n            if (pathParts.length > 1) {\n                filePath = pathParts.slice(0, -1).join('/');\n            } else {\n                filePath = 'Current Directory';\n            }\n        }\n        \n        // Calculate additional file properties\n        const isCSV = fileExtension === 'csv';\n        const isText = fileExtension === 'txt';\n        const isValidType = isCSV || isText || fileType === 'text/csv' || fileType === 'text/plain';\n        const fileSizeInKB = Math.round(file.size / 1024);\n        const fileSizeInMB = Math.round((file.size / 1024 / 1024) * 100) / 100;\n\n        // Determine record count display\n        let recordCountHTML = '';\n        if (isValidType && recordCount !== null) {\n            if (typeof recordCount === 'number') {\n                if (recordCount > 0) {\n                    recordCountHTML = `<div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\"><strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">🧾 Records</strong><span style=\"color: #0073C8; font-size: 0.8rem; font-weight: bold;\">${recordCount}</span></div>`;\n                } else {\n                    recordCountHTML = `<div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\"><strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">🧾 Records</strong><span style=\"color: #dc3545; font-size: 0.8rem; font-weight: bold;\">No user records found</span></div>`;\n                }\n            }\n        }\n        \n        // Create compact file info display with reduced footprint\n        const fileInfoHTML = `\n            <div class=\"file-info-details\" style=\"background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 12px; margin: 8px 0; box-shadow: 0 1px 4px rgba(0,0,0,0.08);\">\n                \n                <!-- Compact File Name Section -->\n                <div class=\"file-name-section\" style=\"text-align: center; margin-bottom: 12px; padding: 8px; background: #e6f4ff; border-radius: 4px; color: #1a237e; font-weight: bold; font-size: 1.1rem;\">\n                    <div style=\"font-size: 1.3rem; font-weight: 600; margin-bottom: 3px; color: #1a237e; text-shadow: none; word-break: break-word; overflow-wrap: break-word;\">\n                        <i class=\"fas fa-file-csv\" style=\"margin-right: 6px; font-size: 1.2rem; color: #1976d2;\"></i>\n                        ${file.name}\n                    </div>\n                    <div style=\"font-size: 0.85rem; opacity: 0.9; font-weight: 500; color: #1976d2;\">\n                        File Selected Successfully\n                    </div>\n                </div>\n                \n                <!-- Compact File Information Grid -->\n                <div class=\"file-info-grid\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 0.8em; margin-bottom: 10px;\">\n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📊 File Size</strong>\n                        <span style=\"color: #6c757d; font-size: 0.8rem;\">${fileSize} (${fileSizeInKB} KB, ${fileSizeInMB} MB)</span>\n                    </div>\n                    \n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📂 Directory</strong>\n                        <span style=\"color: #6c757d; word-break: break-all; font-size: 0.8rem;\">${filePath}</span>\n                    </div>\n                    \n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📅 Last Modified</strong>\n                        <span style=\"color: #6c757d; font-size: 0.8rem;\">${lastModified}</span>\n                    </div>\n                    \n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">🔤 File Type</strong>\n                        <span style=\"color: #6c757d; font-size: 0.8rem;\">${fileType || 'Unknown'}</span>\n                    </div>\n                    \n                    <div class=\"file-info-item\" style=\"background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;\">\n                        <strong style=\"color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;\">📄 Extension</strong>\n                        <span style=\"color: ${isValidType ? '#28a745' : '#dc3545'}; font-weight: bold; font-size: 0.8rem;\">\n                            ${fileExtension ? '.' + fileExtension : 'None'}\n                        </span>\n                    </div>\n                    ${recordCountHTML}\n                </div>\n                \n                <!-- Compact File Status Section -->\n                <div class=\"file-info-status\" style=\"margin-top: 8px; padding: 8px; border-radius: 4px; background: ${isValidType ? '#d4edda' : '#f8d7da'}; border: 1px solid ${isValidType ? '#c3e6cb' : '#f5c6cb'}; display: flex; align-items: center; gap: 6px;\">\n                    <i class=\"fas ${isValidType ? 'fa-check-circle' : 'fa-exclamation-triangle'}\" style=\"color: ${isValidType ? '#155724' : '#721c24'}; font-size: 1rem;\"></i>\n                    <span style=\"color: ${isValidType ? '#155724' : '#721c24'}; font-weight: bold; font-size: 0.85rem;\">\n                        ${isValidType ? '✅ File type is supported and ready for processing' : '⚠️ Warning: File type may not be optimal for import'}\n                    </span>\n                </div>\n                \n                ${file.size > 5 * 1024 * 1024 ? `\n                <div class=\"file-info-warning\" style=\"margin-top: 8px; padding: 8px; border-radius: 4px; background: #fff3cd; border: 1px solid #ffeaa7; display: flex; align-items: center; gap: 6px;\">\n                    <i class=\"fas fa-exclamation-triangle\" style=\"color: #856404; font-size: 1rem;\"></i>\n                    <span style=\"color: #856404; font-weight: bold; font-size: 0.85rem;\">Large file detected - processing may take longer than usual</span>\n                </div>\n                ` : ''}\n                \n                <!-- Responsive Design -->\n                <style>\n                    @media (max-width: 768px) {\n                        .file-info-details .file-name-section div:first-child {\n                            font-size: 1.1rem !important;\n                        }\n                        .file-info-grid {\n                            grid-template-columns: 1fr !important;\n                            gap: 6px !important;\n                        }\n                        .file-info-item {\n                            padding: 6px !important;\n                        }\n                    }\n                    @media (max-width: 480px) {\n                        .file-info-details .file-name-section div:first-child {\n                            font-size: 0.95rem !important;\n                        }\n                        .file-info-details {\n                            padding: 8px !important;\n                        }\n                    }\n                </style>\n            </div>\n        `;\n        \n        container.innerHTML = fileInfoHTML;\n    }\n\n    updateFileInfo(file, recordCount = null) {\n        this.updateFileInfoForElement(file, 'file-info', recordCount);\n    }\n    \n    showPreview(rows) {\n        if (!this.previewContainer) return;\n        \n        if (!rows || rows.length === 0) {\n            this.previewContainer.innerHTML = '<div class=\"alert alert-info\">No data to display</div>';\n                    // Disable import button if no rows\n        const importBtnBottom = ElementRegistry.startImportBtnBottom ? ElementRegistry.startImportBtnBottom() : null;\n        if (importBtnBottom) {\n            importBtnBottom.disabled = true;\n        }\n            return;\n        }\n        \n        const headers = Object.keys(rows[0]);\n        const previewRows = rows.slice(0, 5); // Show first 5 rows\n        \n        let html = `\n            <div class=\"table-responsive\">\n                <table class=\"table table-sm table-striped\">\n                    <thead>\n                        <tr>\n                            ${headers.map(h => `<th>${h}</th>`).join('')}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${previewRows.map(row => `\n                            <tr>\n                                ${headers.map(h => `<td>${row[h] || ''}</td>`).join('')}\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n                ${rows.length > 5 ? `<small class=\"text-muted\">Showing 5 of ${rows.length} rows</small>` : ''}\n            </div>\n        `;\n        \n        this.previewContainer.innerHTML = html;\n        \n        // Check if population choice has been made\n        const hasPopulationChoice = this.checkPopulationChoice();\n        \n        // Enable import button after showing preview (only if population choice is made)\n        const importBtnBottom = ElementRegistry.startImportBtnBottom ? ElementRegistry.startImportBtnBottom() : null;\n        if (importBtnBottom) {\n            importBtnBottom.disabled = !hasPopulationChoice;\n            this.logger.log(`Import button ${hasPopulationChoice ? 'enabled' : 'disabled'}`, 'debug');\n        } else {\n            this.logger.warn('Could not find import button to enable', 'warn');\n        }\n    }\n    \n    /**\n     * Check if user has made a population choice\n     * @returns {boolean} True if a population choice has been made\n     */\n    checkPopulationChoice() {\n        const selectedPopulationId = ElementRegistry.importPopulationSelect ? ElementRegistry.importPopulationSelect().value || '' : '';\n        const useDefaultPopulation = ElementRegistry.useDefaultPopulationCheckbox ? ElementRegistry.useDefaultPopulationCheckbox().checked || false : false;\n        const useCsvPopulationId = ElementRegistry.useCsvPopulationIdCheckbox ? ElementRegistry.useCsvPopulationIdCheckbox().checked || false : false;\n        \n        const hasSelectedPopulation = selectedPopulationId && selectedPopulationId.trim() !== '';\n        \n        return hasSelectedPopulation || useDefaultPopulation || useCsvPopulationId;\n    }\n    \n    // ======================\n    // Utility Methods\n    // ======================\n    \n    getFileExtension(filename) {\n        if (!filename || typeof filename !== 'string') return '';\n        \n        // Handle cases where filename might be a path\n        const lastDot = filename.lastIndexOf('.');\n        const lastSlash = Math.max(\n            filename.lastIndexOf('/'),\n            filename.lastIndexOf('\\\\')\n        );\n        \n        // If there's no dot, or the dot is before the last slash, return empty string\n        if (lastDot === -1 || lastSlash > lastDot) return '';\n        \n        // Extract and return the extension (without the dot)\n        return filename.slice(lastDot + 1).toLowerCase().trim();\n    }\n    \n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    \n    generateTemporaryPassword() {\n        const length = 16;\n        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]\\\\:;?><,./-';\n        let password = '';\n        \n        // Ensure at least one of each character type\n        password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];\n        password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)];\n        password += '0123456789'[Math.floor(Math.random() * 10)];\n        password += '!@#$%^&*'[Math.floor(Math.random() * 8)];\n        \n        // Fill the rest of the password\n        for (let i = password.length; i < length; i++) {\n            password += charset[Math.floor(Math.random() * charset.length)];\n        }\n        \n        // Shuffle the password\n        return password.split('').sort(() => Math.random() - 0.5).join('');\n    }\n\n    /**\n     * Get parsed users for import\n     * @returns {Array<Object>} Array of validated user objects\n     */\n    getParsedUsers() {\n        this.logger.info('getParsedUsers called', {\n            hasParsedUsers: !!this.parsedUsers,\n            parsedUsersType: typeof this.parsedUsers,\n            parsedUsersLength: this.parsedUsers ? this.parsedUsers.length : 0,\n            hasLastParsedUsers: !!this.lastParsedUsers,\n            lastParsedUsersType: typeof this.lastParsedUsers,\n            lastParsedUsersLength: this.lastParsedUsers ? this.lastParsedUsers.length : 0\n        });\n        \n        if (!this.parsedUsers || !Array.isArray(this.parsedUsers)) {\n            this.logger.warn('No parsed users available');\n            \n            // Show user-friendly notification\n            if (this.uiManager && this.uiManager.showNotification) {\n                this.uiManager.showNotification(\n                    'No CSV file has been uploaded yet. Please upload a CSV file first.',\n                    'info'\n                );\n            }\n            \n            return [];\n        }\n        \n        this.logger.info('Retrieving parsed users for import', {\n            userCount: this.parsedUsers.length,\n            hasUsers: this.parsedUsers.length > 0\n        });\n        \n        return this.parsedUsers;\n    }\n\n    /**\n     * Get parsing results for debugging\n     * @returns {Object|null} Parsing results or null if not available\n     */\n    getParseResults() {\n        return this.parseResults || null;\n    }\n\n    /**\n     * Initialize drag-and-drop support for a drop zone element\n     * @param {HTMLElement} dropZone - The drop zone element\n     */\n    initializeDropZone(dropZone) {\n        if (!dropZone) return;\n        \n        // Remove any previous listeners\n        dropZone.removeEventListener('dragenter', this._onDragEnter);\n        dropZone.removeEventListener('dragover', this._onDragOver);\n        dropZone.removeEventListener('dragleave', this._onDragLeave);\n        dropZone.removeEventListener('drop', this._onDrop);\n\n        // Bind event handlers to this instance\n        this._onDragEnter = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dropZone.classList.add('drag-over');\n        };\n        this._onDragOver = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dropZone.classList.add('drag-over');\n        };\n        this._onDragLeave = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dropZone.classList.remove('drag-over');\n        };\n        this._onDrop = async (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dropZone.classList.remove('drag-over');\n            const files = e.dataTransfer.files;\n            if (files && files.length > 0) {\n                try {\n                    await this.setFile(files[0]);\n                } catch (error) {\n                    this.logger.error('Drag-and-drop file error', { error: error.message });\n                    this.uiManager.showNotification('Failed to process dropped file: ' + error.message, 'error');\n                }\n            }\n        };\n        \n        // Attach listeners\n        dropZone.addEventListener('dragenter', this._onDragEnter);\n        dropZone.addEventListener('dragover', this._onDragOver);\n        dropZone.addEventListener('dragleave', this._onDragLeave);\n        dropZone.addEventListener('drop', this._onDrop);\n    }\n\n    /**\n     * Initialize global drag-and-drop prevention and routing\n     * This prevents the browser from trying to open files and routes them to the app\n     */\n    initializeGlobalDragAndDrop() {\n        // Prevent browser default behavior for file drops anywhere on the page\n        const preventDefaultDragEvents = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        // Handle file drops anywhere on the document\n        const handleGlobalDrop = async (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            // Remove body drag-over class\n            document.body.classList.remove('drag-over');\n            \n            const files = e.dataTransfer.files;\n            if (files && files.length > 0) {\n                const file = files[0];\n                \n                // Check if it's a supported file type\n                const fileName = file.name || '';\n                const fileExt = this.getFileExtension(fileName).toLowerCase();\n                const supportedExts = ['csv', 'txt'];\n                const knownBadExts = ['exe', 'js', 'png', 'jpg', 'jpeg', 'gif', 'pdf', 'zip', 'tar', 'gz'];\n                \n                if (fileExt && knownBadExts.includes(fileExt)) {\n                    this.uiManager.showNotification(`Unsupported file type: ${fileExt}. Please upload a CSV or text file.`, 'error');\n                    return;\n                }\n                \n                // Route to appropriate handler based on current view\n                const currentView = this.getCurrentView();\n                let targetDropZone = null;\n                \n                switch (currentView) {\n                    case 'import':\n                        targetDropZone = document.getElementById('import-drop-zone');\n                        break;\n                    case 'modify':\n                        targetDropZone = document.getElementById('modify-drop-zone');\n                        break;\n                    case 'import-dashboard':\n                        targetDropZone = document.getElementById('upload-zone');\n                        break;\n                    default:\n                        // Default to import view if no specific view is active\n                        targetDropZone = document.getElementById('import-drop-zone');\n                        break;\n                }\n                \n                // Show visual feedback on the target drop zone\n                if (targetDropZone) {\n                    targetDropZone.classList.add('drag-over');\n                    setTimeout(() => {\n                        targetDropZone.classList.remove('drag-over');\n                    }, 2000);\n                }\n                \n                try {\n                    await this.setFile(file);\n                    this.uiManager.showNotification(`File \"${file.name}\" processed successfully`, 'success');\n                } catch (error) {\n                    this.logger.error('Global drag-and-drop file error', { error: error.message });\n                    this.uiManager.showNotification('Failed to process dropped file: ' + error.message, 'error');\n                }\n            }\n        };\n\n        // Add visual feedback when dragging files over the document\n        const handleGlobalDragEnter = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            // Only add visual feedback if dragging files\n            if (e.dataTransfer.types.includes('Files')) {\n                document.body.classList.add('drag-over');\n            }\n        };\n\n        const handleGlobalDragLeave = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            \n            // Only remove visual feedback if leaving the document entirely\n            if (e.target === document || e.target === document.body) {\n                document.body.classList.remove('drag-over');\n            }\n        };\n\n        // Add global event listeners\n        document.addEventListener('dragover', preventDefaultDragEvents);\n        document.addEventListener('dragenter', handleGlobalDragEnter);\n        document.addEventListener('dragleave', handleGlobalDragLeave);\n        document.addEventListener('drop', handleGlobalDrop);\n        \n        // Store references for cleanup\n        this._globalDragHandlers = {\n            preventDefaultDragEvents,\n            handleGlobalDragEnter,\n            handleGlobalDragLeave,\n            handleGlobalDrop\n        };\n        \n        this.logger.info('Global drag-and-drop prevention initialized');\n    }\n\n    /**\n     * Clean up global drag-and-drop event listeners\n     */\n    cleanupGlobalDragAndDrop() {\n        if (this._globalDragHandlers) {\n            document.removeEventListener('dragover', this._globalDragHandlers.preventDefaultDragEvents);\n            document.removeEventListener('dragenter', this._globalDragHandlers.handleGlobalDragEnter);\n            document.removeEventListener('dragleave', this._globalDragHandlers.handleGlobalDragLeave);\n            document.removeEventListener('drop', this._globalDragHandlers.handleGlobalDrop);\n            this._globalDragHandlers = null;\n        }\n        \n        // Remove any remaining visual feedback\n        document.body.classList.remove('drag-over');\n    }\n\n    /**\n     * Get the current active view\n     * @returns {string} The current view name\n     */\n    getCurrentView() {\n        const activeView = document.querySelector('.view[style*=\"block\"]') || document.querySelector('.view:not([style*=\"none\"])');\n        if (!activeView) return 'import';\n        \n        const viewId = activeView.id;\n        if (viewId === 'import-dashboard-view') return 'import-dashboard';\n        if (viewId === 'modify-csv-view') return 'modify';\n        if (viewId === 'delete-csv-view') return 'delete';\n        if (viewId === 'export-view') return 'export';\n        if (viewId === 'settings-view') return 'settings';\n        if (viewId === 'logs-view') return 'logs';\n        \n        return 'import'; // Default to import view\n    }\n}\n\nexport { FileHandler };\n","export class VersionManager {\n    constructor() {\n        this.version = '6.1'; // Update this with each new version\n        console.log(`Version Manager initialized with version ${this.version}`);\n    }\n\n    getVersion() {\n        return this.version;\n    }\n\n    getFormattedVersion() {\n        return `v${this.version}`;\n    }\n\n    updateTitle() {\n        // Update the main title\n        const title = document.querySelector('h1');\n        if (title) {\n            // Remove any existing version number\n            const baseTitle = title.textContent.replace(/\\s*\\(v\\d+\\.\\d+\\.\\d+\\)\\s*$/, '').trim();\n            title.textContent = `${baseTitle} (${this.getFormattedVersion()})`;\n        }\n\n        // Update the document title\n        document.title = `PingOne User Import ${this.getFormattedVersion()}`;\n\n        // Update the import button text\n        this.updateImportButton();\n\n        // Update the top version badge\n        this.updateTopVersionBadge();\n\n        // Add version badge to the sidebar above the Ping Identity logo\n        this.addSidebarVersionBadge();\n    }\n    \n    updateImportButton() {\n        const importButton = document.getElementById('start-import-btn');\n        if (importButton) {\n            const baseText = importButton.textContent.replace(/\\s*\\(v\\d+\\.\\d+\\.\\d+\\)\\s*$/, '').trim();\n            importButton.innerHTML = `<i class=\"pi pi-upload\"></i> ${baseText} (${this.getFormattedVersion()})`;\n        }\n    }\n\n    updateTopVersionBadge() {\n        const versionText = document.getElementById('version-text');\n        if (versionText) {\n            versionText.textContent = this.getFormattedVersion();\n        }\n    }\n\n    addSidebarVersionBadge() {\n        // Remove existing badges if they exist\n        const existingTopLeftBadge = document.getElementById('top-left-version-badge');\n        if (existingTopLeftBadge) {\n            existingTopLeftBadge.remove();\n        }\n\n        const existingSidebarBadge = document.getElementById('sidebar-version-badge');\n        if (existingSidebarBadge) {\n            existingSidebarBadge.remove();\n        }\n\n        // Check if sidebar version badge already exists\n        if (document.getElementById('sidebar-version-badge')) {\n            return;\n        }\n\n        // Create sidebar version badge\n        const badge = document.createElement('div');\n        badge.id = 'sidebar-version-badge';\n        badge.className = 'sidebar-version-badge';\n        badge.textContent = this.getFormattedVersion();\n        \n        // Find the footer and insert the badge in the footer-left section, after the logo and trademark\n        const footer = document.querySelector('.ping-footer');\n        if (footer) {\n            const footerLeft = footer.querySelector('.footer-left');\n            if (footerLeft) {\n                // Insert the badge after the footer-logo div\n                const logoDiv = footerLeft.querySelector('.footer-logo');\n                if (logoDiv) {\n                    // Insert after the logo div\n                    footerLeft.insertBefore(badge, logoDiv.nextSibling);\n                } else {\n                    // Fallback: insert at the beginning of footer-left\n                    footerLeft.insertBefore(badge, footerLeft.firstChild);\n                }\n            } else {\n                // Fallback: insert at the end of the footer\n                footer.appendChild(badge);\n            }\n        } else {\n            // Fallback: add to body if footer not found\n            document.body.appendChild(badge);\n        }\n    }\n}\n\n// ES Module export\n","const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach((key) => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n","import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + (content || \"\"));\n    };\n    return fileReader.readAsDataURL(data);\n};\nfunction toArray(data) {\n    if (data instanceof Uint8Array) {\n        return data;\n    }\n    else if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    }\n}\nlet TEXT_ENCODER;\nexport function encodePacketToBinary(packet, callback) {\n    if (withNativeBlob && packet.data instanceof Blob) {\n        return packet.data.arrayBuffer().then(toArray).then(callback);\n    }\n    else if (withNativeArrayBuffer &&\n        (packet.data instanceof ArrayBuffer || isView(packet.data))) {\n        return callback(toArray(packet.data));\n    }\n    encodePacket(packet, false, (encoded) => {\n        if (!TEXT_ENCODER) {\n            TEXT_ENCODER = new TextEncoder();\n        }\n        callback(TEXT_ENCODER.encode(encoded));\n    });\n}\nexport { encodePacket };\n","// imported from https://github.com/socketio/base64-arraybuffer\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexport const decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n","import { ERROR_PACKET, PACKET_TYPES_REVERSE, } from \"./commons.js\";\nimport { decode } from \"./contrib/base64-arraybuffer.js\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nexport const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType),\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType),\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1),\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type],\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            if (data instanceof Blob) {\n                // from WebSocket + binaryType \"blob\"\n                return data;\n            }\n            else {\n                // from HTTP long-polling or WebTransport\n                return new Blob([data]);\n            }\n        case \"arraybuffer\":\n        default:\n            if (data instanceof ArrayBuffer) {\n                // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n                return data;\n            }\n            else {\n                // from WebTransport (Uint8Array)\n                return data.buffer;\n            }\n    }\n};\n","import { encodePacket, encodePacketToBinary } from \"./encodePacket.js\";\nimport { decodePacket } from \"./decodePacket.js\";\nimport { ERROR_PACKET, } from \"./commons.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, (encodedPacket) => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport function createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            encodePacketToBinary(packet, (encodedPacket) => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        },\n    });\n}\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nexport function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* State.READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* State.READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* State.READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue(decodePacket(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* State.READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(ERROR_PACKET);\n                    break;\n                }\n            }\n        },\n    });\n}\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload, };\n","/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","export const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return (cb) => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const globalThisShim = (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\nexport const defaultBinaryType = \"arraybuffer\";\nexport function createCookieJar() { }\n","import { globalThisShim as globalThis } from \"./globals.node.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = globalThis.setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = globalThis.clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = globalThis.setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = globalThis.clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n/**\n * Generates a random 8-characters string.\n */\nexport function randomString() {\n    return (Date.now().toString(36).substring(3) +\n        Math.random().toString(36).substring(2, 5));\n}\n","// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n","import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nimport { encode } from \"./contrib/parseqs.js\";\nexport class TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} opts - options\n     * @protected\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.socket = opts.socket;\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     */\n    open() {\n        this.readyState = \"opening\";\n        this.doOpen();\n        return this;\n    }\n    /**\n     * Closes the transport.\n     */\n    close() {\n        if (this.readyState === \"opening\" || this.readyState === \"open\") {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     */\n    send(packets) {\n        if (this.readyState === \"open\") {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n    /**\n     * Pauses the transport, in order not to lose packets during an upgrade.\n     *\n     * @param onPause\n     */\n    pause(onPause) { }\n    createUri(schema, query = {}) {\n        return (schema +\n            \"://\" +\n            this._hostname() +\n            this._port() +\n            this.opts.path +\n            this._query(query));\n    }\n    _hostname() {\n        const hostname = this.opts.hostname;\n        return hostname.indexOf(\":\") === -1 ? hostname : \"[\" + hostname + \"]\";\n    }\n    _port() {\n        if (this.opts.port &&\n            ((this.opts.secure && Number(this.opts.port !== 443)) ||\n                (!this.opts.secure && Number(this.opts.port) !== 80))) {\n            return \":\" + this.opts.port;\n        }\n        else {\n            return \"\";\n        }\n    }\n    _query(query) {\n        const encodedQuery = encode(query);\n        return encodedQuery.length ? \"?\" + encodedQuery : \"\";\n    }\n}\n","import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n","// imported from https://github.com/component/has-cors\nlet value = false;\ntry {\n    value = typeof XMLHttpRequest !== 'undefined' &&\n        'withCredentials' in new XMLHttpRequest();\n}\ncatch (err) {\n    // if XMLHttp support is disabled in IE then it will throw\n    // when trying to create\n}\nexport const hasCORS = value;\n","import { Polling } from \"./polling.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions, pick } from \"../util.js\";\nimport { globalThisShim as globalThis } from \"../globals.node.js\";\nimport { hasCORS } from \"../contrib/has-cors.js\";\nfunction empty() { }\nexport class BaseXHR extends Polling {\n    /**\n     * XHR Polling constructor.\n     *\n     * @param {Object} opts\n     * @package\n     */\n    constructor(opts) {\n        super(opts);\n        if (typeof location !== \"undefined\") {\n            const isSSL = \"https:\" === location.protocol;\n            let port = location.port;\n            // some user agents have empty `location.port`\n            if (!port) {\n                port = isSSL ? \"443\" : \"80\";\n            }\n            this.xd =\n                (typeof location !== \"undefined\" &&\n                    opts.hostname !== location.hostname) ||\n                    port !== opts.port;\n        }\n    }\n    /**\n     * Sends data.\n     *\n     * @param {String} data to send.\n     * @param {Function} called upon flush.\n     * @private\n     */\n    doWrite(data, fn) {\n        const req = this.request({\n            method: \"POST\",\n            data: data,\n        });\n        req.on(\"success\", fn);\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr post error\", xhrStatus, context);\n        });\n    }\n    /**\n     * Starts a poll cycle.\n     *\n     * @private\n     */\n    doPoll() {\n        const req = this.request();\n        req.on(\"data\", this.onData.bind(this));\n        req.on(\"error\", (xhrStatus, context) => {\n            this.onError(\"xhr poll error\", xhrStatus, context);\n        });\n        this.pollXhr = req;\n    }\n}\nexport class Request extends Emitter {\n    /**\n     * Request constructor\n     *\n     * @param {Object} options\n     * @package\n     */\n    constructor(createRequest, uri, opts) {\n        super();\n        this.createRequest = createRequest;\n        installTimerFunctions(this, opts);\n        this._opts = opts;\n        this._method = opts.method || \"GET\";\n        this._uri = uri;\n        this._data = undefined !== opts.data ? opts.data : null;\n        this._create();\n    }\n    /**\n     * Creates the XHR object and sends the request.\n     *\n     * @private\n     */\n    _create() {\n        var _a;\n        const opts = pick(this._opts, \"agent\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"autoUnref\");\n        opts.xdomain = !!this._opts.xd;\n        const xhr = (this._xhr = this.createRequest(opts));\n        try {\n            xhr.open(this._method, this._uri, true);\n            try {\n                if (this._opts.extraHeaders) {\n                    // @ts-ignore\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n                    for (let i in this._opts.extraHeaders) {\n                        if (this._opts.extraHeaders.hasOwnProperty(i)) {\n                            xhr.setRequestHeader(i, this._opts.extraHeaders[i]);\n                        }\n                    }\n                }\n            }\n            catch (e) { }\n            if (\"POST\" === this._method) {\n                try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                }\n                catch (e) { }\n            }\n            try {\n                xhr.setRequestHeader(\"Accept\", \"*/*\");\n            }\n            catch (e) { }\n            (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);\n            // ie6 check\n            if (\"withCredentials\" in xhr) {\n                xhr.withCredentials = this._opts.withCredentials;\n            }\n            if (this._opts.requestTimeout) {\n                xhr.timeout = this._opts.requestTimeout;\n            }\n            xhr.onreadystatechange = () => {\n                var _a;\n                if (xhr.readyState === 3) {\n                    (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(\n                    // @ts-ignore\n                    xhr.getResponseHeader(\"set-cookie\"));\n                }\n                if (4 !== xhr.readyState)\n                    return;\n                if (200 === xhr.status || 1223 === xhr.status) {\n                    this._onLoad();\n                }\n                else {\n                    // make sure the `error` event handler that's user-set\n                    // does not throw in the same tick and gets caught here\n                    this.setTimeoutFn(() => {\n                        this._onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                    }, 0);\n                }\n            };\n            xhr.send(this._data);\n        }\n        catch (e) {\n            // Need to defer since .create() is called directly from the constructor\n            // and thus the 'error' event can only be only bound *after* this exception\n            // occurs.  Therefore, also, we cannot throw here at all.\n            this.setTimeoutFn(() => {\n                this._onError(e);\n            }, 0);\n            return;\n        }\n        if (typeof document !== \"undefined\") {\n            this._index = Request.requestsCount++;\n            Request.requests[this._index] = this;\n        }\n    }\n    /**\n     * Called upon error.\n     *\n     * @private\n     */\n    _onError(err) {\n        this.emitReserved(\"error\", err, this._xhr);\n        this._cleanup(true);\n    }\n    /**\n     * Cleans up house.\n     *\n     * @private\n     */\n    _cleanup(fromError) {\n        if (\"undefined\" === typeof this._xhr || null === this._xhr) {\n            return;\n        }\n        this._xhr.onreadystatechange = empty;\n        if (fromError) {\n            try {\n                this._xhr.abort();\n            }\n            catch (e) { }\n        }\n        if (typeof document !== \"undefined\") {\n            delete Request.requests[this._index];\n        }\n        this._xhr = null;\n    }\n    /**\n     * Called upon load.\n     *\n     * @private\n     */\n    _onLoad() {\n        const data = this._xhr.responseText;\n        if (data !== null) {\n            this.emitReserved(\"data\", data);\n            this.emitReserved(\"success\");\n            this._cleanup();\n        }\n    }\n    /**\n     * Aborts the request.\n     *\n     * @package\n     */\n    abort() {\n        this._cleanup();\n    }\n}\nRequest.requestsCount = 0;\nRequest.requests = {};\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\nif (typeof document !== \"undefined\") {\n    // @ts-ignore\n    if (typeof attachEvent === \"function\") {\n        // @ts-ignore\n        attachEvent(\"onunload\", unloadHandler);\n    }\n    else if (typeof addEventListener === \"function\") {\n        const terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n        addEventListener(terminationEvent, unloadHandler, false);\n    }\n}\nfunction unloadHandler() {\n    for (let i in Request.requests) {\n        if (Request.requests.hasOwnProperty(i)) {\n            Request.requests[i].abort();\n        }\n    }\n}\nconst hasXHR2 = (function () {\n    const xhr = newRequest({\n        xdomain: false,\n    });\n    return xhr && xhr.responseType !== null;\n})();\n/**\n * HTTP long-polling based on the built-in `XMLHttpRequest` object.\n *\n * Usage: browser\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n */\nexport class XHR extends BaseXHR {\n    constructor(opts) {\n        super(opts);\n        const forceBase64 = opts && opts.forceBase64;\n        this.supportsBinary = hasXHR2 && !forceBase64;\n    }\n    request(opts = {}) {\n        Object.assign(opts, { xd: this.xd }, this.opts);\n        return new Request(newRequest, this.uri(), opts);\n    }\n}\nfunction newRequest(opts) {\n    const xdomain = opts.xdomain;\n    // XMLHttpRequest can be disabled on IE\n    try {\n        if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n            return new XMLHttpRequest();\n        }\n    }\n    catch (e) { }\n    if (!xdomain) {\n        try {\n            return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n        }\n        catch (e) { }\n    }\n}\n","import { Transport } from \"../transport.js\";\nimport { pick, randomString } from \"../util.js\";\nimport { encodePacket } from \"engine.io-parser\";\nimport { globalThisShim as globalThis, nextTick } from \"../globals.node.js\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class BaseWS extends Transport {\n    get name() {\n        return \"websocket\";\n    }\n    doOpen() {\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws = this.createSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = (closeEvent) => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent,\n        });\n        this.ws.onmessage = (ev) => this.onData(ev.data);\n        this.ws.onerror = (e) => this.onError(\"websocket error\", e);\n    }\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, (data) => {\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    this.doWrite(packet, data);\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.onerror = () => { };\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        const query = this.query || {};\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\nconst WebSocketCtor = globalThis.WebSocket || globalThis.MozWebSocket;\n/**\n * WebSocket transport based on the built-in `WebSocket` object.\n *\n * Usage: browser, Node.js (since v21), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n * @see https://caniuse.com/mdn-api_websocket\n * @see https://nodejs.org/api/globals.html#websocket\n */\nexport class WS extends BaseWS {\n    createSocket(uri, protocols, opts) {\n        return !isReactNative\n            ? protocols\n                ? new WebSocketCtor(uri, protocols)\n                : new WebSocketCtor(uri)\n            : new WebSocketCtor(uri, protocols, opts);\n    }\n    doWrite(_packet, data) {\n        this.ws.send(data);\n    }\n}\n","import { Transport } from \"../transport.js\";\nimport { nextTick } from \"../globals.node.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream, } from \"engine.io-parser\";\n/**\n * WebTransport transport based on the built-in `WebTransport` object.\n *\n * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n * @see https://caniuse.com/webtransport\n */\nexport class WT extends Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        try {\n            // @ts-ignore\n            this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this._transport.closed\n            .then(() => {\n            this.onClose();\n        })\n            .catch((err) => {\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this._transport.ready.then(() => {\n            this._transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = createPacketEncoderStream();\n                encoderStream.readable.pipeTo(stream.writable);\n                this._writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            return;\n                        }\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this._writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this._writer.write(packet).then(() => {\n                if (lastPacket) {\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\n","import { XHR } from \"./polling-xhr.node.js\";\nimport { WS } from \"./websocket.node.js\";\nimport { WT } from \"./webtransport.js\";\nexport const transports = {\n    websocket: WS,\n    webtransport: WT,\n    polling: XHR,\n};\n","// imported from https://github.com/galkn/parseuri\n/**\n * Parses a URI\n *\n * Note: we could also have used the built-in URL object, but it isn't supported on all platforms.\n *\n * See:\n * - https://developer.mozilla.org/en-US/docs/Web/API/URL\n * - https://caniuse.com/url\n * - https://www.rfc-editor.org/rfc/rfc3986#appendix-B\n *\n * History of the parse() method:\n * - first commit: https://github.com/socketio/socket.io-client/commit/4ee1d5d94b3906a9c052b459f1a818b15f38f91c\n * - export into its own module: https://github.com/socketio/engine.io-client/commit/de2c561e4564efeb78f1bdb1ba39ef81b2822cb3\n * - reimport: https://github.com/socketio/engine.io-client/commit/df32277c3f6d622eec5ed09f493cae3f3391d242\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@\\/?#]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@\\/?#]*)(?::([^:@\\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    if (str.length > 8000) {\n        throw \"URI too long\";\n    }\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n","import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick, } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport class SocketWithoutUpgrade extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = parse(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = createCookieJar();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            this._pingTimeoutTime = 0;\n            nextTick(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => DEFAULT_TRANSPORTS[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\n","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n","const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\nexport { Fetch, NodeXHR, XHR, NodeWebSocket, WebSocket, WebTransport, } from \"engine.io-client\";\n","/**\n * Feature Flags Configuration\n * \n * Centralized feature flag management for gradual subsystem rollout\n * and A/B testing capabilities.\n */\n\nexport const FEATURE_FLAGS = {\n    // Logging and monitoring\n    USE_CENTRALIZED_LOGGING: true,\n    ENABLE_PERFORMANCE_MONITORING: true,\n    ENABLE_ERROR_TRACKING: true,\n    \n    // Subsystem rollout flags\n    USE_NAVIGATION_SUBSYSTEM: false, // Disabled to avoid conflict with ViewManagementSubsystem\n    USE_CONNECTION_MANAGER: true,\n    USE_AUTH_MANAGEMENT: true,\n    USE_VIEW_MANAGEMENT: true,\n    USE_OPERATION_MANAGER: true,\n    USE_IMPORT_SUBSYSTEM: true,\n    USE_EXPORT_SUBSYSTEM: true,\n    USE_REALTIME_SUBSYSTEM: true,\n    USE_ADVANCED_REALTIME: true,\n    USE_ANALYTICS_DASHBOARD: true, // CRITICAL: Enable analytics dashboard functionality\n    \n    // UI enhancements\n    ENABLE_ADVANCED_PROGRESS_UI: true,\n    ENABLE_DRAG_DROP_IMPROVEMENTS: true,\n    ENABLE_KEYBOARD_SHORTCUTS: false,\n    \n    // API optimizations\n    ENABLE_REQUEST_BATCHING: false,\n    ENABLE_RESPONSE_CACHING: false,\n    ENABLE_RETRY_LOGIC: true,\n    \n    // Development and debugging\n    ENABLE_DEBUG_MODE: process.env.NODE_ENV === 'development',\n    ENABLE_VERBOSE_LOGGING: process.env.NODE_ENV === 'development',\n    SHOW_PERFORMANCE_METRICS: process.env.NODE_ENV === 'development'\n};\n\n/**\n * Check if a feature is enabled\n */\nexport function isFeatureEnabled(featureName) {\n    return FEATURE_FLAGS[featureName] === true;\n}\n\n/**\n * Get all enabled features\n */\nexport function getEnabledFeatures() {\n    return Object.entries(FEATURE_FLAGS)\n        .filter(([_, enabled]) => enabled)\n        .map(([feature, _]) => feature);\n}\n\n/**\n * Get feature flag status for debugging\n */\nexport function getFeatureFlagStatus() {\n    return {\n        total: Object.keys(FEATURE_FLAGS).length,\n        enabled: getEnabledFeatures().length,\n        flags: FEATURE_FLAGS,\n        environment: process.env.NODE_ENV || 'development'\n    };\n}\n\n/**\n * Runtime feature flag override (for testing)\n */\nexport function setFeatureFlag(featureName, enabled) {\n    if (process.env.NODE_ENV === 'development') {\n        FEATURE_FLAGS[featureName] = enabled;\n        console.log(`Feature flag ${featureName} set to ${enabled}`);\n    } else {\n        console.warn('Feature flags can only be modified in development mode');\n    }\n}\n\nexport default FEATURE_FLAGS;","// File: app.js\n// Description: Main application entry point for PingOne user import tool\n// \n// This file orchestrates the entire application, managing:\n// - UI state and view transitions\n// - File upload and CSV processing\n// - Import/export/modify/delete operations\n// - Real-time progress tracking via SSE\n// - Settings management and population selection\n// - Error handling and user feedback\n// - Disclaimer agreement and feature flags\n\n// Browser-compatible logging system\nimport { createLogger } from './utils/browser-logging-service.js';\nimport { debugLog } from './utils/debug-logger.js';\n\n// Debug-friendly utilities\nimport '../../public/js/utils/utility-loader.js';\n\n// Core utilities\nimport { Logger } from '../../public/js/modules/logger.js';\nimport { FileLogger } from '../../public/js/modules/file-logger.js';\nimport { EventBus } from '../../public/js/modules/event-bus.js';\n\n// Components\nimport { SettingsManager } from '../../public/js/modules/settings-manager.js';\nimport { UIManager } from './components/ui-manager.js';\nimport TokenManager from '../../public/js/modules/token-manager.js';\n\n// Modal components (needed for startup flow)\nimport '../../public/js/modules/disclaimer-modal.js';\nimport '../../public/js/modules/credentials-modal.js';\n\n// Subsystems (new architecture)\nimport { ImportSubsystem } from './subsystems/import-subsystem.js';\nimport { ExportSubsystem } from './subsystems/export-subsystem.js';\nimport { OperationManagerSubsystem } from './subsystems/operation-manager-subsystem.js';\nimport { NavigationSubsystem } from './subsystems/navigation-subsystem.js';\nimport { ConnectionManagerSubsystem } from './subsystems/connection-manager-subsystem.js';\nimport { RealtimeCommunicationSubsystem } from './subsystems/realtime-communication-subsystem.js';\nimport { AuthManagementSubsystem } from './subsystems/auth-management-subsystem.js';\nimport { ViewManagementSubsystem } from './subsystems/view-management-subsystem.js';\nimport { GlobalTokenManagerSubsystem } from './subsystems/global-token-manager-subsystem.js';\nimport { TokenNotificationSubsystem } from './subsystems/token-notification-subsystem.js';\nimport { AdvancedRealtimeSubsystem } from './subsystems/advanced-realtime-subsystem.js';\nimport { RealtimeCollaborationUI } from './components/realtime-collaboration-ui.js';\nimport { AnalyticsDashboardSubsystem } from './subsystems/analytics-dashboard-subsystem.js';\nimport { AnalyticsDashboardUI } from './components/analytics-dashboard-ui.js';\nimport HistoryUIComponent from './components/history-ui.js';\nimport EnhancedLoggingUIComponent from './components/logging-ui-enhanced.js';\nimport TestingHub from './components/testing-hub.js';\n\n// Modern subsystems (replacing legacy modules)\nimport { ProgressSubsystem } from '../../public/js/modules/progress-subsystem.js';\nimport { EnhancedProgressSubsystem } from './subsystems/enhanced-progress-subsystem.js';\nimport { EnhancedTokenStatusSubsystem } from './subsystems/enhanced-token-status-subsystem.js';\nimport { SessionSubsystem } from '../../public/js/modules/session-subsystem.js';\nimport { LoggingSubsystem } from '../../public/js/modules/logging-subsystem.js';\nimport { HistorySubsystem } from '../../public/js/modules/history-subsystem.js';\nimport { PopulationSubsystem } from '../../public/js/modules/population-subsystem.js';\nimport { SettingsSubsystem } from '../../public/js/modules/settings-subsystem.js';\n\n// Legacy modules (minimal usage, being phased out)\nimport { LocalAPIClient } from '../../public/js/modules/local-api-client.js';\nimport { PingOneClient } from '../../public/js/modules/pingone-client.js';\nimport { FileHandler } from '../../public/js/modules/file-handler.js';\nimport { VersionManager } from '../../public/js/modules/version-manager.js';\nimport { showTokenAlertModal, clearTokenAlertSession } from '../../public/js/modules/token-alert-modal.js';\nimport tokenRefreshHandler from '../../public/js/modules/token-refresh-handler.js';\nimport { io } from 'socket.io-client';\n\n// Feature flags for gradual subsystem rollout\nimport { FEATURE_FLAGS, isFeatureEnabled, getFeatureFlagStatus } from '../shared/feature-flags.js';\n\n/**\n * Secret Field Toggle Component\n * \n * Manages the visibility toggle for sensitive input fields (like API secrets).\n * Provides a secure way to show/hide sensitive data with visual feedback.\n * \n * Features:\n * - Toggle between visible and masked input\n * - Visual eye icon that changes based on state\n * - Maintains actual value while showing masked version\n * - Prevents accidental exposure of sensitive data\n */\nclass SecretFieldToggle {\n    constructor(inputElement, toggleElement) {\n        this.input = inputElement;\n        this.toggle = toggleElement;\n        this.isVisible = false;\n        this.originalValue = '';\n        \n        this.init();\n    }\n    \n    init() {\n        if (!this.input || !this.toggle) return;\n        \n        this.toggle.addEventListener('click', () => this.toggleVisibility());\n        this.input.addEventListener('input', () => this.handleInput());\n        \n        // Initialize with masked state\n        this.updateDisplay();\n    }\n    \n    toggleVisibility() {\n        this.isVisible = !this.isVisible;\n        this.updateDisplay();\n    }\n    \n    handleInput() {\n        this.originalValue = this.input.value;\n        if (!this.isVisible) {\n            this.maskValue();\n        }\n    }\n    \n    updateDisplay() {\n        if (this.isVisible) {\n            this.input.value = this.originalValue;\n            this.input.type = 'text';\n            this.toggle.innerHTML = '<i class=\"fas fa-eye-slash\"></i>';\n            this.toggle.title = 'Hide';\n        } else {\n            this.maskValue();\n            this.input.type = 'password';\n            this.toggle.innerHTML = '<i class=\"fas fa-eye\"></i>';\n            this.toggle.title = 'Show';\n        }\n    }\n    \n    maskValue() {\n        if (this.originalValue) {\n            this.input.value = '•'.repeat(this.originalValue.length);\n        }\n    }\n    \n    getValue() {\n        return this.originalValue;\n    }\n    \n    setValue(value) {\n        this.originalValue = value;\n        this.updateDisplay();\n    }\n}\n\n/**\n * Main Application Class\n * \n * Orchestrates the entire PingOne user import tool application.\n * Manages all UI interactions, API calls, file processing, and state management.\n * \n * Features:\n * - Subsystem-based architecture for better maintainability\n * - Centralized logging with correlation tracking\n * - Feature flags for gradual rollout\n * - Real-time progress tracking\n * - Comprehensive error handling\n */\nclass App {\n    constructor() {\n        // Initialize centralized logging\n        this.logger = FEATURE_FLAGS.USE_CENTRALIZED_LOGGING \n            ? createLogger({\n                serviceName: 'pingone-import-app',\n                enableServer: true,\n                enableConsole: true\n              })\n            : new Logger();\n            \n        this.logger.info('Application initialization started', {\n            version: '6.3.0',\n            featureFlags: FEATURE_FLAGS\n        });\n        \n        // Debug logging\n        debugLog.systemState('app', 'initialization_started', {\n            version: '6.3.0',\n            featureFlags: FEATURE_FLAGS,\n            userAgent: navigator.userAgent\n        });\n        \n        // Core components\n        this.eventBus = new EventBus();\n        this.settingsManager = null;\n        this.uiManager = null;\n        this.tokenManager = null;\n        this.fileHandler = null;\n        this.versionManager = null;\n        \n        // API clients\n        this.localClient = null;\n        \n        // UI Components\n        this.globalTokenManager = null;\n        \n        // Modern subsystems (replacing legacy managers)\n        this.progressSubsystem = null;\n        this.enhancedProgressSubsystem = null;\n        this.enhancedTokenStatusSubsystem = null;\n        this.sessionSubsystem = null;\n        this.loggingSubsystem = null;\n        this.historySubsystem = null;\n        this.populationSubsystem = null;\n        this.settingsSubsystem = null;\n        \n        // Advanced real-time features\n        this.advancedRealtimeSubsystem = null;\n        this.realtimeCollaborationUI = null;\n        \n        // Subsystems (new architecture)\n        this.subsystems = {};\n        this.analyticsDashboardSubsystem = null;\n        this.analyticsDashboardUI = null;\n        \n        // Application state\n        this.isInitialized = false;\n        this.currentView = 'home';\n        this.socket = null;\n        \n        // Performance tracking\n        this.logger.startTimer('app-initialization');\n    }\n    \n    /**\n     * Initialize the application\n     */\n    async init() {\n        try {\n            this.logger.info('Starting application initialization');\n            this.updateStartupMessage('Initializing core components...');\n            \n            // Initialize core components\n            await this.initializeCoreComponents();\n            this.updateStartupMessage('Setting up subsystems...');\n            \n            // Initialize subsystems\n            await this.initializeSubsystems();\n            this.updateStartupMessage('Loading legacy components...');\n            \n            // Initialize legacy components (gradually being replaced)\n            await this.initializeLegacyComponents();\n            this.updateStartupMessage('Setting up event listeners...');\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n            // Set up modal completion listeners\n            this.setupModalCompletionListeners();\n            this.updateStartupMessage('Finalizing user interface...');\n            \n            // Initialize UI\n            await this.initializeUI();\n            \n            // Mark as initialized\n            this.isInitialized = true;\n            \n            // Hide startup screen\n            this.hideStartupScreen();\n            \n            const initTime = this.logger.endTimer('app-initialization');\n            this.logger.info('Application initialization completed', {\n                initializationTime: `${initTime}ms`,\n                subsystemsEnabled: Object.keys(this.subsystems).length\n            });\n            \n        } catch (error) {\n            this.logger.error('Application initialization failed', {\n                error: error.message,\n                stack: error.stack\n            });\n            throw error;\n        }\n    }\n    \n    /**\n     * Hide the startup screen\n     */\n    hideStartupScreen() {\n        try {\n            const startupScreen = document.getElementById('startup-wait-screen');\n            const appContainer = document.querySelector('.app-container');\n            \n            if (startupScreen) {\n                this.logger.debug('Hiding startup wait screen');\n                startupScreen.style.display = 'none';\n            } else {\n                this.logger.warn('Startup wait screen element not found');\n            }\n            \n            if (appContainer) {\n                appContainer.classList.remove('startup-loading');\n            }\n            \n            this.logger.debug('Startup screen hidden successfully');\n        } catch (error) {\n            this.logger.error('Failed to hide startup screen', { error: error.message });\n        }\n    }\n    \n    /**\n     * Initialize core components\n     */\n    async initializeCoreComponents() {\n        this.logger.debug('Initializing core components');\n\n        // API clients must be first as other components depend on it.\n        this.localClient = new LocalAPIClient(this.logger);\n\n        // Initialize UIManager first as SettingsSubsystem depends on it.\n        this.uiManager = new UIManager({ logger: this.logger });\n\n        // Initialize SettingsManager before SettingsSubsystem\n        this.settingsManager = new SettingsManager(this.logger.child({ component: 'settings-manager' }));\n        await this.settingsManager.init();\n        this.logger.debug('Settings manager initialized');\n\n        // SettingsSubsystem is a core component and must be initialized before others that depend on it.\n        this.settingsSubsystem = new SettingsSubsystem(\n            this.logger.child({ subsystem: 'settings' }),\n            this.uiManager,\n            this.localClient,\n            this.settingsManager, // Now properly initialized\n            this.eventBus,\n            null // credentialsManager - not available yet\n        );\n        await this.settingsSubsystem.init();\n        this.subsystems.settings = this.settingsSubsystem;\n        this.logger.debug('Settings subsystem initialized as a core component');\n\n        // Initialize other core components that may depend on the above.\n        this.tokenManager = new TokenManager(this.logger, this.subsystems.settings.getAllSettings(), this.eventBus);\n        this.fileHandler = new FileHandler(this.logger, this.uiManager);\n        this.versionManager = new VersionManager();\n        try {\n            this.pingOneClient = new PingOneClient();\n            this.logger.debug('PingOne client created successfully');\n        } catch (error) {\n            this.logger.error('Failed to create PingOne client:', error);\n            this.pingOneClient = null;\n        }\n\n        this.logger.debug('Core components initialized');\n    }\n    \n    /**\n     * Check if PingOne client is available and ready\n     */\n    isPingOneClientAvailable() {\n        return this.pingOneClient !== null && typeof this.pingOneClient === 'object';\n    }\n\n    /**\n     * Initialize subsystems with feature flags\n     */\n    async initializeSubsystems() {\n        this.logger.info('Initializing subsystems...');\n\n        // Defensive check for logger before proceeding\n        if (!this.logger) {\n            console.error('CRITICAL: Logger not initialized before subsystem setup. Aborting.');\n            this.uiManager.showGlobalError('A critical error occurred during startup. Please refresh the page.');\n            return;\n        }\n\n        try {\n            // Subsystem Initialization with Feature Flags\n            // Each subsystem is initialized only if its feature flag is enabled.\n            // The main logger instance is passed directly to ensure stability.\n\n            const subsystemsToInit = [\n                { name: 'logging', flag: true, constructor: LoggingSubsystem, deps: [this.eventBus, this.logger] },\n                { name: 'navigation', flag: FEATURE_FLAGS.USE_NAVIGATION_SUBSYSTEM, constructor: NavigationSubsystem, deps: [this.logger, this.uiManager, this.subsystems.settings] },\n                { name: 'connectionManager', flag: FEATURE_FLAGS.USE_CONNECTION_MANAGER, constructor: ConnectionManagerSubsystem, deps: [this.logger, this.uiManager, this.subsystems.settings, this.localClient] },\n                { name: 'realtimeManager', flag: FEATURE_FLAGS.USE_REALTIME_SUBSYSTEM, constructor: RealtimeCommunicationSubsystem, deps: [this.logger, this.uiManager] },\n                { name: 'authManager', flag: FEATURE_FLAGS.USE_AUTH_MANAGEMENT, constructor: AuthManagementSubsystem, deps: [this.logger, this.uiManager, this.localClient, this.subsystems.settings] },\n                { name: 'viewManager', flag: FEATURE_FLAGS.USE_VIEW_MANAGEMENT, constructor: ViewManagementSubsystem, deps: [this.logger, this.uiManager] },\n                { name: 'operationManager', flag: FEATURE_FLAGS.USE_OPERATION_MANAGER, constructor: OperationManagerSubsystem, deps: [this.logger, this.uiManager, this.subsystems.settings, this.localClient] },\n                { name: 'population', flag: true, constructor: PopulationSubsystem, deps: [this.eventBus, this.subsystems.settings, () => this.subsystems.logging, this.localClient] },\n                { name: 'history', flag: true, constructor: HistorySubsystem, deps: [this.eventBus, this.subsystems.settings, () => this.subsystems.logging] },\n                { name: 'import', flag: FEATURE_FLAGS.USE_IMPORT_SUBSYSTEM, constructor: ImportSubsystem, deps: [this.logger, this.uiManager, this.localClient, this.subsystems.settings, this.eventBus, () => this.subsystems.population, () => this.subsystems.authManager] },\n                { name: 'export', flag: FEATURE_FLAGS.USE_EXPORT_SUBSYSTEM, constructor: ExportSubsystem, deps: [this.logger, this.uiManager, this.localClient, this.subsystems.settings, this.eventBus, () => this.subsystems.population] },\n                { name: 'analyticsDashboard', flag: FEATURE_FLAGS.USE_ANALYTICS_DASHBOARD, constructor: AnalyticsDashboardSubsystem, deps: [this.logger, this.eventBus, () => this.subsystems.advancedRealtime, this.progressSubsystem, this.sessionSubsystem] },\n                { name: 'advancedRealtime', flag: FEATURE_FLAGS.USE_ADVANCED_REALTIME, constructor: AdvancedRealtimeSubsystem, deps: [this.logger, this.eventBus, () => this.subsystems.realtimeManager, this.sessionSubsystem, this.progressSubsystem] },\n            ];\n\n            for (const sub of subsystemsToInit) {\n                if (sub.flag) {\n                    this.logger.debug(`Initializing ${sub.name} subsystem...`);\n                    // Resolve dependencies that are functions (lazy loading)\n                    const resolvedDeps = sub.deps.map(dep => (typeof dep === 'function' ? dep() : dep));\n                    this.subsystems[sub.name] = new sub.constructor(...resolvedDeps);\n                    await this.subsystems[sub.name].init();\n                    this.logger.info(`${sub.name} subsystem initialized.`);\n                }\n            }\n\n            // Initialize UI components that depend on subsystems\n            if (this.subsystems.advancedRealtime) {\n                this.realtimeCollaborationUI = new RealtimeCollaborationUI(this.eventBus, this.logger);\n                this.realtimeCollaborationUI.init();\n            }\n\n            this.logger.info('All subsystems initialized successfully.');\n\n        } catch (error) {\n            this.logger.error('Subsystem initialization failed', {\n                error: error.message,\n                stack: error.stack\n            });\n            throw error;\n        }\n\n        // Global Token Manager Subsystem\n        this.subsystems.globalTokenManager = new GlobalTokenManagerSubsystem(\n            this.logger.child({ subsystem: 'globalTokenManager' }),\n            this.eventBus\n        );\n        await this.subsystems.globalTokenManager.init();\n        this.logger.debug('Global Token Manager subsystem initialized');\n\n        // Initialize Token Notification Subsystem\n        this.subsystems.tokenNotification = new TokenNotificationSubsystem(\n            this.logger.child({ subsystem: 'token-notification' }),\n            this.eventBus,\n            this.subsystems.navigation\n        );\n        await this.subsystems.tokenNotification.init();\n        this.logger.debug('Token Notification subsystem initialized');\n\n        // Initialize Enhanced Progress Subsystem\n        // Fixed progress subsystem initialization\n        this.enhancedProgressSubsystem = new EnhancedProgressSubsystem(\n            this.logger.child({ subsystem: 'enhanced-progress' }),\n            this.uiManager,\n            this.eventBus,\n            this.subsystems.realtimeManager\n        );\n        await this.enhancedProgressSubsystem.init();\n        this.subsystems.enhancedProgress = this.enhancedProgressSubsystem;\n        this.logger.debug('Enhanced Progress subsystem initialized');\n\n        // Initialize Enhanced Token Status Subsystem\n        this.enhancedTokenStatusSubsystem = new EnhancedTokenStatusSubsystem(\n            this.logger.child({ subsystem: 'enhanced-token-status' }),\n            this.eventBus,\n            this.uiManager\n        );\n        await this.enhancedTokenStatusSubsystem.init();\n        this.subsystems.enhancedTokenStatus = this.enhancedTokenStatusSubsystem;\n        this.logger.debug('Enhanced Token Status subsystem initialized');\n\n        this.logger.info('All subsystems initialized successfully', {\n            subsystemCount: Object.keys(this.subsystems).length,\n            enabledSubsystems: Object.keys(this.subsystems)\n        });\n    }\n    \n    /**\n     * Initialize remaining legacy components (minimal usage)\n     */\n    async initializeLegacyComponents() {\n        this.logger.debug('Initializing remaining legacy components');\n        \n        // Note: Most legacy managers have been replaced by modern subsystems\n        // Only keeping minimal legacy components that haven't been fully migrated yet\n        \n        this.logger.debug('Legacy components initialized (minimal set)');\n    }\n    /**\n     * Set up event listeners and EventBus patterns\n     */\n    setupEventListeners() {\n        this.logger.debug('Setting up event listeners and EventBus patterns');\n        \n        // Global error handler with EventBus integration\n        window.addEventListener('error', (event) => {\n            const errorData = {\n                message: event.message,\n                filename: event.filename,\n                lineno: event.lineno,\n                colno: event.colno,\n                error: event.error?.stack\n            };\n            this.logger.error('Global error caught', errorData);\n            this.eventBus.emit('app:global-error', errorData);\n        });\n        \n        // Unhandled promise rejection handler with EventBus integration\n        window.addEventListener('unhandledrejection', (event) => {\n            const rejectionData = {\n                reason: event.reason,\n                promise: event.promise\n            };\n            this.logger.error('Unhandled promise rejection', rejectionData);\n            this.eventBus.emit('app:unhandled-rejection', rejectionData);\n        });\n        \n        // Performance monitoring with EventBus integration\n        window.addEventListener('load', () => {\n            const performanceData = {\n                loadTime: performance.now(),\n                timing: performance.timing\n            };\n            this.logger.info('Page load completed', performanceData);\n            this.eventBus.emit('app:page-loaded', performanceData);\n        });\n\n        // Settings save feedback event listeners\n        window.addEventListener('settings:save-success', (event) => {\n            const statusBox = document.getElementById('settings-status-box');\n            if (statusBox) {\n                statusBox.textContent = event.detail.message;\n                statusBox.className = 'status-message status-success';\n                statusBox.style.display = 'flex';\n                setTimeout(() => {\n                    statusBox.style.display = 'none';\n                }, 5000);\n            }\n        });\n\n        window.addEventListener('settings:save-error', (event) => {\n            const statusBox = document.getElementById('settings-status-box');\n            if (statusBox) {\n                statusBox.textContent = event.detail.message;\n                statusBox.className = 'status-message status-error';\n                statusBox.style.display = 'flex';\n                setTimeout(() => {\n                    statusBox.style.display = 'none';\n                }, 8000);\n            }\n        });\n        \n        // EventBus listeners for subsystem coordination\n        this.setupEventBusListeners();\n        \n        // Setup main UI button event listeners\n        this.setupMainUIEventListeners();\n        \n        this.logger.debug('Event listeners and EventBus patterns set up');\n    }\n    \n    /**\n     * Set up main UI event listeners for navigation and buttons\n     */\n    setupMainUIEventListeners() {\n        this.logger.debug('Setting up main UI event listeners');\n        \n        try {\n            // Note: Navigation cards are handled by ViewManagementSubsystem\n            // Only set up non-navigation UI event listeners here\n            \n            // File input handlers for import\n            const fileInput = document.getElementById('csv-file');\n            if (fileInput) {\n                fileInput.addEventListener('change', (e) => {\n                    this.logger.debug('File input changed');\n                    this.handleFileSelection(e);\n                });\n            }\n            \n            // Drop zone handlers for import\n            const dropZone = document.getElementById('import-drop-zone');\n            if (dropZone) {\n                dropZone.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.logger.debug('Drop zone clicked');\n                    if (fileInput) {\n                        fileInput.click();\n                    }\n                });\n                \n                dropZone.addEventListener('dragover', (e) => {\n                    e.preventDefault();\n                    dropZone.classList.add('dragover');\n                });\n                \n                dropZone.addEventListener('dragleave', (e) => {\n                    e.preventDefault();\n                    dropZone.classList.remove('dragover');\n                });\n                \n                dropZone.addEventListener('drop', (e) => {\n                    e.preventDefault();\n                    dropZone.classList.remove('dragover');\n                    this.logger.debug('File dropped');\n                    this.handleFileDrop(e);\n                });\n            }\n            \n            // Cancel import button\n            const cancelImportBtn = document.getElementById('cancel-import-btn');\n            if (cancelImportBtn) {\n                cancelImportBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.logger.debug('Cancel import button clicked');\n                    this.cancelImport();\n                });\n            }\n            \n            // DIRECT NAVIGATION FIX - Add navigation event listeners as fallback\n            this.logger.debug('Setting up direct navigation event listeners as fallback');\n            this.setupDirectNavigation();\n            \n            this.logger.debug('Main UI event listeners set up successfully');\n            \n        } catch (error) {\n            this.logger.error('Failed to set up main UI event listeners', { error: error.message });\n        }\n    }\n    \n    /**\n     * Set up EventBus listeners for subsystem coordination\n     */\n    setupEventBusListeners() {\n        this.logger.debug('Setting up EventBus listeners for subsystem coordination');\n        \n        // Application lifecycle events\n        this.eventBus.on('app:init-complete', (data) => {\n            this.logger.info('Application initialization complete', data);\n        });\n        \n        this.eventBus.on('app:shutdown', (data) => {\n            this.logger.info('Application shutdown initiated', data);\n        });\n        \n        // Subsystem communication events\n        this.eventBus.on('subsystem:error', (data) => {\n            this.logger.error('Subsystem error occurred', data);\n        });\n        \n        this.eventBus.on('subsystem:ready', (data) => {\n            this.logger.debug('Subsystem ready', data);\n        });\n        \n        // Operation lifecycle events\n        this.eventBus.on('navigation:view-changed', ({ newView }) => {\n            this.currentView = newView;\n            this.logger.info(`View changed to: ${newView}`);\n\n            if (isFeatureEnabled('ANALYTICS_DASHBOARD') && this.analyticsDashboardUI) {\n                if (newView === 'analytics') {\n                    this.analyticsDashboardUI.show();\n                } else {\n                    this.analyticsDashboardUI.hide();\n                }\n            }\n        });\n        \n        this.eventBus.on('operation:started', (data) => {\n            this.logger.info('Operation started', data);\n        });\n        \n        this.eventBus.on('operation:completed', (data) => {\n            this.logger.info('Operation completed', data);\n        });\n        \n        this.eventBus.on('operation:failed', (data) => {\n            this.logger.error('Operation failed', data);\n        });\n        \n        // Progress and status events\n        this.eventBus.on('progress:updated', (data) => {\n            this.logger.debug('Progress updated', data);\n        });\n        \n        this.eventBus.on('status:changed', (data) => {\n            this.logger.debug('Status changed', data);\n        });\n        \n        this.logger.debug('EventBus listeners set up for subsystem coordination');\n    }\n    \n    /**\n     * Set up modal completion listeners\n     */\n    setupModalCompletionListeners() {\n        try {\n            // Listen for credentials modal completion\n            document.addEventListener('credentials-modal-completed', (event) => {\n                this.logger.info('🔄 LOADING: Credentials modal completed', event.detail);\n                this.showModalLoading('Finalizing Setup...', 'Completing your PingOne Import Tool configuration.');\n                \n                // Hide loading after a brief delay\n                setTimeout(() => {\n                    this.hideModalLoading();\n                }, 1500);\n            });\n            \n            // Listen for any modal events that might indicate completion\n            document.addEventListener('application_enabled_after_credentials', (event) => {\n                this.logger.info('🔄 LOADING: Application enabled after credentials');\n                this.showModalLoading('Almost Ready...', 'Finalizing your workspace setup.');\n                \n                setTimeout(() => {\n                    this.hideModalLoading();\n                }, 1000);\n            });\n            \n            this.logger.debug('Modal completion listeners set up');\n            \n        } catch (error) {\n            this.logger.error('Failed to set up modal completion listeners', { error: error.message });\n        }\n    }\n    \n    /**\n     * Show modal loading overlay\n     */\n    showModalLoading(title = 'Loading...', message = 'Please wait while we set up your experience.') {\n        try {\n            const overlay = document.getElementById('modal-loading-overlay');\n            const titleElement = document.getElementById('modal-loading-title');\n            const messageElement = document.getElementById('modal-loading-message');\n            \n            if (overlay && titleElement && messageElement) {\n                titleElement.textContent = title;\n                messageElement.textContent = message;\n                \n                overlay.classList.remove('fade-out');\n                overlay.classList.add('fade-in');\n                overlay.style.display = 'flex';\n                \n                this.logger.debug('🔄 LOADING: Modal loading shown', { title, message });\n            }\n        } catch (error) {\n            this.logger.error('🔄 LOADING: Failed to show modal loading', { error: error.message });\n        }\n    }\n    \n    /**\n     * Hide modal loading overlay\n     */\n    hideModalLoading() {\n        try {\n            const overlay = document.getElementById('modal-loading-overlay');\n            \n            if (overlay) {\n                overlay.classList.remove('fade-in');\n                overlay.classList.add('fade-out');\n                \n                // Hide after animation completes\n                setTimeout(() => {\n                    overlay.style.display = 'none';\n                    overlay.classList.remove('fade-out');\n                }, 300);\n                \n                this.logger.debug('🔄 LOADING: Modal loading hidden');\n            }\n        } catch (error) {\n            this.logger.error('🔄 LOADING: Failed to hide modal loading', { error: error.message });\n        }\n    }\n    \n    /**\n     * Update startup screen message\n     */\n    updateStartupMessage(message) {\n        try {\n            const startupScreen = document.getElementById('startup-wait-screen');\n            const textElement = startupScreen?.querySelector('.startup-text p');\n            \n            if (textElement) {\n                textElement.textContent = message;\n                this.logger.debug('🔄 LOADING: Startup message updated', { message });\n            }\n        } catch (error) {\n            this.logger.error('🔄 LOADING: Failed to update startup message', { error: error.message });\n        }\n    }\n    \n    /**\n     * Set up direct navigation event listeners as fallback\n     * This is used when the ViewManagementSubsystem is not working properly\n     */\n    setupDirectNavigation() {\n        this.logger.debug('🔧 DIRECT NAV: Setting up direct navigation event listeners');\n        \n        try {\n            // Find all navigation elements\n            const navElements = document.querySelectorAll('[data-view]');\n            this.logger.debug(`🔧 DIRECT NAV: Found ${navElements.length} navigation elements`);\n            \n            if (navElements.length === 0) {\n                this.logger.warn('🔧 DIRECT NAV: No navigation elements found with [data-view] attribute');\n                return;\n            }\n            \n            // Add click listeners to navigation elements\n            navElements.forEach((element, index) => {\n                const view = element.getAttribute('data-view');\n                this.logger.debug(`🔧 DIRECT NAV: Setting up listener for ${view} (element ${index})`);\n                \n                // Remove any existing listeners first\n                element.removeEventListener('click', this.handleDirectNavigation);\n                \n                // Add new listener\n                const clickHandler = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.logger.info(`🔧 DIRECT NAV: Navigation clicked: ${view}`);\n                    this.directShowView(view);\n                };\n                \n                element.addEventListener('click', clickHandler);\n                \n                // Store the handler for cleanup if needed\n                element._directNavHandler = clickHandler;\n            });\n            \n            this.logger.info('🔧 DIRECT NAV: Direct navigation setup completed successfully');\n            \n            // Also set up settings page buttons\n            this.setupSettingsPageButtons();\n            \n        } catch (error) {\n            this.logger.error('🔧 DIRECT NAV: Failed to set up direct navigation', { error: error.message });\n        }\n    }\n    \n    /**\n     * Set up settings page button event listeners\n     */\n    setupSettingsPageButtons() {\n        this.logger.debug('🔧 SETTINGS: Setting up settings page button listeners');\n        \n        try {\n            // Save Settings button\n            const saveSettingsBtn = document.getElementById('save-settings');\n            if (saveSettingsBtn) {\n                saveSettingsBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.logger.info('🔧 SETTINGS: Save Settings clicked');\n                    this.handleSaveSettings();\n                });\n                this.logger.debug('🔧 SETTINGS: Save Settings button listener added');\n            }\n            \n            // Test Connection button\n            const testConnectionBtn = document.getElementById('test-connection-btn');\n            if (testConnectionBtn) {\n                testConnectionBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.logger.info('🔧 SETTINGS: Test Connection clicked');\n                    this.handleTestConnection();\n                });\n                this.logger.debug('🔧 SETTINGS: Test Connection button listener added');\n            }\n            \n            // Get Token button\n            const getTokenBtn = document.getElementById('get-token-btn');\n            if (getTokenBtn) {\n                getTokenBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.logger.info('🔧 SETTINGS: Get Token clicked');\n                    this.handleGetToken();\n                });\n                this.logger.debug('🔧 SETTINGS: Get Token button listener added');\n            }\n            \n            // Toggle API Secret Visibility button\n            const toggleSecretBtn = document.getElementById('toggle-api-secret-visibility');\n            if (toggleSecretBtn) {\n                toggleSecretBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.logger.info('🔧 SETTINGS: Toggle Secret Visibility clicked');\n                    this.handleToggleSecretVisibility();\n                });\n                this.logger.debug('🔧 SETTINGS: Toggle Secret Visibility button listener added');\n            }\n            \n            this.logger.info('🔧 SETTINGS: Settings page buttons setup completed');\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to set up settings page buttons', { error: error.message });\n        }\n    }\n    \n    /**\n     * Handle Save Settings button click\n     */\n    async handleSaveSettings() {\n        this.logger.info('🔧 SETTINGS: Saving settings...');\n        \n        // Debug logging\n        debugLog.userAction('save_settings', 'save-settings-button', {\n            timestamp: Date.now()\n        });\n        \n        try {\n            // Get form values\n            const environmentId = document.getElementById('environment-id')?.value;\n            const clientId = document.getElementById('api-client-id')?.value;\n            const clientSecret = document.getElementById('api-secret')?.value;\n            const region = document.getElementById('region')?.value;\n            const rateLimit = document.getElementById('rate-limit')?.value;\n            const populationId = document.getElementById('population-id')?.value;\n            \n            const settings = {\n                environmentId,\n                apiClientId: clientId,  // Fix: use apiClientId instead of clientId\n                apiSecret: clientSecret,  // Fix: use apiSecret instead of clientSecret\n                region,\n                rateLimit: parseInt(rateLimit) || 90,\n                populationId\n            };\n            \n            this.logger.debug('🔧 SETTINGS: Settings to save', { ...settings, clientSecret: '[HIDDEN]' });\n            \n            // Use settings manager if available\n            if (this.settingsManager && typeof this.settingsManager.saveSettings === 'function') {\n                await this.settingsManager.saveSettings(settings);\n                this.showSettingsStatus('Settings saved successfully!', 'success');\n            } else {\n                // Fallback: save to localStorage and send to server\n                localStorage.setItem('pingone-settings', JSON.stringify(settings));\n                \n                // Send to server\n                const response = await fetch('/api/settings', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(settings)\n                });\n                \n                if (response.ok) {\n                    const result = await response.json();\n                    this.showSettingsStatus('Settings saved successfully!', 'success');\n                    this.logger.info('🔧 SETTINGS: Settings saved successfully', result);\n                } else {\n                    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n                    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n                }\n            }\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to save settings', { error: error.message });\n            \n            // Debug logging\n            debugLog.error('settings', 'Save settings failed', error, {\n                action: 'save_settings',\n                timestamp: Date.now()\n            });\n            \n            this.showSettingsStatus(`Failed to save settings: ${error.message}`, 'error');\n        }\n    }\n    \n    /**\n     * Load settings and populate form fields\n     * Called by ViewManagementSubsystem when settings view is initialized\n     * \n     * CRITICAL: This method is required by ViewManagementSubsystem.initializeSettingsView()\n     * DO NOT remove or rename this method without updating ViewManagementSubsystem\n     * Last fixed: 2025-07-21 - Missing method caused settings page to not load credentials\n     * \n     * @returns {Promise<Object>} Loaded settings object\n     */\n    async loadSettings() {\n        this.logger.info('🔧 SETTINGS: Loading settings for form population...');\n        \n        try {\n            // Use SettingsSubsystem if available\n            if (this.settingsSubsystem && typeof this.settingsSubsystem.loadSettings === 'function') {\n                this.logger.debug('🔧 SETTINGS: Using SettingsSubsystem to load settings');\n                const settings = await this.settingsSubsystem.loadSettings();\n                this.populateSettingsForm(settings);\n                return settings;\n            }\n            \n            // Fallback to direct API call (same as credentials modal)\n            this.logger.debug('🔧 SETTINGS: Using direct API call to load settings');\n            try {\n                const response = await fetch('/api/settings');\n            \n                if (response.ok) {\n                    const settings = await response.json();\n                    this.populateSettingsForm(settings);\n                    return settings;\n                }\n            } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to load settings from API', { error: error.message });\n            this.showSettingsStatus(`Failed to load settings: ${error.message}`, 'error');\n            return {};\n        }\n    } catch (error) {\n        this.logger.error('🔧 SETTINGS: Failed to load settings', { error: error.message });\n        this.showSettingsStatus(`Failed to load settings: ${error.message}`, 'error');\n        return {};\n    }\n}\n\n    /**\n     * Populate settings form fields with loaded data\n     */\n    populateSettingsForm(settings) {\n        this.logger.debug('🔧 SETTINGS: Populating form fields with settings data');\n        \n        try {\n            // Map settings to form fields (handle both naming conventions)\n            const fieldMappings = {\n                'environment-id': settings.environmentId || settings['environment-id'] || '',\n                'api-client-id': settings.apiClientId || settings['api-client-id'] || '',\n                'api-secret': settings.apiSecret || settings['api-secret'] || '',\n                'region': settings.region || 'NorthAmerica',\n                'population-id': settings.populationId || settings['population-id'] || '',\n                'rate-limit': settings.rateLimit || settings['rate-limit'] || 90\n            };\n            \n            // Populate each form field\n            Object.entries(fieldMappings).forEach(([fieldId, value]) => {\n                const field = document.getElementById(fieldId);\n                if (field && value) {\n                    field.value = value;\n                    this.logger.debug(`🔧 SETTINGS: Populated field ${fieldId}`, { hasValue: !!value });\n                }\n            });\n            \n            this.logger.info('🔧 SETTINGS: Form fields populated successfully');\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to populate form fields', { error: error.message });\n        }\n    }\n\n    /**\n     * Handle Test Connection button click\n     */\n    async handleTestConnection() {\n        this.logger.info('🔧 SETTINGS: Testing connection...');\n        \n        // Debug logging\n        debugLog.userAction('test_connection', 'test-connection-btn', {\n            timestamp: Date.now()\n        });\n        \n        try {\n            this.showSettingsStatus('Testing connection...', 'info');\n            \n            // Use connection manager if available\n            if (this.subsystems.connectionManager && typeof this.subsystems.connectionManager.testConnection === 'function') {\n                const result = await this.subsystems.connectionManager.testConnection();\n                if (result.success) {\n                    this.showSettingsStatus('Connection test successful!', 'success');\n                } else {\n                    this.showSettingsStatus(`Connection test failed: ${result.error}`, 'error');\n                }\n            } else {\n                // Fallback: test connection directly\n                // CRITICAL: This MUST be a GET request to match server-side endpoint\n                // Server endpoint: routes/pingone-proxy-fixed.js - router.get('/test-connection')\n                // DO NOT change to POST without updating server-side endpoint\n                // Last fixed: 2025-07-21 - HTTP method mismatch caused 400 Bad Request errors\n                const response = await fetch('/api/pingone/test-connection', {\n                    method: 'GET', // MUST match server endpoint method\n                    headers: { 'Content-Type': 'application/json' }\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    this.showSettingsStatus('Connection test successful!', 'success');\n                } else {\n                    this.showSettingsStatus(`Connection test failed: ${result.error}`, 'error');\n                }\n            }\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Connection test failed', { error: error.message });\n            this.showSettingsStatus(`Connection test failed: ${error.message}`, 'error');\n        }\n    }\n    \n    /**\n     * Handle Get Token button click\n     */\n    async handleGetToken() {\n        this.logger.info('🔧 SETTINGS: Getting token...');\n        \n        // Debug logging\n        debugLog.userAction('get_token', 'get-token-btn', {\n            timestamp: Date.now()\n        });\n        \n        try {\n            this.showSettingsStatus('Getting token...', 'info');\n            \n            // Use token manager if available\n            if (this.tokenManager && typeof this.tokenManager.getToken === 'function') {\n                const token = await this.tokenManager.getToken();\n                if (token) {\n                    this.showSettingsStatus('Token acquired successfully!', 'success');\n                } else {\n                    this.showSettingsStatus('Failed to get token', 'error');\n                }\n            } else {\n                // Fallback: get token directly\n                const response = await fetch('/api/pingone/token', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' }\n                });\n                \n                const result = await response.json();\n                \n                if (result.access_token) {\n                    this.showSettingsStatus('Token acquired successfully!', 'success');\n                } else {\n                    this.showSettingsStatus('Failed to get token', 'error');\n                }\n            }\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to get token', { error: error.message });\n            this.showSettingsStatus(`Failed to get token: ${error.message}`, 'error');\n        }\n    }\n    \n    /**\n     * Handle Toggle Secret Visibility button click\n     */\n    handleToggleSecretVisibility() {\n        this.logger.debug('🔧 SETTINGS: Toggling secret visibility');\n        \n        try {\n            const secretInput = document.getElementById('api-secret');\n            const toggleBtn = document.getElementById('toggle-api-secret-visibility');\n            const icon = toggleBtn?.querySelector('i');\n            \n            if (secretInput && toggleBtn && icon) {\n                if (secretInput.type === 'password') {\n                    secretInput.type = 'text';\n                    icon.className = 'fas fa-eye-slash';\n                    this.logger.debug('🔧 SETTINGS: Secret visibility: shown');\n                } else {\n                    secretInput.type = 'password';\n                    icon.className = 'fas fa-eye';\n                    this.logger.debug('🔧 SETTINGS: Secret visibility: hidden');\n                }\n            }\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to toggle secret visibility', { error: error.message });\n        }\n    }\n    \n    /**\n     * Show status message in settings page\n     */\n    showSettingsStatus(message, type = 'info') {\n        try {\n            const statusElement = document.getElementById('settings-action-status');\n            const messageElement = statusElement?.querySelector('.status-message');\n            const iconElement = statusElement?.querySelector('.status-icon');\n            \n            if (statusElement && messageElement && iconElement) {\n                // Set message\n                messageElement.textContent = message;\n                \n                // Set icon based on type\n                const icons = {\n                    'success': 'fas fa-check-circle',\n                    'error': 'fas fa-exclamation-circle',\n                    'info': 'fas fa-info-circle',\n                    'warning': 'fas fa-exclamation-triangle'\n                };\n                \n                iconElement.className = icons[type] || icons.info;\n                \n                // Set CSS class for styling\n                statusElement.className = `action-status ${type}`;\n                statusElement.style.display = 'block';\n                \n                // Auto-hide after 5 seconds for success/info messages\n                if (type === 'success' || type === 'info') {\n                    setTimeout(() => {\n                        statusElement.style.display = 'none';\n                    }, 5000);\n                }\n                \n                this.logger.debug(`🔧 SETTINGS: Status shown: ${type} - ${message}`);\n            }\n            \n        } catch (error) {\n            this.logger.error('🔧 SETTINGS: Failed to show status', { error: error.message });\n        }\n    }\n    \n    /**\n     * Direct view switching (bypasses subsystems)\n     */\n    async directShowView(view) {\n        this.logger.info(`🔧 DIRECT NAV: Switching to view: ${view}`);\n        \n        // Debug logging\n        debugLog.navigation(this.currentView, view, {\n            method: 'direct_navigation',\n            timestamp: Date.now()\n        });\n        \n        try {\n            // Hide all views\n            const allViews = document.querySelectorAll('.view, .view-container');\n            this.logger.debug(`🔧 DIRECT NAV: Found ${allViews.length} view containers to hide`);\n            \n            allViews.forEach(viewElement => {\n                viewElement.style.display = 'none';\n                viewElement.classList.remove('active');\n            });\n            \n            // Show target view\n            const targetView = document.getElementById(`${view}-view`);\n            if (targetView) {\n                targetView.style.display = 'block';\n                targetView.classList.add('active');\n                this.logger.info(`🔧 DIRECT NAV: Successfully showed ${view}-view`);\n                \n                // Update navigation state\n                this.updateDirectNavigationState(view);\n                \n                // Update current view\n                this.currentView = view;\n                \n                // Update page title\n                this.updatePageTitle(view);\n                \n                this.logger.info(`🔧 DIRECT NAV: Navigation to ${view} completed successfully`);\n                \n            } else {\n                this.logger.error(`🔧 DIRECT NAV: View element not found: ${view}-view`);\n            }\n            \n        } catch (error) {\n            this.logger.error(`🔧 DIRECT NAV: Failed to show view ${view}`, { error: error.message });\n        }\n    }\n    \n    /**\n     * Update navigation state for direct navigation\n     */\n    updateDirectNavigationState(view) {\n        try {\n            // Update active navigation items\n            const navElements = document.querySelectorAll('[data-view]');\n            navElements.forEach(element => {\n                const elementView = element.getAttribute('data-view');\n                if (elementView === view) {\n                    element.classList.add('active');\n                } else {\n                    element.classList.remove('active');\n                }\n            });\n            \n            this.logger.debug(`🔧 DIRECT NAV: Updated navigation state for ${view}`);\n            \n        } catch (error) {\n            this.logger.error('🔧 DIRECT NAV: Failed to update navigation state', { error: error.message });\n        }\n    }\n    \n    /**\n     * Update page title\n     */\n    updatePageTitle(view) {\n        try {\n            const titles = {\n                'home': 'Home',\n                'import': 'Import Users',\n                'export': 'Export Users',\n                'modify': 'Modify Users',\n                'delete-csv': 'Delete Users',\n                'settings': 'Settings',\n                'logs': 'Logs',\n                'history': 'History'\n            };\n            \n            const title = titles[view] || 'PingOne Import Tool';\n            document.title = `${title} - PingOne Import Tool v6.5.1.1`;\n            \n            this.logger.debug(`🔧 DIRECT NAV: Updated page title to: ${document.title}`);\n            \n        } catch (error) {\n            this.logger.error('🔧 DIRECT NAV: Failed to update page title', { error: error.message });\n        }\n    }\n    \n    /**\n     * Initialize UI\n     */\n    async initializeUI() {\n        this.logger.debug('Initializing UI');\n        \n        // Use view management subsystem if available\n        if (this.subsystems.viewManager) {\n            await this.subsystems.viewManager.showView(this.currentView);\n        } else {\n            // Fallback to legacy view management\n            await this.legacyShowView(this.currentView);\n        }\n        \n        this.logger.debug('UI initialized');\n    }\n    \n    /**\n     * Show view using subsystem or fallback to legacy\n     */\n    async showView(view) {\n        this.logger.debug('Showing view', { view, useSubsystem: !!this.subsystems.viewManager });\n        \n        if (this.subsystems.viewManager) {\n            return await this.subsystems.viewManager.showView(view);\n        } else {\n            return await this.legacyShowView(view);\n        }\n    }\n    \n    /**\n     * Legacy view management (fallback)\n     */\n    async legacyShowView(view) {\n        this.logger.debug('Using legacy view management', { view });\n        // Legacy implementation would go here\n        this.currentView = view;\n    }\n    \n    /**\n     * Start import operation\n     */\n    async startImport() {\n        this.logger.info('Starting import operation');\n        \n        if (this.subsystems.importManager) {\n            return await this.subsystems.importManager.startImport();\n        } else {\n            // Fallback to legacy import\n            this.logger.warn('Using legacy import - subsystem not available');\n            return await this.legacyStartImport();\n        }\n    }\n    \n    /**\n     * Start export operation\n     */\n    async startExport() {\n        this.logger.info('Starting export operation');\n        \n        if (this.subsystems.exportManager) {\n            return await this.subsystems.exportManager.startExport();\n        } else {\n            // Fallback to legacy export\n            this.logger.warn('Using legacy export - subsystem not available');\n            return await this.legacyStartExport();\n        }\n    }\n    \n    /**\n     * Get authentication token\n     */\n    async getToken() {\n        this.logger.debug('Getting authentication token');\n        \n        if (this.subsystems.authManager) {\n            return await this.subsystems.authManager.getToken();\n        } else {\n            // Fallback to legacy token management\n            this.logger.warn('Using legacy token management - subsystem not available');\n            return await this.tokenManager.getToken();\n        }\n    }\n    \n    /**\n     * Legacy methods (to be removed as subsystems are fully integrated)\n     */\n    async legacyStartImport() {\n        this.logger.debug('Legacy import method called');\n        // Legacy implementation\n    }\n    \n    async legacyStartExport() {\n        this.logger.debug('Legacy export method called');\n        // Legacy implementation\n    }\n    \n    /**\n     * Navigate to a specific view\n     */\n    navigateToView(viewName) {\n        this.logger.debug('Navigating to view', { viewName });\n        \n        try {\n            // Use view management subsystem if available\n            if (this.subsystems.viewManager) {\n                this.subsystems.viewManager.showView(viewName);\n            } else {\n                // Fallback to legacy view management\n                this.legacyShowView(viewName);\n            }\n            \n            this.currentView = viewName;\n            this.logger.info('Navigation completed', { viewName });\n            \n        } catch (error) {\n            this.logger.error('Navigation failed', { viewName, error: error.message });\n        }\n    }\n    \n    /**\n     * Handle file selection from input\n     */\n    handleFileSelection(event) {\n        this.logger.debug('Handling file selection');\n        try {\n            const files = event.target.files;\n            if (files && files.length > 0) {\n                const file = files[0];\n                this.logger.info('File selected', {\n                    fileName: file.name,\n                    fileSize: file.size,\n                    fileType: file.type\n                });\n\n                // Use import subsystem if available\n                if (this.subsystems.importManager) {\n                    this.subsystems.importManager.handleFileSelection(file);\n                } else {\n                    this.logger.warn('Import subsystem not available, using legacy import');\n                    if (this.fileHandler && typeof this.fileHandler.handleFile === 'function') {\n                        this.fileHandler.handleFile(file);\n                    } else {\n                        this.logger.error('No file handling method available');\n                        this.showMessage('File handling is not available. Please refresh the page.', 'error');\n                    }\n                }\n            }\n        } catch (error) {\n            this.logger.error('File selection handling failed', { error: error.message });\n        }\n    }\n\n    /**\n     * Handle file drop from drag and drop\n     */\n    handleFileDrop(event) {\n        this.logger.debug('Handling file drop');\n        try {\n            const files = event.dataTransfer.files;\n            if (files && files.length > 0) {\n                const file = files[0];\n                this.logger.info('File dropped', {\n                    fileName: file.name,\n                    fileSize: file.size,\n                    fileType: file.type\n                });\n\n                // Use import subsystem if available\n                if (this.subsystems.importManager) {\n                    this.subsystems.importManager.handleFileSelection(file);\n                } else {\n                    this.logger.warn('Import subsystem not available, using legacy import');\n                    if (this.fileHandler && typeof this.fileHandler.handleFile === 'function') {\n                        this.fileHandler.handleFile(file);\n                    } else {\n                        this.logger.error('No file handling method available');\n                        this.showMessage('File handling is not available. Please refresh the page.', 'error');\n                    }\n                }\n            }\n        } catch (error) {\n            this.logger.error('File drop handling failed', { error: error.message });\n        }\n    }\n    \n    /**\n     * Cancel import operation\n     */\n    cancelImport() {\n        this.logger.debug('Cancelling import operation');\n        \n        try {\n            // Use import subsystem if available\n            if (this.subsystems.importManager) {\n                this.subsystems.importManager.cancelImport();\n            } else {\n                this.logger.warn('Import subsystem not available, using legacy cancel');\n                this.legacyCancelImport();\n            }\n            \n            this.logger.info('Import cancellation requested');\n            \n        } catch (error) {\n            this.logger.error('Import cancellation failed', { error: error.message });\n        }\n    }\n    \n    /**\n     * Enable tool after disclaimer acceptance\n     */\n    enableToolAfterDisclaimer() {\n        this.logger.info('Enabling tool after disclaimer acceptance');\n        \n        try {\n            // Show loading overlay during transition\n            this.showModalLoading('Setting up...', 'Preparing your PingOne Import Tool experience.');\n            \n            // Hide startup screen if still visible\n            this.hideStartupScreen();\n            \n            // Ensure UI is properly initialized and responsive\n            if (this.uiManager && typeof this.uiManager.enableUI === 'function') {\n                this.uiManager.enableUI();\n            }\n            \n            // Initialize event listeners if not already done\n            if (!this.eventListenersSetup) {\n                this.setupEventListeners();\n                this.eventListenersSetup = true;\n            }\n            \n            // Enable all subsystems\n            Object.values(this.subsystems).forEach(subsystem => {\n                if (subsystem && typeof subsystem.enable === 'function') {\n                    subsystem.enable();\n                }\n            });\n            \n            // Remove any disabled states from the app container\n            const appContainer = document.querySelector('.app-container');\n            if (appContainer) {\n                appContainer.classList.remove('disabled', 'modal-active');\n                appContainer.style.pointerEvents = 'auto';\n            }\n            \n            // Enable all buttons and interactive elements\n            const buttons = document.querySelectorAll('button, .btn');\n            buttons.forEach(button => {\n                button.disabled = false;\n                button.style.pointerEvents = 'auto';\n            });\n            \n            this.logger.info('Tool enabled successfully after disclaimer');\n            \n            // Hide loading overlay after a brief delay to show completion\n            setTimeout(() => {\n                this.hideModalLoading();\n            }, 1000);\n            \n        } catch (error) {\n            this.logger.error('Failed to enable tool after disclaimer', { error: error.message });\n            // Hide loading overlay on error too\n            this.hideModalLoading();\n        }\n    }\n    \n    /**\n     * Get application health status\n     */\n    getHealthStatus() {\n        return {\n            initialized: this.isInitialized,\n            subsystems: Object.keys(this.subsystems).reduce((status, key) => {\n                status[key] = this.subsystems[key].isInitialized || false;\n                return status;\n            }, {}),\n            featureFlags: FEATURE_FLAGS,\n            currentView: this.currentView,\n            timestamp: new Date().toISOString()\n        };\n    }\n\n    /**\n     * Show a message to the user\n     */\n    showMessage(message, type = 'info') {\n        this.logger.debug(`Showing message: ${message}`, { type });\n        // This is a placeholder for a more robust notification system\n        // For now, we can use the settings status display as a general message area\n        this.showSettingsStatus(message, type);\n    }\n}\n\n// Initialize and start the application\nconst app = new App();\n\n// Global app reference for debugging\nwindow.app = app;\n\n// Expose enableToolAfterDisclaimer function globally for modal access\nwindow.enableToolAfterDisclaimer = () => {\n    if (window.app && typeof window.app.enableToolAfterDisclaimer === 'function') {\n        window.app.enableToolAfterDisclaimer();\n    } else {\n        window.logger?.warn('App not available or enableToolAfterDisclaimer method not found') || console.warn('App not available or enableToolAfterDisclaimer method not found');\n    }\n};\n\n// Expose loading functions for testing\nwindow.testLoading = {\n    show: (title, message) => {\n        if (window.app) {\n            window.app.showModalLoading(title, message);\n        }\n    },\n    hide: () => {\n        if (window.app) {\n            window.app.hideModalLoading();\n        }\n    },\n    testSequence: () => {\n        if (window.app) {\n            window.logger?.info('🔄 Testing loading sequence...') || console.log('🔄 Testing loading sequence...');\n            window.app.showModalLoading('Step 1', 'Testing loading overlay...');\n            setTimeout(() => {\n                window.app.showModalLoading('Step 2', 'Updating message...');\n                setTimeout(() => {\n                    window.app.showModalLoading('Step 3', 'Almost done...');\n                    setTimeout(() => {\n                        window.app.hideModalLoading();\n                        window.logger?.info('🔄 Loading test completed') || console.log('🔄 Loading test completed');\n                    }, 1500);\n                }, 1500);\n            }, 1500);\n        }\n    }\n};\n\n// Start the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        await app.init();\n        window.logger?.info('🚀 PingOne Import Tool v6.5.1.2 initialized successfully') || console.log('🚀 PingOne Import Tool v6.5.1.2 initialized successfully');\n        window.logger?.info('📊 Health Status:', app.getHealthStatus()) || console.log('📊 Health Status:', app.getHealthStatus());\n    } catch (error) {\n        window.logger?.error('❌ Application initialization failed:', error) || console.error('❌ Application initialization failed:', error);\n    }\n});\n\nexport default App;"],"file":"assets/main-DqHzo1YN.js"}