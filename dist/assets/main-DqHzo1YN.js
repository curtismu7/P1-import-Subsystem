var Ge=Object.defineProperty;var qe=(r,e,t)=>e in r?Ge(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var je=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports);var X=(r,e,t)=>qe(r,typeof e!="symbol"?e+"":e,t);import{E as p,_ as We,c as Ye,L as Je,a as Xe,S as Ke,P as Qe}from"./pingone-client-X8mLxZeL.js";var ws=je((Ts,k)=>{class he{constructor(e={}){this.serviceName=e.serviceName||"pingone-import-client",this.environment=e.environment||"development",this.logLevel=e.logLevel||this.getDefaultLogLevel(),this.enableConsole=e.enableConsole!==!1,this.enableServer=e.enableServer!==!1,this.levels={error:0,warn:1,info:2,debug:3},this.correlationId=this.generateCorrelationId(),this.performanceMarks=new Map,this.initializeTransports()}getDefaultLogLevel(){switch(this.environment){case"production":return"info";case"test":return"warn";default:return"debug"}}generateCorrelationId(){return`${this.serviceName}-${Date.now()}-${Math.random().toString(36).substr(2,8)}`}initializeTransports(){this.transports=[],this.enableConsole&&this.transports.push({name:"console",log:this.logToConsole.bind(this)}),this.enableServer&&this.transports.push({name:"server",log:this.logToServer.bind(this)})}shouldLog(e){return this.levels[e]<=this.levels[this.logLevel]}formatLogEntry(e,t,s={}){return{timestamp:new Date().toISOString(),level:e.toUpperCase(),message:t,service:this.serviceName,environment:this.environment,correlationId:this.correlationId,source:"client",url:window.location.href,userAgent:navigator.userAgent,...s}}logToConsole(e,t,s={}){if(!this.shouldLog(e))return;const i=this.formatLogEntry(e,t,s),n=i.timestamp,o=i.correlationId.slice(-8);let a=`[${n}] [${o}] [${i.service}] ${e.toUpperCase()}: ${t}`;switch(Object.keys(s).length>0&&(a+=`
${JSON.stringify(s,null,2)}`),e){case"error":console.error(a);break;case"warn":console.warn(a);break;case"info":console.info(a);break;case"debug":console.debug(a);break;default:console.log(a)}}async logToServer(e,t,s={}){try{const i=this.formatLogEntry(e,t,s);await fetch("/api/logs/client",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)})}catch(i){this.enableConsole&&console.warn("Failed to send log to server:",i.message)}}log(e,t,s={}){this.shouldLog(e)&&this.transports.forEach(i=>{try{i.log(e,t,s)}catch(n){console.error(`Error in ${i.name} transport:`,n)}})}error(e,t={}){this.log("error",e,t)}warn(e,t={}){this.log("warn",e,t)}info(e,t={}){this.log("info",e,t)}debug(e,t={}){this.log("debug",e,t)}startTimer(e){this.performanceMarks.set(e,performance.now()),this.debug(`Timer started: ${e}`)}endTimer(e,t={}){const s=this.performanceMarks.get(e);if(!s)return this.warn(`Timer not found: ${e}`),0;const i=performance.now()-s;return this.performanceMarks.delete(e),this.info(`Timer completed: ${e}`,{duration:`${i.toFixed(2)}ms`,...t}),i}child(e={}){const t=new he({serviceName:this.serviceName,environment:this.environment,logLevel:this.logLevel,enableConsole:this.enableConsole,enableServer:this.enableServer}),s=t.formatLogEntry.bind(t);return t.formatLogEntry=(i,n,o={})=>s(i,n,{...e,...o}),t}setCorrelationId(e){this.correlationId=e}getCorrelationId(){return this.correlationId}}function O(r={}){return new he(r)}O({serviceName:"pingone-import-client"});class Ze{constructor(){this.sessionId=this.generateSessionId(),this.isClient=!0,this.log("SESSION_START","Client debug logging session started",{timestamp:new Date().toISOString(),sessionId:this.sessionId,userAgent:navigator.userAgent,url:window.location.href})}generateSessionId(){return"client_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}formatLogEntry(e,t,s,i={}){const n=new Date().toISOString();this.sessionId,e.toUpperCase(),t.toUpperCase();const o=`[${n}] [${this.sessionId}] [CLIENT] [${e.toUpperCase()}] [${t.toUpperCase()}] ${s}`,a=Object.keys(i).length>0?`
  Data: ${JSON.stringify(i,null,2)}`:"";return o+a+`
`+"-".repeat(80)+`
`}async sendToServer(e){try{await fetch("/api/debug-log",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({entry:e})})}catch(t){console.error("Failed to send debug log to server:",t)}}log(e,t,s={}){const i=this.formatLogEntry("info",e,t,s);this.sendToServer(i),console.log(`🐛 [${e.toUpperCase()}] ${t}`,s)}error(e,t,s=null,i={}){const n={...i,error:s?{message:s.message,stack:s.stack,name:s.name}:null},o=this.formatLogEntry("error",e,t,n);this.sendToServer(o),console.error(`🚨 [${e.toUpperCase()}] ${t}`,n)}warn(e,t,s={}){const i=this.formatLogEntry("warn",e,t,s);this.sendToServer(i),console.warn(`⚠️ [${e.toUpperCase()}] ${t}`,s)}debug(e,t,s={}){const i=this.formatLogEntry("debug",e,t,s);this.sendToServer(i),console.debug(`🔍 [${e.toUpperCase()}] ${t}`,s)}event(e,t,s={}){const i={eventName:t,...s},n=this.formatLogEntry("event",e,`Event: ${t}`,i);this.sendToServer(n),console.log(`📊 [${e.toUpperCase()}] Event: ${t}`,i)}performance(e,t,s,i={}){const n={operation:t,duration:`${s}ms`,...i},o=this.formatLogEntry("perf",e,`Performance: ${t}`,n);this.sendToServer(o),console.log(`⚡ [${e.toUpperCase()}] Performance: ${t} (${s}ms)`,n)}navigation(e,t,s={}){this.event("navigation","view_change",{from:e,to:t,...s})}api(e,t,s,i,n={}){this.event("api","request",{method:e,url:t,status:s,duration:`${i}ms`,...n})}userAction(e,t,s={}){this.event("user",e,{element:t,...s})}systemState(e,t,s={}){this.log("system",`${e} state: ${t}`,s)}featureFlag(e,t,s={}){this.log("feature",`Feature flag ${e}: ${t?"enabled":"disabled"}`,s)}subsystem(e,t,s={}){this.log("subsystem",`${e}: ${t}`,s)}}let K=null;function T(){return K||(K=new Ze),K}const L={log:(r,e,t)=>T().log(r,e,t),error:(r,e,t,s)=>T().error(r,e,t,s),warn:(r,e,t)=>T().warn(r,e,t),debug:(r,e,t)=>T().debug(r,e,t),event:(r,e,t)=>T().event(r,e,t),performance:(r,e,t,s)=>T().performance(r,e,t,s),navigation:(r,e,t)=>T().navigation(r,e,t),api:(r,e,t,s,i)=>T().api(r,e,t,s,i),userAction:(r,e,t)=>T().userAction(r,e,t),systemState:(r,e,t)=>T().systemState(r,e,t),featureFlag:(r,e,t)=>T().featureFlag(r,e,t),subsystem:(r,e,t)=>T().subsystem(r,e,t)};class _{constructor(e={}){this.component=e.component||"app",this.level=e.level||"info",this.enableRemoteLogging=e.enableRemoteLogging!==!1,this.enableConsoleLogging=e.enableConsoleLogging!==!1,this.sensitivePatterns=[/password/i,/token/i,/secret/i,/key/i,/credential/i,/auth/i]}maskSensitiveData(e){if(typeof e=="string")return e.replace(/("(?:password|token|secret|key|credential|auth)"\s*:\s*")([^"]+)"/gi,'$1***MASKED***"');if(typeof e=="object"&&e!==null){const t={...e};for(const s in t)this.sensitivePatterns.some(i=>i.test(s))?t[s]="***MASKED***":typeof t[s]=="object"&&(t[s]=this.maskSensitiveData(t[s]));return t}return e}formatMessage(e,t,s=null){const i=new Date().toISOString(),n=this.component;let o=`[${i}] [${e.toUpperCase()}] [${n}] ${t}`;if(s){const a=this.maskSensitiveData(s);o+=` | Data: ${JSON.stringify(a,null,2)}`}return o}async sendRemoteLog(e,t,s=null){if(this.enableRemoteLogging)try{const i={timestamp:new Date().toISOString(),level:e,component:this.component,message:t,data:this.maskSensitiveData(s),userAgent:navigator.userAgent,url:window.location.href};await fetch("/api/logs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)})}catch(i){this.enableConsoleLogging&&console.warn("Remote logging failed:",i)}}debug(e,t=null){if(!(window.settings||{}).debugMode)return;const i=this.formatMessage("debug",e,t);this.enableConsoleLogging&&console.debug(i),this.sendRemoteLog("debug",e,t)}info(e,t=null){const s=this.formatMessage("info",e,t);this.enableConsoleLogging&&console.log(s),this.sendRemoteLog("info",e,t)}warn(e,t=null){const s=this.formatMessage("warn",e,t);this.enableConsoleLogging&&console.warn(s),this.sendRemoteLog("warn",e,t)}error(e,t=null){const s=this.formatMessage("error",e,t);this.enableConsoleLogging&&console.error(s),this.sendRemoteLog("error",e,t)}child(e={}){const t=e.component?`${this.component}.${e.component}`:this.component;return new _({...e,component:t,level:e.level||this.level,enableRemoteLogging:e.enableRemoteLogging!==void 0?e.enableRemoteLogging:this.enableRemoteLogging,enableConsoleLogging:e.enableConsoleLogging!==void 0?e.enableConsoleLogging:this.enableConsoleLogging})}}typeof k<"u"&&k.exports?k.exports={CentralizedLogger:_}:typeof window<"u"&&(window.CentralizedLogger=_);let te=class{constructor(e=null){this.logger=e||{warn:(t,s)=>console.warn(t,s),error:(t,s)=>console.error(t,s),debug:(t,s)=>console.debug(t,s)}}select(e,t=document){try{if(!e)return this.logger.warn("SafeDOM: Empty selector provided"),null;const s=t.querySelector(e);return s||this.logger.debug(`SafeDOM: Element not found for selector: ${e}`),s}catch(s){return this.logger.error("SafeDOM: Error selecting element",{selector:e,error:s.message}),null}}selectAll(e,t=document){try{if(!e)return this.logger.warn("SafeDOM: Empty selector provided"),[];const s=t.querySelectorAll(e);return Array.from(s)}catch(s){return this.logger.error("SafeDOM: Error selecting elements",{selector:e,error:s.message}),[]}}getElementById(e){try{if(!e)return this.logger.warn("SafeDOM: Empty ID provided"),null;const t=document.getElementById(e);return t||this.logger.debug(`SafeDOM: Element not found for ID: ${e}`),t}catch(t){return this.logger.error("SafeDOM: Error getting element by ID",{id:e,error:t.message}),null}}setText(e,t){try{return e?(e.textContent=t||"",!0):(this.logger.warn("SafeDOM: Null element provided to setText"),!1)}catch(s){return this.logger.error("SafeDOM: Error setting text content",{text:t,error:s.message}),!1}}setHTML(e,t){try{return e?(t&&typeof t=="string"&&(t.includes("<script")||t.includes("javascript:"))&&this.logger.warn("SafeDOM: Potentially unsafe HTML detected",{html:t.substring(0,100)}),e.innerHTML=t||"",!0):(this.logger.warn("SafeDOM: Null element provided to setHTML"),!1)}catch(s){return this.logger.error("SafeDOM: Error setting HTML content",{error:s.message}),!1}}addEventListener(e,t,s,i={}){try{return e?typeof s!="function"?(this.logger.warn("SafeDOM: Non-function handler provided to addEventListener"),!1):(e.addEventListener(t,s,i),!0):(this.logger.warn("SafeDOM: Null element provided to addEventListener"),!1)}catch(n){return this.logger.error("SafeDOM: Error adding event listener",{event:t,error:n.message}),!1}}removeEventListener(e,t,s,i={}){try{return e?(e.removeEventListener(t,s,i),!0):(this.logger.warn("SafeDOM: Null element provided to removeEventListener"),!1)}catch(n){return this.logger.error("SafeDOM: Error removing event listener",{event:t,error:n.message}),!1}}addClass(e,t){try{return e?t?(e.classList.add(t),!0):(this.logger.warn("SafeDOM: Empty className provided to addClass"),!1):(this.logger.warn("SafeDOM: Null element provided to addClass"),!1)}catch(s){return this.logger.error("SafeDOM: Error adding CSS class",{className:t,error:s.message}),!1}}removeClass(e,t){try{return e?t?(e.classList.remove(t),!0):(this.logger.warn("SafeDOM: Empty className provided to removeClass"),!1):(this.logger.warn("SafeDOM: Null element provided to removeClass"),!1)}catch(s){return this.logger.error("SafeDOM: Error removing CSS class",{className:t,error:s.message}),!1}}toggleClass(e,t){try{return e?t?(e.classList.toggle(t),!0):(this.logger.warn("SafeDOM: Empty className provided to toggleClass"),!1):(this.logger.warn("SafeDOM: Null element provided to toggleClass"),!1)}catch(s){return this.logger.error("SafeDOM: Error toggling CSS class",{className:t,error:s.message}),!1}}show(e){try{return e?(e.style.display="",!0):(this.logger.warn("SafeDOM: Null element provided to show"),!1)}catch(t){return this.logger.error("SafeDOM: Error showing element",{error:t.message}),!1}}hide(e){try{return e?(e.style.display="none",!0):(this.logger.warn("SafeDOM: Null element provided to hide"),!1)}catch(t){return this.logger.error("SafeDOM: Error hiding element",{error:t.message}),!1}}};typeof k<"u"&&k.exports?k.exports={SafeDOM:te}:typeof window<"u"&&(window.SafeDOM=te);let se=class{constructor(e=null){this.logger=e||{error:(t,s)=>console.error(t,s),warn:(t,s)=>console.warn(t,s),debug:(t,s)=>console.debug(t,s)}}wrapAsync(e,t="Unknown operation",s=null,i={}){const{retries:n=0,retryDelay:o=1e3,fallbackValue:a=null,suppressErrors:l=!1,rethrow:c=!1}=i;return async(...h)=>{for(let g=0;g<=n;g++)try{return await e(...h)}catch(d){if(g<n){this.logger.warn(`${t} failed (attempt ${g+1}/${n+1}), retrying...`,{error:d.message,args:this._sanitizeArgs(h)}),await this._delay(o*(g+1));continue}if(this.handleError(d,t,{userMessage:s||"An unexpected error occurred.",retries:n,suppress:l}),c)throw d;return a}return a}}wrapSync(e,t="Unknown operation",s=null,i={}){const{fallbackValue:n=null,suppressErrors:o=!1,rethrow:a=!1}=i;return(...l)=>{try{return e(...l)}catch(c){if(this.handleError(c,t,{userMessage:s||"An unexpected error occurred.",suppress:o,args:this._sanitizeArgs(l)}),a)throw c;return n}}}createError(e,t="UNKNOWN_ERROR",s={},i=null){const n=new Error(e);return n.code=t,n.context=s,n.timestamp=new Date().toISOString(),i&&(n.originalError=i,n.originalStack=i.stack),n}handleError(e,t="Unknown context",s={}){const{userMessage:i,suppress:n,...o}=s;if(n)return;const a={message:e.message,code:e.code||"UNHANDLED_EXCEPTION",context:t,timestamp:new Date().toISOString(),stack:e.stack,...o};if(this.logger.error(`Error in ${t}:`,a),this._reportToErrorService(a),typeof window<"u"&&window.app&&window.app.uiManager){const l=window.app.uiManager,c=i||e.message;l.showError(`Error: ${t}`,c)}}wrapEventHandler(e,t="Event handler"){return s=>{try{return e(s)}catch(i){this.logger.error(`${t} failed`,{error:i.message,eventType:s?.type,target:s?.target?.tagName||"unknown"}),s?.preventDefault?.(),s?.stopPropagation?.()}}}makeSafe(e,t="Safe function",s=null){return(...i)=>{try{return e(...i)}catch(n){return this.logger.warn(`${t} failed safely`,{error:n.message,args:this._sanitizeArgs(i)}),s}}}async handleApiResponse(e,t="API call"){try{if(!e.ok){const i={status:e.status,statusText:e.statusText,url:e.url};let n=`${t} failed with status ${e.status}`;try{const o=await e.text();i.body=o;try{const a=JSON.parse(o);a.message&&(n=a.message)}catch{}}catch{}throw this.createError(n,`HTTP_${e.status}`,i)}return await e.json()}catch(s){throw s.code&&s.code.startsWith("HTTP_")?s:this.createError(`${t} response parsing failed`,"RESPONSE_PARSE_ERROR",{originalError:s.message})}}_sanitizeArgs(e){return e.map(t=>typeof t=="string"&&t.length>100?t.substring(0,100)+"...":typeof t=="object"&&t!==null?{...t,_truncated:!0}:t)}_delay(e){return new Promise(t=>setTimeout(t,e))}_reportToErrorService(e){}};typeof k<"u"&&k.exports?k.exports={ErrorHandler:se}:typeof window<"u"&&(window.ErrorHandler=se);const Ce={ENDPOINTS:{SETTINGS:"/api/settings",IMPORT:"/api/import",EXPORT:"/api/export",POPULATIONS:"/api/populations",TEST_CONNECTION:"/api/pingone/test-connection",LOGS:"/api/logs"},TIMEOUTS:{DEFAULT:1e4,LONG_OPERATION:3e4,FILE_UPLOAD:6e4,CONNECTION_TEST:5e3},RETRY:{MAX_ATTEMPTS:3,DELAYS:[1e3,2e3,5e3]}},Me={SELECTORS:{APP_CONTAINER:".app-container",NAV_ITEMS:"[data-view]",SETTINGS_FORM:"#settings-form",PROGRESS_BAR:".progress-bar",STATUS_INDICATOR:".status-indicator",MODAL_BACKDROP:".modal-backdrop"},CLASSES:{HIDDEN:"hidden",ACTIVE:"active",LOADING:"loading",ERROR:"error",SUCCESS:"success"}},xe={SUCCESS:{SETTINGS_SAVED:"Settings saved successfully",FILE_UPLOADED:"File uploaded successfully",CONNECTION_SUCCESS:"Connection test successful"},ERROR:{NETWORK_ERROR:"Network connection error",FILE_TOO_LARGE:"File size exceeds 10MB limit",SETTINGS_SAVE_FAILED:"Failed to save settings",CONNECTION_FAILED:"Connection test failed"}},Ae={FILE_UPLOAD:{MAX_SIZE:10*1024*1024,ALLOWED_TYPES:[".csv",".txt"]},IMPORT:{BATCH_SIZE:100,MAX_CONCURRENT:5}};typeof window<"u"&&(window.API_CONFIG=Ce,window.UI_CONFIG=Me,window.MESSAGES=xe,window.BUSINESS_CONFIG=Ae);const j=new _,et=new te(j),tt=new se(j);typeof window<"u"&&(window.logger=j,window.safeDOM=et,window.errorHandler=tt,window.API_CONFIG=Ce,window.UI_CONFIG=Me,window.MESSAGES=xe,window.BUSINESS_CONFIG=Ae,j.info("Debug utilities loaded",{utilities:["CentralizedLogger","SafeDOM","ErrorHandler","ConfigConstants"],timestamp:new Date().toISOString()}));class ge{constructor(){this.events={}}on(e,t){(this.events[e]=this.events[e]||[]).push(t)}off(e,t){this.events[e]&&(this.events[e]=this.events[e].filter(s=>s!==t))}emit(e,t){(this.events[e]||[]).forEach(s=>s(t))}}const st=new ge;typeof window<"u"&&(window.EventBus=ge,window.eventBus=st);class it{constructor({errorManager:e,logger:t}={}){this.logger=t?t.child({component:"UIManager"}):console,this.errorManager=e||{handleError:(s,i)=>{(window.logger?.error||console.error)("Unhandled error (no error manager):",s,i)}},this.notificationContainer=null,this.progressContainer=null,this.tokenStatusElement=null,this.connectionStatusElement=null,this.initialize()}initialize(){try{this.setupElements(),this.logger.info("UI Manager initialized successfully")}catch(e){this.errorManager.handleError(e,{component:"UIManager",operation:"initialize",severity:"error",context:{message:"Failed to initialize UI Manager",error:e.message}})}}async init(){return this.initialize(),Promise.resolve()}setupElements(){try{this.notificationContainer=p.notificationContainer?p.notificationContainer():null,this.progressContainer=p.progressContainer?p.progressContainer():null,this.tokenStatusElement=p.tokenStatus?p.tokenStatus():null,this.connectionStatusElement=p.connectionStatus?p.connectionStatus():null,this.navItems=document.querySelectorAll("[data-view]"),this.notificationContainer||this.logger.warn("Notification container not found"),this.progressContainer||this.logger.warn("Progress container not found"),this.logger.debug("UI elements setup completed",{hasNotificationContainer:!!this.notificationContainer,hasProgressContainer:!!this.progressContainer,hasTokenStatusElement:!!this.tokenStatusElement,hasConnectionStatusElement:!!this.connectionStatusElement,navItemsCount:this.navItems?this.navItems.length:0})}catch(e){this.logger.error("Error setting up UI elements",{error:e.message})}}showStatusBar(e,t="info",s={}){const{duration:i=5e3,autoDismiss:n=!0,errorId:o,context:a={}}=s;try{const l={info:"info",success:"info",warning:"warn",error:"error"}[t]||"log",c={messageType:t,...o&&{errorId:o},...a};if(this.logger[l](`Status: ${e}`,c),!this.statusBarElement){this.logger.debug("Status bar element not available in current view",c);return}this.statusBarTimer&&(clearTimeout(this.statusBarTimer),this.statusBarTimer=null);const h=window.safeDOM||new SafeDOM(this.logger),g=window.errorHandler||new ErrorHandler(this.logger),d=window.UI_CONFIG||{CLASSES:{ERROR:"error",SUCCESS:"success"}};h.setHTML(this.statusBarElement,"");const u=document.createElement("span");h.addClass(u,"status-message");let m=e;if(t===d.CLASSES.ERROR&&o&&(m+=` (Error ID: ${o})`),h.setText(u,m),this.statusBarElement.appendChild(u),t===d.CLASSES.ERROR||t==="warning"){const y=document.createElement("button");h.addClass(y,"status-dismiss"),h.setHTML(y,"&times;"),y.setAttribute("aria-label","Dismiss message"),y.onclick=g.wrapEventHandler(()=>this.clearStatusBar(),"Status bar dismiss button click"),this.statusBarElement.appendChild(y)}this.statusBarElement.className=`status-bar status-bar-${t} visible`,n&&(t==="success"||t==="info")&&(this.statusBarTimer=setTimeout(()=>{this.clearStatusBar()},i))}catch(l){this.errorManager.handleError(l,{component:"UIManager",operation:"showStatusBar",severity:"warning",context:{originalMessage:e,type:t,options:s,errorMessage:l.message}}),(window.logger?.error||console.error)("Failed to show status bar:",l),(window.logger?.debug||console.log)("Original message:",e);try{this.statusBarElement&&(this.statusBarElement.textContent=`Error: ${e.substring(0,100)}`,this.statusBarElement.className="status-bar status-bar-error visible")}catch(c){(window.logger?.error||console.error)("Completely failed to show status bar:",c)}}}clearStatusBar(e={}){try{if(this.statusBarTimer&&(clearTimeout(this.statusBarTimer),this.statusBarTimer=null),!this.statusBarElement){this.logger.debug("Status bar element not found during clear");return}const{force:t=!1}=e,s=window.safeDOM||new SafeDOM(this.logger),i=window.UI_CONFIG||{TIMEOUTS:{ANIMATION:300}};t?(s.setHTML(this.statusBarElement,""),this.statusBarElement.className="status-bar",this.logger.debug("Status bar cleared immediately")):(s.removeClass(this.statusBarElement,"visible"),setTimeout(()=>{this.statusBarElement&&(s.setHTML(this.statusBarElement,""),this.statusBarElement.className="status-bar")},i.TIMEOUTS?.ANIMATION||300),this.logger.debug("Status bar cleared with animation"))}catch(t){this.errorManager.handleError(t,{component:"UIManager",operation:"clearStatusBar",severity:"warning",context:{options:e,errorMessage:t.message}});try{this.statusBarElement&&(this.statusBarElement.innerHTML="",this.statusBarElement.className="status-bar")}catch(s){(window.logger?.error||console.error)("Failed to clear status bar:",s)}}}showSuccess(e,t={}){this.showStatusBar(e,"success"),this.logger.info("Success message shown",{message:e,...t})}showWarning(e,t={}){this.showStatusBar(e,"warning"),this.logger.warn("Warning message shown",{message:e,...t})}showInfo(e,t={}){this.showStatusBar(e,"info")}showError(e,t={},s={}){let i,n,o;if(e instanceof Error)n=e,i=e.message,o=typeof t=="object"&&t!==null?t:{};else if(typeof e=="string"&&t instanceof Error)n=t,i=`${e}: ${t.message}`,o={};else if(typeof e=="string"&&typeof t=="string")i=`${e}: ${t}`,n=new Error(i),n.name=e,o={};else if(typeof e=="string")i=e,n=new Error(i),o=typeof t=="object"&&t!==null?t:{};else{const l=new Error("Invalid parameters passed to showError");this.errorManager.handleError(l,{component:"UIManager",operation:"showError",severity:"error",context:{error:e,details:t,options:s}});return}const a={...o,...s.context};s.reportToServer!==!1&&this.errorManager.handleError(n,{component:s.component||"UIManager",operation:s.operation||"showError",severity:"error",context:a}),this.showStatusBar(i,"error",{autoDismiss:!1,errorId:s.errorId,context:a,...s}),this.logger.error("Error message shown",{error:i,name:n.name,stack:n.stack,...a})}catch(e){(window.logger?.error||console.error)("Error in showError:",e);try{this.showStatusBar("An error occurred","error",{autoDismiss:!1,context:{originalError:e instanceof Error?e.message:String(e),timestamp:new Date().toISOString()}})}catch(t){(window.logger?.error||console.error)("Completely failed to show error:",t)}}hideLoading(e=null){this.clearStatusBar(),e&&this.showSuccess(e),this.logger.debug("Loading indicator hidden")}updateProgress(e,t,s=""){if((window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] updateProgress() called with:",{current:e,total:t,message:s}),!this.progressContainer){(window.logger?.error||console.error)("🔍 [UI MANAGER DEBUG] Progress container not found in updateProgress"),this.logger.warn("Progress container not found");return}(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress container found, calculating percentage...");const i=t>0?Math.round(e/t*100):0;(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Calculated percentage:",i);const n=window.safeDOM||new SafeDOM(this.logger),o=window.UI_CONFIG||{SELECTORS:{PROGRESS_BAR_FILL:".progress-bar-fill",PROGRESS_PERCENTAGE:".progress-percentage",PROGRESS_TEXT:".progress-text"}},a=n.select(o.SELECTORS.PROGRESS_BAR_FILL,this.progressContainer);(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress bar element:",a),a?(a.style.width=`${i}%`,(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress bar updated to:",`${i}%`)):(window.logger?.error||console.error)("🔍 [UI MANAGER DEBUG] Progress bar element not found");const l=n.select(o.SELECTORS.PROGRESS_PERCENTAGE,this.progressContainer);(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Percentage element:",l),l?(n.setText(l,`${i}%`),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Percentage text updated to:",`${i}%`)):(window.logger?.error||console.error)("🔍 [UI MANAGER DEBUG] Percentage element not found");const c=n.select(o.SELECTORS.PROGRESS_TEXT,this.progressContainer);(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress text element:",c),c&&s?(n.setText(c,s),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress text updated to:",s)):(window.logger?.error||console.error)("🔍 [UI MANAGER DEBUG] Progress text element not found or no message"),this.logger.debug("Progress updated",{current:e,total:t,percentage:i,message:s}),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] updateProgress() completed")}updateTokenStatus(e,t=""){if(!this.tokenStatusElement){this.logger.warn("Token status element not found");return}this.tokenStatusElement.className=`token-status ${e}`,this.tokenStatusElement.textContent=t||e,this.logger.debug("Token status updated",{status:e,message:t})}updateConnectionStatus(e,t=""){if(!this.connectionStatusElement){this.logger.warn("Connection status element not found");return}this.connectionStatusElement.className=`connection-status ${e}`,this.connectionStatusElement.textContent=t||e,this.logger.debug("Connection status updated",{status:e,message:t})}showCurrentTokenStatus(e){if(!e){this.logger.warn("No token info provided");return}const{isValid:t,expiresAt:s,timeRemaining:i}=e;if(!t){this.updateTokenStatus("expired","");return}const n=i?` (${i})`:"";this.updateTokenStatus("valid",`Token valid${n}`),this.logger.info("Current token status displayed",{isValid:t,expiresAt:s,timeRemaining:i})}updateUniversalTokenStatus(e){const t=document.getElementById("token-status-indicator");if(!t){this.logger.warn("Token status indicator not found");return}if(!e){t.style.display="none";return}const{isValid:s,expiresAt:i,timeRemaining:n}=e,o=t.querySelector(".token-status-content");if(o){const a=o.querySelector(".token-status-icon"),l=o.querySelector(".token-status-text"),c=o.querySelector(".token-status-time");s?(a.textContent="✅",l.textContent="Token valid",c.textContent=n||""):(a.textContent="❌",l.textContent="",l.style.visibility="hidden",c.textContent="")}t.style.display="block",this.logger.debug("Token status indicator updated",{isValid:s,timeRemaining:n})}updateHomeTokenStatus(e=!1,t=""){const s=document.getElementById("home-token-status");if(!s){(window.logger?.error||console.log)("❌ home-token-status element not found!");return}(window.logger?.debug||console.log)("✅ Found home-token-status element:",s);let i=!1,n="btn-danger",o="Get New Token";try{if(i=this.checkForStashedToken(),!i&&window.app&&window.app.pingOneClient){const l=window.app.pingOneClient.getCurrentTokenTimeRemaining();l&&l.token&&!l.isExpired&&(i=!0)}i&&(n="btn-success",o="Token Valid")}catch(l){(window.logger?.error||console.log)("Error checking token status:",l)}const a=document.querySelector(".sidebar");if(a&&s.parentNode!==a&&(a.appendChild(s),(window.logger?.debug||console.log)("✅ Moved home-token-status to bottom of sidebar")),!document.getElementById("debug-home-token-status-label")){const l=document.createElement("div");l.id="debug-home-token-status-label",l.style.cssText=`
                position: absolute !important;
                top: -30px !important;
                left: 0 !important;
                background: #ff0000 !important;
                color: #ffffff !important;
                padding: 4px 8px !important;
                font-size: 12px !important;
                font-weight: bold !important;
                border: 2px solid #000 !important;
                z-index: 9999 !important;
                white-space: nowrap !important;
                pointer-events: none !important;
            `,l.textContent="DEBUG: home-token-status CONTAINER",s.style.cssText=`
                position: relative !important;
                background: #ffffcc !important;
                border: 1px solid #dee2e6 !important;
                border-radius: 6px !important;
                padding: 2px !important;
                width: fit-content !important;
                height: auto !important;
                display: block !important;
                overflow: visible !important;
                margin-top: auto !important;
            `,s.appendChild(l),(window.logger?.debug||console.log)("✅ Added debug label to home-token-status container")}if(e)s.innerHTML="";else{s.innerHTML=`
                <div id="token-status-indicator" class="token-status-indicator valid" role="status" aria-live="polite" style="display: block !important; padding: 0 !important; margin: 0 !important; background: none !important; border: none !important;">
                    <button id="get-token-btn" class="btn ${n}" style="font-size: 14px !important; padding: 8px 16px !important; margin: 0 !important; font-weight: 500 !important; border-radius: 6px !important; box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important; transition: all 0.2s ease !important;">
                        <i class="fas fa-key"></i> ${o}
                    </button>
                </div>
            `;const l=document.getElementById("get-token-btn");l&&l.addEventListener("click",()=>{window.tokenStatusIndicator&&typeof window.tokenStatusIndicator.getNewToken=="function"?window.tokenStatusIndicator.getNewToken():typeof this.getNewToken=="function"&&this.getNewToken()})}s.style.display="block",this.logger.debug("Home token status updated",{isLoading:e,message:t,hasValidToken:i,buttonClass:n})}checkForStashedToken(){try{if(typeof localStorage>"u")return!1;const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(!e||!t)return!1;const s=parseInt(t,10),i=Date.now();return!(isNaN(s)||i>=s-300*1e3)}catch(e){return(window.logger?.error||console.error)("Error checking for stashed token:",e),!1}}updateSettingsSaveStatus(e,t="info"){const s=document.querySelector(".settings-save-status");if(!s){this.logger.warn("Settings save status element not found");return}s.className=`settings-save-status ${t} show`;const i=this.getStatusIcon(t);s.innerHTML=`
            <span>${e}</span>
            <i class="fas ${i}"></i>
        `,t==="success"&&setTimeout(()=>{s.classList.remove("show")},3e3),this.logger.info("Settings save status updated",{message:e,type:t})}showSettingsActionStatus(e,t="info",s={}){const i=document.getElementById("settings-action-status");if(!i){this.logger.warn("Settings action status element not found");return}i.innerHTML="",i.className=`settings-action-status ${t}`;const n=document.createElement("div");n.className="status-content";const o=document.createElement("span");o.textContent=e,n.appendChild(o);const a=document.createElement("i");a.className=`fas ${this.getStatusIcon(t)}`,n.appendChild(a),i.appendChild(n),i.style.display="block",this.logger.info("Settings action status shown",{message:e,type:t,autoDismiss:!1})}getStatusIcon(e){const t={success:"fa-check-circle",error:"fa-times-circle",warning:"fa-exclamation-triangle",info:"fa-info-circle"};return t[e]||t.info}hideSettingsActionStatus(){const e=document.getElementById("settings-action-status");e&&(e.style.display="none",this.logger.debug("Settings action status hidden"))}showImportStatus(e,t="",s={}){const i=document.getElementById("import-status");if(!i){this.logger.warn("Import status element not found");return}i.style.display="block",i.className=`import-status ${e}`;const n=i.querySelector(".status-text");n&&(n.textContent=t||e),this.logger.info("Import status shown",{status:e,message:t,details:s})}clearNotifications(){this.notificationContainer&&(this.notificationContainer.innerHTML="",this.logger.debug("All notifications cleared")),this.clearStatusBar()}hideProgress(){this.progressContainer&&((window.safeDOM||new SafeDOM(this.logger)).hide(this.progressContainer),this.logger.debug("Progress display hidden"))}showProgress(){(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] showProgress() called"),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] this.progressContainer:",this.progressContainer);let e=this.progressContainer;if(e||((window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress container not found in UI manager, trying direct access..."),e=document.getElementById("progress-container")),e||((window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress container not found by ID, trying ElementRegistry..."),typeof p<"u"&&p.progressContainer&&(e=p.progressContainer())),e||((window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress container not found by ElementRegistry, trying class selector..."),e=document.querySelector(".progress-container")),!e){(window.logger?.error||console.error)("🔍 [UI MANAGER DEBUG] Progress container not found by any method"),(window.logger?.error||console.error)('🔍 [UI MANAGER DEBUG] Available containers with "progress" in ID:',Array.from(document.querySelectorAll('[id*="progress"]')).map(t=>t.id)),(window.logger?.error||console.error)('🔍 [UI MANAGER DEBUG] Available containers with "progress" in class:',Array.from(document.querySelectorAll('[class*="progress"]')).map(t=>({id:t.id,className:t.className})));return}(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Progress container found, showing..."),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Current display style:",e.style.display),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Current visibility:",e.offsetParent!==null?"visible":"hidden"),e.style.display="block",e.style.visibility="visible",e.style.opacity="1",e.classList.remove("hidden","d-none"),e.classList.add("visible"),e.offsetHeight,(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Display style after setting to block:",e.style.display),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Container visibility:",e.offsetParent!==null?"visible":"hidden"),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Container dimensions:",{offsetWidth:e.offsetWidth,offsetHeight:e.offsetHeight,clientWidth:e.clientWidth,clientHeight:e.clientHeight}),e.offsetParent!==null&&e.scrollIntoView({behavior:"smooth",block:"center"}),this.progressContainer=e,this.logger.debug("Progress display shown"),setTimeout(()=>{const t=e.offsetParent!==null,s=e.getBoundingClientRect();(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Final verification:",{isVisible:t,dimensions:{width:s.width,height:s.height},display:e.style.display,computedDisplay:window.getComputedStyle(e).display})},100)}setButtonLoading(e,t){const s=document.getElementById(e);if(!s){e==="get-token-quick"?this.logger.debug(`Button with ID '${e}' not found (may be hidden)`):this.logger.warn(`Button with ID '${e}' not found`);return}t?(s.disabled=!0,s.innerHTML='<i class="fas fa-spinner fa-spin"></i> Loading...',s.classList.add("loading")):(s.disabled=!1,s.innerHTML=s.getAttribute("data-original-text")||"Submit",s.classList.remove("loading")),this.logger.debug("Button loading state updated",{buttonId:e,isLoading:t})}updatePopulationFields(e){if(!e||!Array.isArray(e)){this.logger.warn("Invalid populations data provided");return}const t=document.querySelectorAll('select[id*="population"]');t.forEach(s=>{const i=s.value;s.innerHTML="";const n=document.createElement("option");n.value="",n.textContent="Select a population...",s.appendChild(n),e.forEach(o=>{const a=document.createElement("option");a.value=o.id,a.textContent=o.name,s.appendChild(a)}),i&&s.querySelector(`option[value="${i}"]`)&&(s.value=i)}),this.logger.info("Population fields updated",{populationCount:e.length,selectCount:t.length})}showNotification(e,t,s="info",i={}){if(!this.notificationContainer){this.logger.warn("Notification container not found");return}this.notificationContainer.innerHTML="";const n=document.createElement("div");n.className="status-content";const o=document.createElement("i");o.className=`fas ${this.getStatusIcon(s)}`,n.appendChild(o);const a=document.createElement("span");e&&t?a.textContent=`${e}: ${t}`:a.textContent=e||t,n.appendChild(a),this.notificationContainer.appendChild(n);const l=i.autoDismiss!==!1&&s!=="error"&&s!=="success";if(l){const c=i.duration||5e3;setTimeout(()=>{this.notificationContainer&&this.notificationContainer.contains(n)&&(this.notificationContainer.innerHTML="")},c)}this.logger.info("Status header updated",{title:e,message:t,type:s,autoDismiss:l})}updateImportProgress(e,t,s="",i={},n="",o=""){if(this.updateProgress(e,t,s),i&&typeof i=="object"&&Object.entries(i).forEach(([a,l])=>{const c=document.querySelector(`.stat-value.${a}`);c&&(c.textContent=l||0)}),n||o){const a=document.querySelector(".detail-value.population-info");a&&(a.textContent=n||o||"Unknown")}this.logger.debug("Import progress updated",{current:e,total:t,message:s,counts:i,populationName:n,populationId:o})}startImportOperation(e={}){(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] startImportOperation() called with options:",e);const{operationType:t,totalUsers:s,populationName:i,populationId:n}=e;(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] About to call showProgress()..."),this.showProgress(),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] showProgress() completed"),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] About to call updateProgress()..."),this.updateProgress(0,s||0,"Starting import operation..."),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] updateProgress() completed");const o=document.querySelector(".detail-value.operation-type");(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Operation type element:",o),o?(o.textContent=t||"Import",(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] Operation type updated to:",t||"Import")):(window.logger?.error||console.error)("🔍 [UI MANAGER DEBUG] Operation type element not found"),this.logger.info("Import operation started",{operationType:t,totalUsers:s,populationName:i,populationId:n}),(window.logger?.debug||console.log)("🔍 [UI MANAGER DEBUG] startImportOperation() completed")}updateImportOperationWithSessionId(e){if(!e){this.logger.warn("No session ID provided for import operation");return}const t=document.querySelector(".detail-value.session-id");t&&(t.textContent=e),this.logger.info("Import operation session ID updated",{sessionId:e})}startExportOperation(e={}){const{totalUsers:t,populationName:s}=e;this.showProgress(),this.updateProgress(0,t||0,"Starting export operation...");const i=document.querySelector(".detail-value.operation-type");i&&(i.textContent="Export"),this.logger.info("Export operation started",{totalUsers:t,populationName:s})}startDeleteOperation(e={}){const{totalUsers:t,populationName:s}=e;this.showProgress(),this.updateProgress(0,t||0,"Starting delete operation...");const i=document.querySelector(".detail-value.operation-type");i&&(i.textContent="Delete"),this.logger.info("Delete operation started",{totalUsers:t,populationName:s})}startModifyOperation(e={}){const{totalUsers:t,populationName:s}=e;this.showProgress(),this.updateProgress(0,t||0,"Starting modify operation...");const i=document.querySelector(".detail-value.operation-type");i&&(i.textContent="Modify"),this.logger.info("Modify operation started",{totalUsers:t,populationName:s})}completeOperation(e={}){const{processed:t,success:s,failed:i,skipped:n}=e;this.updateProgress(t||0,t||0,"Operation completed");const o=`Operation completed: ${s||0} successful, ${i||0} failed, ${n||0} skipped`;this.showSuccess(o),setTimeout(()=>{this.hideProgress()},2e3),this.logger.info("Operation completed",{processed:t,success:s,failed:i,skipped:n})}handleDuplicateUsers(e,t){if(!e||e.length===0){this.logger.warn("No duplicates provided for handling");return}const s=`Found ${e.length} duplicate users. How would you like to proceed?`;this.showWarning(s),this.logger.info("Duplicate users found",{count:e.length}),t&&typeof t=="function"&&t("skip")}debugLog(e,t){}showStatusMessage(e,t,s=""){const i=s?`${t}: ${s}`:t;this.showNotification("Status Update",i,e)}showExportStatus(){this.showProgress(),this.updateProgress(0,100,"Preparing export..."),this.logger.info("Export status shown")}updateExportProgress(e,t,s,i={}){this.updateProgress(e,t,s),i&&typeof i=="object"&&Object.entries(i).forEach(([n,o])=>{const a=document.querySelector(`.stat-value.${n}`);a&&(a.textContent=o||0)}),this.logger.debug("Export progress updated",{current:e,total:t,message:s,counts:i})}showDeleteStatus(e,t,s){this.showProgress(),this.updateProgress(0,e||0,"Preparing delete operation...");const i=document.querySelector(".detail-value.operation-type");i&&(i.textContent="Delete"),this.logger.info("Delete status shown",{totalUsers:e,populationName:t,populationId:s})}updateDeleteProgress(e,t,s,i={},n="",o=""){this.updateProgress(e,t,s),i&&typeof i=="object"&&Object.entries(i).forEach(([a,l])=>{const c=document.querySelector(`.stat-value.${a}`);c&&(c.textContent=l||0)}),this.logger.debug("Delete progress updated",{current:e,total:t,message:s,counts:i,populationName:n,populationId:o})}showModifyStatus(e){this.showProgress(),this.updateProgress(0,e||0,"Preparing modify operation...");const t=document.querySelector(".detail-value.operation-type");t&&(t.textContent="Modify"),this.logger.info("Modify status shown",{totalUsers:e})}updateModifyProgress(e,t,s,i={}){this.updateProgress(e,t,s),i&&typeof i=="object"&&Object.entries(i).forEach(([n,o])=>{const a=document.querySelector(`.stat-value.${n}`);a&&(a.textContent=o||0)}),this.logger.debug("Modify progress updated",{current:e,total:t,message:s,counts:i})}}class nt{constructor(e,t,s){if(!t)throw new Error("Settings are required for TokenManager");this.logger=e||console,this.settings=t||{},this.eventBus=s,this.tokenCache={accessToken:null,expiresAt:0,tokenType:"Bearer",lastRefresh:0},this.tokenExpiryBuffer=300*1e3,this.isRefreshing=!1,this.refreshQueue=[],this.maxRetries=1,this.retryDelay=1e3,this.getAccessToken=this.getAccessToken.bind(this),this._requestNewToken=this._requestNewToken.bind(this),this._isTokenValid=this._isTokenValid.bind(this),this.handleTokenExpiration=this.handleTokenExpiration.bind(this),this.retryWithNewToken=this.retryWithNewToken.bind(this)}async getAccessToken(){if(this._isTokenValid())return this.logger.debug("Using cached access token"),this.tokenCache.accessToken;if(this.isRefreshing)return new Promise(e=>{this.refreshQueue.push(e)});try{this.isRefreshing=!0;const e=await this._requestNewToken();for(;this.refreshQueue.length>0;)this.refreshQueue.shift()(e);return e}catch(e){for(this.tokenCache={accessToken:null,expiresAt:0,tokenType:"Bearer",lastRefresh:0},this.eventBus&&this.eventBus.emit("tokenError",{error:e.message});this.refreshQueue.length>0;)this.refreshQueue.shift()(Promise.reject(e));throw e}finally{this.isRefreshing=!1}}async handleTokenExpiration(e,t){if(!e)throw new Error("Response is required for token expiration handling");if(!t||typeof t!="function")throw new Error("Retry function is required for token expiration handling");this.logger.warn("Token expiration detected, attempting automatic re-authentication"),this.tokenCache={accessToken:null,expiresAt:0,tokenType:"Bearer",lastRefresh:0},this.eventBus&&this.eventBus.emit("tokenExpired",{response:e});try{const s=await this.getAccessToken();if(!s)throw new Error("Failed to obtain new token for retry");return this.logger.info("Successfully obtained new token, retrying request"),await new Promise(i=>setTimeout(i,this.retryDelay)),await t(s)}catch(s){throw this.logger.error("Failed to re-authenticate and retry request",{error:s.message,originalStatus:e.status}),s}}async retryWithNewToken(e,t={}){if(!e||typeof e!="function")throw new Error("Request function is required for retry operation");let s=0;for(;s<=this.maxRetries;)try{const i=await this.getAccessToken(),n=await e(i);if(n.status===401){const o=await n.text().catch(()=>"");if((o.includes("token_expired")||o.includes("invalid_token")||o.includes("expired"))&&s<this.maxRetries){this.logger.warn(`Token expired on attempt ${s+1}, retrying with new token`),this.tokenCache={accessToken:null,expiresAt:0,tokenType:"Bearer",lastRefresh:0},s++;continue}}return n}catch(i){if(s>=this.maxRetries)throw i;this.logger.warn(`Request failed on attempt ${s+1}, retrying`,{error:i.message}),s++,await new Promise(n=>setTimeout(n,this.retryDelay))}throw new Error("Max retries exceeded")}createAutoRetryWrapper(e){if(!e||typeof e!="function")throw new Error("Request function is required for auto-retry wrapper");return async(...t)=>await this.retryWithNewToken(async s=>{const i=[...t];return i[0]&&typeof i[0]=="object"&&(i[0].headers={...i[0].headers,Authorization:`Bearer ${s}`}),await e(...i)})}getTokenInfo(){if(!this.tokenCache.accessToken)return null;const e=Date.now(),t=Math.max(0,this.tokenCache.expiresAt-e);return{accessToken:this.tokenCache.accessToken,expiresIn:Math.floor(t/1e3),tokenType:this.tokenCache.tokenType,expiresAt:this.tokenCache.expiresAt,lastRefresh:this.tokenCache.lastRefresh,isValid:this._isTokenValid()}}_isTokenValid(){const e=Date.now();return this.tokenCache.accessToken&&this.tokenCache.expiresAt>e+this.tokenExpiryBuffer&&e-this.tokenCache.lastRefresh<3600*1e3}_getAuthDomain(e){return e&&{NorthAmerica:"auth.pingone.com",Europe:"auth.eu.pingone.com",Canada:"auth.ca.pingone.com",Asia:"auth.apsoutheast.pingone.com",Australia:"auth.aus.pingone.com",US:"auth.pingone.com",EU:"auth.eu.pingone.com",AP:"auth.apsoutheast.pingone.com"}[e]||"auth.pingone.com"}async _requestNewToken(){const{apiClientId:e,apiSecret:t,environmentId:s,region:i="NorthAmerica"}=this.settings,n=`req_${Math.random().toString(36).substr(2,9)}`,o=Date.now();if(!e||!t||!s){const h=new Error("Missing required API credentials in settings");throw this.logger.error("Token request failed: Missing credentials",{requestId:n,hasClientId:!!e,hasSecret:!!t,hasEnvId:!!s}),h}const a=this._getAuthDomain(i),l=`https://${a}/${s}/as/token`,c=btoa(`${e}:${t}`);try{this.logger.debug("Requesting new access token from PingOne...",{requestId:n,authDomain:a,environmentId:s,region:i});const h=await fetch(l,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:`Basic ${c}`},body:"grant_type=client_credentials",credentials:"omit"}),g=Date.now()-o;let d;try{d=await h.json()}catch(m){const w=await h.text().catch(()=>"Failed to read response text");throw new Error(`Invalid JSON response: ${m.message}. Response: ${w}`)}if(!h.ok){const m=d.error_description||d.error||`HTTP ${h.status} ${h.statusText}`;throw this.logger.error("Token request failed",{requestId:n,status:h.status,error:d.error,errorDescription:d.error_description,responseTime:`${g}ms`,url:l}),new Error(m)}if(!d.access_token)throw new Error("No access token in response");const u=(d.expires_in||3600)*1e3;return this.tokenCache={accessToken:d.access_token,expiresAt:Date.now()+u,tokenType:d.token_type||"Bearer",lastRefresh:Date.now()},this.logger.info("Successfully obtained new access token",{requestId:n,tokenType:this.tokenCache.tokenType,expiresIn:Math.floor(u/1e3)+"s",responseTime:`${g}ms`}),this.eventBus&&this.eventBus.emit("tokenRefreshed",{tokenType:this.tokenCache.tokenType,expiresAt:this.tokenCache.expiresAt}),this.tokenCache.accessToken}catch(h){throw this.logger.error("Error getting access token",{requestId:n,error:h.toString(),message:h.message,url:l,responseTime:`${Date.now()-o}ms`}),this.tokenCache={accessToken:null,expiresAt:0,tokenType:"Bearer",lastRefresh:0},h}}updateSettings(e){if(!e)throw new Error("New settings are required for update");const t=e.apiClientId!==this.settings.apiClientId||e.apiSecret!==this.settings.apiSecret||e.environmentId!==this.settings.environmentId||e.region!==this.settings.region;this.settings={...this.settings,...e},t&&(this.logger.debug("API credentials changed, clearing token cache"),this.tokenCache={accessToken:null,expiresAt:0,tokenType:"Bearer",lastRefresh:0})}}var M;let ie=(M=class{constructor(){this.isActive=!1,this.focusableElements=[],this.firstFocusableElement=null,this.lastFocusableElement=null,this.previousActiveElement=null,this.init()}init(){this.createModal(),this.bindEvents(),this.showModal()}createModal(){const e=document.createElement("div");e.className="disclaimer-modal-overlay",e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-labelledby","disclaimer-title"),e.setAttribute("aria-describedby","disclaimer-content"),e.innerHTML=`
            <div class="disclaimer-modal" tabindex="-1">
                <div class="disclaimer-modal-header">
                    <h2 id="disclaimer-title">
                        <span class="warning-icon" aria-hidden="true">⚠️</span>
                        <span>Important Disclaimer</span>
                    </h2>
                </div>
                
                <div class="disclaimer-modal-body">
                    <div id="disclaimer-content" class="disclaimer-content">
                        <h3>🚨 UNSUPPORTED TOOL WARNING</h3>
                        <p>
                            <strong>This tool is NOT an official Ping Identity product</strong> and is provided 
                            <span class="highlight">without any warranty or support</span>. Use at your own risk.
                        </p>
                        
                        <h3>⚠️ CRITICAL DISCLAIMERS:</h3>
                        <ul>
                            <li><strong>No technical support</strong> is available from Ping Identity</li>
                            <li><strong>No updates or bug fixes</strong> are guaranteed</li>
                            <li><strong>No compatibility</strong> with future PingOne versions is assured</li>
                            <li><strong>No documentation or training</strong> is provided by Ping Identity</li>
                            <li>This tool may <strong>stop working at any time</strong> without notice</li>
                            <li>Use of this tool is <strong>not recommended for production environments</strong></li>
                            <li>You are <strong>responsible for testing and validating</strong> all operations</li>
                            <li><strong>Backup your PingOne account</strong> before using this tool</li>
                            <li><strong>Test in non-production environments</strong> only</li>
                        </ul>
                        
                        <p>
                            <strong>By continuing, you acknowledge that:</strong>
                        </p>
                        <ul>
                            <li>You understand this tool is unsupported and use it at your own risk</li>
                            <li>You have backed up your PingOne account data</li>
                            <li>You will test operations in non-production environments first</li>
                            <li>You accept full responsibility for any data loss or issues</li>
                        </ul>
                    </div>
                </div>
                
                <div class="disclaimer-modal-footer">
                    <div class="disclaimer-agreement">
                        <div class="disclaimer-checkbox">
                            <input type="checkbox" id="disclaimer-agreement-checkbox" required>
                            <label for="disclaimer-agreement-checkbox">
                                <span class="required-indicator">*</span>
                                I acknowledge and accept the above disclaimer. I understand this tool is unsupported and I use it at my own risk.
                            </label>
                        </div>
                    </div>
                    
                    <div class="disclaimer-actions">
                        <button type="button" class="disclaimer-btn disclaimer-btn-secondary" id="disclaimer-cancel">
                            Cancel
                        </button>
                        <button type="button" class="disclaimer-btn disclaimer-btn-primary" id="disclaimer-continue" disabled>
                            Continue
                        </button>
                    </div>
                </div>
            </div>
        `,document.body.appendChild(e),this.overlay=e,this.modal=e.querySelector(".disclaimer-modal"),this.checkbox=e.querySelector("#disclaimer-agreement-checkbox"),this.continueBtn=e.querySelector("#disclaimer-continue"),this.cancelBtn=e.querySelector("#disclaimer-cancel")}bindEvents(){this.checkbox.addEventListener("change",e=>{this.continueBtn.disabled=!e.target.checked,this.logEvent("disclaimer_checkbox_changed",{checked:e.target.checked})}),this.continueBtn.addEventListener("click",()=>{this.acceptDisclaimer()}),this.cancelBtn.addEventListener("click",()=>{this.cancelDisclaimer()}),this.overlay.addEventListener("keydown",e=>{this.handleKeyboardNavigation(e)}),this.overlay.addEventListener("click",e=>{e.target===this.overlay&&this.logEvent("disclaimer_outside_click_prevented")}),document.addEventListener("keydown",e=>{e.key==="Escape"&&this.isActive&&(e.preventDefault(),this.cancelDisclaimer())})}handleKeyboardNavigation(e){if(!this.isActive)return;const t=this.getFocusableElements(),s=t[0],i=t[t.length-1];e.key==="Tab"&&(e.shiftKey?document.activeElement===s&&(e.preventDefault(),i.focus()):document.activeElement===i&&(e.preventDefault(),s.focus()))}getFocusableElements(){const e=["button:not([disabled])","input:not([disabled])","select:not([disabled])","textarea:not([disabled])","a[href]",'[tabindex]:not([tabindex="-1"])'];return Array.from(this.modal.querySelectorAll(e.join(", ")))}showModal(){this.isActive=!0,this.previousActiveElement=document.activeElement,document.body.classList.add("disclaimer-modal-open");const e=document.querySelector(".app-container");e&&e.classList.add("disclaimer-modal-active"),this.overlay.classList.add("active"),this.modal.focus(),this.setupFocusTrap(),this.logEvent("disclaimer_modal_shown"),this.announceToScreenReader("Disclaimer modal opened. You must read and accept the disclaimer to continue.")}setupFocusTrap(){this.focusableElements=this.getFocusableElements(),this.firstFocusableElement=this.focusableElements[0],this.lastFocusableElement=this.focusableElements[this.focusableElements.length-1]}acceptDisclaimer(){if(!this.checkbox.checked){this.logEvent("disclaimer_acceptance_attempted_without_checkbox");return}this.logEvent("disclaimer_accepted"),this.hideModal(),this.enableApplication(),typeof window.enableToolAfterDisclaimer=="function"?(console.log("[STARTUP] [DEBUG] Disclaimer accepted, calling enableToolAfterDisclaimer"),window.enableToolAfterDisclaimer()):console.warn("[STARTUP] [DEBUG] enableToolAfterDisclaimer function not found"),document.dispatchEvent(new CustomEvent("disclaimerAccepted",{detail:{timestamp:new Date().toISOString()}})),this.announceToScreenReader("Disclaimer accepted. Application is now enabled.")}cancelDisclaimer(){this.logEvent("disclaimer_cancelled"),this.hideModal(),this.showCancellationWarning()}hideModal(){this.isActive=!1,document.body.classList.remove("disclaimer-modal-open");const e=document.querySelector(".app-container");e&&e.classList.remove("disclaimer-modal-active"),this.overlay.classList.remove("active"),this.previousActiveElement&&this.previousActiveElement.focus(),this.announceToScreenReader("Disclaimer modal closed.")}enableApplication(){document.querySelectorAll("[disabled]").forEach(i=>{i.classList.contains("disclaimer-disabled")&&(i.disabled=!1,i.classList.remove("disclaimer-disabled"))}),document.querySelectorAll(".nav-item").forEach(i=>{i.style.pointerEvents="auto",i.style.opacity="1"}),document.querySelectorAll(".feature-card").forEach(i=>{i.style.pointerEvents="auto",i.style.opacity="1"}),M.setDisclaimerAccepted(),this.logEvent("application_enabled_after_disclaimer")}showCancellationWarning(){const e=document.createElement("div");e.className="alert alert-warning alert-dismissible fade show",e.style.position="fixed",e.style.top="20px",e.style.left="50%",e.style.transform="translateX(-50%)",e.style.zIndex="10000",e.style.maxWidth="500px",e.innerHTML=`
            <strong>⚠️ Disclaimer Required</strong>
            <br>You must accept the disclaimer to use this tool. The application will remain disabled until you acknowledge the terms.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `,document.body.appendChild(e),setTimeout(()=>{e.parentNode&&e.remove()},1e4),this.logEvent("disclaimer_cancellation_warning_shown")}announceToScreenReader(e){const t=document.createElement("div");t.setAttribute("aria-live","polite"),t.setAttribute("aria-atomic","true"),t.className="sr-only",t.textContent=e,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&t.remove()},1e3)}logEvent(e,t={}){console.log(`[DisclaimerModal] ${e}:`,t);try{window.logManager&&typeof window.logManager.log=="function"?window.logManager.log("info",`Disclaimer modal: ${e}`,{source:"disclaimer-modal",type:"ui",...t}):window.logManager?typeof window.logManager.log!="function"&&(window.logManager.log=function(s,i,n){const a=`[${new Date().toISOString()}] [${s.toUpperCase()}] ${i}`;n?console.log(a,n):console.log(a)},window.logManager.log("info",`Disclaimer modal: ${e}`,{source:"disclaimer-modal",type:"ui",...t})):(window.logManager={log:function(s,i,n){const a=`[${new Date().toISOString()}] [${s.toUpperCase()}] ${i}`;n?console.log(a,n):console.log(a)}},window.logManager.log("info",`Disclaimer modal: ${e}`,{source:"disclaimer-modal",type:"ui",...t}))}catch(s){console.warn("[DisclaimerModal] Logging failed:",s)}}static isDisclaimerAccepted(){return!1}static setDisclaimerAccepted(){M.DISCLAIMER_SESSION_ONLY?sessionStorage.setItem("disclaimerAccepted","true"):(localStorage.setItem("disclaimerAccepted","true"),localStorage.setItem("disclaimerAcceptedAt",new Date().toISOString()))}static resetDisclaimerAcceptance(){M.DISCLAIMER_SESSION_ONLY?sessionStorage.removeItem("disclaimerAccepted"):(localStorage.removeItem("disclaimerAccepted"),localStorage.removeItem("disclaimerAcceptedAt"))}},X(M,"DISCLAIMER_SESSION_ONLY",!1),X(M,"DISCLAIMER_EXPIRY_DAYS",7),M);(function(){console.log("[DISCLAIMER DEBUG] Modal initialization starting immediately");let r=!1;const e=()=>{if(console.log("[DISCLAIMER DEBUG] initializeDisclaimer called, disclaimerInitialized:",r),r)return;window.logManager||(console.log("[DISCLAIMER DEBUG] Creating logManager"),window.logManager={log:function(s,i,n){const a=`[${new Date().toISOString()}] [${s.toUpperCase()}] ${i}`;n?console.log(a,n):console.log(a)}});const t=ie.isDisclaimerAccepted();console.log("[DISCLAIMER DEBUG] isDisclaimerAccepted():",t),t?(console.log("[DISCLAIMER DEBUG] Disclaimer previously accepted, not showing modal"),typeof window.enableToolAfterDisclaimer=="function"?(console.log("[STARTUP] [DEBUG] Disclaimer previously accepted, calling enableToolAfterDisclaimer"),window.enableToolAfterDisclaimer()):console.warn("[STARTUP] [DEBUG] enableToolAfterDisclaimer function not found"),r=!0):(console.log("[DISCLAIMER DEBUG] Creating new DisclaimerModal"),new ie,r=!0)};e(),setTimeout(e,100),setTimeout(e,1e3),setTimeout(e,2e3)})();window.DisclaimerModal=ie;class E{constructor(){this.isActive=!1,this.focusableElements=[],this.firstFocusableElement=null,this.lastFocusableElement=null,this.previousActiveElement=null,this.credentials=null,this.init()}async init(){await this.loadCredentials(),this.createModal(),this.bindEvents(),this.showModal()}async loadCredentials(){try{const e=await fetch("/api/settings");if(e.ok){const t=await e.json(),s=t.data||t.settings||{};this.credentials={environmentId:s.environmentId||s["environment-id"]||"",clientId:s.apiClientId||s["api-client-id"]||"",clientSecret:s.apiSecret||s["api-secret"]||"",region:s.region||"NorthAmerica",populationId:s.populationId||s["population-id"]||"",rateLimit:s.rateLimit||s["rate-limit"]||90},console.log("Credentials loaded from server:",{hasEnvironmentId:!!this.credentials.environmentId,hasClientId:!!this.credentials.clientId,hasClientSecret:!!this.credentials.clientSecret,region:this.credentials.region})}else console.warn("Failed to load credentials from settings"),this.credentials=null}catch(e){console.error("Error loading credentials:",e),this.credentials=null}}createModal(){const e=document.createElement("div");e.className="credentials-modal-overlay",e.setAttribute("role","dialog"),e.setAttribute("aria-modal","true"),e.setAttribute("aria-labelledby","credentials-title"),e.setAttribute("aria-describedby","credentials-content");const t=this.credentials&&this.credentials.environmentId&&this.credentials.clientId;e.innerHTML=`
            <div class="credentials-modal" tabindex="-1">
                <div class="credentials-modal-header">
                    <h2 id="credentials-title">
                        <span class="credentials-icon" aria-hidden="true">🔐</span>
                        <span>PingOne Credentials</span>
                    </h2>
                </div>
                
                <div class="credentials-modal-body">
                    <div id="credentials-content" class="credentials-content">
                        ${t?this.createCredentialsContent():this.createNoCredentialsContent()}
                    </div>
                </div>
                
                <div class="credentials-modal-footer">
                    <div class="credentials-actions">
                        ${t?this.createCredentialsActions():this.createNoCredentialsActions()}
                    </div>
                </div>
            </div>
        `,document.body.appendChild(e),this.overlay=e,this.modal=e.querySelector(".credentials-modal"),this.useCredentialsBtn=e.querySelector("#use-credentials-btn"),this.configureBtn=e.querySelector("#configure-credentials-btn"),this.skipBtn=e.querySelector("#skip-credentials-btn")}createCredentialsContent(){return`
            <h3>🔐 PingOne Credentials Found</h3>
            <p>The following PingOne credentials are available. Would you like to use them or configure new ones?</p>
            
            <div class="credentials-display">
                <div class="credential-item">
                    <label>Environment ID:</label>
                    <div class="credential-value">
                        <code class="credential-visible">${this.credentials.environmentId}</code>
                        <button class="btn btn-sm btn-outline-secondary copy-btn" data-value="${this.credentials.environmentId}" title="Copy Environment ID">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
                
                <div class="credential-item">
                    <label>Client ID:</label>
                    <div class="credential-value">
                        <code class="credential-visible">${this.credentials.clientId}</code>
                        <button class="btn btn-sm btn-outline-secondary copy-btn" data-value="${this.credentials.clientId}" title="Copy Client ID">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </div>
                
                <div class="credential-item">
                    <label>Client Secret:</label>
                    <div class="credential-value">
                        <code class="credential-masked">${this.credentials.clientSecret?this.credentials.clientSecret.substring(0,5)+"•".repeat(Math.max(0,15)):"••••••••••••••••••••"}</code>
                        <span class="credential-status">✅ Configured</span>
                    </div>
                </div>
                
                <div class="credential-item">
                    <label>Region:</label>
                    <div class="credential-value">
                        <code class="credential-visible">${this.credentials.region}</code>
                    </div>
                </div>
            </div>
            
            <div class="credentials-info">
                <h4>💡 What would you like to do?</h4>
                <ul>
                    <li><strong>Use These Credentials:</strong> Continue with the stored credentials</li>
                    <li><strong>Go to Settings:</strong> Configure new or different credentials</li>
                </ul>
            </div>
        `}createNoCredentialsContent(){return`
            <h3>🔧 No Credentials Found</h3>
            <p>No PingOne credentials were found in your settings. You'll need to configure them to use this tool.</p>
            
            <div class="credentials-info">
                <h4>📋 Required Information:</h4>
                <ul>
                    <li><strong>Environment ID:</strong> Your PingOne environment identifier</li>
                    <li><strong>Client ID:</strong> Your PingOne API client identifier</li>
                    <li><strong>Client Secret:</strong> Your PingOne API client secret</li>
                    <li><strong>Region:</strong> Your PingOne environment region</li>
                </ul>
            </div>
            
            <div class="credentials-help">
                <h4>💡 How to Get Credentials:</h4>
                <ol>
                    <li>Log into your PingOne Admin Console</li>
                    <li>Navigate to Applications → Applications</li>
                    <li>Create a new application or use an existing one</li>
                    <li>Copy the Environment ID, Client ID, and Client Secret</li>
                    <li>Configure them in the Settings page</li>
                </ol>
            </div>
        `}createCredentialsActions(){return`
            <button type="button" class="credentials-btn credentials-btn-primary" id="use-credentials-btn">
                <i class="fas fa-play"></i>
                Use These Credentials
            </button>
            <button type="button" class="credentials-btn credentials-btn-secondary" id="configure-credentials-btn">
                <i class="fas fa-cog"></i>
                Go to Settings
            </button>
            <button type="button" class="credentials-btn credentials-btn-outline" id="skip-credentials-btn">
                <i class="fas fa-times"></i>
                Skip for Now
            </button>
        `}createNoCredentialsActions(){return`
            <button type="button" class="credentials-btn credentials-btn-primary" id="configure-credentials-btn">
                <i class="fas fa-cog"></i>
                Go to Settings
            </button>
            <button type="button" class="credentials-btn credentials-btn-secondary" id="skip-credentials-btn">
                <i class="fas fa-times"></i>
                Skip for Now
            </button>
        `}maskCredential(e){return e?e.length<=8?e:e.substring(0,8)+"..."+e.substring(e.length-4):"Not set"}bindEvents(){this.useCredentialsBtn&&this.useCredentialsBtn.addEventListener("click",async()=>{await this.useCurrentCredentials()}),this.configureBtn&&this.configureBtn.addEventListener("click",()=>{this.goToSettings()}),this.skipBtn&&this.skipBtn.addEventListener("click",()=>{this.skipCredentials()}),this.modal.querySelectorAll(".copy-btn").forEach(e=>{e.addEventListener("click",t=>{const s=t.target.closest(".copy-btn").dataset.value;this.copyToClipboard(s,t.target.closest(".copy-btn"))})}),this.overlay.addEventListener("keydown",e=>{this.handleKeyboardNavigation(e)}),this.overlay.addEventListener("click",e=>{e.target===this.overlay&&this.logEvent("credentials_outside_click_prevented")}),document.addEventListener("keydown",e=>{e.key==="Escape"&&this.isActive&&(e.preventDefault(),this.skipCredentials())})}handleKeyboardNavigation(e){if(!this.isActive)return;const t=this.getFocusableElements(),s=t[0],i=t[t.length-1];e.key==="Tab"&&(e.shiftKey?document.activeElement===s&&(e.preventDefault(),i.focus()):document.activeElement===i&&(e.preventDefault(),s.focus()))}getFocusableElements(){const e=["button:not([disabled])","input:not([disabled])","select:not([disabled])","textarea:not([disabled])","a[href]",'[tabindex]:not([tabindex="-1"])'];return Array.from(this.modal.querySelectorAll(e.join(", ")))}showModal(){this.isActive=!0,this.previousActiveElement=document.activeElement,document.body.classList.add("credentials-modal-open");const e=document.querySelector(".app-container");e&&e.classList.add("credentials-modal-active"),this.overlay.classList.add("active"),this.modal.focus(),this.setupFocusTrap(),this.logEvent("credentials_modal_shown"),this.announceToScreenReader("Credentials configuration modal opened. Please review your PingOne credentials and choose an action.")}setupFocusTrap(){this.focusableElements=this.getFocusableElements(),this.firstFocusableElement=this.focusableElements[0],this.lastFocusableElement=this.focusableElements[this.focusableElements.length-1]}async useCurrentCredentials(){this.logEvent("credentials_used",{hasCredentials:!!this.credentials,environmentId:this.credentials?.environmentId?"set":"not_set",clientId:this.credentials?.clientId?"set":"not_set"});const e=document.getElementById("use-credentials-btn");e&&(e.disabled=!0,e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Validating Credentials...');try{await this.saveCredentialsOnly(),E.setCredentialsModalShown(),this.hideModal(),this.enableApplication(),this.updateTokenStatusAfterCredentialsUse(),this.showSuccessMessage("Credentials saved successfully!")}catch(t){const s=document.getElementById("use-credentials-btn");s&&(s.disabled=!1,s.innerHTML='<i class="fas fa-play"></i> Use These Credentials'),console.error("Error using credentials:",t);let i="",n="Credentials Error";t.message.includes("PingOne client not available")?(n="Authentication System Not Ready",i="The PingOne authentication system is not fully initialized. Please refresh the page and try again, or go to Settings to configure credentials manually."):t.message.includes("Missing required credentials")?(n="Incomplete Credentials",i="Some required credential fields are missing. Please go to Settings to complete your PingOne configuration."):t.message.includes("Failed to get token")?(n="Authentication Failed",i="Unable to authenticate with PingOne using these credentials. Please verify your credentials in Settings."):t.message.includes("Failed to save credentials")?(n="Save Failed",i="Unable to save credentials to the server. Please try again or go to Settings to configure manually."):(n="Credentials Error",i="There was a problem using these credentials. Please go to Settings to verify your PingOne configuration."),this.showModalError(n,i)}}async saveCredentialsAndGetToken(){if(!this.credentials)throw new Error("No credentials available to save");const e={environmentId:this.credentials.environmentId,apiClientId:this.credentials.clientId,apiSecret:this.credentials.clientSecret,populationId:this.credentials.populationId||"",region:this.credentials.region||"NorthAmerica",rateLimit:this.credentials.rateLimit||90};if(!e.environmentId||!e.apiClientId||!e.apiSecret)throw new Error("Missing required credentials: Environment ID, Client ID, and Client Secret are required");try{console.log("Saving credentials to server...",{hasEnvironmentId:!!e.environmentId,hasApiClientId:!!e.apiClientId,hasApiSecret:!!e.apiSecret,region:e.region});const i=await fetch("/api/settings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!i.ok){const a=await i.json().catch(()=>({}));throw new Error(`Failed to save credentials to server: ${a.error||i.statusText}`)}const n=await i.json();console.log("Credentials saved to server successfully:",n);const o=await fetch("/api/settings");if(o.ok){const a=await o.json(),l=a.data||a.settings||{};console.log("Verified credentials saved to server:",{hasEnvironmentId:!!l.environmentId,hasApiClientId:!!l.apiClientId,hasApiSecret:!!l.apiSecret})}}catch(i){throw console.error("Failed to save credentials to server:",i),new Error(`Failed to save credentials: ${i.message}`)}if(window.credentialsManager)try{window.credentialsManager.saveCredentials(e),console.log("Credentials saved to credentials manager")}catch(i){console.warn("Failed to save to credentials manager:",i)}try{localStorage.setItem("pingone_credentials",JSON.stringify(e)),console.log("Credentials saved to localStorage as backup")}catch(i){console.warn("Failed to save to localStorage:",i)}if(window.app&&window.app.populateSettingsForm)try{window.app.populateSettingsForm(e),console.log("Settings form updated with credentials")}catch(i){console.warn("Failed to update settings form:",i)}let t=null,s=null;await new Promise(i=>setTimeout(i,1e3));for(let i=1;i<=3;i++){console.log(`Token acquisition attempt ${i}/3`);try{console.log("Trying direct API call approach...");const n=await fetch("/api/pingone/token",{method:"POST",headers:{"Content-Type":"application/json"}});if(n.ok){const o=await n.json();if(o.access_token){console.log("Token acquired via direct API call"),t=o.access_token;break}}else{const o=await n.json().catch(()=>({}));s=new Error(o.error||"Failed to get token from API"),console.error(`Direct API approach failed (attempt ${i}):`,s.message)}}catch(n){console.error(`Direct API approach failed (attempt ${i}):`,n),s=n}if(!t&&window.app&&window.app.pingOneClient)try{console.log("Trying PingOne client approach as fallback..."),typeof window.app.pingOneClient.updateCredentials=="function"&&window.app.pingOneClient.updateCredentials(e);const n=await window.app.pingOneClient.getAccessToken();console.log("New token acquired with saved credentials via PingOne client"),t=n;break}catch(n){console.error(`PingOne client approach failed (attempt ${i}):`,n),s=n}else t||console.log("PingOne client not available, skipping client approach");if(!t)try{console.log("Trying enhanced server auth approach...");const n=await fetch("/api/v1/auth/token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({environmentId:e.environmentId,clientId:e.apiClientId,clientSecret:e.apiSecret,region:e.region})});if(n.ok){const o=await n.json();if(o.access_token||o.token){console.log("Token acquired via enhanced server auth"),t=o.access_token||o.token;break}}else{const o=await n.json().catch(()=>({}));s=new Error(o.error||"Failed to get token from enhanced auth"),console.error(`Enhanced server auth approach failed (attempt ${i}):`,s.message)}}catch(n){console.error(`Enhanced server auth approach failed (attempt ${i}):`,n),s=n}if(i<3&&!t){const n=1e3*i;console.log(`Waiting ${n}ms before retry...`),await new Promise(o=>setTimeout(o,n))}}if(!t){console.error("All token acquisition attempts failed");let i="Unable to acquire PingOne access token after multiple attempts.";throw s&&(s.message.includes("401")||s.message.includes("unauthorized")?i="Invalid credentials. Please verify your PingOne Client ID and Secret are correct.":s.message.includes("404")||s.message.includes("not found")?i="PingOne environment not found. Please verify your Environment ID is correct.":s.message.includes("network")||s.message.includes("fetch")?i="Network error connecting to PingOne. Please check your internet connection.":s.message.includes("PingOne client not available")?i="PingOne authentication system is not properly initialized. Please refresh the page and try again.":i=`Authentication failed: ${s.message}`),new Error(i)}return console.log("Token acquisition successful"),t}async saveCredentialsOnly(){if(!this.credentials)throw new Error("No credentials available to save");const e={environmentId:this.credentials.environmentId,apiClientId:this.credentials.clientId,apiSecret:this.credentials.clientSecret,populationId:this.credentials.populationId||"",region:this.credentials.region||"NorthAmerica",rateLimit:this.credentials.rateLimit||90};if(!e.environmentId||!e.apiClientId||!e.apiSecret)throw new Error("Missing required credentials: Environment ID, Client ID, and Client Secret are required");try{console.log("Saving credentials to server...",{hasEnvironmentId:!!e.environmentId,hasApiClientId:!!e.apiClientId,hasApiSecret:!!e.apiSecret,region:e.region});const t=await fetch("/api/settings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const i=await t.json().catch(()=>({}));throw new Error(`Failed to save credentials to server: ${i.error||t.statusText}`)}const s=await t.json();console.log("Credentials saved to server successfully:",s)}catch(t){throw console.error("Failed to save credentials to server:",t),new Error(`Failed to save credentials: ${t.message}`)}if(window.credentialsManager)try{window.credentialsManager.saveCredentials(e),console.log("Credentials saved to credentials manager")}catch(t){console.warn("Failed to save to credentials manager:",t)}try{localStorage.setItem("pingone_credentials",JSON.stringify(e)),console.log("Credentials saved to localStorage as backup")}catch(t){console.warn("Failed to save to localStorage:",t)}if(window.app&&window.app.populateSettingsForm)try{window.app.populateSettingsForm(e),console.log("Settings form updated with credentials")}catch(t){console.warn("Failed to update settings form:",t)}return console.log("Credentials saved successfully without token acquisition"),!0}showError(e,t){const s=document.createElement("div");s.className="notification notification-error",s.innerHTML=`
            <i class="fas fa-exclamation-circle"></i>
            <span><strong>${e}:</strong> ${t}</span>
        `;const i=document.getElementById("notification-area");i&&(i.appendChild(s),setTimeout(()=>{s.remove()},8e3))}showModalError(e,t){const s=document.querySelector(".credentials-modal");if(!s)return;const i=s.querySelector(".credentials-error-message");i&&i.remove();const n=document.createElement("div");n.className="credentials-error-message",n.innerHTML=`
            <div class="error-content">
                <i class="fas fa-exclamation-triangle error-icon"></i>
                <div class="error-text">
                    <h4>${e}</h4>
                    <p>${t}</p>
                </div>
            </div>
            <div class="error-actions">
                <button type="button" class="btn btn-primary" onclick="this.closest('.credentials-modal-overlay').querySelector('#configure-credentials-btn').click()">
                    <i class="fas fa-cog"></i> Go to Settings
                </button>
                <button type="button" class="btn btn-secondary" onclick="this.closest('.credentials-error-message').remove()">
                    <i class="fas fa-times"></i> Dismiss
                </button>
            </div>
        `;const o=s.querySelector(".credentials-modal-body");o&&o.insertAdjacentElement("afterend",n),this.showError(e,t)}updateTokenStatusAfterCredentialsUse(){try{console.log("Credentials Modal: Updating token status after credentials use"),window.app&&window.app.pingOneClient&&(window.app.pingOneClient.clearToken(),window.app.pingOneClient.getAccessToken().then(e=>{console.log("Credentials Modal: Fresh token acquired"),typeof window.app.updateUniversalTokenStatus=="function"&&window.app.updateUniversalTokenStatus()}).catch(e=>{console.warn("Credentials Modal: Could not get fresh token:",e)})),window.app&&typeof window.app.updateUniversalTokenStatus=="function"&&setTimeout(()=>{window.app.updateUniversalTokenStatus()},1e3)}catch(e){console.error("Credentials Modal: Error updating token status:",e)}}goToSettings(){this.logEvent("credentials_configure_clicked"),this.hideModal(),this.enableApplication(),setTimeout(()=>{const e=document.querySelector('[data-view="settings"]');e&&e.click()},100)}skipCredentials(){this.logEvent("credentials_skipped"),this.hideModal(),this.enableApplication(),this.showInfoMessage("You can configure credentials later in the Settings page.")}hideModal(){this.isActive=!1,document.body.classList.remove("credentials-modal-open");const e=document.querySelector(".app-container");e&&e.classList.remove("credentials-modal-active"),this.overlay.classList.remove("active"),this.previousActiveElement&&this.previousActiveElement.focus(),setTimeout(()=>{this.overlay&&this.overlay.parentNode&&this.overlay.parentNode.removeChild(this.overlay)},300),this.logEvent("credentials_modal_hidden")}enableApplication(){const e=document.querySelector(".app-container");e&&e.classList.remove("credentials-modal-active"),this.logEvent("application_enabled_after_credentials")}copyToClipboard(e,t){navigator.clipboard.writeText(e).then(()=>{const s=t.innerHTML;t.innerHTML='<i class="fas fa-check"></i>',t.classList.add("copied"),setTimeout(()=>{t.innerHTML=s,t.classList.remove("copied")},2e3),this.logEvent("credential_copied")}).catch(s=>{console.error("Failed to copy to clipboard:",s),this.logEvent("credential_copy_failed",{error:s.message})})}showSuccessMessage(e){const t=document.createElement("div");t.className="notification notification-success",t.innerHTML=`
            <i class="fas fa-check-circle"></i>
            <span>${e}</span>
        `;const s=document.getElementById("notification-area");s&&(s.appendChild(t),setTimeout(()=>{t.remove()},5e3))}showInfoMessage(e){const t=document.createElement("div");t.className="notification notification-info",t.innerHTML=`
            <i class="fas fa-info-circle"></i>
            <span>${e}</span>
        `;const s=document.getElementById("notification-area");s&&(s.appendChild(t),setTimeout(()=>{t.remove()},5e3))}announceToScreenReader(e){const t=document.createElement("div");t.setAttribute("aria-live","polite"),t.setAttribute("aria-atomic","true"),t.style.position="absolute",t.style.left="-10000px",t.style.width="1px",t.style.height="1px",t.style.overflow="hidden",t.textContent=e,document.body.appendChild(t),setTimeout(()=>{document.body.removeChild(t)},1e3)}logEvent(e,t={}){const s={event:e,timestamp:new Date().toISOString(),hasCredentials:!!this.credentials,environmentId:this.credentials?.environmentId?"set":"not_set",clientId:this.credentials?.clientId?"set":"not_set",...t};console.log("Credentials Modal Event:",s)}static async areCredentialsSaved(){try{const e=await fetch("/api/settings");if(!e.ok)return!1;const t=await e.json(),s=t.data||t.settings||{};if(!(s.environmentId&&s.apiClientId&&s.apiSecret))return!1;if(window.app&&window.app.pingOneClient)try{return!!await window.app.pingOneClient.getAccessToken()}catch(n){return console.warn("Credentials exist but token acquisition failed:",n),!1}return!0}catch(e){return console.error("Error checking if credentials are saved:",e),!1}}static async shouldShowCredentialsModal(){return console.log("DEBUGGING: Forcing credentials modal to show"),!0}static setCredentialsModalShown(){sessionStorage.setItem("credentials_modal_shown","true"),console.log("Credentials modal marked as shown for this session")}static resetCredentialsModal(){sessionStorage.removeItem("credentials_modal_shown"),console.log("Credentials modal state reset")}static hasValidToken(){try{const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(!e||!t)return!1;const s=parseInt(t,10),i=Date.now();return s-i>0}catch(e){return console.error("Error checking token validity:",e),!1}}}document.addEventListener("DOMContentLoaded",async()=>{if(console.log("Credentials Modal: DOMContentLoaded event fired"),console.log("Disclaimer accepted:",DisclaimerModal.isDisclaimerAccepted()),console.log("Credentials modal shown:",sessionStorage.getItem("credentials_modal_shown")),DisclaimerModal.isDisclaimerAccepted()){const r=await E.shouldShowCredentialsModal();console.log("Should show credentials modal:",r),r&&(console.log("Credentials Modal: Showing modal for returning user"),setTimeout(()=>{new E,E.setCredentialsModalShown()},1e3))}});document.addEventListener("disclaimerAccepted",async r=>{console.log("Credentials Modal: Disclaimer accepted event received",r.detail),setTimeout(async()=>{console.log("Credentials Modal: Checking if should show after disclaimer");const e=await E.shouldShowCredentialsModal();console.log("Should show credentials modal:",e),e&&(console.log("Credentials Modal: Creating modal after disclaimer acceptance"),new E,E.setCredentialsModalShown())},1500)});document.addEventListener("token-updated",async r=>{console.log("Credentials Modal: Token updated event received",r.detail),setTimeout(async()=>{const e=await E.shouldShowCredentialsModal();console.log("Should show credentials modal after token update:",e),e&&(console.log("Credentials Modal: Creating modal after token update"),new E,E.setCredentialsModalShown())},1e3)});setInterval(async()=>{DisclaimerModal.isDisclaimerAccepted()&&await E.shouldShowCredentialsModal()&&(console.log("Credentials Modal: Periodic check - showing modal"),new E,E.setCredentialsModalShown())},300*1e3);typeof k<"u"&&k.exports&&(k.exports=E);class ot{constructor(e,t,s,i,n,o,a=null){this.logger=e,this.uiManager=t,this.localClient=s,this.settingsManager=i,this.eventBus=n,this.populationService=o,this.authManagementSubsystem=a,this.isImporting=!1,this.socket=null,this.selectedPopulationId=null,this.selectedPopulationName=null,this.fallbackPolling=null,this.selectedFile=null,this.messageFormatter=window.messageFormatter||{formatMessage:(l,c)=>`[${l.toUpperCase()}] ${c}`},this.logger.info("Import Subsystem initialized"),this.setupCrossSubsystemEvents()}async init(){(this.logger?.debug||window.logger?.debug||console.log)("🚀 [DEBUG] ImportSubsystem: init() method called");try{(this.logger?.debug||window.logger?.debug||console.log)("🔧 [DEBUG] ImportSubsystem: Setting up event listeners"),this.setupEventListeners(),(this.logger?.debug||window.logger?.debug||console.log)("📋 [DEBUG] ImportSubsystem: About to refresh population dropdown"),this.refreshPopulationDropdown(),(this.logger?.debug||window.logger?.debug||console.log)("🔘 [DEBUG] ImportSubsystem: Setting initial button state"),this.validateAndUpdateButtonState(),(this.logger?.debug||window.logger?.debug||console.log)("✅ [DEBUG] ImportSubsystem: Init completed successfully"),(this.logger?.info||window.logger?.info||console.log)("Import Subsystem initialized successfully")}catch(e){throw(this.logger?.error||window.logger?.error||console.error)("❌ [DEBUG] ImportSubsystem: Init failed with error:",e),(this.logger?.error||window.logger?.error||console.error)("Failed to initialize Import Subsystem",e),e}}setupEventListeners(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{START_IMPORT_BTN:"start-import",CSV_FILE_INPUT:"csv-file",IMPORT_POPULATION_SELECT:"import-population-select"}},i=e.selectById(s.SELECTORS.START_IMPORT_BTN);i&&e.addEventListener(i,"click",t.wrapAsyncEventHandler(async a=>{a.preventDefault(),await this.startImport()},"Import button click handler"));const n=e.selectById(s.SELECTORS.CSV_FILE_INPUT);n&&e.addEventListener(n,"change",t.wrapAsyncEventHandler(async a=>{const l=a.target.files[0];l&&(this.selectedFile=l,await this.handleFileSelect(l),this.validateAndUpdateButtonState())},"CSV file input change handler"));const o=e.selectById(s.SELECTORS.IMPORT_POPULATION_SELECT);o&&e.addEventListener(o,"change",t.wrapEventHandler(a=>{this.handlePopulationChange(a.target.value,a.target.selectedOptions[0]?.text),this.validateAndUpdateButtonState()},"Population dropdown change handler")),this.setupDragAndDropListeners()}setupDragAndDropListeners(){const e=document.getElementById("import-drop-zone"),t=document.getElementById("csv-file");if(!e){this.logger.warn("Import drop zone not found in DOM");return}["dragenter","dragover","dragleave","drop"].forEach(s=>{e.addEventListener(s,i=>{i.preventDefault(),i.stopPropagation()},!1)}),["dragenter","dragover"].forEach(s=>{e.addEventListener(s,()=>{e.classList.add("drag-over")},!1)}),["dragleave","drop"].forEach(s=>{e.addEventListener(s,()=>{e.classList.remove("drag-over")},!1)}),e.addEventListener("drop",async s=>{const n=s.dataTransfer.files;if(n.length>0){const o=n[0];if(this.selectedFile=o,t){const a=new DataTransfer;a.items.add(o),t.files=a.files}await this.handleFileSelect(o),this.validateAndUpdateButtonState()}},!1),e.addEventListener("click",()=>{t&&t.click()}),this.logger.info("Drag and drop listeners set up successfully")}async startImport(){if(this.logger.info("🚀 [DEBUG] ImportSubsystem: Start import button clicked"),this.isImporting){this.logger.warn("🚀 [DEBUG] ImportSubsystem: Import already in progress"),this.uiManager.showNotification("An import is already in progress. Please wait for it to complete.",{type:"warning",duration:5e3,title:"Import In Progress"});return}try{if(this.isImporting=!0,this.logger.info("🚀 [DEBUG] ImportSubsystem: Starting import process"),this.logger.debug("🚀 [DEBUG] ImportSubsystem: Validating prerequisites..."),!await this.validateImportPrerequisites()){this.logger.warn("🚀 [DEBUG] ImportSubsystem: Prerequisites validation failed, aborting import");return}this.logger.info("🚀 [DEBUG] ImportSubsystem: Prerequisites validated, proceeding with import"),this.getPopulationSelection(),this.logger.debug("🚀 [DEBUG] ImportSubsystem: Showing progress UI"),this.uiManager.showProgress();const e=this.generateSessionId();this.logger.debug("🚀 [DEBUG] ImportSubsystem: Establishing real-time connection with session:",e),await this.establishRealTimeConnection(e),this.logger.debug("🚀 [DEBUG] ImportSubsystem: Executing import with session:",e),await this.executeImport(e)}catch(e){this.logger.error("🚀 [DEBUG] ImportSubsystem: Import process failed",e),this.uiManager.showError("Import Failed",e.message||"An unexpected error occurred during the import process.")}finally{this.isImporting=!1,this.logger.debug("🚀 [DEBUG] ImportSubsystem: Import process completed, resetting isImporting flag")}}async validateImportPrerequisites(){if(this.logger.debug("🔍 [DEBUG] ImportSubsystem: Validating import prerequisites"),!await this.checkTokenStatus())return this.logger.warn("🔍 [DEBUG] ImportSubsystem: Token validation failed"),this.showAuthenticationModal("Import"),!1;if(!this.selectedFile)return this.logger.warn("🔍 [DEBUG] ImportSubsystem: No file selected (selectedFile is null)"),this.uiManager.showError("No File Selected","Please select a CSV file to import."),!1;const t=document.getElementById("import-population-select");return!t||!t.value||t.value===""?(this.logger.warn("🔍 [DEBUG] ImportSubsystem: No population selected"),this.uiManager.showError("No Population Selected","Please select a population for the import."),!1):(this.logger.info("✅ [DEBUG] ImportSubsystem: All prerequisites validated successfully",{hasFile:!!this.selectedFile,fileName:this.selectedFile?.name,hasPopulation:!!t?.value,populationId:t?.value}),!0)}getPopulationSelection(){const e=document.getElementById("import-population-select");if(this.selectedPopulationId=e?.value||"",e){const t=e.options[e.selectedIndex];this.selectedPopulationName=t?.text||""}this.logger.info("Population selection",{id:this.selectedPopulationId,name:this.selectedPopulationName})}handleProgressUpdate(e){if(!e||e.current===void 0||e.total===void 0){this.logger.error("Invalid progress data",e);return}const t=Math.round(e.current/e.total*100);this.uiManager.updateProgress(t,e.message||`Processing ${e.current} of ${e.total} users...`),this.logger.info("Progress update",{current:e.current,total:e.total,percentage:t})}handleImportCompletion(e){this.logger.info("Import completed",e),this.cleanupConnections()}handleImportError(e){this.logger.error("Import error",e),this.cleanupConnections()}async executeImport(e){const s=document.getElementById("csv-file").files[0],i=new FormData;i.append("file",s),i.append("populationId",this.selectedPopulationId),i.append("sessionId",e);try{const n=await this.localClient.post("/api/import",i);if(!n.success)throw new Error(n.error||"Import failed");this.logger.info("Import request sent successfully")}catch(n){throw this.logger.error("Import request failed",n),n}}generateSessionId(){return`import_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async checkTokenStatus(){try{if((this.logger?.debug||window.logger?.debug||console.log)("🔍 [DEBUG] ImportSubsystem: checkTokenStatus called"),(this.logger?.debug||window.logger?.debug||console.log)("🔍 [DEBUG] ImportSubsystem: this.authManagementSubsystem =",this.authManagementSubsystem),(this.logger?.debug||window.logger?.debug||console.log)("🔍 [DEBUG] ImportSubsystem: typeof this.authManagementSubsystem =",typeof this.authManagementSubsystem),!this.authManagementSubsystem)return this.logger.warn("AuthManagementSubsystem not available for token check"),(this.logger?.debug||window.logger?.debug||console.log)("❌ [DEBUG] ImportSubsystem: AuthManagementSubsystem is null/undefined"),!1;(this.logger?.debug||window.logger?.debug||console.log)("✅ [DEBUG] ImportSubsystem: AuthManagementSubsystem is available, calling isTokenValid()");const e=this.authManagementSubsystem.isTokenValid();(this.logger?.debug||window.logger?.debug||console.log)("🔍 [DEBUG] ImportSubsystem: isValid =",e);const t=this.authManagementSubsystem.getAuthenticationStatus();return(this.logger?.debug||window.logger?.debug||console.log)("🔍 [DEBUG] ImportSubsystem: authStatus =",t),e}catch(e){return this.logger.error("Error checking token status:",e),(this.logger?.debug||window.logger?.debug||console.log)("❌ [DEBUG] ImportSubsystem: Error in checkTokenStatus:",e),!1}}showAuthenticationModal(e="Import"){try{this.createAuthenticationModal(e)}catch(t){this.logger.error("Error showing authentication modal:",t),this.uiManager.showError("Authentication Required",`You must have a valid token to start an ${e.toLowerCase()}. Please go to Settings to configure your credentials.`)}}createAuthenticationModal(e){const t=window.safeDOM||new SafeDOM(this.logger),s=window.errorHandler||new ErrorHandler(this.logger),i=window.UI_CONFIG||{SELECTORS:{TOKEN_ALERT_OVERLAY:".token-alert-overlay",SETTINGS_NAV_ITEM:'[data-view="settings"]'},CLASSES:{TOKEN_ALERT_OVERLAY:"token-alert-overlay"}},n=t.select(i.SELECTORS.TOKEN_ALERT_OVERLAY);n&&n.remove();const o=document.createElement("div");t.addClass(o,i.CLASSES.TOKEN_ALERT_OVERLAY),o.setAttribute("role","dialog"),o.setAttribute("aria-modal","true"),o.setAttribute("aria-labelledby","token-alert-title"),o.setAttribute("aria-describedby","token-alert-content"),o.innerHTML=`
            <div class="token-alert-modal" tabindex="-1">
                <div class="token-alert-header">
                    <h2 id="token-alert-title">
                        <span class="warning-icon" aria-hidden="true">⚠️</span>
                        <span>Authentication Required</span>
                    </h2>
                    <button type="button" class="token-alert-close" id="token-alert-close" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="token-alert-body">
                    <div id="token-alert-content" class="token-alert-content">
                        <div class="token-alert-icon">
                            <span aria-hidden="true">🔐</span>
                        </div>
                        <h3>No Valid Token Available</h3>
                        <p class="token-alert-message">
                            <strong>Authentication is required to continue.</strong>
                            You need valid credentials to perform the "${e}" operation.
                        </p>
                        <div class="token-status-info">
                            <p><strong>Current Status:</strong> No token available</p>
                        </div>
                        <div class="token-alert-actions">
                            <button type="button" class="btn btn-primary btn-lg" id="token-alert-settings-btn">
                                <span class="btn-icon">⚙️</span>
                                Go to Settings
                            </button>
                            <p class="token-alert-help">
                                Add your PingOne credentials in the Settings page to generate a new token.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        `,document.body.appendChild(o);const a=t.select("#token-alert-settings-btn",o),l=t.select("#token-alert-close",o);a&&t.addEventListener(a,"click",s.wrapEventHandler(()=>{if(o.remove(),window.app&&window.app.showView)window.app.showView("settings");else{const c=t.select(i.SELECTORS.SETTINGS_NAV_ITEM);c?c.click():window.location.href="/"}},"Authentication modal settings button click")),l.addEventListener("click",()=>{o.remove()}),o.addEventListener("keydown",c=>{c.key==="Escape"&&o.remove()}),o.style.display="flex",setTimeout(()=>{o.classList.add("show")},10)}async handleFileSelect(e){try{if(this.logger.info("File selected for import",{name:e.name,size:e.size,type:e.type}),!this.validateFile(e))return;this.displayFileInfo(e)}catch(t){this.logger.error("File selection failed",t),this.uiManager.showError("File Selection Error",t.message)}}validateAndUpdateButtonState(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{START_IMPORT_BTN:"start-import",IMPORT_POPULATION_SELECT:"import-population-select"},CLASSES:{BTN_DISABLED:"btn-disabled",BTN_PRIMARY:"btn-primary"}};t.wrapSync(()=>{const i=e.selectById(s.SELECTORS.START_IMPORT_BTN);if(!i){this.logger.warn("Import button not found for state validation");return}const n=!!this.selectedFile,o=e.selectById(s.SELECTORS.IMPORT_POPULATION_SELECT),a=o&&o.value&&o.value!=="",l=n&&a;i.disabled=!l,this.logger.debug("Import button state updated",{hasFile:n,hasPopulation:a,shouldEnable:l,buttonDisabled:i.disabled}),l?(e.removeClass(i,s.CLASSES.BTN_DISABLED),e.addClass(i,s.CLASSES.BTN_PRIMARY)):(e.addClass(i,s.CLASSES.BTN_DISABLED),e.removeClass(i,s.CLASSES.BTN_PRIMARY))},"Import button state validation")()}validateFile(e){return e.name.toLowerCase().endsWith(".csv")?e.size>10*1024*1024?(this.uiManager.showError("File Too Large","File size must be less than 10MB"),!1):!0:(this.uiManager.showError("Invalid File Type","Please select a CSV file"),!1)}async displayFileInfo(e){try{this.logger.info("Displaying comprehensive file information",{fileName:e.name});let t=null,s=null;try{const i=await this.readFileAsText(e);s=this.parseCSVContent(i),t=s?s.length:0,this.logger.debug("CSV parsing completed",{recordCount:t,hasData:!!s})}catch(i){this.logger.warn("Failed to parse CSV for record count",{error:i.message}),t="Unable to determine"}this.updateFileInfoDisplay(e,t,s)}catch(t){this.logger.error("Failed to display file information",{error:t.message});const s=window.safeDOM||new SafeDOM(this.logger),i=window.UI_CONFIG||{SELECTORS:{FILE_INFO:"file-info"},CLASSES:{FILE_INFO_ERROR:"file-info-error"},STYLES:{ERROR_BACKGROUND:"#f8d7da",ERROR_BORDER:"1px solid #f5c6cb",ERROR_COLOR:"#721c24"}},n=s.selectById(i.SELECTORS.FILE_INFO);if(n){const o=`
                    <div class="${i.CLASSES.FILE_INFO_ERROR}" style="background: ${i.STYLES.ERROR_BACKGROUND}; border: ${i.STYLES.ERROR_BORDER}; border-radius: 4px; padding: 12px; color: ${i.STYLES.ERROR_COLOR};">
                        <strong>⚠️ File Information Error</strong><br>
                        Selected: ${e.name}<br>
                        Size: ${(e.size/1024).toFixed(2)} KB<br>
                        <em>Unable to display detailed information: ${t.message}</em>
                    </div>
                `;s.setHTML(n,o)}}}readFileAsText(e){return new Promise((t,s)=>{const i=new FileReader;i.onload=n=>t(n.target.result),i.onerror=()=>s(new Error("Failed to read file")),i.readAsText(e)})}parseCSVContent(e){if(!e||typeof e!="string")return[];try{const t=e.split(`
`).filter(s=>s.trim().length>0);return t.length<=1?[]:t.slice(1).map(s=>{const i=[];let n="",o=!1;for(let a=0;a<s.length;a++){const l=s[a];l==='"'?o=!o:l===","&&!o?(i.push(n.trim()),n=""):n+=l}return i.push(n.trim()),i}).filter(s=>s.some(i=>i.length>0))}catch(t){return this.logger.error("CSV parsing error",{error:t.message}),[]}}updateFileInfoDisplay(e,t,s){const i=document.getElementById("file-info");if(!i){this.logger.warn("File info element not found in DOM");return}const n=this.formatFileSize(e.size),o=new Date(e.lastModified).toLocaleString(),a=e.type||this.getFileExtension(e.name),l=this.getFileExtension(e.name),g=l==="csv"||l==="txt"||a==="text/csv"||a==="text/plain";let d="";g&&t!==null&&(typeof t=="number"?t>0?d=`
                        <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                            <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">🧾 Records</strong>
                            <span style="color: #0073C8; font-size: 0.8rem; font-weight: bold;">${t}</span>
                        </div>
                    `:d=`
                        <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                            <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">🧾 Records</strong>
                            <span style="color: #dc3545; font-size: 0.8rem; font-weight: bold;">No user records found</span>
                        </div>
                    `:d=`
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">🧾 Records</strong>
                        <span style="color: #ffc107; font-size: 0.8rem; font-weight: bold;">${t}</span>
                    </div>
                `);const u=`
            <div class="file-info-details" style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 12px; margin: 8px 0; box-shadow: 0 1px 4px rgba(0,0,0,0.08);">
                
                <!-- File Name Section -->
                <div class="file-name-section" style="text-align: center; margin-bottom: 12px; padding: 8px; background: #e6f4ff; border-radius: 4px; color: #1a237e; font-weight: bold; font-size: 1.1rem;">
                    <div style="font-size: 1.3rem; font-weight: 600; margin-bottom: 3px; color: #1a237e; word-break: break-word; overflow-wrap: break-word;">
                        <i class="fas fa-file-csv" style="margin-right: 6px; font-size: 1.2rem; color: #1976d2;"></i>
                        ${e.name}
                    </div>
                    <div style="font-size: 0.85rem; opacity: 0.9; font-weight: 500; color: #1976d2;">
                        File Selected Successfully
                    </div>
                </div>
                
                <!-- File Information Grid -->
                <div class="file-info-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 0.8em; margin-bottom: 10px;">
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📊 File Size</strong>
                        <span style="color: #6c757d; font-size: 0.8rem;">${n}</span>
                    </div>
                    
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📅 Modified</strong>
                        <span style="color: #6c757d; font-size: 0.8rem;">${o}</span>
                    </div>
                    
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📄 Type</strong>
                        <span style="color: #6c757d; font-size: 0.8rem;">${a||"CSV"}</span>
                    </div>
                    
                    ${d}
                </div>
                
                <!-- File Status -->
                <div class="file-info-status" style="margin-top: 8px; padding: 8px; border-radius: 4px; background: ${g?"#d4edda":"#f8d7da"}; border: 1px solid ${g?"#c3e6cb":"#f5c6cb"}; display: flex; align-items: center; gap: 6px;">
                    <i class="fas ${g?"fa-check-circle":"fa-exclamation-triangle"}" style="color: ${g?"#155724":"#721c24"};"></i>
                    <span style="color: ${g?"#155724":"#721c24"}; font-size: 0.85rem; font-weight: 500;">
                        ${g?"Valid CSV file format":"Warning: File type may not be compatible"}
                    </span>
                </div>
                
                ${s&&s.length>0?`
                <div class="file-info-preview" style="margin-top: 8px; padding: 8px; border-radius: 4px; background: #fff3cd; border: 1px solid #ffeaa7;">
                    <strong style="color: #856404; font-size: 0.85rem;">📋 Ready for Import</strong>
                    <div style="color: #856404; font-size: 0.8rem; margin-top: 2px;">
                        File contains ${t} user record${t===1?"":"s"} ready for processing
                    </div>
                </div>
                `:""}
            </div>
        `;i.innerHTML=u,this.logger.info("File information display updated successfully",{recordCount:t,isValidType:g})}formatFileSize(e){if(e===0)return"0 Bytes";const t=1024,s=["Bytes","KB","MB","GB"],i=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,i)).toFixed(2))+" "+s[i]}getFileExtension(e){return e.slice((e.lastIndexOf(".")-1>>>0)+2).toLowerCase()}async establishRealTimeConnection(e){try{return this.logger.debug("🔗 [DEBUG] ImportSubsystem: Establishing real-time connection for session:",e),typeof io<"u"&&this.subsystems?.realtimeManager?(this.logger.debug("🔗 [DEBUG] ImportSubsystem: Socket.IO available, setting up real-time connection"),this.socket=this.subsystems.realtimeManager.getConnection(),this.socket?(this.socket.on(`import-progress-${e}`,t=>{this.handleProgressUpdate(t)}),this.socket.on(`import-complete-${e}`,t=>{this.handleImportCompletion(t)}),this.socket.on(`import-error-${e}`,t=>{this.handleImportError(t)}),this.logger.info("✅ [DEBUG] ImportSubsystem: Real-time connection established successfully")):(this.logger.warn("⚠️ [DEBUG] ImportSubsystem: Socket.IO connection not available, using fallback polling"),this.setupFallbackPolling(e))):(this.logger.warn("⚠️ [DEBUG] ImportSubsystem: Socket.IO not available, using fallback polling"),this.setupFallbackPolling(e)),Promise.resolve()}catch(t){return this.logger.error("❌ [DEBUG] ImportSubsystem: Failed to establish real-time connection:",t),this.setupFallbackPolling(e),Promise.resolve()}}cleanupConnections(){this.socket&&(this.socket.disconnect(),this.socket=null),this.fallbackPolling&&(clearInterval(this.fallbackPolling),this.fallbackPolling=null),this.isImporting=!1}setupFallbackPolling(e){this.fallbackPolling=setInterval(async()=>{try{const t=await this.localClient.get(`/api/import/status/${e}`);t.data&&this.handleProgressUpdate(t.data)}catch(t){this.logger.error("Fallback polling failed",t)}},2e3)}setupCrossSubsystemEvents(){if(!this.eventBus){this.logger.warn("EventBus not available for cross-subsystem events");return}this.eventBus.on("tokenExpired",e=>{this.logger.warn("Token expired during import operation"),this.isImporting&&(this.cleanupConnections(),this.uiManager.showError("Session Expired","Your authentication token expired during the import. Please re-authenticate and try again."))}),this.eventBus.on("tokenError",e=>{this.logger.error("Token error detected",e),this.isImporting&&(this.cleanupConnections(),this.uiManager.showError("Authentication Error",`Authentication failed: ${e.error}`))}),this.eventBus.on("tokenRefreshed",e=>{this.logger.info("Token refreshed successfully")}),this.eventBus.on("populationsChanged",e=>{this.logger.info("Populations changed, refreshing import dropdown",{count:e.count}),this.refreshPopulationDropdown()}),this.logger.debug("Cross-subsystem event listeners set up for ImportSubsystem")}handlePopulationChange(e,t){this.logger.info("🔄 [DEBUG] ImportSubsystem: Population changed",{populationId:e,populationName:t});const s=document.querySelector(".population-name-text");s&&(e&&t?(s.innerHTML=`<span class="population-label">Population:</span> <span class="population-value">${t}</span>`,this.logger.debug("Updated population name display",{populationName:t})):s.innerHTML='<span class="population-label">Population:</span> <span class="population-placeholder">Select a population</span>');const i=document.querySelector(".api-url-text");if(i)if(e){const n=`/api/populations/${e}/users`;i.textContent=n,this.logger.debug("Updated API URL display",{apiUrl:n})}else i.textContent="Select a population to see the API URL";this.selectedPopulationId=e,this.selectedPopulationName=t,this.eventBus&&this.eventBus.emit("importPopulationChanged",{populationId:e,populationName:t})}refreshPopulationDropdown(){this.logger.info("🔍 [DEBUG] ImportSubsystem: refreshPopulationDropdown called"),this.populationService?(this.logger.info("🔍 [DEBUG] ImportSubsystem: PopulationService available, calling populateDropdown"),this.populationService.populateDropdown("import-population-select",{includeEmpty:!0,emptyText:"Select a population"}).then(()=>{this.logger.info("✅ [DEBUG] ImportSubsystem: Import population dropdown refreshed successfully")}).catch(e=>{this.logger.error("❌ [DEBUG] ImportSubsystem: Failed to refresh import population dropdown",e),this.uiManager.showError("Population Refresh Failed","Failed to refresh population dropdown.")})):this.logger.error("❌ [DEBUG] ImportSubsystem: PopulationService not available for dropdown refresh",{populationServiceType:typeof this.populationService,populationServiceExists:!!this.populationService})}}class rt{constructor(e,t,s,i,n,o){this.logger=e,this.uiManager=t,this.localClient=s,this.settingsManager=i,this.eventBus=n,this.populationService=o,this.isExporting=!1,this.selectedPopulationId=null,this.selectedPopulationName=null,this.logger.info("Export Subsystem initialized"),this.setupCrossSubsystemEvents()}async init(){const e=window.errorHandler||new ErrorHandler(this.logger),t=async()=>{this.setupEventListeners(),await this.loadPopulations(),this.logger.info("Export Subsystem initialized successfully")};await e.wrapAsync(t,"Initialize Export Subsystem","Failed to Initialize Export Subsystem")()}setupEventListeners(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_BTN:"export-btn",EXPORT_POPULATION_SELECT:"export-population-select",EXPORT_FORMAT:"export-format"}},i=e.selectById(s.SELECTORS.EXPORT_BTN);i&&e.addEventListener(i,"click",t.wrapAsyncEventHandler(async a=>{a.preventDefault(),await this.startExport()},"Export button click"));const n=e.selectById(s.SELECTORS.EXPORT_POPULATION_SELECT);n&&e.addEventListener(n,"change",t.wrapEventHandler(a=>{this.handlePopulationChange(a.target.value)},"Export population change"));const o=e.selectById(s.SELECTORS.EXPORT_FORMAT);o&&e.addEventListener(o,"change",t.wrapEventHandler(a=>{this.handleFormatChange(a.target.value)},"Export format change"))}async startExport(){const e=window.errorHandler||new ErrorHandler(this.logger);if(this.isExporting){this.logger.warn("Export already in progress");return}this.isExporting=!0,this.logger.info("Starting export process");try{const t=async()=>{if(!await this.validateExportPrerequisites())return;const s=this.getExportConfiguration();this.uiManager.showProgress("Exporting..."),await this.executeExport(s)};await e.wrapAsync(t,"Start export process","The export failed. Please check the application logs for more details.")()}finally{this.isExporting=!1,this.uiManager.hideProgress()}}async validateExportPrerequisites(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_POPULATION_SELECT:"export-population-select"}},i=async()=>{if(!await this.checkTokenStatus())return this.logger.warn("Export cancelled - no valid token"),this.uiManager.showError("Authentication Required","Please get a valid token first"),!1;const o=e.selectById(s.SELECTORS.EXPORT_POPULATION_SELECT);return!o||!o.value?(this.uiManager.showError("No Population Selected","Please select a population to export"),!1):!0};return await t.wrapAsync(i,"Validate export prerequisites")()}getExportConfiguration(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_POPULATION_SELECT:"export-population-select",EXPORT_FORMAT:"export-format",INCLUDE_HEADERS:"include-headers",LIMIT_USERS:"limit-users",USER_LIMIT:"user-limit"}},i=()=>{const n=e.selectById(s.SELECTORS.EXPORT_POPULATION_SELECT),o=e.selectById(s.SELECTORS.EXPORT_FORMAT),a=e.selectById(s.SELECTORS.INCLUDE_HEADERS),l=e.selectById(s.SELECTORS.LIMIT_USERS),c=e.selectById(s.SELECTORS.USER_LIMIT),h=l?l.checked:!1;return{populationId:n?n.value:"",populationName:n&&n.selectedIndex>=0?n.options[n.selectedIndex].text:"",format:o?o.value:"csv",includeHeaders:a?a.checked:!0,limitUsers:h,userLimit:h?parseInt(c?.value,10)||100:null,timestamp:new Date().toISOString()}};return t.wrapSync(i,"Get export configuration")()}async executeExport(e){const t=window.errorHandler||new ErrorHandler(this.logger),s=async()=>{this.logger.info("Executing export with config",e);const i=await this.localClient.post("/api/export",e);if(!i.success)throw new Error(i.error||"Export failed");i.downloadUrl?this.downloadFile(i.downloadUrl,i.filename):i.data&&this.downloadData(i.data,e.format,e.populationName),this.logger.info("Export completed successfully"),this.uiManager.showSuccess("Export completed successfully")};await t.wrapAsync(s,"Execute export","Failed to communicate with the server during export. Please check your connection and try again.",{rethrow:!0})()}downloadFile(e,t){const s=window.safeDOM||new SafeDOM(this.logger),i=window.errorHandler||new ErrorHandler(this.logger),n=()=>{const o=s.createElement("a");o&&(o.href=e,o.download=t||`export_${Date.now()}.csv`,s.appendChild(document.body,o),o.click(),s.removeChild(document.body,o),this.logger.info("Successfully triggered file download",{filename:t}))};i.wrapSync(n,"Download file from URL","Failed to trigger file download. Please check browser permissions and try again.")()}downloadData(e,t,s){const i=window.errorHandler||new ErrorHandler(this.logger),n=()=>{let o,a,l;switch(t){case"json":o=JSON.stringify(e,null,2),a="application/json",l="json";break;case"csv":default:o=this.convertToCSV(e),a="text/csv",l="csv";break}const c=new Blob([o],{type:a}),h=URL.createObjectURL(c),g=`${s||"export"}_${Date.now()}.${l}`;try{this.downloadFile(h,g)}finally{URL.revokeObjectURL(h),this.logger.debug("Revoked object URL for downloaded file",{url:h})}};i.wrapSync(n,"Download data as file","Failed to prepare data for download. The data may be invalid or too large.")()}convertToCSV(e){const t=window.errorHandler||new ErrorHandler(this.logger),s=()=>{if(!Array.isArray(e)||e.length===0)return"";const i=Object.keys(e[0]),n=i.join(","),o=e.map(a=>i.map(l=>{const c=a[l];return typeof c=="string"&&(c.includes(",")||c.includes('"'))?`"${c.replace(/"/g,'""')}"`:c||""}).join(","));return[n,...o].join(`
`)};return t.wrapSync(s,"Convert data to CSV","Failed to convert data to CSV format. The data might be structured incorrectly.")()||""}async loadPopulations(){const e=window.errorHandler||new ErrorHandler(this.logger),t=async()=>{this.logger.info("🔄 EXPORT: Loading populations for export dropdown...");const s=await this.localClient.get("/api/populations");if(this.logger.debug("🔄 EXPORT: Populations API response:",{success:s.success,populationCount:s.populations?.length||0,hasPopulations:!!s.populations}),s.success&&s.populations)this.logger.info(`🔄 EXPORT: Successfully loaded ${s.populations.length} populations`),this.populateDropdown(s.populations);else throw new Error("Invalid or empty response from populations API")};await e.wrapAsync(t,"Load populations for export","Failed to load populations from the server. Please check your connection and refresh the page.")()}populateDropdown(e){const t=window.safeDOM||new SafeDOM(this.logger),s=window.errorHandler||new ErrorHandler(this.logger),i=window.UI_CONFIG||{SELECTORS:{EXPORT_POPULATION_SELECT:"export-population-select"}},n=()=>{this.logger.debug("🔄 EXPORT: Populating export population dropdown...",{populationCount:e?.length||0,populations:e?.map(l=>({id:l.id,name:l.name}))||[]});const o=t.selectById(i.SELECTORS.EXPORT_POPULATION_SELECT);if(!o)return;t.setHTML(o,'<option value="">Select Population</option>'),this.logger.debug("🔄 EXPORT: Cleared existing dropdown options");let a=0;e.forEach(l=>{if(l&&l.id&&l.name){const c=t.createElement("option");c&&(c.value=l.id,t.setText(c,l.name),t.appendChild(o,c),a++)}else this.logger.warn("🔄 EXPORT: Skipping invalid population data",{population:l})}),this.logger.info(`🔄 EXPORT: Successfully populated dropdown with ${a} population options`)};s.wrapSync(n,"Populate export dropdown","Failed to display populations in the dropdown. The application may be in an inconsistent state.")()}handlePopulationChange(e){const t=window.safeDOM||new SafeDOM(this.logger),s=window.errorHandler||new ErrorHandler(this.logger),i=window.UI_CONFIG||{SELECTORS:{EXPORT_POPULATION_SELECT:"export-population-select"}},n=()=>{this.selectedPopulationId=e;const o=t.selectById(i.SELECTORS.EXPORT_POPULATION_SELECT);o&&o.selectedIndex>=0?this.selectedPopulationName=o.options[o.selectedIndex]?.text||"":this.selectedPopulationName="",this.logger.info("Population selection changed",{id:this.selectedPopulationId,name:this.selectedPopulationName}),this.updateExportOptions()};s.wrapSync(n,"Handle population change","Failed to update the UI after population change. Please try again.")()}handleFormatChange(e){const t=window.errorHandler||new ErrorHandler(this.logger),s=()=>{this.logger.info("Export format changed",{format:e}),this.updateFormatOptions(e)};t.wrapSync(s,"Handle format change","Failed to update UI for the selected format. Please try again.")()}updateExportOptions(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_BTN:"export-btn"}},i=()=>{const n=e.selectById(s.SELECTORS.EXPORT_BTN);this.selectedPopulationId?(e.enable(n),this.showExportOptions()):(e.disable(n),this.hideExportOptions())};t.wrapSync(i,"Update export options","Failed to update export UI options. The UI may be in an inconsistent state.")()}updateFormatOptions(e){const t=window.safeDOM||new SafeDOM(this.logger),s=window.errorHandler||new ErrorHandler(this.logger),i=window.UI_CONFIG||{SELECTORS:{HEADERS_OPTION:"headers-option"}},n=()=>{const o=t.selectById(i.SELECTORS.HEADERS_OPTION);o&&(o.style.display=e==="csv"?"block":"none")};s.wrapSync(n,"Update format options","Failed to update format-specific UI options. The UI may be in an inconsistent state.")()}showExportOptions(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_OPTIONS:"export-options"}},i=()=>{const n=e.selectById(s.SELECTORS.EXPORT_OPTIONS);e.show(n)};t.wrapSync(i,"Show export options","Failed to show export options. The UI may be in an inconsistent state.")()}hideExportOptions(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_OPTIONS:"export-options"}},i=()=>{const n=e.selectById(s.SELECTORS.EXPORT_OPTIONS);e.hide(n)};t.wrapSync(i,"Hide export options","Failed to hide export options. The UI may be in an inconsistent state.")()}showExportProgress(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_PROGRESS:"export-progress",EXPORT_BTN:"export-btn"},MESSAGES:{EXPORTING:"Exporting..."}},i=()=>{const n=e.selectById(s.SELECTORS.EXPORT_PROGRESS);e.show(n);const o=e.selectById(s.SELECTORS.EXPORT_BTN);e.disable(o),e.setText(o,s.MESSAGES.EXPORTING)};t.wrapSync(i,"Show export progress","Failed to show export progress. The UI may be in an inconsistent state.")()}hideExportProgress(){const e=window.safeDOM||new SafeDOM(this.logger),t=window.errorHandler||new ErrorHandler(this.logger),s=window.UI_CONFIG||{SELECTORS:{EXPORT_PROGRESS:"export-progress",EXPORT_BTN:"export-btn"},MESSAGES:{EXPORT_USERS:"Export Users"}},i=()=>{const n=e.selectById(s.SELECTORS.EXPORT_PROGRESS);e.hide(n);const o=e.selectById(s.SELECTORS.EXPORT_BTN);e.enable(o),e.setText(o,s.MESSAGES.EXPORT_USERS)};t.wrapSync(i,"Hide export progress","Failed to hide export progress. Please refresh the page if the UI is unresponsive.")()}async checkTokenStatus(){const e=window.errorHandler||new ErrorHandler(this.logger),t=async()=>(await this.localClient.get("/api/v1/auth/status")).valid;try{return await e.wrapAsync(t,"Check token status")()}catch{return!1}}setupCrossSubsystemEvents(){if(!this.eventBus){this.logger.warn("EventBus not available for cross-subsystem events");return}this.eventBus.on("tokenExpired",e=>{this.logger.warn("Token expired during export operation"),this.isExporting&&(this.isExporting=!1,this.hideExportProgress(),this.uiManager.showError("Session Expired","Your authentication token expired during the export. Please re-authenticate and try again."))}),this.eventBus.on("tokenError",e=>{this.logger.error("Token error detected",e),this.isExporting&&(this.isExporting=!1,this.hideExportProgress(),this.uiManager.showError("Authentication Error",`Authentication failed: ${e.error}`))}),this.eventBus.on("tokenRefreshed",e=>{this.logger.info("Token refreshed successfully")}),this.eventBus.on("populationsChanged",e=>{this.logger.info("Populations changed, refreshing export dropdown",{count:e.count}),this.refreshPopulationDropdown()}),this.logger.debug("Cross-subsystem event listeners set up for ExportSubsystem")}refreshPopulationDropdown(){const e=window.errorHandler||new ErrorHandler(this.logger),t=async()=>{if(!this.populationService){this.logger.warn("PopulationService not available for dropdown refresh");return}await this.populationService.populateDropdown("export-population-select",{includeEmpty:!0,emptyText:"Select a population"}),this.logger.debug("Export population dropdown refreshed successfully")};e.wrapAsync(t,"Refresh export population dropdown","Failed to refresh the population list. Please check your connection or try again.")()}}class at{constructor(e,t,s,i){this.logger=e||O({serviceName:"operation-manager-subsystem",environment:"development"}),this.uiManager=t,this.settingsManager=s,this.apiClient=i,this.currentOperation=null,this.operationQueue=[],this.operationHistory=[],this.isOperationRunning=!1,this.operationTypes={IMPORT:"import",EXPORT:"export",DELETE:"delete",MODIFY:"modify"},this.validators=new Map,this.preChecks=new Map,this.postChecks=new Map,this.logger.info("Operation Manager subsystem initialized")}async init(){try{this.logger.info("Initializing operation manager subsystem..."),this.registerDefaultValidators(),this.registerDefaultPreChecks(),this.registerDefaultPostChecks(),this.logger.info("Operation Manager subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize operation manager subsystem",{error:e.message}),e}}async startOperation(e,t={}){try{if(this.logger.info("Starting operation",{type:e,options:t}),this.isOperationRunning)throw new Error("Another operation is already running");if(!Object.values(this.operationTypes).includes(e))throw new Error(`Invalid operation type: ${e}`);const s={id:this.generateOperationId(),type:e,options:t,status:"initializing",startTime:Date.now(),endTime:null,progress:{current:0,total:0,percentage:0,message:"Initializing..."},result:null,error:null};this.currentOperation=s,this.isOperationRunning=!0,await this.runPreChecks(s),await this.validateOperation(s);const i=await this.executeOperation(s);return await this.runPostChecks(s),s.status="completed",s.endTime=Date.now(),s.result=i,this.logger.info("Operation completed successfully",{type:e,duration:s.endTime-s.startTime}),i}catch(s){throw this.logger.error("Operation failed",{type:e,error:s.message}),this.currentOperation&&(this.currentOperation.status="failed",this.currentOperation.endTime=Date.now(),this.currentOperation.error=s.message),s}finally{this.finalizeOperation()}}async executeOperation(e){const{type:t,options:s}=e;switch(this.logger.debug("Executing operation",{type:t}),t){case this.operationTypes.IMPORT:return await this.executeImport(e);case this.operationTypes.EXPORT:return await this.executeExport(e);case this.operationTypes.DELETE:return await this.executeDelete(e);case this.operationTypes.MODIFY:return await this.executeModify(e);default:throw new Error(`Unknown operation type: ${t}`)}}async executeImport(e){const{options:t}=e;this.logger.info("Executing import operation",{options:t}),this.updateOperationProgress(e,0,100,"Starting import...");const s={file:t.file,populationId:t.populationId,populationName:t.populationName,skipDuplicates:t.skipDuplicates||!1,updateExisting:t.updateExisting||!1},i=await this.apiClient.post("/api/import",s);if(!i.success)throw new Error(i.error||"Import failed");return await this.trackOperationProgress(e,i.sessionId),{success:!0,sessionId:i.sessionId,message:"Import completed successfully"}}async executeExport(e){const{options:t}=e;this.logger.info("Executing export operation",{options:t}),this.updateOperationProgress(e,0,100,"Starting export...");const s={populationId:t.populationId,populationName:t.populationName,includeDisabled:t.includeDisabled||!1,format:t.format||"csv"},i=await this.apiClient.post("/api/export",s);if(!i.success)throw new Error(i.error||"Export failed");return await this.trackOperationProgress(e,i.sessionId),{success:!0,sessionId:i.sessionId,downloadUrl:i.downloadUrl,message:"Export completed successfully"}}async executeDelete(e){const{options:t}=e;this.logger.info("Executing delete operation",{options:t}),this.updateOperationProgress(e,0,100,"Starting delete...");const s={file:t.file,populationId:t.populationId,populationName:t.populationName,confirmDelete:!0},i=await this.apiClient.post("/api/delete",s);if(!i.success)throw new Error(i.error||"Delete failed");return await this.trackOperationProgress(e,i.sessionId),{success:!0,sessionId:i.sessionId,message:"Delete completed successfully"}}async executeModify(e){const{options:t}=e;this.logger.info("Executing modify operation",{options:t}),this.updateOperationProgress(e,0,100,"Starting modify...");const s={file:t.file,populationId:t.populationId,populationName:t.populationName,updateFields:t.updateFields||[]},i=await this.apiClient.post("/api/modify",s);if(!i.success)throw new Error(i.error||"Modify failed");return await this.trackOperationProgress(e,i.sessionId),{success:!0,sessionId:i.sessionId,message:"Modify completed successfully"}}async trackOperationProgress(e,t){return new Promise((s,i)=>{typeof EventSource<"u"?this.trackProgressViaSSE(e,t,s,i):this.trackProgressViaPolling(e,t,s,i)})}trackProgressViaSSE(e,t,s,i){const n=new EventSource(`/api/progress/${t}`);n.onmessage=o=>{try{const a=JSON.parse(o.data);this.handleProgressUpdate(e,a),a.status==="completed"?(n.close(),s(a)):a.status==="failed"&&(n.close(),i(new Error(a.error||"Operation failed")))}catch(a){this.logger.error("Error parsing SSE data",{error:a.message})}},n.onerror=o=>{this.logger.error("SSE connection error",{error:o}),n.close(),this.trackProgressViaPolling(e,t,s,i)}}async trackProgressViaPolling(e,t,s,i){const o=async()=>{try{const a=await this.apiClient.get(`/api/progress/${t}`);a.success?(this.handleProgressUpdate(e,a.data),a.data.status==="completed"?s(a.data):a.data.status==="failed"?i(new Error(a.data.error||"Operation failed")):setTimeout(o,1e3)):i(new Error(a.error||"Failed to get progress"))}catch(a){i(a)}};o()}handleProgressUpdate(e,t){e.progress={current:t.current||0,total:t.total||0,percentage:t.percentage||0,message:t.message||"Processing..."},this.uiManager&&this.uiManager.updateProgress(e.progress.current,e.progress.total,e.progress.message),this.logger.debug("Progress updated",{type:e.type,progress:e.progress})}updateOperationProgress(e,t,s,i){const n=s>0?Math.round(t/s*100):0;e.progress={current:t,total:s,percentage:n,message:i},this.uiManager&&this.uiManager.updateProgress(t,s,i),this.logger.debug("Operation progress updated",{type:e.type,progress:e.progress})}async runPreChecks(e){const t=this.preChecks.get(e.type);t&&(this.logger.debug("Running pre-checks",{type:e.type}),await t(e))}async validateOperation(e){const t=this.validators.get(e.type);t&&(this.logger.debug("Validating operation",{type:e.type}),await t(e))}async runPostChecks(e){const t=this.postChecks.get(e.type);t&&(this.logger.debug("Running post-checks",{type:e.type}),await t(e))}finalizeOperation(){this.currentOperation&&(this.operationHistory.push({...this.currentOperation}),this.operationHistory.length>100&&(this.operationHistory=this.operationHistory.slice(-100)),this.currentOperation=null),this.isOperationRunning=!1,this.logger.debug("Operation finalized")}registerDefaultValidators(){this.validators.set(this.operationTypes.IMPORT,async e=>{const{options:t}=e;if(!t.file)throw new Error("No file selected for import");if(!t.populationId)throw new Error("No population selected for import")}),this.validators.set(this.operationTypes.EXPORT,async e=>{const{options:t}=e;if(!t.populationId)throw new Error("No population selected for export")}),this.validators.set(this.operationTypes.DELETE,async e=>{const{options:t}=e;if(!t.file)throw new Error("No file selected for delete");if(!t.populationId)throw new Error("No population selected for delete")}),this.validators.set(this.operationTypes.MODIFY,async e=>{const{options:t}=e;if(!t.file)throw new Error("No file selected for modify");if(!t.populationId)throw new Error("No population selected for modify")})}registerDefaultPreChecks(){const e=async t=>{if(window.app&&typeof window.app.checkTokenAndRedirect=="function"&&!await window.app.checkTokenAndRedirect(t.type))throw new Error("Invalid or expired token")};Object.values(this.operationTypes).forEach(t=>{this.preChecks.set(t,e)})}registerDefaultPostChecks(){const e=async t=>{this.logger.info("Operation completed",{type:t.type,duration:t.endTime-t.startTime,status:t.status})};Object.values(this.operationTypes).forEach(t=>{this.postChecks.set(t,e)})}generateOperationId(){return`op_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async cancelOperation(){if(this.currentOperation&&this.isOperationRunning){this.logger.info("Cancelling operation",{type:this.currentOperation.type});try{this.currentOperation.sessionId&&await this.apiClient.post(`/api/cancel/${this.currentOperation.sessionId}`),this.currentOperation.status="cancelled",this.currentOperation.endTime=Date.now(),this.logger.info("Operation cancelled successfully")}catch(e){this.logger.error("Failed to cancel operation",{error:e.message})}finally{this.finalizeOperation()}}}getCurrentOperation(){return this.currentOperation?{...this.currentOperation}:null}getOperationHistory(){return[...this.operationHistory]}isRunning(){return this.isOperationRunning}getOperationStats(){const e={total:this.operationHistory.length,byType:{},byStatus:{},averageDuration:0};let t=0;return this.operationHistory.forEach(s=>{e.byType[s.type]||(e.byType[s.type]=0),e.byType[s.type]++,e.byStatus[s.status]||(e.byStatus[s.status]=0),e.byStatus[s.status]++,s.endTime&&s.startTime&&(t+=s.endTime-s.startTime)}),this.operationHistory.length>0&&(e.averageDuration=Math.round(t/this.operationHistory.length)),e}}class lt{constructor(e,t,s){this.logger=e||O({serviceName:"navigation-subsystem",environment:"development"}),this.uiManager=t,this.settingsManager=s,this.currentView="home",this.previousView=null,this.navigationHistory=[],this.viewInitializers=new Map,this.viewCleanupHandlers=new Map,this.navItems=null,this.viewContainers=null,this.logger.info("Navigation subsystem initialized")}async init(){try{this.logger.info("Initializing navigation subsystem..."),this.navItems=document.querySelectorAll("[data-view]"),this.viewContainers=document.querySelectorAll('.view-container, [id$="-view"]'),this.logger.info("Navigation elements found",{navItems:this.navItems.length,viewContainers:this.viewContainers.length}),this.setupNavigationListeners(),this.registerDefaultViewInitializers(),await this.showView(this.currentView),this.logger.info("Navigation subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize navigation subsystem",{error:e.message}),e}}setupNavigationListeners(){this.navItems.forEach(e=>{e.addEventListener("click",async t=>{t.preventDefault();const s=e.getAttribute("data-view");this.logger.debug("Navigation item clicked",{view:s}),s&&s!==this.currentView&&await this.navigateToView(s)})}),window.addEventListener("popstate",e=>{e.state&&e.state.view&&this.showView(e.state.view,!1)}),this.logger.debug("Navigation listeners set up")}async navigateToView(e,t={}){try{if(this.logger.info("Navigating to view",{from:this.currentView,to:e}),!this.isValidView(e))return this.logger.warn("Invalid view requested",{view:e}),!1;if(t.force!==!0&&!await this.canNavigateFrom(this.currentView))return this.logger.info("Navigation blocked by current view",{currentView:this.currentView}),!1;const s=await this.showView(e,t.pushToHistory!==!1);return s&&this.logger.info("Navigation completed successfully",{view:e}),s}catch(s){return this.logger.error("Navigation failed",{view:e,error:s.message}),!1}}async showView(e,t=!0){try{if(this.logger.debug("Showing view",{view:e,pushToHistory:t}),this.previousView=this.currentView,this.previousView&&this.viewCleanupHandlers.has(this.previousView))try{await this.viewCleanupHandlers.get(this.previousView)(),this.logger.debug("View cleanup completed",{view:this.previousView})}catch(i){this.logger.warn("View cleanup failed",{view:this.previousView,error:i.message})}this.hideAllViews();const s=document.getElementById(`${e}-view`);if(s)s.style.display="block",s.classList.add("active");else return this.logger.warn("View element not found",{view:e}),!1;if(this.updateNavigationState(e),this.viewInitializers.has(e))try{await this.viewInitializers.get(e)(),this.logger.debug("View initializer completed",{view:e})}catch(i){this.logger.warn("View initializer failed",{view:e,error:i.message})}if(t&&window.history){const i=new URL(window.location);i.searchParams.set("view",e),window.history.pushState({view:e},"",i)}return this.currentView=e,this.navigationHistory.push({view:e,timestamp:Date.now(),from:this.previousView}),this.navigationHistory.length>50&&(this.navigationHistory=this.navigationHistory.slice(-50)),this.logger.info("View shown successfully",{view:e}),!0}catch(s){return this.logger.error("Failed to show view",{view:e,error:s.message}),!1}}hideAllViews(){this.viewContainers.forEach(e=>{e.style.display="none",e.classList.remove("active")}),this.logger.debug("All views hidden")}updateNavigationState(e){this.navItems.forEach(t=>{t.classList.remove("active"),t.getAttribute("data-view")===e&&t.classList.add("active")}),this.updatePageTitle(e),this.logger.debug("Navigation state updated",{view:e})}updatePageTitle(e){const t={import:"Import Users",export:"Export Users",modify:"Modify Users","delete-csv":"Delete Users",settings:"Settings",logs:"Logs",history:"History"},s="PingOne User Import v6.5.1.1",i=t[e];i?document.title=`${i} - ${s} v6.5.1.2`:document.title=s}registerViewInitializer(e,t){this.viewInitializers.set(e,t),this.logger.debug("View initializer registered",{view:e})}registerViewCleanup(e,t){this.viewCleanupHandlers.set(e,t),this.logger.debug("View cleanup handler registered",{view:e})}registerDefaultViewInitializers(){this.registerViewInitializer("import",async()=>{typeof window.app?.loadPopulations=="function"&&await window.app.loadPopulations("import-population-select")}),this.registerViewInitializer("export",async()=>{window.exportManager&&typeof window.exportManager.loadPopulations=="function"&&await window.exportManager.loadPopulations()}),this.registerViewInitializer("delete-csv",async()=>{window.deleteManager&&typeof window.deleteManager.loadPopulations=="function"&&await window.deleteManager.loadPopulations()}),this.registerViewInitializer("modify",async()=>{typeof window.app?.loadPopulations=="function"&&await window.app.loadPopulations("modify-population-select")}),this.registerViewInitializer("logs",async()=>{window.logManager&&typeof window.logManager.loadLogs=="function"&&window.logManager.loadLogs()}),this.registerViewInitializer("history",async()=>{window.logManager&&typeof window.logManager.loadLogs=="function"&&window.logManager.loadLogs()}),this.logger.debug("Default view initializers registered")}isValidView(e){return["home","import","export","modify","delete-csv","settings","logs","history","analytics"].includes(e)}async canNavigateFrom(e){return e==="import"&&window.app?.isImportRunning?confirm("Import is currently running. Are you sure you want to leave this page?"):e==="export"&&window.exportManager?.isExportRunning?confirm("Export is currently running. Are you sure you want to leave this page?"):e==="delete-csv"&&window.deleteManager?.isDeleteRunning?confirm("Delete operation is currently running. Are you sure you want to leave this page?"):e==="settings"&&this.settingsManager?.hasUnsavedChanges?.()?confirm("You have unsaved settings. Are you sure you want to leave without saving?"):!0}getCurrentView(){return this.currentView}getPreviousView(){return this.previousView}getNavigationHistory(){return[...this.navigationHistory]}async goBack(){if(this.previousView)await this.navigateToView(this.previousView);else if(this.navigationHistory.length>1){const e=this.navigationHistory[this.navigationHistory.length-2];await this.navigateToView(e.view)}}async refreshCurrentView(){await this.showView(this.currentView,!1)}getViewStats(){const e={};return this.navigationHistory.forEach(t=>{e[t.view]||(e[t.view]={count:0,lastVisited:null}),e[t.view].count++,e[t.view].lastVisited=t.timestamp}),e}cleanup(){this.navItems.forEach(e=>{e.removeEventListener("click",this.handleNavClick)}),window.removeEventListener("popstate",this.handlePopState),this.viewInitializers.clear(),this.viewCleanupHandlers.clear(),this.navigationHistory=[],this.logger.info("Navigation subsystem cleaned up")}}class ct{constructor(e,t,s,i){this.logger=e||O({serviceName:"connection-manager-subsystem",environment:"development"}),this.uiManager=t,this.settingsManager=s,this.apiClient=i,this.connectionStatus="disconnected",this.lastConnectionTest=null,this.tokenInfo={token:null,expiresAt:null,isValid:!1},this.healthCheckInterval=null,this.tokenRefreshInterval=null,this.connectionRetryCount=0,this.maxRetryAttempts=3,this.eventListeners=new Map,this.logger.info("Connection Manager subsystem initialized")}async init(){try{this.logger.info("Initializing connection manager subsystem..."),await this.loadExistingToken(),this.startConnectionMonitoring(),this.setupTokenRefresh(),this.logger.info("Connection Manager subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize connection manager subsystem",{error:e.message}),e}}async testConnection(e=null){try{this.logger.info("Testing PingOne connection..."),this.uiManager&&this.uiManager.updateConnectionStatus("testing","Testing connection...");const t=e||await this.getCredentials();if(!t)throw new Error("No credentials available for connection test");this.validateCredentials(t);const s=await this.acquireToken(t);if(s.success)return this.connectionStatus="connected",this.lastConnectionTest={timestamp:Date.now(),success:!0,credentials:{clientId:t.clientId,environmentId:t.environmentId,region:t.region}},this.uiManager&&this.uiManager.updateConnectionStatus("success","Connection successful"),this.logger.info("Connection test successful"),this.emit("connectionSuccess",this.lastConnectionTest),{success:!0,message:"Connection successful",token:s.token,expiresIn:s.expiresIn};throw new Error(s.error||"Failed to acquire token")}catch(t){return this.logger.error("Connection test failed",{error:t.message}),this.connectionStatus="disconnected",this.lastConnectionTest={timestamp:Date.now(),success:!1,error:t.message},this.uiManager&&this.uiManager.updateConnectionStatus("error",`Connection failed: ${t.message}`),this.emit("connectionFailure",{error:t.message}),{success:!1,error:t.message}}}async acquireToken(e=null){try{this.logger.info("Acquiring PingOne token...");const t=e||await this.getCredentials();if(!t)throw new Error("No credentials available for token acquisition");this.validateCredentials(t);const s=await this.apiClient.post("/api/auth/token",{clientId:t.clientId,clientSecret:t.clientSecret,environmentId:t.environmentId,region:t.region});if(s.success&&s.token)return this.tokenInfo={token:s.token,expiresAt:Date.now()+s.expiresIn*1e3,isValid:!0,acquiredAt:Date.now()},this.connectionStatus="connected",this.uiManager&&this.uiManager.updateTokenStatus(!0,"Token acquired successfully"),this.logger.info("Token acquired successfully",{expiresIn:s.expiresIn}),this.emit("tokenAcquired",{token:s.token,expiresIn:s.expiresIn}),{success:!0,token:s.token,expiresIn:s.expiresIn};throw new Error(s.error||"Failed to acquire token")}catch(t){return this.logger.error("Token acquisition failed",{error:t.message}),this.tokenInfo={token:null,expiresAt:null,isValid:!1},this.connectionStatus="disconnected",this.uiManager&&this.uiManager.updateTokenStatus(!1,`Token acquisition failed: ${t.message}`),this.emit("tokenAcquisitionFailure",{error:t.message}),{success:!1,error:t.message}}}async validateToken(){try{if(!this.tokenInfo.token)return this.logger.debug("No token to validate"),!1;if(this.tokenInfo.expiresAt&&Date.now()>=this.tokenInfo.expiresAt)return this.logger.info("Token has expired"),this.tokenInfo.isValid=!1,!1;const t=(await this.apiClient.get("/api/auth/validate",{headers:{Authorization:`Bearer ${this.tokenInfo.token}`}})).success;return this.tokenInfo.isValid=t,t?(this.logger.debug("Token validation successful"),this.connectionStatus="connected"):(this.logger.info("Token validation failed"),this.connectionStatus="disconnected"),t}catch(e){return this.logger.error("Token validation error",{error:e.message}),this.tokenInfo.isValid=!1,this.connectionStatus="disconnected",!1}}async refreshToken(){try{this.logger.info("Refreshing token...");const e=await this.getCredentials();if(!e)throw new Error("No credentials available for token refresh");const t=await this.acquireToken(e);return t.success&&(this.logger.info("Token refreshed successfully"),this.emit("tokenRefreshed",{token:t.token,expiresIn:t.expiresIn})),t}catch(e){return this.logger.error("Token refresh failed",{error:e.message}),this.emit("tokenRefreshFailure",{error:e.message}),{success:!1,error:e.message}}}async getCredentials(){try{if(window.credentialsManager){const e=window.credentialsManager.getCredentials();if(e&&this.isValidCredentialSet(e))return e}if(this.settingsManager){await this.settingsManager.loadCurrentSettings();const e=this.settingsManager.currentSettings;if(e&&this.isValidCredentialSet(e))return{clientId:e.clientId,clientSecret:e.clientSecret,environmentId:e.environmentId,region:e.region}}return null}catch(e){return this.logger.error("Failed to get credentials",{error:e.message}),null}}validateCredentials(e){const s=["clientId","clientSecret","environmentId"].filter(i=>!e[i]);if(s.length>0)throw new Error(`Missing required credentials: ${s.join(", ")}`);if(!/^[a-f0-9-]{36}$/.test(e.clientId))throw new Error("Invalid client ID format");if(!/^[a-f0-9-]{36}$/.test(e.environmentId))throw new Error("Invalid environment ID format");if(e.clientSecret.length<10)throw new Error("Client secret appears to be invalid")}isValidCredentialSet(e){try{return this.validateCredentials(e),!0}catch{return!1}}async loadExistingToken(){try{if(window.globalTokenManager&&typeof window.globalTokenManager.getCachedToken=="function"){const e=window.globalTokenManager.getCachedToken();e&&(this.tokenInfo={token:e.token,expiresAt:e.expiresAt,isValid:e.isValid,acquiredAt:e.acquiredAt},await this.validateToken()?(this.connectionStatus="connected",this.logger.info("Existing token loaded and validated")):this.logger.info("Existing token loaded but invalid"))}}catch(e){this.logger.error("Failed to load existing token",{error:e.message})}}startConnectionMonitoring(){this.healthCheckInterval=setInterval(async()=>{this.connectionStatus==="connected"&&(await this.validateToken()||(this.logger.info("Connection lost during health check"),this.emit("connectionLost")))},300*1e3),this.logger.debug("Connection monitoring started")}setupTokenRefresh(){this.tokenRefreshInterval=setInterval(async()=>{if(this.tokenInfo.token&&this.tokenInfo.expiresAt){const e=this.tokenInfo.expiresAt-Date.now(),t=300*1e3;e<=t&&e>0&&(this.logger.info("Token expiring soon, attempting refresh..."),await this.refreshToken())}},60*1e3),this.logger.debug("Automatic token refresh setup")}getConnectionStatus(){return this.connectionStatus}getTokenInfo(){return{hasToken:!!this.tokenInfo.token,isValid:this.tokenInfo.isValid,expiresAt:this.tokenInfo.expiresAt,timeUntilExpiry:this.tokenInfo.expiresAt?this.tokenInfo.expiresAt-Date.now():null}}getLastConnectionTest(){return this.lastConnectionTest}isConnected(){return this.connectionStatus==="connected"&&this.tokenInfo.isValid}hasValidToken(){return this.tokenInfo.isValid&&this.tokenInfo.token&&this.tokenInfo.expiresAt&&Date.now()<this.tokenInfo.expiresAt}disconnect(){this.logger.info("Disconnecting..."),this.tokenInfo={token:null,expiresAt:null,isValid:!1},this.connectionStatus="disconnected",this.uiManager&&(this.uiManager.updateConnectionStatus("disconnected","Disconnected"),this.uiManager.updateTokenStatus(!1,"No token")),this.emit("disconnected"),this.logger.info("Disconnected successfully")}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}off(e,t){if(this.eventListeners.has(e)){const s=this.eventListeners.get(e),i=s.indexOf(t);i>-1&&s.splice(i,1)}}emit(e,t=null){this.eventListeners.has(e)&&this.eventListeners.get(e).forEach(s=>{try{s(t)}catch(i){this.logger.error("Event listener error",{event:e,error:i.message})}})}getConnectionStats(){return{status:this.connectionStatus,hasToken:!!this.tokenInfo.token,tokenValid:this.tokenInfo.isValid,tokenExpiresAt:this.tokenInfo.expiresAt,lastConnectionTest:this.lastConnectionTest,retryCount:this.connectionRetryCount}}cleanup(){this.healthCheckInterval&&(clearInterval(this.healthCheckInterval),this.healthCheckInterval=null),this.tokenRefreshInterval&&(clearInterval(this.tokenRefreshInterval),this.tokenRefreshInterval=null),this.eventListeners.clear(),this.disconnect(),this.logger.info("Connection Manager subsystem cleaned up")}}class dt{constructor(e,t){this.logger=e,this.uiManager=t,this.socket=null,this.eventSource=null,this.fallbackPolling=null,this.connectionType=null,this.isConnected=!1,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=1e3,this.eventHandlers=new Map,this.logger.info("Real-time Communication Subsystem initialized")}async init(){try{this.setupConnectionMonitoring(),this.logger.info("Real-time Communication Subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize Real-time Communication Subsystem",e),e}}async establishConnection(e,t={}){const{preferredTransport:s="socketio",enableFallback:i=!0,timeout:n=1e4}=t;this.logger.info("Establishing real-time connection",{sessionId:e,preferredTransport:s,enableFallback:i});try{s==="socketio"?await this.connectSocketIO(e,n):s==="sse"?await this.connectSSE(e,n):s==="websocket"&&await this.connectWebSocket(e,n)}catch(o){if(this.logger.warn("Primary transport failed",{error:o.message}),i)await this.tryFallbackConnections(e);else throw o}}async connectSocketIO(e,t=1e4){return new Promise(async(s,i)=>{try{const{io:n}=await We(async()=>{const{io:a}=await Promise.resolve().then(()=>ms);return{io:a}},void 0);this.socket=n({transports:["polling"],reconnectionAttempts:this.maxReconnectAttempts,reconnectionDelay:this.reconnectDelay,timeout:t,forceNew:!0,autoConnect:!0});const o=setTimeout(()=>{i(new Error("Socket.IO connection timeout"))},t);this.socket.on("connect",()=>{clearTimeout(o),this.connectionType="socketio",this.isConnected=!0,this.reconnectAttempts=0,this.setupSocketIOHandlers(),this.socket.emit("registerSession",e),this.logger.info("Socket.IO connected successfully"),this.uiManager.showSuccess("Real-time connection established (Socket.IO)"),s()}),this.socket.on("connect_error",a=>{clearTimeout(o),this.logger.error("Socket.IO connection error",a),i(a)}),this.setupSocketIOHandlers()}catch(n){this.logger.error("Failed to initialize Socket.IO",n),i(n)}})}async connectSSE(e,t=1e4){return new Promise((s,i)=>{try{const n=`/api/progress/stream/${e}`;this.eventSource=new EventSource(n);const o=setTimeout(()=>{i(new Error("SSE connection timeout"))},t);this.eventSource.onopen=()=>{clearTimeout(o),this.connectionType="sse",this.isConnected=!0,this.reconnectAttempts=0,this.logger.info("SSE connected successfully"),this.uiManager.showSuccess("Real-time connection established (SSE)"),s()},this.eventSource.onerror=a=>{clearTimeout(o),this.logger.error("SSE connection error",a),i(a)},this.setupSSEHandlers()}catch(n){this.logger.error("Failed to initialize SSE",n),i(n)}})}async connectWebSocket(e,t=1e4){return new Promise((s,i)=>{try{const n=`ws://${window.location.host}/ws/${e}`;this.websocket=new WebSocket(n);const o=setTimeout(()=>{i(new Error("WebSocket connection timeout"))},t);this.websocket.onopen=()=>{clearTimeout(o),this.connectionType="websocket",this.isConnected=!0,this.reconnectAttempts=0,this.logger.info("WebSocket connected successfully"),this.uiManager.showSuccess("Real-time connection established (WebSocket)"),s()},this.websocket.onerror=a=>{clearTimeout(o),this.logger.error("WebSocket connection error",a),i(a)},this.setupWebSocketHandlers()}catch(n){this.logger.error("Failed to initialize WebSocket",n),i(n)}})}async tryFallbackConnections(e){const t=["sse","websocket","polling"];for(const s of t)if(s!==this.connectionType)try{this.logger.info(`Trying fallback transport: ${s}`),s==="sse"?await this.connectSSE(e):s==="websocket"?await this.connectWebSocket(e):s==="polling"&&await this.setupFallbackPolling(e);return}catch(i){this.logger.warn(`Fallback transport ${s} failed`,i)}throw new Error("All connection methods failed")}setupSocketIOHandlers(){this.socket.on("progress",e=>{this.handleProgressEvent(e)}),this.socket.on("completion",e=>{this.handleCompletionEvent(e)}),this.socket.on("error",e=>{this.handleErrorEvent(e)}),this.socket.on("disconnect",e=>{this.handleDisconnection(e)}),this.socket.on("reconnect",()=>{this.handleReconnection()})}setupSSEHandlers(){this.eventSource.addEventListener("progress",e=>{const t=JSON.parse(e.data);this.handleProgressEvent(t)}),this.eventSource.addEventListener("completion",e=>{const t=JSON.parse(e.data);this.handleCompletionEvent(t)}),this.eventSource.addEventListener("error",e=>{const t=JSON.parse(e.data);this.handleErrorEvent(t)})}setupWebSocketHandlers(){this.websocket.onmessage=e=>{try{const t=JSON.parse(e.data);switch(t.type){case"progress":this.handleProgressEvent(t.data);break;case"completion":this.handleCompletionEvent(t.data);break;case"error":this.handleErrorEvent(t.data);break}}catch(t){this.logger.error("Failed to parse WebSocket message",t)}},this.websocket.onclose=()=>{this.handleDisconnection("WebSocket closed")}}async setupFallbackPolling(e){this.connectionType="polling",this.isConnected=!0,this.fallbackPolling=setInterval(async()=>{try{const s=await(await fetch(`/api/progress/poll/${e}`)).json();s.events&&s.events.length>0&&s.events.forEach(i=>{switch(i.type){case"progress":this.handleProgressEvent(i.data);break;case"completion":this.handleCompletionEvent(i.data);break;case"error":this.handleErrorEvent(i.data);break}})}catch(t){this.logger.error("Polling request failed",t)}},2e3),this.logger.info("Fallback polling established"),this.uiManager.showInfo("Using polling for updates (limited real-time capability)")}handleProgressEvent(e){this.logger.info("Progress event received",e),this.triggerEvent("progress",e)}handleCompletionEvent(e){this.logger.info("Completion event received",e),this.triggerEvent("completion",e),this.disconnect()}handleErrorEvent(e){this.logger.error("Error event received",e),this.triggerEvent("error",e)}handleDisconnection(e){this.isConnected=!1,this.logger.warn("Connection lost",{reason:e,type:this.connectionType}),this.uiManager.showWarning("Real-time connection lost"),this.attemptReconnection()}handleReconnection(){this.isConnected=!0,this.reconnectAttempts=0,this.logger.info("Connection restored"),this.uiManager.showSuccess("Real-time connection restored")}async attemptReconnection(){if(this.reconnectAttempts>=this.maxReconnectAttempts){this.logger.error("Max reconnection attempts reached"),this.uiManager.showError("Connection Lost","Unable to restore real-time connection");return}this.reconnectAttempts++;const e=this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1);this.logger.info("Attempting reconnection",{attempt:this.reconnectAttempts,delay:e}),setTimeout(async()=>{try{this.connectionType==="socketio"&&this.socket&&this.socket.connect()}catch(t){this.logger.error("Reconnection failed",t),this.attemptReconnection()}},e)}setupConnectionMonitoring(){setInterval(()=>{this.isConnected&&this.checkConnectionHealth()},3e4)}checkConnectionHealth(){this.connectionType==="socketio"&&this.socket?this.socket.connected||this.handleDisconnection("Health check failed"):this.connectionType==="sse"&&this.eventSource?this.eventSource.readyState===EventSource.CLOSED&&this.handleDisconnection("SSE connection closed"):this.connectionType==="websocket"&&this.websocket&&this.websocket.readyState===WebSocket.CLOSED&&this.handleDisconnection("WebSocket connection closed")}on(e,t){this.eventHandlers.has(e)||this.eventHandlers.set(e,[]),this.eventHandlers.get(e).push(t)}off(e,t){if(this.eventHandlers.has(e)){const s=this.eventHandlers.get(e),i=s.indexOf(t);i>-1&&s.splice(i,1)}}triggerEvent(e,t){this.eventHandlers.has(e)&&this.eventHandlers.get(e).forEach(s=>{try{s(t)}catch(i){this.logger.error("Event handler error",{event:e,error:i.message})}})}disconnect(){this.isConnected=!1,this.socket&&(this.socket.disconnect(),this.socket=null),this.eventSource&&(this.eventSource.close(),this.eventSource=null),this.websocket&&(this.websocket.close(),this.websocket=null),this.fallbackPolling&&(clearInterval(this.fallbackPolling),this.fallbackPolling=null),this.connectionType=null,this.logger.info("All real-time connections closed")}getConnectionStatus(){return{isConnected:this.isConnected,connectionType:this.connectionType,reconnectAttempts:this.reconnectAttempts}}}class ht{constructor(e,t,s,i){this.logger=e,this.uiManager=t,this.localClient=s,this.settingsSubsystem=i,this.isAuthenticated=!1,this.tokenStatus=null,this.tokenExpiry=null,this.refreshTimer=null,this.logger.info("Authentication Management Subsystem initialized")}async init(){try{this.setupEventListeners(),await this.checkInitialTokenStatus(),this.setupTokenRefreshTimer(),this.logger.info("Authentication Management Subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize Authentication Management Subsystem",e),e}}setupEventListeners(){const e=document.getElementById("get-token-btn");e&&e.addEventListener("click",async n=>{n.preventDefault(),await this.getToken()});const t=document.getElementById("test-connection-btn");t&&t.addEventListener("click",async n=>{n.preventDefault(),await this.testConnection()});const s=document.getElementById("global-refresh-token");s&&s.addEventListener("click",async n=>{n.preventDefault(),await this.refreshToken()});const i=document.getElementById("settings-form");i&&i.addEventListener("submit",async n=>{n.preventDefault(),await this.handleSettingsSubmit(n)})}async getToken(){try{this.logger.info("Getting new authentication token"),this.showTokenProgress("Getting token..."),await this.settingsSubsystem.loadCurrentSettings();const e=this.settingsSubsystem.currentSettings;if(!this.validateSettings(e))throw new Error("Invalid settings - please check your configuration");const t=await this.localClient.post("/api/v1/auth/token",{clientId:e.clientId,clientSecret:e.clientSecret,environmentId:e.environmentId,region:e.region});if(!t.success)throw new Error(t.error||"Failed to get token");this.tokenStatus=t.token,this.tokenExpiry=t.expiry,this.isAuthenticated=!0,this.updateTokenStatusUI(!0,"Token obtained successfully"),this.uiManager.showSuccess("Authentication successful"),this.setupTokenRefreshTimer(),this.logger.info("Token obtained successfully")}catch(e){this.logger.error("Failed to get token",e),this.updateTokenStatusUI(!1,e.message),this.uiManager.showError("Authentication Failed",e.message)}finally{this.hideTokenProgress()}}async testConnection(){try{this.logger.info("Testing connection"),this.showConnectionProgress("Testing connection..."),await this.settingsSubsystem.loadCurrentSettings();const e=this.settingsSubsystem.currentSettings;if(!this.validateSettings(e))throw new Error("Invalid settings - please check your configuration");const t=await this.localClient.get("/api/pingone/test-connection");if(!t.success)throw new Error(t.error||"Connection test failed");this.updateConnectionStatusUI(!0,"Connection successful"),this.uiManager.showSuccess("Connection test successful"),this.logger.info("Connection test successful")}catch(e){this.logger.error("Connection test failed",e),this.updateConnectionStatusUI(!1,e.message),this.uiManager.showError("Connection Test Failed",e.message)}finally{this.hideConnectionProgress()}}async refreshToken(){try{this.logger.info("Refreshing authentication token"),this.showTokenProgress("Refreshing token...");const e=await this.localClient.post("/api/v1/auth/refresh");if(!e.success)throw new Error(e.error||"Failed to refresh token");this.tokenStatus=e.token,this.tokenExpiry=e.expiry,this.isAuthenticated=!0,this.updateTokenStatusUI(!0,"Token refreshed successfully"),this.uiManager.showSuccess("Token refreshed successfully"),this.setupTokenRefreshTimer(),this.logger.info("Token refreshed successfully")}catch(e){this.logger.error("Failed to refresh token",e),this.updateTokenStatusUI(!1,e.message),this.uiManager.showError("Token Refresh Failed",e.message),this.clearAuthenticationState()}finally{this.hideTokenProgress()}}async handleSettingsSubmit(e){try{const t=new FormData(e.target),s=Object.fromEntries(t.entries());if(this.logger.info("Saving settings"),!this.validateSettings(s))throw new Error("Invalid settings - please check all required fields");await this.settingsManager.saveSettings(s),this.clearAuthenticationState(),this.uiManager.updateSettingsSaveStatus("Settings saved successfully","success"),this.logger.info("Settings saved successfully")}catch(t){this.logger.error("Failed to save settings",t),this.uiManager.updateSettingsSaveStatus(`Settings Save Failed: ${t.message}`,"error")}}async checkInitialTokenStatus(){try{this.logger.debug("🔍 [STARTUP] Checking initial token status...");const e=await this.localClient.get("/api/v1/auth/status");e.success&&e.isValid?(this.tokenStatus=e.status,this.tokenExpiry=e.expiresIn,this.isAuthenticated=!0,this.updateTokenStatusUI(!0,`Token is ${e.status}`),this.logger.info("✅ [STARTUP] Valid token found, authentication ready")):e.success&&e.hasToken?(this.logger.warn("⚠️ [STARTUP] Token expired, attempting automatic refresh..."),this.tokenStatus=e.status,this.tokenExpiry=e.expiresIn,await this.attemptAutomaticTokenRefresh()?this.logger.info("✅ [STARTUP] Token automatically refreshed, authentication ready"):(this.logger.warn("❌ [STARTUP] Automatic token refresh failed, user intervention required"),this.isAuthenticated=!1,this.updateTokenStatusUI(!1,"Token expired - refresh required"))):(this.logger.warn("⚠️ [STARTUP] No token found, attempting automatic acquisition..."),await this.attemptAutomaticTokenRefresh()?this.logger.info("✅ [STARTUP] Token automatically acquired, authentication ready"):(this.logger.warn("❌ [STARTUP] No token available and automatic acquisition failed"),this.isAuthenticated=!1,this.updateTokenStatusUI(!1,e.status||"No valid token")))}catch(e){this.logger.error("❌ [STARTUP] Failed to check token status",e),this.isAuthenticated=!1,this.updateTokenStatusUI(!1,"Token status unknown")}}async attemptAutomaticTokenRefresh(){try{this.logger.debug("🔄 [STARTUP] Attempting automatic token acquisition..."),await this.settingsSubsystem.loadCurrentSettings();const e=this.settingsSubsystem.currentSettings;if(!this.validateSettings(e))return this.logger.debug("❌ [STARTUP] No valid credentials available for automatic token acquisition"),!1;this.logger.debug("✅ [STARTUP] Valid credentials found, attempting token acquisition...");const t=await this.localClient.post("/api/v1/auth/token",{clientId:e.clientId,clientSecret:e.clientSecret,environmentId:e.environmentId,region:e.region});return t.success&&t.token?(this.tokenStatus=t.token,this.tokenExpiry=t.expiry,this.isAuthenticated=!0,this.updateTokenStatusUI(!0,"Token obtained automatically"),this.setupTokenRefreshTimer(),this.logger.info("✅ [STARTUP] Automatic token acquisition successful"),!0):(this.logger.warn("❌ [STARTUP] Token acquisition failed:",t.error||"Unknown error"),!1)}catch(e){return this.logger.error("❌ [STARTUP] Error during automatic token acquisition:",e),!1}}setupTokenRefreshTimer(){if(this.refreshTimer&&clearTimeout(this.refreshTimer),!this.tokenExpiry)return;const t=new Date(this.tokenExpiry).getTime()-300*1e3,s=Date.now();if(t>s){const i=t-s;this.refreshTimer=setTimeout(()=>{this.refreshToken()},i),this.logger.info("Token refresh timer set",{refreshIn:Math.round(i/1e3/60),unit:"minutes"})}}validateSettings(e){const t=["clientId","clientSecret","environmentId","region"];for(const s of t)if(!e[s]||e[s].trim()==="")return this.logger.error("Missing required setting",{field:s}),!1;return!0}clearAuthenticationState(){this.isAuthenticated=!1,this.tokenStatus=null,this.tokenExpiry=null,this.refreshTimer&&(clearTimeout(this.refreshTimer),this.refreshTimer=null),this.updateTokenStatusUI(!1,"Authentication cleared")}updateTokenStatusUI(e,t){const s=document.getElementById("global-token-status");s&&(s.className=`token-status ${e?"valid":"invalid"}`,s.textContent=t);const i=document.getElementById("token-status-indicator");i&&(i.className=`token-indicator ${e?"valid":"invalid"}`);const n=document.getElementById("get-token-btn");n&&(n.style.display=e?"none":"inline-block");const o=document.getElementById("global-refresh-token");o&&(o.style.display=e?"inline-block":"none")}updateConnectionStatusUI(e,t){const s=document.getElementById("connection-status");s&&(s.className=`connection-status ${e?"connected":"disconnected"}`,s.textContent=t)}showTokenProgress(e){const t=document.getElementById("get-token-btn");t&&(t.disabled=!0,t.textContent=e)}hideTokenProgress(){const e=document.getElementById("get-token-btn");e&&(e.disabled=!1,e.textContent="Get Token")}showConnectionProgress(e){const t=document.getElementById("test-connection-btn");t&&(t.disabled=!0,t.textContent=e)}hideConnectionProgress(){const e=document.getElementById("test-connection-btn");e&&(e.disabled=!1,e.textContent="Test Connection")}getAuthenticationStatus(){return{isAuthenticated:this.isAuthenticated,tokenStatus:this.tokenStatus,tokenExpiry:this.tokenExpiry,timeUntilExpiry:this.tokenExpiry?Math.max(0,new Date(this.tokenExpiry).getTime()-Date.now()):0}}isTokenValid(){if(!this.isAuthenticated||!this.tokenExpiry)return!1;const e=Date.now();return new Date(this.tokenExpiry).getTime()>e}}class gt{constructor(e,t){this.logger=e,this.uiManager=t,this.currentView="home",this.previousView=null,this.viewHistory=[],this.viewInitializers=new Map,this.logger.info("View Management Subsystem initialized with default home view")}async init(){try{this.setupNavigationListeners(),this.registerViewInitializers(),await this.showInitialView(),this.logger.info("View Management Subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize View Management Subsystem",e),e}}setupNavigationListeners(){document.querySelectorAll("[data-view]").forEach(t=>{t.addEventListener("click",async s=>{s.preventDefault();const i=t.getAttribute("data-view");await this.showView(i)})}),window.addEventListener("popstate",t=>{t.state&&t.state.view&&this.showView(t.state.view,!1)}),document.addEventListener("keydown",t=>{(t.ctrlKey||t.metaKey)&&this.handleKeyboardNavigation(t)})}registerViewInitializers(){this.viewInitializers.set("import",async()=>{await this.initializeImportView()}),this.viewInitializers.set("export",async()=>{await this.initializeExportView()}),this.viewInitializers.set("modify",async()=>{await this.initializeModifyView()}),this.viewInitializers.set("delete-csv",async()=>{await this.initializeDeleteView()}),this.viewInitializers.set("settings",async()=>{await this.initializeSettingsView()}),this.viewInitializers.set("logs",async()=>{await this.initializeLogsView()}),this.viewInitializers.set("history",async()=>{await this.initializeHistoryView()}),this.viewInitializers.set("analytics",async()=>{await this.initializeAnalyticsView()})}async showView(e,t=!0){if(!(!e||e===this.currentView))try{if(this.logger.info("Switching to view",{from:this.currentView,to:e}),!this.isValidView(e)){this.uiManager&&typeof this.uiManager.showError=="function"&&this.uiManager.showError("Navigation Error",`Invalid view: ${e}`);return}this.previousView=this.currentView,this.hideCurrentView(),await this.displayView(e),this.updateNavigationState(e),t&&this.updateBrowserHistory(e),await this.initializeView(e),this.currentView=e,this.viewHistory.push(e),this.updatePageTitle(e),this.triggerViewChangeEvent(e,this.previousView)}catch(s){this.logger.error("Failed to switch view",{view:e,error:s.message}),this.uiManager&&typeof this.uiManager.showError=="function"&&this.uiManager.showError("Navigation Error",`Failed to switch to ${e} view: ${s.message}`)}}hideCurrentView(){const e=document.getElementById(`${this.currentView}-view`);e&&(e.style.display="none",e.classList.remove("active"))}async displayView(e){const t=document.getElementById(`${e}-view`);if(!t)throw new Error(`View element not found: ${e}-view`);t.style.display="block",t.classList.add("active"),t.style.opacity="0",t.style.transition="opacity 0.3s ease-in-out",requestAnimationFrame(()=>{t.style.opacity="1"})}updateNavigationState(e){document.querySelectorAll("[data-view]").forEach(s=>{s.getAttribute("data-view")===e?s.classList.add("active"):s.classList.remove("active")}),this.updatePageTitle(e)}updateBrowserHistory(e){const t={view:e,timestamp:Date.now()},s=this.getViewTitle(e),i=`#${e}`;history.pushState(t,s,i)}async initializeView(e){const t=this.viewInitializers.get(e);if(t)try{await t()}catch(s){this.logger.error("View initialization failed",{view:e,error:s.message})}}async initializeImportView(){window.app&&typeof window.app.loadPopulations=="function"&&await window.app.loadPopulations("import-population-select");const e=document.getElementById("csv-file");e&&(e.value=""),this.resetProgressDisplay()}async initializeExportView(){this.logger.debug("🔄 VIEW: Initializing export view..."),window.app&&window.app.subsystems&&window.app.subsystems.exportManager?(this.logger.debug("🔄 VIEW: Found export manager, loading populations..."),typeof window.app.subsystems.exportManager.loadPopulations=="function"?(await window.app.subsystems.exportManager.loadPopulations(),this.logger.info("🔄 VIEW: Export populations loaded successfully")):this.logger.error("🔄 VIEW: Export manager loadPopulations method not found")):this.logger.error("🔄 VIEW: Export manager not found in app subsystems",{hasApp:!!window.app,hasSubsystems:!!(window.app&&window.app.subsystems),availableSubsystems:window.app&&window.app.subsystems?Object.keys(window.app.subsystems):[]})}async initializeModifyView(){window.app&&typeof window.app.loadPopulations=="function"&&await window.app.loadPopulations("modify-population-select");const e=document.getElementById("modify-csv-file");e&&(e.value="")}async initializeDeleteView(){window.deleteManager&&typeof window.deleteManager.loadPopulations=="function"&&await window.deleteManager.loadPopulations()}async initializeSettingsView(){window.app&&typeof window.app.loadSettings=="function"&&await window.app.loadSettings()}async initializeLogsView(){window.logManager&&typeof window.logManager.loadLogs=="function"&&await window.logManager.loadLogs()}async initializeHistoryView(){try{this.app&&this.app.subsystems&&this.app.subsystems.history?(this.logger.debug("Initializing history view with HistorySubsystem"),document.getElementById("history-view")||this.logger.warn("History view container not found")):this.logger.warn("HistorySubsystem not available for history view initialization")}catch(e){this.logger.error("Failed to initialize history view:",e)}}async initializeAnalyticsView(){try{if(this.logger.debug("Initializing analytics view"),window.app&&window.app.analyticsDashboardUI){this.logger.debug("Analytics dashboard UI available, ensuring visibility");const e=document.getElementById("analytics-dashboard");e?(e.style.display="block",this.logger.debug("Analytics dashboard container made visible")):this.logger.warn("Analytics dashboard container not found")}else this.logger.warn("Analytics dashboard UI not available for analytics view initialization")}catch(e){this.logger.error("Failed to initialize analytics view:",e)}}async showInitialView(){let e="home";const t=window.location.hash.substring(1);t&&this.isValidView(t)&&(e=t),await this.showView(e,!1)}isValidView(e){return["home","import","export","modify","delete-csv","settings","logs","history","analytics"].includes(e)}getViewTitle(e){return{import:"Import Users",export:"Export Users",modify:"Modify Users","delete-csv":"Delete Users",settings:"Settings",logs:"Logs",history:"History",analytics:"Analytics Dashboard"}[e]||"PingOne Import Tool"}updatePageTitle(e){const t=this.getViewTitle(e);document.title=`${t} - PingOne Import Tool`}handleKeyboardNavigation(e){const s={1:"import",2:"export",3:"modify",4:"delete-csv",5:"settings",6:"logs",7:"history"}[e.key];s&&(e.preventDefault(),this.showView(s))}resetProgressDisplay(){this.uiManager&&typeof this.uiManager.hideProgress=="function"&&this.uiManager.hideProgress(),this.uiManager&&typeof this.uiManager.updateProgress=="function"&&this.uiManager.updateProgress(0,1,"")}triggerViewChangeEvent(e,t){const s=new CustomEvent("viewChanged",{detail:{newView:e,oldView:t,timestamp:Date.now()}});document.dispatchEvent(s)}async goBack(){this.previousView&&await this.showView(this.previousView)}getCurrentView(){return this.currentView}getViewHistory(){return[...this.viewHistory]}clearViewHistory(){this.viewHistory=[]}}class ut{constructor(e,t){this.logger=e||console,this.eventBus=t,this.isInitialized=!1,this.isDestroyed=!1,this.globalTokenTimer=null,this.updateInterval=1e3,this.init=this.init.bind(this),this.destroy=this.destroy.bind(this),this.updateGlobalTokenStatus=this.updateGlobalTokenStatus.bind(this),this.setupGlobalTokenEventListeners=this.setupGlobalTokenEventListeners.bind(this),this.startGlobalTokenTimer=this.startGlobalTokenTimer.bind(this),this.getNewToken=this.getNewToken.bind(this),this.logger.debug("Global Token Manager Subsystem created")}async init(){if(this.isInitialized){this.logger.warn("Global Token Manager Subsystem already initialized");return}try{this.logger.info("Initializing Global Token Manager Subsystem..."),await this.waitForTokenStatusElement(),this.preventTokenStatusConflicts(),this.setupGlobalTokenEventListeners(),this.setupEventBusListeners(),this.startGlobalTokenTimer(),this.updateGlobalTokenStatus(),this.isInitialized=!0,this.logger.info("Global Token Manager Subsystem initialized successfully"),this.eventBus&&this.eventBus.emit("globalTokenManager:initialized")}catch(e){throw this.logger.error("Failed to initialize Global Token Manager Subsystem",{error:e.message,stack:e.stack}),e}}async destroy(){this.isDestroyed||(this.logger.info("Destroying Global Token Manager Subsystem..."),this.globalTokenTimer&&(clearInterval(this.globalTokenTimer),this.globalTokenTimer=null),this.removeEventListeners(),this.mutationObserver&&(this.mutationObserver.disconnect(),this.mutationObserver=null),this.restoreOriginalMethods(),this.isDestroyed=!0,this.isInitialized=!1,this.eventBus&&this.eventBus.emit("globalTokenManager:destroyed"),this.logger.info("Global Token Manager Subsystem destroyed"))}async waitForTokenStatusElement(){for(let s=1;s<=100;s++){if(document.readyState!=="complete"&&document.readyState!=="interactive"){this.logger.debug(`DOM not ready (${document.readyState}), waiting...`),await new Promise(n=>setTimeout(n,100));continue}const i=document.getElementById("global-token-status");if(i){const n=i.querySelector(".global-token-countdown"),o=i.querySelector(".global-token-icon"),a=i.querySelector(".global-token-text");if(i.id==="global-token-status")return this.logger.debug("Global token status element found and ready",{attempt:s,elementId:i.id,hasCountdown:!!n,hasIcon:!!o,hasText:!!a}),i}else this.logger.debug(`Global token status element not found (attempt ${s}/100)`);await new Promise(n=>setTimeout(n,100))}throw this.logger.error("Global token status element not found after waiting",{domState:document.readyState,bodyExists:!!document.body,sidebarExists:!!document.querySelector(".sidebar"),allElementsWithId:Array.from(document.querySelectorAll("[id]")).map(s=>s.id)}),new Error("Global token status element not found after waiting")}preventTokenStatusConflicts(){this.logger.debug("Preventing token status conflicts...");const e=document.getElementById("global-token-status");e&&(e.setAttribute("data-protected","true"),e.setAttribute("data-managed-by","GlobalTokenManagerSubsystem"),this.setupDOMProtection(e)),this.overrideConflictingMethods(),this.logger.debug("Token status conflicts prevention set up")}setupDOMProtection(e){if(!window.MutationObserver)return;this.mutationObserver=new MutationObserver(s=>{s.forEach(i=>{i.type==="childList"&&i.removedNodes.length>0&&Array.from(i.removedNodes).some(o=>o.id==="global-token-status")&&(this.logger.warn("Global token status element was removed by another system, will reinitialize"),setTimeout(()=>{document.getElementById("global-token-status")||(this.logger.info("Reinitializing global token status element"),this.waitForTokenStatusElement().then(()=>{this.updateGlobalTokenStatus()}).catch(o=>{this.logger.error("Failed to reinitialize token status element",o)}))},100))})});const t=e.parentElement;t&&this.mutationObserver.observe(t,{childList:!0,subtree:!0})}overrideConflictingMethods(){if(window.app&&window.app.uiManager){const e=window.app.uiManager;typeof e.updateUniversalTokenStatus=="function"&&(e._originalUpdateUniversalTokenStatus=e.updateUniversalTokenStatus,e.updateUniversalTokenStatus=()=>{this.logger.debug("UIManager.updateUniversalTokenStatus called - delegating to GlobalTokenManagerSubsystem"),this.updateGlobalTokenStatus()}),typeof e.updateHomeTokenStatus=="function"&&(e._originalUpdateHomeTokenStatus=e.updateHomeTokenStatus,e.updateHomeTokenStatus=()=>{this.logger.debug("UIManager.updateHomeTokenStatus called - delegating to GlobalTokenManagerSubsystem"),this.updateGlobalTokenStatus()}),this.logger.debug("Conflicting UIManager methods overridden")}}restoreOriginalMethods(){if(window.app&&window.app.uiManager){const e=window.app.uiManager;e._originalUpdateUniversalTokenStatus&&(e.updateUniversalTokenStatus=e._originalUpdateUniversalTokenStatus,delete e._originalUpdateUniversalTokenStatus),e._originalUpdateHomeTokenStatus&&(e.updateHomeTokenStatus=e._originalUpdateHomeTokenStatus,delete e._originalUpdateHomeTokenStatus),this.logger.debug("Original UIManager methods restored")}}setupEventBusListeners(){this.eventBus&&(this.eventBus.on("token:refreshed",()=>{this.logger.debug("Token refreshed event received, updating status"),this.updateGlobalTokenStatus()}),this.eventBus.on("token:error",e=>{this.logger.debug("Token error event received",e),this.updateGlobalTokenStatus()}),this.eventBus.on("settings:updated",()=>{this.logger.debug("Settings updated event received, updating token status"),this.updateGlobalTokenStatus()}),this.logger.debug("EventBus listeners set up for Global Token Manager"))}updateGlobalTokenStatus(){if(this.isDestroyed)return;const e=document.getElementById("global-token-status");if(!e){(!this.lastElementWarning||Date.now()-this.lastElementWarning>3e4)&&(this.logger.debug("Global token status box not found - widget may not be initialized yet"),this.lastElementWarning=Date.now());return}const t=e.querySelector(".global-token-countdown"),s=e.querySelector(".global-token-icon"),i=e.querySelector(".global-token-text"),n=document.getElementById("global-get-token");(!t||!s||!i)&&(!this.lastChildElementWarning||Date.now()-this.lastChildElementWarning>3e4)&&(this.logger.debug("Some global token status child elements not found, will update what is available",{hasCountdown:!!t,hasIcon:!!s,hasText:!!i,statusBoxFound:!!e}),this.lastChildElementWarning=Date.now());try{const o=this.getTokenInfoSync();if(o.hasToken){const a=o.timeLeft,l=this.formatTime(a);t&&(t.textContent=l),a<=0?(e.className="global-token-status expired",s&&(s.textContent="❌"),i&&(i.textContent="Token expired"),n&&(n.style.display="inline-block")):a<=300?(e.className="global-token-status expiring",s&&(s.textContent="⚠️"),i&&(i.textContent="Token expiring soon"),n&&(n.style.display="none")):(e.className="global-token-status valid",s&&(s.textContent="✅"),i&&(i.textContent="Token valid"),n&&(n.style.display="none"))}else e.className="global-token-status missing",s&&(s.textContent="❌"),i&&(i.textContent="No valid token"),t&&(t.textContent="No Token"),n&&(n.style.display="inline-block")}catch(o){(!this.lastErrorWarning||Date.now()-this.lastErrorWarning>3e4)&&(this.logger.debug("Error updating global token status",{error:o.message}),this.lastErrorWarning=Date.now()),e&&(e.className="global-token-status error"),s&&(s.textContent="⚠️"),i&&(i.textContent="Status error"),t&&(t.textContent="Error")}}formatTime(e){if(e<=0)return"00:00";const t=Math.floor(e/3600),s=Math.floor(e%3600/60),i=e%60;return t>0?`${t}h ${s}m ${i}s`:s>0?`${s}m ${i}s`:`${i}s`}getTokenInfoSync(){try{const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(!e||!t)return{hasToken:!1,timeLeft:0,source:"localStorage"};const s=parseInt(t),i=Date.now(),n=Math.floor((s-i)/1e3);return{hasToken:!0,timeLeft:Math.max(0,n),source:"localStorage"}}catch(e){return this.logger.debug("Error getting sync token info",{error:e.message}),{hasToken:!1,timeLeft:0,source:"error"}}}async getTokenInfo(){try{try{const o=await fetch("/api/v1/auth/token");if(o.ok){const a=await o.json();if(a.success&&a.tokenInfo)return{hasToken:a.tokenInfo.isValid,timeLeft:a.tokenInfo.timeLeft||0,source:"server"}}}catch(o){this.logger.debug("Could not fetch token info from server, checking localStorage",{error:o.message})}const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(!e||!t)return{hasToken:!1,timeLeft:0,source:"localStorage"};const s=parseInt(t),i=Date.now(),n=Math.floor((s-i)/1e3);return{hasToken:!0,timeLeft:Math.max(0,n),source:"localStorage"}}catch(e){return this.logger.error("Error getting token info",{error:e.message}),{hasToken:!1,timeLeft:0,source:"error"}}}setupGlobalTokenEventListeners(){const e=document.getElementById("global-refresh-token");e&&(this.refreshBtnHandler=()=>{this.logger.debug("Refresh token button clicked"),this.updateGlobalTokenStatus()},e.addEventListener("click",this.refreshBtnHandler));const t=document.getElementById("global-get-token");t&&(this.getTokenBtnHandler=()=>{this.logger.debug("Get token button clicked"),this.getNewToken()},t.addEventListener("click",this.getTokenBtnHandler)),this.logger.debug("Global token event listeners set up")}removeEventListeners(){const e=document.getElementById("global-refresh-token");e&&this.refreshBtnHandler&&e.removeEventListener("click",this.refreshBtnHandler);const t=document.getElementById("global-get-token");t&&this.getTokenBtnHandler&&t.removeEventListener("click",this.getTokenBtnHandler),this.logger.debug("Global token event listeners removed")}startGlobalTokenTimer(){this.globalTokenTimer&&clearInterval(this.globalTokenTimer),this.globalTokenTimer=setInterval(()=>{this.isDestroyed||this.updateGlobalTokenStatus()},this.updateInterval),this.logger.debug("Global token timer started",{interval:`${this.updateInterval}ms`})}async getNewToken(){if(!this.isDestroyed)try{this.logger.info("Getting new token via global token manager subsystem...");const e=document.getElementById("global-token-status");if(e){e.className="global-token-status loading";const t=e.querySelector(".global-token-icon"),s=e.querySelector(".global-token-text");t&&(t.textContent="⏳"),s&&(s.textContent="Getting token...")}if(window.app&&typeof window.app.getToken=="function")await window.app.getToken(),this.logger.info("Token refreshed successfully via app");else{const t=await fetch("/api/auth/refresh-token",{method:"POST",headers:{"Content-Type":"application/json"}});if(t.ok){const s=await t.json();this.logger.info("Token refreshed via API",s)}else throw new Error(`API request failed: ${t.statusText}`)}this.updateGlobalTokenStatus(),this.eventBus&&this.eventBus.emit("globalTokenManager:tokenRefreshed")}catch(e){this.logger.error("Error getting new token",{error:e.message});const t=document.getElementById("global-token-status");if(t){t.className="global-token-status error";const s=t.querySelector(".global-token-icon"),i=t.querySelector(".global-token-text");s&&(s.textContent="❌"),i&&(i.textContent="Token error")}}}formatTime(e){if(e<=0)return"00:00";const t=Math.floor(e/3600),s=Math.floor(e%3600/60),i=e%60;return t>0?`${t}h ${s}m ${i}s`:s>0?`${s}m ${i}s`:`${i}s`}async getTokenInfo(){try{try{const o=await fetch("/api/token/status");if(o.ok){const a=await o.json();if(a.hasToken)return{hasToken:!0,timeLeft:a.timeLeft||0,source:"server"}}}catch(o){this.logger.debug("Could not fetch token info from server, checking localStorage",{error:o.message})}const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(!e||!t)return{hasToken:!1,timeLeft:0,source:"localStorage"};const s=parseInt(t),i=Date.now(),n=Math.floor((s-i)/1e3);return{hasToken:!0,timeLeft:Math.max(0,n),source:"localStorage"}}catch(e){return this.logger.error("Error getting token info",{error:e.message}),{hasToken:!1,timeLeft:0,source:"error"}}}setupGlobalTokenEventListeners(){const e=document.getElementById("global-refresh-token");e&&(this.refreshBtnHandler=()=>{this.logger.debug("Refresh token button clicked"),this.updateGlobalTokenStatus()},e.addEventListener("click",this.refreshBtnHandler));const t=document.getElementById("global-get-token");t&&(this.getTokenBtnHandler=()=>{this.logger.debug("Get token button clicked"),this.getNewToken()},t.addEventListener("click",this.getTokenBtnHandler)),this.logger.debug("Global token event listeners set up")}removeEventListeners(){const e=document.getElementById("global-refresh-token");e&&this.refreshBtnHandler&&e.removeEventListener("click",this.refreshBtnHandler);const t=document.getElementById("global-get-token");t&&this.getTokenBtnHandler&&t.removeEventListener("click",this.getTokenBtnHandler),this.logger.debug("Global token event listeners removed")}startGlobalTokenTimer(){this.globalTokenTimer&&clearInterval(this.globalTokenTimer),this.globalTokenTimer=setInterval(()=>{this.isDestroyed||this.updateGlobalTokenStatus()},this.updateInterval),this.logger.debug("Global token timer started",{interval:`${this.updateInterval}ms`})}async getNewToken(){if(!this.isDestroyed)try{this.logger.info("Getting new token via global token manager subsystem...");const e=document.getElementById("global-token-status");if(e){e.className="global-token-status loading";const t=e.querySelector(".global-token-icon"),s=e.querySelector(".global-token-text");t&&(t.textContent="⏳"),s&&(s.textContent="Getting token...")}if(window.app&&typeof window.app.getToken=="function")await window.app.getToken(),this.logger.info("Token refreshed successfully via app");else{const t=await fetch("/api/auth/refresh-token",{method:"POST",headers:{"Content-Type":"application/json"}});if(t.ok){const s=await t.json();this.logger.info("Token refreshed via API",s)}else throw new Error(`API request failed: ${t.statusText}`)}this.updateGlobalTokenStatus(),this.eventBus&&this.eventBus.emit("globalTokenManager:tokenRefreshed")}catch(e){this.logger.error("Error getting new token",{error:e.message});const t=document.getElementById("global-token-status");if(t){t.className="global-token-status error";const s=t.querySelector(".global-token-icon"),i=t.querySelector(".global-token-text");s&&(s.textContent="❌"),i&&(i.textContent="Token error")}}}getStatus(){return{name:"GlobalTokenManagerSubsystem",initialized:this.isInitialized,destroyed:this.isDestroyed,timerActive:!!this.globalTokenTimer,updateInterval:this.updateInterval}}}class ue{constructor(e={}){this.level=e.level||this.getDefaultLevel(),this.service=e.service||"pingone-import-frontend",this.environment=e.environment||"production",this.enableServerLogging=e.enableServerLogging!==!1,this.enableConsoleLogging=e.enableConsoleLogging!==!1,this.levels={error:0,warn:1,info:2,debug:3},this.transports=[],this.initializeTransports()}getDefaultLevel(){return this.environment==="production"?"info":this.environment==="test"?"warn":"debug"}initializeTransports(){this.enableConsoleLogging&&this.transports.push({name:"console",log:(e,t,s)=>this.logToConsole(e,t,s)}),this.enableServerLogging&&this.transports.push({name:"server",log:(e,t,s)=>this.logToServer(e,t,s)})}shouldLog(e){return this.levels[e]<=this.levels[this.level]}formatTimestamp(){return new Date().toISOString()}formatLogEntry(e,t,s={}){return{timestamp:this.formatTimestamp(),level:e,message:t,service:this.service,environment:this.environment,...s}}logToConsole(e,t,s={}){if(!this.shouldLog(e))return;const n=this.formatLogEntry(e,t,s).timestamp,o=e.toUpperCase();let a=`[${n}] [${this.service}] ${o}: ${t}`;switch(Object.keys(s).length>0&&(a+=`
${JSON.stringify(s,null,2)}`),e){case"error":console.error(a);break;case"warn":console.warn(a);break;case"info":console.info(a);break;case"debug":console.debug(a);break;default:console.log(a)}}async logToServer(e,t,s={}){if(this.shouldLog(e))try{await fetch("/api/logs/ui",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:t,level:e,data:s,source:"frontend"})})}catch(i){if(i.message.includes("Failed to fetch")||i.message.includes("ERR_CONNECTION_REFUSED"))return;console.warn("Server logging failed, falling back to console:",i.message),this.logToConsole(e,t,s)}}log(e,t,s={}){this.shouldLog(e)&&this.transports.forEach(i=>{try{i.log(e,t,s)}catch(n){console.error(`Error in ${i.name} transport:`,n)}})}info(e,t={}){this.log("info",e,t)}warn(e,t={}){this.log("warn",e,t)}error(e,t={}){this.log("error",e,t)}debug(e,t={}){this.log("debug",e,t)}errorWithStack(e,t,s={}){const i={...s,error:{message:t.message,stack:t.stack,code:t.code,name:t.name}};this.error(e,i)}child(e={}){const t=new ue({level:this.level,service:this.service,environment:this.environment,enableServerLogging:this.enableServerLogging,enableConsoleLogging:this.enableConsoleLogging});return t.formatLogEntry=(s,i,n={})=>({...this.formatLogEntry(s,i,n),...e}),t}setLevel(e){this.levels.hasOwnProperty(e)?this.level=e:this.warn(`Invalid log level: ${e}`)}setServerLogging(e){this.enableServerLogging=e,this.transports=this.transports.filter(t=>t.name!=="server"),e&&this.transports.push({name:"server",log:(t,s,i)=>this.logToServer(t,s,i)})}setConsoleLogging(e){this.enableConsoleLogging=e,this.transports=this.transports.filter(t=>t.name!=="console"),e&&this.transports.push({name:"console",log:(t,s,i)=>this.logToConsole(t,s,i)})}}function pe(r={}){return new ue(r)}function F(r,e={}){return pe({...e,service:`${e.service||"pingone-import"}-${r}`})}pe();F("api");F("ui");F("file");F("settings");F("token");class pt{constructor(e,t,s){this.logger=e||pe({serviceName:"token-notification-subsystem",environment:"development"}),this.eventBus=t,this.navigationSubsystem=s,this.isInitialized=!1,this.isDestroyed=!1,this.currentNotification=null,this.notificationElement=null,this.lastTokenCheck=null,this.checkInterval=null,this.logger.info("Token Notification Subsystem initialized")}async init(){if(!(this.isInitialized||this.isDestroyed))try{this.logger.debug("Initializing Token Notification Subsystem..."),this.createNotificationContainer(),this.setupEventListeners(),this.startTokenMonitoring(),this.checkTokenStatus(),this.isInitialized=!0,this.eventBus.emit("tokenNotification:initialized"),this.logger.info("Token Notification Subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize Token Notification Subsystem",{error:e.message,stack:e.stack}),e}}destroy(){this.isDestroyed||(this.logger.debug("Destroying Token Notification Subsystem..."),this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null),this.hideNotification(),this.notificationElement&&(this.notificationElement.remove(),this.notificationElement=null),this.isDestroyed=!0,this.isInitialized=!1,this.logger.info("Token Notification Subsystem destroyed"))}createNotificationContainer(){const e=document.getElementById("token-notification-container");e&&e.remove(),this.notificationElement=document.createElement("div"),this.notificationElement.id="token-notification-container",this.notificationElement.className="token-notification-container",this.notificationElement.style.display="none";const t=document.querySelector(".main-content")||document.body;t.insertBefore(this.notificationElement,t.firstChild),this.logger.debug("Token notification container created")}setupEventListeners(){this.eventBus.on("token:refreshed",()=>{this.logger.debug("Token refreshed event received"),this.checkTokenStatus()}),this.eventBus.on("token:expired",()=>{this.logger.debug("Token expired event received"),this.showTokenExpiredNotification()}),this.eventBus.on("token:error",()=>{this.logger.debug("Token error event received"),this.showTokenErrorNotification()}),this.eventBus.on("settings:updated",()=>{this.logger.debug("Settings updated event received"),this.checkTokenStatus()}),this.logger.debug("Token notification event listeners set up")}startTokenMonitoring(){this.checkInterval=setInterval(()=>{this.checkTokenStatus()},3e4),this.logger.debug("Token monitoring started")}checkTokenStatus(){try{const e=this.getTokenInfo();e.hasToken?e.timeLeft<=0?this.showTokenExpiredNotification():e.timeLeft<=300?this.showTokenExpiringNotification(e.timeLeft):this.hideNotification():this.showNoTokenNotification(),this.lastTokenCheck=Date.now()}catch(e){this.logger.error("Error checking token status",{error:e.message}),this.showTokenErrorNotification()}}getTokenInfo(){try{const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(!e||!t)return{hasToken:!1,timeLeft:0};const s=parseInt(t,10),i=Math.floor(Date.now()/1e3),n=s-i;return{hasToken:!0,timeLeft:Math.max(0,n),token:e.substring(0,20)+"..."}}catch(e){return this.logger.error("Error getting token info",{error:e.message}),{hasToken:!1,timeLeft:0}}}showNoTokenNotification(){this.showNotification(`
            <div class="token-notification-content">
                <div class="token-notification-icon">🔒</div>
                <div class="token-notification-text">
                    <h4>Authentication Required</h4>
                    <p>No valid PingOne token found. Most functionality is disabled until you authenticate.</p>
                    <p><strong>What you can do:</strong></p>
                    <ul>
                        <li>Go to <strong>Settings</strong> to configure your PingOne credentials</li>
                        <li>Use the <strong>Get Token</strong> button to authenticate</li>
                        <li>Check the token status widget in the sidebar</li>
                    </ul>
                </div>
                <div class="token-notification-actions">
                    <button id="go-to-settings-btn" class="btn btn-primary btn-sm">Go to Settings</button>
                    <button onclick="this.parentElement.parentElement.parentElement.style.display='none'" class="btn btn-secondary btn-sm">Dismiss</button>
                </div>
            </div>
        `,"no-token")}showTokenExpiredNotification(){this.showNotification(`
            <div class="token-notification-content">
                <div class="token-notification-icon">⏰</div>
                <div class="token-notification-text">
                    <h4>Token Expired</h4>
                    <p>Your PingOne authentication token has expired. Please get a new token to continue using the application.</p>
                </div>
                <div class="token-notification-actions">
                    <button onclick="window.app?.subsystems?.globalTokenManager?.refreshToken?.()" class="btn btn-warning btn-sm">Refresh Token</button>
                    <button onclick="this.parentElement.parentElement.parentElement.style.display='none'" class="btn btn-secondary btn-sm">Dismiss</button>
                </div>
            </div>
        `,"expired-token")}showTokenExpiringNotification(e){const t=Math.floor(e/60),s=e%60,n=`
            <div class="token-notification-content">
                <div class="token-notification-icon">⚠️</div>
                <div class="token-notification-text">
                    <h4>Token Expiring Soon</h4>
                    <p>Your PingOne token will expire in <strong>${t>0?`${t}m ${s}s`:`${s}s`}</strong>. Consider refreshing it to avoid interruption.</p>
                </div>
                <div class="token-notification-actions">
                    <button onclick="window.app?.subsystems?.globalTokenManager?.refreshToken?.()" class="btn btn-warning btn-sm">Refresh Now</button>
                    <button onclick="this.parentElement.parentElement.parentElement.style.display='none'" class="btn btn-secondary btn-sm">Dismiss</button>
                </div>
            </div>
        `;this.showNotification(n,"expiring-token")}showTokenErrorNotification(){this.showNotification(`
            <div class="token-notification-content">
                <div class="token-notification-icon">❌</div>
                <div class="token-notification-text">
                    <h4>Token Error</h4>
                    <p>There was an error with your authentication token. Please check your settings and try again.</p>
                </div>
                <div class="token-notification-actions">
                    <button onclick="window.location.hash='settings'" class="btn btn-primary btn-sm">Check Settings</button>
                    <button onclick="this.parentElement.parentElement.parentElement.style.display='none'" class="btn btn-secondary btn-sm">Dismiss</button>
                </div>
            </div>
        `,"error-token")}showNotification(e,t){if(!this.notificationElement){this.logger.warn("Notification element not available");return}if(this.currentNotification===t)return;this.notificationElement.innerHTML=e,this.notificationElement.className=`token-notification-container ${t}`,this.notificationElement.style.display="block",this.currentNotification=t,this.logger.debug("Token notification shown",{type:t});const s=this.notificationElement.querySelector("#go-to-settings-btn");s&&s.addEventListener("click",i=>{i.preventDefault(),this.navigationSubsystem?this.navigationSubsystem.navigateToView("settings"):(this.logger.error("NavigationSubsystem not available."),window.location.hash="settings")})}hideNotification(){this.notificationElement&&(this.notificationElement.style.display="none",this.notificationElement.innerHTML=""),this.currentNotification=null,this.logger.debug("Token notification hidden")}}class mt{constructor(e,t,s,i,n){this.logger=e,this.eventBus=t,this.realtimeCommunication=s,this.sessionSubsystem=i,this.progressSubsystem=n,this.activeUsers=new Map,this.collaborationRooms=new Map,this.sharedOperations=new Map,this.liveProgressStreams=new Map,this.notificationQueues=new Map,this.analyticsStreams=new Map,this.config={maxUsersPerRoom:10,progressUpdateInterval:1e3,presenceUpdateInterval:5e3,notificationRetention:100,analyticsBufferSize:1e3},this.logger.info("Advanced Real-time Features Subsystem initialized")}async init(){try{this.setupEventBusListeners(),await this.initializePresenceSystem(),await this.initializeLiveProgressSharing(),await this.initializeNotificationSystem(),await this.initializeCollaborativeOperations(),await this.initializeLiveAnalytics(),this.logger.info("Advanced Real-time Features Subsystem initialized successfully"),this.eventBus.emit("subsystem:ready",{subsystem:"advanced-realtime"})}catch(e){throw this.logger.error("Failed to initialize Advanced Real-time Features Subsystem",e),this.eventBus.emit("subsystem:error",{subsystem:"advanced-realtime",error:e}),e}}setupEventBusListeners(){this.logger.debug("Setting up EventBus listeners for advanced real-time features"),this.eventBus.on("session:user-joined",e=>this.handleUserJoined(e)),this.eventBus.on("session:user-left",e=>this.handleUserLeft(e)),this.eventBus.on("session:activity-update",e=>this.handleActivityUpdate(e)),this.eventBus.on("operation:started",e=>this.handleOperationStarted(e)),this.eventBus.on("operation:progress",e=>this.handleOperationProgress(e)),this.eventBus.on("operation:completed",e=>this.handleOperationCompleted(e)),this.eventBus.on("operation:failed",e=>this.handleOperationFailed(e)),this.eventBus.on("progress:updated",e=>this.handleProgressUpdate(e)),this.eventBus.on("progress:milestone",e=>this.handleProgressMilestone(e)),this.eventBus.on("analytics:metric-update",e=>this.handleAnalyticsUpdate(e)),this.eventBus.on("analytics:performance-data",e=>this.handlePerformanceData(e)),this.logger.debug("EventBus listeners set up for advanced real-time features")}async initializePresenceSystem(){this.logger.debug("Initializing multi-user presence system"),this.presenceInterval=setInterval(()=>{this.broadcastPresence()},this.config.presenceUpdateInterval),this.realtimeCommunication.on("user-presence",e=>{this.handlePresenceUpdate(e)}),this.realtimeCommunication.on("user-connected",e=>{this.handleUserConnected(e)}),this.realtimeCommunication.on("user-disconnected",e=>{this.handleUserDisconnected(e)}),this.logger.debug("Multi-user presence system initialized")}async initializeLiveProgressSharing(){this.logger.debug("Initializing live progress sharing"),this.progressInterval=setInterval(()=>{this.streamProgressUpdates()},this.config.progressUpdateInterval),this.realtimeCommunication.on("progress-update",e=>{this.handleSharedProgressUpdate(e)}),this.realtimeCommunication.on("progress-sync-request",e=>{this.handleProgressSyncRequest(e)}),this.logger.debug("Live progress sharing initialized")}broadcastPresence(){try{if(!this.currentRoom||!this.currentUser)return;const e={roomId:this.currentRoom,userId:this.currentUser.id||"anonymous",userName:this.currentUser.name||"Anonymous User",status:"active",lastActivity:new Date().toISOString(),timestamp:new Date().toISOString()};this.realtimeCommunication.emit("user-presence",e),this.activeUsers.set(e.userId,{...e,joinedAt:this.activeUsers.get(e.userId)?.joinedAt||new Date}),this.eventBus.emit("realtime:presence-broadcasted",e),this.logger.debug("Presence broadcasted",{roomId:this.currentRoom,userId:e.userId})}catch(e){this.logger.error("Failed to broadcast presence",e)}}streamProgressUpdates(){try{if(!this.currentRoom||!this.progressSubsystem)return;const e=this.progressSubsystem.getCurrentProgress();if(e&&e.isActive){const t={roomId:this.currentRoom,userId:this.currentUser?.id||"anonymous",userName:this.currentUser?.name||"Anonymous User",progress:{operationType:e.operationType,percentage:e.percentage,currentStep:e.currentStep,totalSteps:e.totalSteps,message:e.message,timestamp:new Date().toISOString()}};this.realtimeCommunication.emit("progress-update",t),this.sharedProgress.set(t.userId,t.progress),this.eventBus.emit("realtime:progress-streamed",t),this.logger.debug("Progress update streamed",{roomId:this.currentRoom,userId:t.userId,percentage:e.percentage})}}catch(e){this.logger.error("Failed to stream progress updates",e)}}async initializeNotificationSystem(){this.logger.debug("Initializing real-time notification system"),this.realtimeCommunication.on("notification",e=>{this.handleIncomingNotification(e)}),this.eventBus.on("notification:send",e=>{this.broadcastNotification(e)}),this.logger.debug("Real-time notification system initialized")}async initializeCollaborativeOperations(){this.logger.debug("Initializing collaborative operation management"),this.realtimeCommunication.on("operation-request",e=>{this.handleOperationRequest(e)}),this.realtimeCommunication.on("operation-lock",e=>{this.handleOperationLock(e)}),this.realtimeCommunication.on("operation-unlock",e=>{this.handleOperationUnlock(e)}),this.logger.debug("Collaborative operation management initialized")}async initializeLiveAnalytics(){this.logger.debug("Initializing live analytics streaming"),this.analyticsInterval=setInterval(()=>{this.streamAnalyticsData()},5e3),this.realtimeCommunication.on("analytics-update",e=>{this.handleAnalyticsStreamUpdate(e)}),this.logger.debug("Live analytics streaming initialized")}streamAnalyticsData(){try{if(!this.currentRoom||!this.analyticsDashboard)return;const e=this.analyticsDashboard.getAnalyticsDashboardData("5m");if(e){const t={roomId:this.currentRoom,userId:this.currentUser?.id||"anonymous",analytics:{systemMetrics:e.systemMetrics,operationSummary:e.operationSummary,recentActivity:e.recentActivity?.slice(0,5),timestamp:new Date().toISOString()}};this.realtimeCommunication.emit("analytics-update",t),this.eventBus.emit("realtime:analytics-streamed",t),this.logger.debug("Analytics data streamed",{roomId:this.currentRoom,userId:t.userId,metricsCount:Object.keys(t.analytics.systemMetrics||{}).length})}}catch(e){this.logger.error("Failed to stream analytics data",e)}}async joinCollaborationRoom(e,t){this.logger.info("Joining collaboration room",{roomId:e,userId:t.id});try{if(this.collaborationRooms.has(e)){if(this.collaborationRooms.get(e).users.size>=this.config.maxUsersPerRoom)throw new Error("Collaboration room is at capacity")}else this.collaborationRooms.set(e,{id:e,users:new Map,operations:new Map,createdAt:new Date,lastActivity:new Date});const s=this.collaborationRooms.get(e);return s.users.set(t.id,{...t,joinedAt:new Date,lastSeen:new Date,isActive:!0}),this.broadcastToRoom(e,"user-joined",{roomId:e,user:t,totalUsers:s.users.size}),this.sendToUser(t.id,"room-state",{roomId:e,users:Array.from(s.users.values()),operations:Array.from(s.operations.values())}),this.eventBus.emit("collaboration:user-joined",{roomId:e,user:t}),{success:!0,roomId:e,userCount:s.users.size,users:Array.from(s.users.values())}}catch(s){throw this.logger.error("Failed to join collaboration room",{roomId:e,error:s.message}),s}}async leaveCollaborationRoom(e,t){this.logger.info("Leaving collaboration room",{roomId:e,userId:t});try{if(!this.collaborationRooms.has(e))return{success:!0,message:"Room does not exist"};const s=this.collaborationRooms.get(e),i=s.users.get(t);return i&&(s.users.delete(t),this.broadcastToRoom(e,"user-left",{roomId:e,userId:t,user:i,totalUsers:s.users.size}),s.users.size===0&&(this.collaborationRooms.delete(e),this.logger.debug("Removed empty collaboration room",{roomId:e})),this.eventBus.emit("collaboration:user-left",{roomId:e,userId:t,user:i})),{success:!0,roomId:e,userCount:s.users.size}}catch(s){throw this.logger.error("Failed to leave collaboration room",{roomId:e,userId:t,error:s.message}),s}}async startLiveProgressSharing(e,t={}){this.logger.info("Starting live progress sharing",{operationId:e});try{const s={operationId:e,startTime:new Date,lastUpdate:new Date,subscribers:new Set,config:{updateInterval:t.updateInterval||this.config.progressUpdateInterval,includeMetrics:t.includeMetrics||!0,includeErrors:t.includeErrors||!0,maxHistory:t.maxHistory||100},history:[],currentProgress:{percentage:0,stage:"initializing",message:"Starting operation...",metrics:{}}};return this.liveProgressStreams.set(e,s),this.broadcastProgressEvent("progress-sharing-started",{operationId:e,config:s.config}),this.eventBus.emit("progress-sharing:started",{operationId:e,config:s.config}),{success:!0,operationId:e,streamId:e}}catch(s){throw this.logger.error("Failed to start live progress sharing",{operationId:e,error:s.message}),s}}async subscribeLiveProgress(e,t){if(this.logger.debug("Subscribing to live progress",{operationId:e,subscriberId:t}),!this.liveProgressStreams.has(e))throw new Error(`Progress stream not found for operation: ${e}`);const s=this.liveProgressStreams.get(e);return s.subscribers.add(t),this.sendProgressUpdate(t,{operationId:e,progress:s.currentProgress,history:s.history.slice(-10)}),this.logger.debug("Subscribed to live progress",{operationId:e,subscriberId:t,totalSubscribers:s.subscribers.size}),{success:!0,operationId:e,subscriberId:t}}async sendRealtimeNotification(e){this.logger.debug("Sending real-time notification",{type:e.type,recipients:e.recipients?.length});try{const t={id:this.generateId(),timestamp:new Date,...e};return e.recipients&&e.recipients.forEach(s=>{this.notificationQueues.has(s)||this.notificationQueues.set(s,[]);const i=this.notificationQueues.get(s);i.push(t),i.length>this.config.notificationRetention&&i.shift()}),this.broadcastNotification(t),this.eventBus.emit("notification:sent",t),{success:!0,notificationId:t.id}}catch(t){throw this.logger.error("Failed to send real-time notification",{error:t.message}),t}}async getLiveAnalyticsDashboard(){this.logger.debug("Getting live analytics dashboard data");try{return{timestamp:new Date,activeUsers:this.activeUsers.size,collaborationRooms:this.collaborationRooms.size,liveProgressStreams:this.liveProgressStreams.size,totalNotifications:Array.from(this.notificationQueues.values()).reduce((t,s)=>t+s.length,0),connectionStatus:this.realtimeCommunication.getConnectionStatus(),systemMetrics:await this.getSystemMetrics(),operationMetrics:await this.getOperationMetrics(),userActivity:await this.getUserActivityMetrics()}}catch(e){throw this.logger.error("Failed to get live analytics dashboard data",{error:e.message}),e}}handleUserJoined(e){this.logger.debug("Handling user joined event",e),this.activeUsers.set(e.userId,{...e,joinedAt:new Date,lastActivity:new Date}),this.broadcastPresenceUpdate()}handleUserLeft(e){this.logger.debug("Handling user left event",e),this.activeUsers.delete(e.userId),this.broadcastPresenceUpdate()}handleOperationStarted(e){this.logger.debug("Handling operation started event",e),e.shareProgress&&this.startLiveProgressSharing(e.operationId,e.progressConfig)}handleOperationProgress(e){this.logger.debug("Handling operation progress event",e),this.liveProgressStreams.has(e.operationId)&&this.updateLiveProgress(e.operationId,e.progress)}handleProgressUpdate(e){this.logger.debug("Handling progress update event",e),this.streamProgressUpdate(e)}broadcastToRoom(e,t,s){this.collaborationRooms.has(e)&&this.collaborationRooms.get(e).users.forEach((n,o)=>{this.sendToUser(o,t,s)})}sendToUser(e,t,s){this.realtimeCommunication.isConnected&&this.realtimeCommunication.socket?.emit("user-message",{targetUserId:e,event:t,data:s})}broadcastPresenceUpdate(){const e={activeUsers:Array.from(this.activeUsers.values()),timestamp:new Date};this.realtimeCommunication.socket?.emit("presence-update",e),this.eventBus.emit("presence:updated",e)}streamProgressUpdate(e){this.realtimeCommunication.socket?.emit("progress-stream",e),this.eventBus.emit("progress-stream:update",e)}broadcastNotification(e){this.realtimeCommunication.socket?.emit("notification-broadcast",e)}generateId(){return`${Date.now()}-${Math.random().toString(36).substr(2,9)}`}async getSystemMetrics(){return{memoryUsage:performance.memory?{used:performance.memory.usedJSHeapSize,total:performance.memory.totalJSHeapSize,limit:performance.memory.jsHeapSizeLimit}:null,connectionLatency:await this.measureConnectionLatency(),timestamp:new Date}}async getOperationMetrics(){return{activeOperations:this.liveProgressStreams.size,completedOperations:0,failedOperations:0,averageOperationTime:0,timestamp:new Date}}async getUserActivityMetrics(){return{activeUsers:this.activeUsers.size,totalSessions:this.sessionSubsystem?await this.sessionSubsystem.getActiveSessionCount():0,averageSessionDuration:0,timestamp:new Date}}async measureConnectionLatency(){if(!this.realtimeCommunication.isConnected)return null;const e=performance.now();return new Promise(t=>{this.realtimeCommunication.socket?.emit("ping",e,s=>{const i=performance.now()-e;t(i)}),setTimeout(()=>t(null),5e3)})}async disconnect(){this.logger.info("Disconnecting Advanced Real-time Features Subsystem"),this.presenceInterval&&clearInterval(this.presenceInterval),this.progressInterval&&clearInterval(this.progressInterval),this.analyticsInterval&&clearInterval(this.analyticsInterval),this.activeUsers.clear(),this.collaborationRooms.clear(),this.sharedOperations.clear(),this.liveProgressStreams.clear(),this.notificationQueues.clear(),this.analyticsStreams.clear(),this.logger.info("Advanced Real-time Features Subsystem disconnected")}getStatus(){return{isInitialized:!0,activeUsers:this.activeUsers.size,collaborationRooms:this.collaborationRooms.size,liveProgressStreams:this.liveProgressStreams.size,connectionStatus:this.realtimeCommunication.getConnectionStatus(),timestamp:new Date}}}class ft{constructor(e,t,s,i){this.logger=e,this.eventBus=t,this.advancedRealtime=s,this.uiManager=i,this.isVisible=!1,this.currentRoom=null,this.activeUsers=new Map,this.liveProgressStreams=new Map,this.notifications=[],this.container=null,this.presencePanel=null,this.progressPanel=null,this.notificationPanel=null,this.collaborationPanel=null,this.logger.info("Real-time Collaboration UI initialized")}async init(){try{this.createUIStructure(),this.setupEventListeners(),await this.initializeComponents(),this.logger.info("Real-time Collaboration UI initialized successfully")}catch(e){throw this.logger.error("Failed to initialize Real-time Collaboration UI",e),e}}createUIStructure(){this.logger.debug("Creating real-time collaboration UI structure"),this.container=document.createElement("div"),this.container.id="realtime-collaboration-container",this.container.className="realtime-collaboration-container hidden",this.container.innerHTML=`
            <div class="collaboration-header">
                <h3>
                    <i class="fas fa-users"></i>
                    Real-time Collaboration
                </h3>
                <div class="collaboration-controls">
                    <button id="toggle-collaboration" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-eye"></i>
                        <span>Show</span>
                    </button>
                    <button id="minimize-collaboration" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-minus"></i>
                    </button>
                </div>
            </div>
            
            <div class="collaboration-content">
                <!-- User Presence Panel -->
                <div class="collaboration-panel" id="presence-panel">
                    <div class="panel-header">
                        <h4><i class="fas fa-user-friends"></i> Active Users</h4>
                        <span class="user-count badge badge-primary">0</span>
                    </div>
                    <div class="panel-content">
                        <div id="active-users-list" class="users-list"></div>
                        <div class="presence-controls">
                            <button id="join-room-btn" class="btn btn-sm btn-success">
                                <i class="fas fa-sign-in-alt"></i>
                                Join Room
                            </button>
                            <button id="leave-room-btn" class="btn btn-sm btn-warning hidden">
                                <i class="fas fa-sign-out-alt"></i>
                                Leave Room
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Live Progress Panel -->
                <div class="collaboration-panel" id="progress-panel">
                    <div class="panel-header">
                        <h4><i class="fas fa-chart-line"></i> Live Progress</h4>
                        <span class="progress-count badge badge-info">0</span>
                    </div>
                    <div class="panel-content">
                        <div id="live-progress-list" class="progress-list"></div>
                        <div class="progress-controls">
                            <button id="share-progress-btn" class="btn btn-sm btn-primary">
                                <i class="fas fa-share"></i>
                                Share Progress
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Real-time Notifications Panel -->
                <div class="collaboration-panel" id="notification-panel">
                    <div class="panel-header">
                        <h4><i class="fas fa-bell"></i> Live Notifications</h4>
                        <span class="notification-count badge badge-warning">0</span>
                    </div>
                    <div class="panel-content">
                        <div id="notifications-list" class="notifications-list"></div>
                        <div class="notification-controls">
                            <button id="clear-notifications-btn" class="btn btn-sm btn-outline-secondary">
                                <i class="fas fa-trash"></i>
                                Clear All
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Collaboration Analytics Panel -->
                <div class="collaboration-panel" id="analytics-panel">
                    <div class="panel-header">
                        <h4><i class="fas fa-analytics"></i> Live Analytics</h4>
                        <button id="refresh-analytics-btn" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-sync"></i>
                        </button>
                    </div>
                    <div class="panel-content">
                        <div id="analytics-dashboard" class="analytics-dashboard">
                            <div class="metric-card">
                                <div class="metric-label">Connection Status</div>
                                <div id="connection-status" class="metric-value">Disconnected</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">Active Operations</div>
                                <div id="active-operations" class="metric-value">0</div>
                            </div>
                            <div class="metric-card">
                                <div class="metric-label">System Latency</div>
                                <div id="system-latency" class="metric-value">--</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `,document.body.appendChild(this.container),this.presencePanel=document.getElementById("presence-panel"),this.progressPanel=document.getElementById("progress-panel"),this.notificationPanel=document.getElementById("notification-panel"),this.analyticsPanel=document.getElementById("analytics-panel"),this.logger.debug("Real-time collaboration UI structure created")}setupEventListeners(){this.logger.debug("Setting up real-time collaboration UI event listeners"),document.getElementById("toggle-collaboration")?.addEventListener("click",()=>{this.toggleVisibility()}),document.getElementById("minimize-collaboration")?.addEventListener("click",()=>{this.minimize()}),document.getElementById("join-room-btn")?.addEventListener("click",()=>{this.showJoinRoomDialog()}),document.getElementById("leave-room-btn")?.addEventListener("click",()=>{this.leaveCurrentRoom()}),document.getElementById("share-progress-btn")?.addEventListener("click",()=>{this.showShareProgressDialog()}),document.getElementById("clear-notifications-btn")?.addEventListener("click",()=>{this.clearNotifications()}),document.getElementById("refresh-analytics-btn")?.addEventListener("click",()=>{this.refreshAnalytics()}),this.eventBus.on("collaboration:user-joined",e=>{this.handleUserJoined(e)}),this.eventBus.on("collaboration:user-left",e=>{this.handleUserLeft(e)}),this.eventBus.on("progress-sharing:started",e=>{this.handleProgressSharingStarted(e)}),this.eventBus.on("progress-stream:update",e=>{this.handleProgressStreamUpdate(e)}),this.eventBus.on("notification:sent",e=>{this.handleNotificationReceived(e)}),this.eventBus.on("presence:updated",e=>{this.handlePresenceUpdate(e)}),this.logger.debug("Real-time collaboration UI event listeners set up")}async initializeComponents(){this.logger.debug("Initializing real-time collaboration UI components"),await this.initializeAnalyticsDashboard(),this.setupPeriodicUpdates(),this.logger.debug("Real-time collaboration UI components initialized")}async initializeAnalyticsDashboard(){try{const e=await this.advancedRealtime.getLiveAnalyticsDashboard();this.updateAnalyticsDashboard(e)}catch(e){this.logger.error("Failed to initialize analytics dashboard",e)}}setupPeriodicUpdates(){this.analyticsInterval=setInterval(()=>{this.refreshAnalytics()},5e3),this.presenceInterval=setInterval(()=>{this.refreshPresence()},1e4)}toggleVisibility(){this.isVisible=!this.isVisible,this.isVisible?(this.container.classList.remove("hidden"),document.getElementById("toggle-collaboration").innerHTML=`
                <i class="fas fa-eye-slash"></i>
                <span>Hide</span>
            `,this.refreshAll()):(this.container.classList.add("hidden"),document.getElementById("toggle-collaboration").innerHTML=`
                <i class="fas fa-eye"></i>
                <span>Show</span>
            `),this.logger.debug("Collaboration UI visibility toggled",{isVisible:this.isVisible})}showJoinRoomDialog(){const e=prompt("Enter Room ID to join (or leave empty for default):")||"default-room",t=prompt("Enter your name:")||"Anonymous User";this.joinRoom(e,{id:this.generateUserId(),name:t,avatar:this.generateAvatar(t),joinedAt:new Date})}async joinRoom(e,t){try{this.logger.info("Joining collaboration room",{roomId:e,userName:t.name});const s=await this.advancedRealtime.joinCollaborationRoom(e,t);s.success&&(this.currentRoom=e,this.updateRoomUI(s),this.uiManager.showSuccess(`Joined room: ${e}`,`Connected with ${s.userCount} users`),document.getElementById("join-room-btn").classList.add("hidden"),document.getElementById("leave-room-btn").classList.remove("hidden"),this.logger.info("Successfully joined collaboration room",s))}catch(s){this.logger.error("Failed to join collaboration room",s),this.uiManager.showError("Failed to Join Room",s.message)}}async leaveCurrentRoom(){if(this.currentRoom)try{(await this.advancedRealtime.leaveCollaborationRoom(this.currentRoom,this.getCurrentUserId())).success&&(this.uiManager.showInfo("Left Room",`Left room: ${this.currentRoom}`),this.currentRoom=null,this.clearRoomUI(),document.getElementById("join-room-btn").classList.remove("hidden"),document.getElementById("leave-room-btn").classList.add("hidden"))}catch(e){this.logger.error("Failed to leave collaboration room",e),this.uiManager.showError("Failed to Leave Room",e.message)}}showShareProgressDialog(){const e=prompt("Enter Operation ID to share progress (or leave empty for current):")||"current-operation";this.startProgressSharing(e)}async startProgressSharing(e){try{(await this.advancedRealtime.startLiveProgressSharing(e,{updateInterval:1e3,includeMetrics:!0,includeErrors:!0})).success&&(this.uiManager.showSuccess("Progress Sharing Started",`Sharing progress for: ${e}`),this.addProgressStream(e))}catch(t){this.logger.error("Failed to start progress sharing",t),this.uiManager.showError("Failed to Share Progress",t.message)}}updateRoomUI(e){const t=document.getElementById("active-users-list"),s=document.querySelector(".user-count");s.textContent=e.userCount,t.innerHTML="",e.users.forEach(i=>{const n=this.createUserElement(i);t.appendChild(n)})}createUserElement(e){const t=document.createElement("div");return t.className="user-item",t.innerHTML=`
            <div class="user-avatar">
                <img src="${e.avatar}" alt="${e.name}" />
                <div class="user-status ${e.isActive?"active":"inactive"}"></div>
            </div>
            <div class="user-info">
                <div class="user-name">${e.name}</div>
                <div class="user-activity">${this.formatLastActivity(e.lastSeen)}</div>
            </div>
        `,t}addProgressStream(e){const t=document.getElementById("live-progress-list"),s=document.querySelector(".progress-count"),i=document.createElement("div");i.className="progress-item",i.id=`progress-${e}`,i.innerHTML=`
            <div class="progress-header">
                <span class="progress-title">${e}</span>
                <span class="progress-percentage">0%</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: 0%"></div>
            </div>
            <div class="progress-details">
                <span class="progress-stage">Initializing...</span>
                <span class="progress-time">Just started</span>
            </div>
        `,t.appendChild(i),s.textContent=t.children.length,this.liveProgressStreams.set(e,i)}updateAnalyticsDashboard(e){document.getElementById("connection-status").textContent=e.connectionStatus.isConnected?"Connected":"Disconnected",document.getElementById("connection-status").className=`metric-value ${e.connectionStatus.isConnected?"connected":"disconnected"}`,document.getElementById("active-operations").textContent=e.liveProgressStreams,document.getElementById("system-latency").textContent=e.systemMetrics.connectionLatency?`${Math.round(e.systemMetrics.connectionLatency)}ms`:"--"}addNotification(e){const t=document.getElementById("notifications-list"),s=document.querySelector(".notification-count"),i=document.createElement("div");for(i.className=`notification-item ${e.type}`,i.innerHTML=`
            <div class="notification-header">
                <span class="notification-type">${e.type.toUpperCase()}</span>
                <span class="notification-time">${this.formatTime(e.timestamp)}</span>
            </div>
            <div class="notification-content">
                <div class="notification-title">${e.title}</div>
                <div class="notification-message">${e.message}</div>
            </div>
        `,t.insertBefore(i,t.firstChild);t.children.length>10;)t.removeChild(t.lastChild);s.textContent=t.children.length,this.notifications.unshift(e),this.notifications.length>100&&this.notifications.pop()}handleUserJoined(e){this.logger.debug("User joined collaboration room",e),e.roomId===this.currentRoom&&(this.addNotification({type:"info",title:"User Joined",message:`${e.user.name} joined the room`,timestamp:new Date}),this.refreshPresence())}handleUserLeft(e){this.logger.debug("User left collaboration room",e),e.roomId===this.currentRoom&&(this.addNotification({type:"info",title:"User Left",message:`${e.user.name} left the room`,timestamp:new Date}),this.refreshPresence())}handleProgressSharingStarted(e){this.logger.debug("Progress sharing started",e),this.addProgressStream(e.operationId)}handleProgressStreamUpdate(e){this.logger.debug("Progress stream update",e),this.updateProgressStream(e.operationId,e)}handleNotificationReceived(e){this.logger.debug("Notification received",e),this.addNotification(e)}handlePresenceUpdate(e){this.logger.debug("Presence update received",e),this.updatePresenceDisplay(e)}async refreshAll(){await Promise.all([this.refreshAnalytics(),this.refreshPresence()])}async refreshAnalytics(){try{const e=await this.advancedRealtime.getLiveAnalyticsDashboard();this.updateAnalyticsDashboard(e)}catch(e){this.logger.error("Failed to refresh analytics",e)}}async refreshPresence(){this.currentRoom}clearNotifications(){document.getElementById("notifications-list").innerHTML="",document.querySelector(".notification-count").textContent="0",this.notifications=[]}minimize(){this.container.classList.toggle("minimized")}clearRoomUI(){document.getElementById("active-users-list").innerHTML="",document.querySelector(".user-count").textContent="0"}updateProgressStream(e,t){const s=this.liveProgressStreams.get(e);if(s){const i=t.progress?.percentage||0,n=t.progress?.stage||"Unknown";s.querySelector(".progress-percentage").textContent=`${i}%`,s.querySelector(".progress-fill").style.width=`${i}%`,s.querySelector(".progress-stage").textContent=n,s.querySelector(".progress-time").textContent=this.formatTime(new Date)}}updatePresenceDisplay(e){this.activeUsers.clear(),e.activeUsers.forEach(t=>{this.activeUsers.set(t.id,t)})}generateUserId(){return`user-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}getCurrentUserId(){return this.currentUserId||this.generateUserId()}generateAvatar(e){return`https://ui-avatars.com/api/?name=${encodeURIComponent(e)}&background=007bff&color=fff&size=32`}formatTime(e){return new Intl.DateTimeFormat("en-US",{hour:"2-digit",minute:"2-digit",second:"2-digit"}).format(e)}formatLastActivity(e){const s=new Date-e;return s<6e4?"Just now":s<36e5?`${Math.floor(s/6e4)}m ago`:s<864e5?`${Math.floor(s/36e5)}h ago`:`${Math.floor(s/864e5)}d ago`}destroy(){this.logger.info("Destroying Real-time Collaboration UI"),this.analyticsInterval&&clearInterval(this.analyticsInterval),this.presenceInterval&&clearInterval(this.presenceInterval),this.container&&this.container.parentNode&&this.container.parentNode.removeChild(this.container),this.activeUsers.clear(),this.liveProgressStreams.clear(),this.notifications=[],this.logger.info("Real-time Collaboration UI destroyed")}}class yt{constructor(e,t,s,i,n){this.logger=e,this.eventBus=t,this.advancedRealtime=s,this.progressSubsystem=i,this.sessionSubsystem=n,this.metrics={system:{performance:[],resources:[],connections:[],errors:[]},operations:{imports:[],exports:[],modifications:[],deletions:[]},users:{sessions:[],activity:[],collaboration:[]},realtime:{connections:[],messages:[],latency:[]}},this.config={metricsRetention:1440*60*1e3,samplingInterval:300*1e3,quickSamplingInterval:30*1e3,batchSize:100,maxDataPoints:1e3,alertThresholds:{memoryUsage:.8,connectionLatency:1e3,errorRate:.05,operationFailureRate:.1}},this.sessionStart=Date.now(),this.lastActivity=Date.now(),this.activityHistory=[],this.performanceBaseline=null,this.isCollecting=!1,this.collectionInterval=null,this.alertsEnabled=!0,this.dashboardSubscribers=new Set,this.logger.info("Analytics Dashboard Subsystem initialized")}async init(){try{this.setupEventBusListeners(),await this.initializeMetricsCollection(),this.startDataCollection(),this.initializeAlertSystem(),this.logger.info("Analytics Dashboard Subsystem initialized successfully"),this.eventBus.emit("subsystem:ready",{subsystem:"analytics-dashboard"})}catch(e){throw this.logger.error("Failed to initialize Analytics Dashboard Subsystem",e),this.eventBus.emit("subsystem:error",{subsystem:"analytics-dashboard",error:e}),e}}setupEventBusListeners(){this.logger.debug("Setting up EventBus listeners for analytics collection"),this.eventBus.on("operation:started",e=>this.recordOperationStart(e)),this.eventBus.on("operation:completed",e=>this.recordOperationComplete(e)),this.eventBus.on("operation:failed",e=>this.recordOperationFailure(e)),this.eventBus.on("operation:progress",e=>this.recordOperationProgress(e)),this.eventBus.on("app:global-error",e=>this.recordSystemError(e)),this.eventBus.on("app:page-loaded",e=>this.recordSystemPerformance(e)),this.eventBus.on("subsystem:error",e=>this.recordSubsystemError(e)),this.eventBus.on("session:user-joined",e=>this.recordUserActivity(e)),this.eventBus.on("session:user-left",e=>this.recordUserActivity(e)),this.eventBus.on("collaboration:user-joined",e=>this.recordCollaborationActivity(e)),this.eventBus.on("collaboration:user-left",e=>this.recordCollaborationActivity(e)),this.eventBus.on("progress-stream:update",e=>this.recordRealtimeActivity(e)),this.eventBus.on("notification:sent",e=>this.recordRealtimeActivity(e)),this.logger.debug("EventBus listeners set up for analytics collection")}async initializeMetricsCollection(){this.logger.debug("Initializing metrics collection"),await this.collectSystemMetrics(),await this.collectOperationMetrics(),await this.collectUserMetrics(),await this.collectRealtimeMetrics(),this.logger.debug("Metrics collection initialized")}async collectSystemMetrics(){try{const e=this.getSystemPerformanceMetrics();this.addMetric("system.performance",e);const t=this.getResourceUsageMetrics();this.addMetric("system.resources",t);const s=this.getConnectionMetrics();this.addMetric("system.connections",s),this.logger.debug("System metrics collected")}catch(e){this.logger.error("Failed to collect system metrics",e)}}async collectOperationMetrics(){try{const e={timestamp:new Date,totalOperations:this.metrics.operations.imports.length+this.metrics.operations.exports.length+this.metrics.operations.modifications.length+this.metrics.operations.deletions.length,successfulOperations:this.getSuccessfulOperationsCount(),failedOperations:this.getFailedOperationsCount(),averageResponseTime:this.getAverageResponseTime()};this.addMetric("operations.summary",e),this.logger.debug("Operation metrics collected")}catch(e){this.logger.error("Failed to collect operation metrics",e)}}async collectUserMetrics(){try{const e={timestamp:new Date,activeSessions:this.sessionSubsystem?await this.sessionSubsystem.getActiveSessionCount():0,totalUsers:this.metrics.users.sessions.length,collaborativeUsers:this.metrics.users.collaboration.length,averageSessionDuration:this.getAverageSessionDuration()};this.addMetric("users.activity",e),this.logger.debug("User metrics collected")}catch(e){this.logger.error("Failed to collect user metrics",e)}}async collectRealtimeMetrics(){try{const e=this.getRealtimeMetrics();this.addMetric("realtime.performance",e),this.logger.debug("Realtime metrics collected")}catch(e){this.logger.error("Failed to collect realtime metrics",e)}}getSuccessfulOperationsCount(){let e=0;return Object.keys(this.metrics.operations).forEach(t=>{e+=this.metrics.operations[t].filter(s=>s.status==="success").length}),e}getFailedOperationsCount(){let e=0;return Object.keys(this.metrics.operations).forEach(t=>{e+=this.metrics.operations[t].filter(s=>s.status==="failed").length}),e}getAverageResponseTime(){let e=0,t=0;return Object.keys(this.metrics.operations).forEach(s=>{this.metrics.operations[s].forEach(i=>{i.responseTime&&(e+=i.responseTime,t++)})}),t>0?e/t:0}getAverageSessionDuration(){if(this.metrics.users.sessions.length===0)return 0;let e=0,t=0;return this.metrics.users.sessions.forEach(s=>{s.duration&&(e+=s.duration,t++)}),t>0?e/t:0}getRecentAverageLatency(){const e=this.metrics.realtime.latency.slice(-10);return e.length===0?null:e.reduce((s,i)=>s+i.value,0)/e.length}getRecentErrorRate(){const e=new Date,t=new Date(e.getTime()-3600*1e3),s=this.metrics.system.errors.filter(n=>new Date(n.timestamp)>t),i=[];return Object.keys(this.metrics.operations).forEach(n=>{i.push(...this.metrics.operations[n].filter(o=>new Date(o.timestamp)>t))}),i.length===0?0:s.length/i.length}startDataCollection(){this.isCollecting||(this.isCollecting=!0,this.collectionInterval=setInterval(async()=>{try{await this.collectPeriodicMetrics(),this.cleanupOldData(),this.checkAlertThresholds(),this.notifyDashboardSubscribers()}catch(e){this.logger.error("Error during periodic data collection",e)}},this.config.samplingInterval),this.logger.info("Started periodic data collection",{interval:this.config.samplingInterval}))}stopDataCollection(){this.isCollecting&&(this.isCollecting=!1,this.collectionInterval&&(clearInterval(this.collectionInterval),this.collectionInterval=null),this.logger.info("Stopped periodic data collection"))}async collectPeriodicMetrics(){const e=new Date;try{const t=await this.getSystemPerformanceMetrics();this.addMetric("system.performance",{timestamp:e,...t})}catch(t){this.logger.debug("Failed to collect system performance metrics",t)}try{const t=await this.getResourceUsageMetrics();this.addMetric("system.resources",{timestamp:e,...t})}catch(t){this.logger.debug("Failed to collect resource usage metrics",t)}try{const t=await this.getConnectionMetrics();this.addMetric("system.connections",{timestamp:e,...t})}catch(t){this.logger.debug("Failed to collect connection metrics",t)}try{const t=await this.getRealtimeMetrics();this.addMetric("realtime.connections",{timestamp:e,...t})}catch(t){this.logger.debug("Failed to collect realtime metrics",t)}}async getSystemPerformanceMetrics(){const e=Date.now();return{timestamp:new Date,memory:this.getMemoryMetrics(),timing:this.getPerformanceTimingMetrics(),cpu:this.getCPUUsageEstimate(),session:{uptime:e-this.sessionStart,sessionDuration:this.formatDuration(e-this.sessionStart),lastActivity:e-this.lastActivity,currentTime:new Date().toLocaleString(),timeZone:Intl.DateTimeFormat().resolvedOptions().timeZone},browser:{userAgent:navigator.userAgent,language:navigator.language,platform:navigator.platform,cookieEnabled:navigator.cookieEnabled,onLine:navigator.onLine,hardwareConcurrency:navigator.hardwareConcurrency||"Unknown"},display:{screenWidth:screen.width,screenHeight:screen.height,viewportWidth:window.innerWidth,viewportHeight:window.innerHeight,colorDepth:screen.colorDepth,pixelRatio:window.devicePixelRatio||1},connection:this.getConnectionInfo(),performance:{loadTime:this.getPageLoadTime(),domContentLoaded:this.getDOMContentLoadedTime(),resourcesLoaded:performance.getEntriesByType("resource").length,navigationTiming:this.getNavigationTiming()}}}getMemoryMetrics(){if(performance.memory){const e=performance.memory;return{used:e.usedJSHeapSize,total:e.totalJSHeapSize,limit:e.jsHeapSizeLimit,usagePercentage:Math.round(e.usedJSHeapSize/e.jsHeapSizeLimit*100),formattedUsed:this.formatBytes(e.usedJSHeapSize),formattedTotal:this.formatBytes(e.totalJSHeapSize),formattedLimit:this.formatBytes(e.jsHeapSizeLimit)}}return null}getPerformanceTimingMetrics(){if(performance.timing){const e=performance.timing;return{navigationStart:e.navigationStart,domContentLoaded:e.domContentLoadedEventEnd-e.navigationStart,loadComplete:e.loadEventEnd-e.navigationStart,domInteractive:e.domInteractive-e.navigationStart,firstPaint:this.getFirstPaintTime()}}return null}getCPUUsageEstimate(){try{const e=performance.now();let t=0;const s=10,i=e+s;for(;performance.now()<i;)t++;const o=Math.min(100,Math.round(t/1e5*100));return{estimatedUsage:Math.max(0,100-o),performanceScore:o,iterations:t,testDuration:s}}catch(e){return{estimatedUsage:"Unknown",error:e.message}}}getConnectionInfo(){if(navigator.connection||navigator.mozConnection||navigator.webkitConnection){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return{effectiveType:e.effectiveType||"Unknown",downlink:e.downlink||"Unknown",rtt:e.rtt||"Unknown",saveData:e.saveData||!1}}return{status:"Connection API not available"}}getPageLoadTime(){return performance.timing?performance.timing.loadEventEnd-performance.timing.navigationStart:null}getDOMContentLoadedTime(){return performance.timing?performance.timing.domContentLoadedEventEnd-performance.timing.navigationStart:null}getFirstPaintTime(){try{const t=performance.getEntriesByType("paint").find(s=>s.name==="first-paint");return t?t.startTime:null}catch{return null}}getNavigationTiming(){if(performance.getEntriesByType){const e=performance.getEntriesByType("navigation");if(e.length>0){const t=e[0];return{type:t.type,redirectCount:t.redirectCount,transferSize:t.transferSize,encodedBodySize:t.encodedBodySize,decodedBodySize:t.decodedBodySize}}}return null}formatBytes(e){if(e===0)return"0 Bytes";const t=1024,s=["Bytes","KB","MB","GB"],i=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,i)).toFixed(2))+" "+s[i]}formatDuration(e){const t=Math.floor(e/1e3),s=Math.floor(t/60),i=Math.floor(s/60),n=Math.floor(i/24);return n>0?`${n}d ${i%24}h ${s%60}m`:i>0?`${i}h ${s%60}m ${t%60}s`:s>0?`${s}m ${t%60}s`:`${t}s`}recordActivity(e,t={}){this.lastActivity=Date.now();const s={timestamp:new Date,type:e,data:t};this.activityHistory.push(s),this.activityHistory.length>100&&(this.activityHistory=this.activityHistory.slice(-100)),this.addMetric("users.activity",s)}getRecentActivity(e=10){return this.activityHistory.slice(-e).reverse()}async getDashboardData(){const e=await this.getSystemPerformanceMetrics(),t=this.getRecentActivity(15);return{timestamp:new Date,system:e,activity:t,summary:{totalOperations:this.getTotalOperationsCount(),successfulOperations:this.getSuccessfulOperationsCount(),failedOperations:this.getFailedOperationsCount(),averageResponseTime:this.getAverageResponseTime(),errorRate:this.getErrorRate(),activeSubsystems:this.getActiveSubsystemCount(),uptime:this.formatDuration(Date.now()-this.sessionStart)},alerts:this.alerts||[]}}getTotalOperationsCount(){let e=0;return Object.keys(this.metrics.operations).forEach(t=>{e+=this.metrics.operations[t].length}),e}async getResourceUsageMetrics(){try{return{timestamp:new Date,domElements:document.querySelectorAll("*").length,localStorage:this.getLocalStorageUsage(),sessionStorage:this.getSessionStorageUsage(),eventListeners:this.getEventListenerCount(),activeTimers:this.getActiveTimerCount(),resourceEntries:performance.getEntriesByType("resource").length,networkResources:this.getNetworkResourceCount(),memoryUsage:this.getMemoryMetrics(),totalMetrics:this.getTotalMetricsCount()}}catch(e){return this.logger.debug("Failed to collect resource usage metrics",e),{timestamp:new Date,error:e.message}}}async getConnectionMetrics(){const e=this.advancedRealtime?.realtimeCommunication?.getConnectionStatus()||{};return{timestamp:new Date,isConnected:e.isConnected||!1,connectionType:e.connectionType||"none",reconnectAttempts:e.reconnectAttempts||0,activeUsers:this.advancedRealtime?.activeUsers?.size||0,collaborationRooms:this.advancedRealtime?.collaborationRooms?.size||0}}async getRealtimeMetrics(){return{timestamp:new Date,liveProgressStreams:this.advancedRealtime?.liveProgressStreams?.size||0,notificationQueues:this.advancedRealtime?.notificationQueues?.size||0,analyticsStreams:this.advancedRealtime?.analyticsStreams?.size||0,messagesSent:this.getRealtimeMessageCount(),messagesReceived:this.getRealtimeMessageCount("received")}}recordOperationStart(e){this.addMetric(`operations.${e.type||"unknown"}`,{timestamp:new Date,event:"started",operationId:e.operationId,type:e.type,userId:e.userId,metadata:e.metadata||{}}),this.logger.debug("Recorded operation start",{type:e.type,operationId:e.operationId})}recordOperationComplete(e){this.addMetric(`operations.${e.type||"unknown"}`,{timestamp:new Date,event:"completed",operationId:e.operationId,type:e.type,duration:e.duration,recordsProcessed:e.recordsProcessed,success:!0,metadata:e.metadata||{}}),this.logger.debug("Recorded operation completion",{type:e.type,operationId:e.operationId})}recordOperationFailure(e){this.addMetric(`operations.${e.type||"unknown"}`,{timestamp:new Date,event:"failed",operationId:e.operationId,type:e.type,error:e.error,duration:e.duration,success:!1,metadata:e.metadata||{}}),this.logger.debug("Recorded operation failure",{type:e.type,operationId:e.operationId})}recordSystemError(e){const t={timestamp:new Date,type:"system-error",error:e.error||e.message||"Unknown error",stack:e.stack,context:e.context||{},severity:e.severity||"error"};this.addMetric("system.errors",t),this.logger.debug("System error recorded",t)}recordSubsystemError(e){const t={timestamp:new Date,type:"subsystem-error",subsystem:e.subsystem||"unknown",error:e.error?.message||e.error||"Unknown subsystem error",stack:e.error?.stack,context:e.context||{},severity:"error"};this.addMetric("system.errors",t),this.logger.debug("Subsystem error recorded",t)}recordUserActivity(e){this.addMetric("users.activity",{timestamp:new Date,event:e.event||"activity",userId:e.userId,sessionId:e.sessionId,metadata:e.metadata||{}}),this.logger.debug("Recorded user activity",{event:e.event,userId:e.userId})}recordCollaborationActivity(e){this.addMetric("users.collaboration",{timestamp:new Date,event:e.event||"collaboration",userId:e.userId||e.user?.id,roomId:e.roomId,userCount:e.totalUsers,metadata:e.metadata||{}}),this.logger.debug("Recorded collaboration activity",{event:e.event,roomId:e.roomId})}recordRealtimeActivity(e){this.addMetric("realtime.messages",{timestamp:new Date,type:e.type||"message",operationId:e.operationId,recipients:e.recipients?.length||0,metadata:e.metadata||{}}),this.logger.debug("Recorded real-time activity",{type:e.type})}async getAnalyticsDashboardData(e="1h"){const t=new Date,s=new Date(t.getTime()-this.parseTimeRange(e));try{return{timestamp:t,timeRange:e,summary:await this.getSummaryMetrics(s,t),systemMetrics:await this.getSystemMetricsData(s,t),operationMetrics:await this.getOperationMetricsData(s,t),userMetrics:await this.getUserMetricsData(s,t),realtimeMetrics:await this.getRealtimeMetricsData(s,t),alerts:this.getActiveAlerts(),trends:await this.getTrendAnalysis(s,t)}}catch(i){throw this.logger.error("Failed to get analytics dashboard data",i),i}}async getSummaryMetrics(e,t){return{totalOperations:this.countMetricsInRange("operations",e,t),successfulOperations:this.countSuccessfulOperations(e,t),failedOperations:this.countFailedOperations(e,t),activeUsers:this.advancedRealtime?.activeUsers?.size||0,systemErrors:this.countMetricsInRange("system.errors",e,t),averageLatency:this.getAverageLatency(e,t),memoryUsage:this.getCurrentMemoryUsage(),connectionStatus:this.advancedRealtime?.realtimeCommunication?.getConnectionStatus()}}async getSystemMetricsData(e,t){const s=this.getMetricsInRange("system.performance",e,t),i=this.getMetricsInRange("system.resources",e,t),n=this.getMetricsInRange("system.connections",e,t);return{performance:this.formatTimeSeriesData(s,"memory.usage"),resources:this.formatTimeSeriesData(i,"domElements"),connections:this.formatTimeSeriesData(n,"activeUsers"),errors:this.getMetricsInRange("system.errors",e,t)}}async getOperationMetricsData(e,t){const s=this.getMetricsInRange("operations.imports",e,t),i=this.getMetricsInRange("operations.exports",e,t),n=this.getMetricsInRange("operations.modifications",e,t),o=this.getMetricsInRange("operations.deletions",e,t);return{imports:this.aggregateOperationMetrics(s),exports:this.aggregateOperationMetrics(i),modifications:this.aggregateOperationMetrics(n),deletions:this.aggregateOperationMetrics(o),timeline:this.createOperationTimeline(e,t)}}subscribeToDashboardUpdates(e){return this.dashboardSubscribers.add(e),()=>this.dashboardSubscribers.delete(e)}notifyDashboardSubscribers(){this.dashboardSubscribers.size>0&&this.getAnalyticsDashboardData().then(e=>{this.dashboardSubscribers.forEach(t=>{try{t(e)}catch(s){this.logger.error("Error notifying dashboard subscriber",s)}})})}addMetric(e,t){const[s,i]=e.split(".");this.metrics[s]||(this.metrics[s]={}),this.metrics[s][i]||(this.metrics[s][i]=[]),this.metrics[s][i].push(t),this.metrics[s][i].length>this.config.maxDataPoints&&this.metrics[s][i].shift()}getMetricsInRange(e,t,s){const[i,n]=e.split(".");return(this.metrics[i]?.[n]||[]).filter(a=>a.timestamp>=t&&a.timestamp<=s)}countMetricsInRange(e,t,s){return this.getMetricsInRange(e,t,s).length}parseTimeRange(e){const t={m:6e4,h:36e5,d:864e5},s=e.match(/^(\d+)([mhd])$/);if(!s)return 3600*1e3;const[,i,n]=s;return parseInt(i)*t[n]}cleanupOldData(){const e=new Date(Date.now()-this.config.metricsRetention);Object.keys(this.metrics).forEach(t=>{Object.keys(this.metrics[t]).forEach(s=>{this.metrics[t][s]=this.metrics[t][s].filter(i=>i.timestamp>e)})})}async measureConnectionLatency(){try{if(!this.advancedRealtime?.realtimeCommunication?.isConnected||!this.advancedRealtime.realtimeCommunication.socket)return null;const e=performance.now();return new Promise(t=>{try{this.advancedRealtime.realtimeCommunication.socket.emit("ping",e,()=>{const s=performance.now()-e;t(s)}),setTimeout(()=>t(null),3e3)}catch(s){this.logger.debug("Error emitting ping for latency measurement",s),t(null)}})}catch(e){return this.logger.debug("Error measuring connection latency",e),null}}getActiveSubsystemCount(){return Object.keys(window.app?.subsystems||{}).length}getEventListenerCount(){try{return this.eventBus&&this.eventBus._events?Object.keys(this.eventBus._events).length:0}catch{return 0}}getRealtimeMessageCount(e="sent"){try{return this.advancedRealtime&&this.advancedRealtime.getMessageCount?this.advancedRealtime.getMessageCount(e):this.advancedRealtime?.messageCount||0}catch{return 0}}getLocalStorageUsage(){try{let e=0;for(let t in localStorage)localStorage.hasOwnProperty(t)&&(e+=localStorage[t].length+t.length);return e}catch{return 0}}getSessionStorageUsage(){try{let e=0;for(let t in sessionStorage)sessionStorage.hasOwnProperty(t)&&(e+=sessionStorage[t].length+t.length);return e}catch{return 0}}getLocalStorageUsage(){try{let e=0;for(let t in localStorage)localStorage.hasOwnProperty(t)&&(e+=localStorage[t].length+t.length);return e}catch{return 0}}getActiveTimerCount(){let e=0;return this.collectionInterval&&e++,this.alertCheckInterval&&e++,e+5}getNetworkResourceCount(){try{const e=performance.getEntriesByType("resource");return{total:e.length,scripts:e.filter(t=>t.name.includes(".js")).length,stylesheets:e.filter(t=>t.name.includes(".css")).length,images:e.filter(t=>/\.(png|jpg|jpeg|gif|svg|webp)/.test(t.name)).length,xhr:e.filter(t=>t.initiatorType==="xmlhttprequest").length,fetch:e.filter(t=>t.initiatorType==="fetch").length}}catch(e){return{total:0,error:e.message}}}initializeAlertSystem(){this.alerts=[],this.logger.debug("Alert system initialized")}checkAlertThresholds(){if(!this.alertsEnabled)return;if(performance.memory){const s=performance.memory.usedJSHeapSize/performance.memory.totalJSHeapSize;s>this.config.alertThresholds.memoryUsage&&this.createAlert("high-memory-usage",`Memory usage is ${(s*100).toFixed(1)}%`,"warning")}const e=this.getRecentAverageLatency();e&&e>this.config.alertThresholds.connectionLatency&&this.createAlert("high-latency",`Connection latency is ${e.toFixed(0)}ms`,"warning");const t=this.getRecentErrorRate();t>this.config.alertThresholds.errorRate&&this.createAlert("high-error-rate",`Error rate is ${(t*100).toFixed(1)}%`,"error")}createAlert(e,t,s){const i={id:e,message:t,severity:s,timestamp:new Date,acknowledged:!1};this.alerts.find(n=>n.id===e&&!n.acknowledged)||(this.alerts.push(i),this.eventBus.emit("analytics:alert-created",i),this.logger.warn("Analytics alert created",i))}getActiveAlerts(){return this.alerts.filter(e=>!e.acknowledged)}async disconnect(){this.logger.info("Disconnecting Analytics Dashboard Subsystem"),this.stopDataCollection(),this.dashboardSubscribers.clear(),Object.keys(this.metrics).forEach(e=>{Object.keys(this.metrics[e]).forEach(t=>{this.metrics[e][t]=[]})}),this.logger.info("Analytics Dashboard Subsystem disconnected")}getStatus(){return{isInitialized:!0,isCollecting:this.isCollecting,metricsCount:this.getTotalMetricsCount(),alertsCount:this.getActiveAlerts().length,subscribersCount:this.dashboardSubscribers.size,timestamp:new Date}}getTotalMetricsCount(){let e=0;return Object.keys(this.metrics).forEach(t=>{Object.keys(this.metrics[t]).forEach(s=>{e+=this.metrics[t][s].length})}),e}}window.openAPITestingDashboard=()=>window.testingHub?.openAPITestingDashboard();window.runQuickAPITests=()=>window.testingHub?.runQuickAPITests();window.testAllSubsystems=()=>window.testingHub?.testAllSubsystems();window.openSwaggerUI=()=>window.testingHub?.openSwaggerUI();window.validateSwaggerSpec=()=>window.testingHub?.validateSwaggerSpec();window.downloadSwaggerSpec=()=>window.testingHub?.downloadSwaggerSpec();window.testHistoryUI=()=>window.testingHub?.testHistoryUI();window.testLoggingUI=()=>window.testingHub?.testLoggingUI();window.testImportUI=()=>window.testingHub?.testImportUI();window.runAllUITests=()=>window.testingHub?.runAllUITests();window.runHealthChecks=()=>window.testingHub?.runHealthChecks();window.testConnectivity=()=>window.testingHub?.testConnectivity();window.checkPerformance=()=>window.testingHub?.checkPerformance();window.validateConfiguration=()=>window.testingHub?.validateConfiguration();window.testImportWorkflow=()=>window.testingHub?.testImportWorkflow();window.testExportWorkflow=()=>window.testingHub?.testExportWorkflow();window.testAuthFlow=()=>window.testingHub?.testAuthFlow();window.runE2ETests=()=>window.testingHub?.runE2ETests();window.clearAllTestResults=()=>window.testingHub?.clearAllTestResults();window.exportTestResults=()=>window.testingHub?.exportTestResults();class wt{constructor(e,t,s,i){this.logger=e||O({serviceName:"enhanced-progress-subsystem",enableServer:!0}),this.uiManager=t,this.eventBus=s,this.realtimeComm=i,this.currentOperation=null,this.isActive=!1,this.startTime=null,this.stats={processed:0,successful:0,failed:0,skipped:0,total:0,errors:[]},this.progressContainer=null,this.progressElements={},this.OPERATION_TYPES={IMPORT:"import",EXPORT:"export",DELETE:"delete",MODIFY:"modify"},this.logger.info("Enhanced Progress Subsystem initialized")}async init(){try{this.logger.debug("Initializing Enhanced Progress Subsystem..."),this.setupEventListeners(),this.setupRealtimeListeners(),this.initializeProgressUI(),this.logger.info("Enhanced Progress Subsystem initialized successfully")}catch(e){throw this.logger.error("Failed to initialize Enhanced Progress Subsystem",{error:e.message,stack:e.stack}),e}}setupEventListeners(){this.eventBus.on("operation:started",e=>{this.startOperation(e.type,e.options)}),this.eventBus.on("operation:progress",e=>{this.updateProgress(e)}),this.eventBus.on("operation:completed",e=>{this.completeOperation(e)}),this.eventBus.on("operation:error",e=>{this.handleError(e)}),this.eventBus.on("operation:cancelled",e=>{this.cancelOperation(e)}),this.logger.debug("Enhanced Progress event listeners set up")}setupRealtimeListeners(){this.realtimeComm&&(this.realtimeComm.on("progress",e=>{this.updateProgress(e)}),this.realtimeComm.on("operation-complete",e=>{this.completeOperation(e)}),this.realtimeComm.on("operation-error",e=>{this.handleError(e)}),this.logger.debug("Enhanced Progress real-time listeners set up"))}initializeProgressUI(){Object.values(this.OPERATION_TYPES).forEach(e=>{const t=`${e}-progress-container`;let s=document.getElementById(t);s||(s=this.createProgressContainer(e)),this.progressElements[e]={container:s,progressBar:s.querySelector(".progress-bar-fill"),percentage:s.querySelector(".progress-percentage"),statusMessage:s.querySelector(".status-message"),progressText:s.querySelector(".progress-text"),statusDetails:s.querySelector(".status-details"),stats:{total:s.querySelector(".stat-value.total"),processed:s.querySelector(".stat-value.processed"),success:s.querySelector(".stat-value.success"),failed:s.querySelector(".stat-value.failed"),skipped:s.querySelector(".stat-value.skipped")},timing:{elapsed:s.querySelector(".elapsed-value"),eta:s.querySelector(".eta-value")},cancelButton:s.querySelector(".cancel-import-btn, .cancel-export-btn, .cancel-delete-btn, .cancel-modify-btn")}}),this.logger.debug("Enhanced Progress UI initialized for all operation types")}createProgressContainer(e){const t=document.createElement("div");t.id=`${e}-progress-container`,t.className="progress-container enhanced-progress",t.style.display="none";const s=e.charAt(0).toUpperCase()+e.slice(1);t.innerHTML=`
            <div class="progress-section">
                <div class="progress-header">
                    <h3><i class="fas fa-cog fa-spin"></i> ${s} Progress</h3>
                    <button class="close-progress-btn" type="button" aria-label="Close progress">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="progress-content">
                    <div class="progress-bar-container">
                        <div class="progress-bar">
                            <div class="progress-bar-fill"></div>
                        </div>
                        <div class="progress-percentage">0%</div>
                    </div>
                    
                    <div class="progress-status">
                        <div class="status-message">Preparing ${e}...</div>
                        <div class="progress-text"></div>
                        <div class="status-details"></div>
                    </div>
                    
                    <div class="progress-stats">
                        <div class="stat-item">
                            <span class="stat-label">Total:</span>
                            <span class="stat-value total">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Processed:</span>
                            <span class="stat-value processed">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Success:</span>
                            <span class="stat-value success">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Failed:</span>
                            <span class="stat-value failed">0</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Skipped:</span>
                            <span class="stat-value skipped">0</span>
                        </div>
                    </div>
                    
                    <div class="progress-timing">
                        <div class="time-elapsed">
                            <i class="fas fa-clock"></i>
                            <span>Elapsed: <span class="elapsed-value">00:00</span></span>
                        </div>
                        <div class="time-remaining">
                            <i class="fas fa-hourglass-half"></i>
                            <span>ETA: <span class="eta-value">Calculating...</span></span>
                        </div>
                    </div>
                    
                    <div class="progress-actions">
                        <button class="btn btn-secondary cancel-${e}-btn" type="button">
                            <i class="fas fa-stop"></i> Cancel ${s}
                        </button>
                    </div>
                </div>
            </div>
        `;const i=document.getElementById(`${e}-view`);i?i.appendChild(t):document.body.appendChild(t);const n=t.querySelector(".close-progress-btn");n&&n.addEventListener("click",()=>this.hideProgress(e));const o=t.querySelector(`.cancel-${e}-btn`);return o&&o.addEventListener("click",()=>this.requestCancel(e)),t}startOperation(e,t={}){this.currentOperation=e,this.isActive=!0,this.startTime=Date.now(),this.stats={processed:0,successful:0,failed:0,skipped:0,total:t.total||0,errors:[]},this.showProgress(e),this.updateProgressUI(e,{message:`Starting ${e} operation...`,percentage:0}),this.logger.info("🔧 PROGRESS: Operation started",{type:e,total:this.stats.total,options:t}),this.eventBus.emit("progress:operation-started",{type:e,stats:this.stats,options:t})}updateProgress(e){if(!this.isActive||!this.currentOperation)return;e.processed!==void 0&&(this.stats.processed=e.processed),e.successful!==void 0&&(this.stats.successful=e.successful),e.failed!==void 0&&(this.stats.failed=e.failed),e.skipped!==void 0&&(this.stats.skipped=e.skipped),e.total!==void 0&&(this.stats.total=e.total),e.error&&this.stats.errors.push(e.error);const t=this.stats.total>0?Math.round(this.stats.processed/this.stats.total*100):0,s=Date.now()-this.startTime,i=this.stats.processed/(s/1e3),n=this.stats.total-this.stats.processed,o=i>0?n/i:0;this.updateProgressUI(this.currentOperation,{percentage:t,message:e.message||`Processing ${this.currentOperation}...`,progressText:`${this.stats.processed} of ${this.stats.total} processed`,elapsed:this.formatTime(s/1e3),eta:o>0?this.formatTime(o):"Calculating..."}),this.logger.debug("🔧 PROGRESS: Progress updated",{type:this.currentOperation,percentage:t,stats:this.stats}),this.eventBus.emit("progress:updated",{type:this.currentOperation,percentage:t,stats:this.stats,data:e})}completeOperation(e){if(!this.isActive||!this.currentOperation)return;const t=this.currentOperation,s=this.stats.failed===0,i=Date.now()-this.startTime;e.stats&&Object.assign(this.stats,e.stats),this.updateProgressUI(t,{percentage:100,message:s?`${t.charAt(0).toUpperCase()+t.slice(1)} completed successfully!`:`${t.charAt(0).toUpperCase()+t.slice(1)} completed with ${this.stats.failed} errors`,progressText:`Completed ${this.stats.processed} items in ${this.formatTime(i/1e3)}`,elapsed:this.formatTime(i/1e3),eta:"Complete"}),s&&setTimeout(()=>this.hideProgress(t),5e3),this.isActive=!1,this.logger.info("🔧 PROGRESS: Operation completed",{type:t,success:s,stats:this.stats,duration:i}),this.eventBus.emit("progress:operation-completed",{type:t,success:s,stats:this.stats,duration:i,data:e})}handleError(e){!this.isActive||!this.currentOperation||(this.stats.errors.push(e),this.stats.failed++,this.updateProgressUI(this.currentOperation,{message:`Error: ${e.message||e.toString()}`,statusDetails:`${this.stats.errors.length} error(s) occurred`}),this.logger.error("🔧 PROGRESS: Operation error",{type:this.currentOperation,error:e.message,stats:this.stats}),this.eventBus.emit("progress:error",{type:this.currentOperation,error:e,stats:this.stats}))}cancelOperation(e){if(!this.isActive||!this.currentOperation)return;const t=this.currentOperation;this.updateProgressUI(t,{message:`${t.charAt(0).toUpperCase()+t.slice(1)} operation cancelled`,statusDetails:"Operation was cancelled by user"}),this.isActive=!1,this.logger.info("🔧 PROGRESS: Operation cancelled",{type:t,stats:this.stats}),this.eventBus.emit("progress:operation-cancelled",{type:t,stats:this.stats,data:e}),setTimeout(()=>this.hideProgress(t),2e3)}requestCancel(e){this.logger.info("🔧 PROGRESS: Cancel requested",{type:e}),this.eventBus.emit("operation:cancel-requested",{type:e}),this.updateProgressUI(e,{message:"Cancelling operation...",statusDetails:"Please wait while the operation is cancelled"})}updateProgressUI(e,t){const s=this.progressElements[e];s&&(t.percentage!==void 0&&s.progressBar&&(s.progressBar.style.width=`${t.percentage}%`),t.percentage!==void 0&&s.percentage&&(s.percentage.textContent=`${t.percentage}%`),t.message&&s.statusMessage&&(s.statusMessage.textContent=t.message),t.progressText&&s.progressText&&(s.progressText.textContent=t.progressText),t.statusDetails&&s.statusDetails&&(s.statusDetails.textContent=t.statusDetails),s.stats&&Object.keys(s.stats).forEach(i=>{s.stats[i]&&this.stats[i]!==void 0&&(s.stats[i].textContent=this.stats[i])}),s.timing&&(t.elapsed&&s.timing.elapsed&&(s.timing.elapsed.textContent=t.elapsed),t.eta&&s.timing.eta&&(s.timing.eta.textContent=t.eta)))}showProgress(e){const t=this.progressElements[e];t&&t.container&&(t.container.style.display="block",t.container.classList.add("active")),this.logger.debug("🔧 PROGRESS: Progress UI shown",{type:e})}hideProgress(e){const t=this.progressElements[e];t&&t.container&&(t.container.style.display="none",t.container.classList.remove("active")),this.logger.debug("🔧 PROGRESS: Progress UI hidden",{type:e})}formatTime(e){if(e<60)return`${Math.round(e)}s`;if(e<3600){const t=Math.floor(e/60),s=Math.round(e%60);return`${t}m ${s}s`}else{const t=Math.floor(e/3600),s=Math.floor(e%3600/60);return`${t}h ${s}m`}}getState(){return{currentOperation:this.currentOperation,isActive:this.isActive,startTime:this.startTime,stats:{...this.stats}}}reset(e=null){e?this.hideProgress(e):Object.keys(this.progressElements).forEach(t=>{this.hideProgress(t)}),(!e||e===this.currentOperation)&&(this.currentOperation=null,this.isActive=!1,this.startTime=null,this.stats={processed:0,successful:0,failed:0,skipped:0,total:0,errors:[]}),this.logger.info("🔧 PROGRESS: Progress reset",{type:e||"all"})}destroy(){Object.keys(this.progressElements).forEach(e=>{this.hideProgress(e)}),this.isActive=!1,this.currentOperation=null,this.progressElements={},this.logger.info("Enhanced Progress Subsystem destroyed")}}class vt{constructor(e,t,s){this.logger=e||O({serviceName:"enhanced-token-status-subsystem",enableServer:!0}),this.eventBus=t,this.uiManager=s,this.tokenInfo={isValid:!1,expiresAt:null,expiresIn:0,tokenType:"Bearer",lastChecked:null},this.statusElements={},this.statusCheckInterval=null,this.uiUpdateInterval=null,this.CHECK_INTERVAL=3e4,this.UI_UPDATE_INTERVAL=1e3,this.logger.info("🔑 Enhanced Token Status Subsystem initialized")}async init(){try{this.logger.debug("🔑 Initializing Enhanced Token Status Subsystem..."),this.cacheUIElements(),this.setupEventListeners(),this.startMonitoring(),await this.checkTokenStatus(),this.logger.info("🔑 Enhanced Token Status Subsystem initialized successfully")}catch(e){throw this.logger.error("🔑 Failed to initialize Enhanced Token Status Subsystem",{error:e.message,stack:e.stack}),e}}cacheUIElements(){const e=document.getElementById("global-token-status");e&&(this.statusElements.global={container:e,icon:e.querySelector(".global-token-icon"),text:e.querySelector(".global-token-text"),countdown:e.querySelector(".global-token-countdown"),indicator:document.getElementById("token-status-indicator"),refreshButton:document.getElementById("global-refresh-token"),getTokenButton:document.getElementById("global-get-token")}),document.querySelectorAll(".token-status-indicator").forEach((s,i)=>{this.statusElements[`indicator_${i}`]={container:s,icon:s.querySelector(".token-status-icon"),text:s.querySelector(".token-status-text"),time:s.querySelector(".token-status-time"),actions:s.querySelector(".token-status-actions")}}),this.logger.debug("🔑 UI elements cached",{globalStatus:!!this.statusElements.global,indicators:Object.keys(this.statusElements).filter(s=>s.startsWith("indicator_")).length})}setupEventListeners(){this.eventBus.on("token:refreshed",e=>{this.logger.info("🔑 TOKEN: Token refreshed event received",e),this.handleTokenRefreshed(e)}),this.eventBus.on("token:expired",e=>{this.logger.warn("🔑 TOKEN: Token expired event received",e),this.handleTokenExpired(e)}),this.eventBus.on("token:error",e=>{this.logger.error("🔑 TOKEN: Token error event received",e),this.handleTokenError(e)}),this.eventBus.on("token:obtained",e=>{this.logger.info("🔑 TOKEN: Token obtained event received",e),this.handleTokenObtained(e)}),this.eventBus.on("settings:updated",()=>{this.logger.debug("🔑 Settings updated, checking token status"),this.checkTokenStatus()}),this.setupButtonListeners(),this.logger.debug("🔑 Event listeners set up")}setupButtonListeners(){this.statusElements.global?.refreshButton&&this.statusElements.global.refreshButton.addEventListener("click",()=>{this.logger.info("🔑 TOKEN: Refresh button clicked"),this.refreshToken()}),this.statusElements.global?.getTokenButton&&this.statusElements.global.getTokenButton.addEventListener("click",()=>{this.logger.info("🔑 TOKEN: Get token button clicked"),this.getNewToken()}),this.logger.debug("🔑 Button listeners set up")}startMonitoring(){this.statusCheckInterval=setInterval(()=>{this.checkTokenStatus()},1e4),this.uiUpdateInterval=setInterval(()=>{this.updateCountdown()},1e3),this.logger.debug("🔑 Token monitoring started with improved frequency")}stopMonitoring(){this.statusCheckInterval&&(clearInterval(this.statusCheckInterval),this.statusCheckInterval=null),this.uiUpdateInterval&&(clearInterval(this.uiUpdateInterval),this.uiUpdateInterval=null),this.logger.debug("🔑 Token monitoring stopped")}async checkTokenStatus(){try{this.logger.debug("🔑 Checking token status...");const e=await this.getTokenInfo();this.tokenInfo={...this.tokenInfo,...e,lastChecked:Date.now()},this.updateUI(),this.logTokenStatus(),this.eventBus.emit("token-status:updated",this.tokenInfo)}catch(e){this.logger.error("🔑 Error checking token status",{error:e.message}),this.tokenInfo={...this.tokenInfo,isValid:!1,error:e.message,lastChecked:Date.now()},this.updateUI()}}async getTokenInfo(){if(window.app?.subsystems?.globalTokenManager)try{const e=window.app.subsystems.globalTokenManager.getTokenStatus();if(e)return{isValid:e.isValid,expiresAt:e.expiresAt,expiresIn:e.expiresIn,tokenType:e.tokenType||"Bearer"}}catch(e){this.logger.debug("🔑 Could not get status from global token manager",e)}if(window.app?.tokenManager)try{const e=window.app.tokenManager.getTokenStatus();if(e)return{isValid:e.isValid,expiresAt:e.expiresAt,expiresIn:e.expiresIn,tokenType:e.tokenType||"Bearer"}}catch(e){this.logger.debug("🔑 Could not get status from token manager",e)}try{const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(e&&t){const s=parseInt(t,10),i=Math.floor(Date.now()/1e3),n=Math.max(0,s-i);return{isValid:n>0,expiresAt:new Date(s*1e3).toISOString(),expiresIn:n,tokenType:"Bearer"}}}catch(e){this.logger.debug("🔑 Could not get token from localStorage",e)}return{isValid:!1,expiresAt:null,expiresIn:0,tokenType:"Bearer"}}updateUI(){const e=this.determineStatus();this.statusElements.global&&this.updateGlobalStatus(e),Object.keys(this.statusElements).forEach(t=>{t.startsWith("indicator_")&&this.updateIndicator(this.statusElements[t],e)}),this.logger.debug("🔑 UI updated",{status:e.type})}determineStatus(){return this.tokenInfo.error?{type:"error",icon:"❌",text:"Token Error",className:"error",color:"#dc3545"}:!this.tokenInfo.isValid||this.tokenInfo.expiresIn<=0?{type:"expired",icon:"🔒",text:"Token Expired",className:"expired",color:"#dc3545"}:this.tokenInfo.expiresIn<=300?{type:"expiring",icon:"⚠️",text:"Token Expiring",className:"expiring",color:"#ffc107"}:{type:"valid",icon:"✅",text:"Token Valid",className:"valid",color:"#28a745"}}updateGlobalStatus(e){const t=this.statusElements.global;if(t){if(t.container&&(t.container.className=`global-token-status ${e.className}`),t.icon&&(t.icon.textContent=e.icon),t.text&&(t.text.textContent=e.text),t.countdown)if(this.tokenInfo.isValid&&this.tokenInfo.expiresIn>0){const s=Math.floor(this.tokenInfo.expiresIn/60);t.countdown.textContent=`${s}m`}else t.countdown.textContent="";t.indicator&&(t.indicator.className=`token-status-indicator ${e.className}`,t.indicator.style.color=e.color,t.indicator.textContent="●",t.indicator.title=`${e.text} - ${this.formatTimeRemaining()}`),t.refreshButton&&(t.refreshButton.style.display=this.tokenInfo.isValid?"inline-block":"none"),t.getTokenButton&&(t.getTokenButton.style.display=this.tokenInfo.isValid?"none":"inline-block")}}updateIndicator(e,t){!e||!e.container||(e.container.className=`token-status-indicator ${t.className}`,e.icon&&(e.icon.textContent=t.icon),e.text&&(e.text.textContent=t.text),e.time&&(e.time.textContent=this.formatTimeRemaining()))}updateCountdown(){if(!(!this.tokenInfo.isValid||this.tokenInfo.expiresIn<=0)&&this.tokenInfo.expiresAt){const e=new Date(this.tokenInfo.expiresAt).getTime(),t=Date.now(),s=Math.max(0,Math.floor((e-t)/1e3));if(this.tokenInfo.expiresIn=s,this.statusElements.global?.countdown){const i=Math.floor(s/60);this.statusElements.global.countdown.textContent=s>0?`${i}m`:""}Object.keys(this.statusElements).forEach(i=>{i.startsWith("indicator_")&&this.statusElements[i].time&&(this.statusElements[i].time.textContent=this.formatTimeRemaining())}),s<=0&&this.tokenInfo.isValid&&this.handleTokenExpired()}}formatTimeRemaining(){if(!this.tokenInfo.isValid||this.tokenInfo.expiresIn<=0)return"Expired";const e=Math.floor(this.tokenInfo.expiresIn/60),t=this.tokenInfo.expiresIn%60;return e>0?`${e}m ${t}s`:`${t}s`}logTokenStatus(){const e={isValid:this.tokenInfo.isValid,expiresIn:this.tokenInfo.expiresIn,expiresInMinutes:Math.floor(this.tokenInfo.expiresIn/60),expiresAt:this.tokenInfo.expiresAt,tokenType:this.tokenInfo.tokenType,lastChecked:new Date(this.tokenInfo.lastChecked).toISOString()};this.tokenInfo.isValid?this.logger.info("🔑 TOKEN: Token status check - Valid",e):this.logger.warn("🔑 TOKEN: Token status check - Invalid",e)}handleTokenRefreshed(e){this.tokenInfo={...this.tokenInfo,isValid:!0,expiresIn:e.expiresIn||3600,expiresAt:e.expiresAt||new Date(Date.now()+(e.expiresIn||3600)*1e3).toISOString(),tokenType:e.tokenType||"Bearer",error:null,lastChecked:Date.now()},this.updateUI(),this.logger.info("🔑 TOKEN: Token refreshed successfully",{expiresIn:this.tokenInfo.expiresIn,expiresInMinutes:Math.floor(this.tokenInfo.expiresIn/60)})}handleTokenExpired(e){this.tokenInfo={...this.tokenInfo,isValid:!1,expiresIn:0,error:"Token expired",lastChecked:Date.now()},this.updateUI(),this.logger.warn("🔑 TOKEN: Token expired",e)}handleTokenError(e){this.tokenInfo={...this.tokenInfo,isValid:!1,error:e.error||"Token error",lastChecked:Date.now()},this.updateUI(),this.logger.error("🔑 TOKEN: Token error",e)}handleTokenObtained(e){this.tokenInfo={...this.tokenInfo,isValid:!0,expiresIn:e.expiresIn||3600,expiresAt:e.expiresAt||new Date(Date.now()+(e.expiresIn||3600)*1e3).toISOString(),tokenType:e.tokenType||"Bearer",error:null,lastChecked:Date.now()},this.updateUI(),this.logger.info("🔑 TOKEN: New token obtained",{expiresIn:this.tokenInfo.expiresIn,expiresInMinutes:Math.floor(this.tokenInfo.expiresIn/60)})}async refreshToken(){try{if(this.logger.info("🔑 TOKEN: Refreshing token..."),window.app?.subsystems?.globalTokenManager?.refreshToken){await window.app.subsystems.globalTokenManager.refreshToken();return}if(window.app?.tokenManager?.refreshToken){await window.app.tokenManager.refreshToken();return}const e=await fetch("/api/pingone/token",{method:"POST",headers:{"Content-Type":"application/json"}});if(e.ok){const t=await e.json();this.handleTokenRefreshed(t)}else throw new Error(`Token refresh failed: ${e.status}`)}catch(e){this.logger.error("🔑 TOKEN: Failed to refresh token",{error:e.message}),this.handleTokenError({error:e.message})}}async getNewToken(){try{this.logger.info("🔑 TOKEN: Getting new token..."),window.app?.subsystems?.navigation?window.app.subsystems.navigation.navigateToView("settings"):window.location.hash="settings"}catch(e){this.logger.error("🔑 TOKEN: Failed to get new token",{error:e.message})}}getStatus(){return{...this.tokenInfo}}destroy(){this.stopMonitoring(),this.statusElements={},this.logger.info("🔑 Enhanced Token Status Subsystem destroyed")}}class bt{constructor(e,t){this.eventBus=e,this.settingsSubsystem=t,this.logger=Ye({service:"logging-subsystem",environment:"production"}),this.logHistory=[],this.maxHistorySize=1e3,this.levels={ERROR:0,WARN:1,INFO:2,DEBUG:3,TRACE:4},this.currentLevel=this.levels.INFO,this.categories={SYSTEM:"system",AUTH:"auth",IMPORT:"import",EXPORT:"export",DELETE:"delete",MODIFY:"modify",UI:"ui",API:"api",ERROR:"error"},this.init(),this.logger.info("LoggingSubsystem initialized successfully")}async init(){try{await this.loadSettings(),this.setupEventListeners(),this.replaceGlobalLogManager(),this.logger.info("LoggingSubsystem initialization complete")}catch(e){throw this.logger.error("Failed to initialize LoggingSubsystem",e),e}}async loadSettings(){try{if(this.settingsSubsystem){await this.settingsSubsystem.loadCurrentSettings();const e=this.settingsSubsystem.currentSettings;e.logLevel&&this.setLogLevel(e.logLevel),e.maxLogHistory&&(this.maxHistorySize=e.maxLogHistory)}}catch(e){this.logger.warn("Could not load logging settings, using defaults",e)}}setupEventListeners(){this.eventBus&&(this.eventBus.on("loggingLevelChanged",e=>{this.setLogLevel(e.level)}),this.eventBus.on("clearLogs",()=>{this.clearLogs()}),this.eventBus.on("exportLogs",e=>{this.exportLogs(e.options)}))}replaceGlobalLogManager(){window.logManager={log:(e,t,s)=>this.log(e,t,s),error:(e,t)=>this.error(e,t),warn:(e,t)=>this.warn(e,t),info:(e,t)=>this.info(e,t),debug:(e,t)=>this.debug(e,t),loadLogs:()=>this.loadLogs(),clearLogs:()=>this.clearLogs(),exportLogs:e=>this.exportLogs(e),getLogger:e=>this.getLogger(e)},this.logger.info("Global logManager replaced with LoggingSubsystem compatibility layer")}log(e,t,s={},i=this.categories.SYSTEM){if((typeof e=="string"?this.levels[e.toUpperCase()]:e)>this.currentLevel)return;const o={timestamp:new Date().toISOString(),level:e.toLowerCase(),message:t,data:this.sanitizeLogData(s),category:i,sessionId:this.generateSessionId()};this.addToHistory(o),this.logger[e.toLowerCase()](t,{data:o.data,category:i,sessionId:o.sessionId}),this.eventBus&&this.eventBus.emit("logEntry",o)}error(e,t={},s=this.categories.ERROR){this.log("ERROR",e,t,s)}warn(e,t={},s=this.categories.SYSTEM){this.log("WARN",e,t,s)}info(e,t={},s=this.categories.SYSTEM){this.log("INFO",e,t,s)}debug(e,t={},s=this.categories.SYSTEM){this.log("DEBUG",e,t,s)}trace(e,t={},s=this.categories.SYSTEM){this.log("TRACE",e,t,s)}getLogger(e){return{error:(t,s)=>this.error(`[${e}] ${t}`,s),warn:(t,s)=>this.warn(`[${e}] ${t}`,s),info:(t,s)=>this.info(`[${e}] ${t}`,s),debug:(t,s)=>this.debug(`[${e}] ${t}`,s),trace:(t,s)=>this.trace(`[${e}] ${t}`,s)}}setLogLevel(e){typeof e=="string"?this.currentLevel=this.levels[e.toUpperCase()]||this.levels.INFO:this.currentLevel=e,this.logger.info("Log level changed",{newLevel:this.currentLevel}),this.eventBus&&this.eventBus.emit("logLevelChanged",{level:this.currentLevel})}addToHistory(e){this.logHistory.unshift(e),this.logHistory.length>this.maxHistorySize&&(this.logHistory=this.logHistory.slice(0,this.maxHistorySize))}async loadLogs(e={}){try{const{limit:t=100,offset:s=0,level:i=null,category:n=null,search:o=null,startDate:a=null,endDate:l=null}=e;let c=[...this.logHistory];if(i&&(c=c.filter(d=>d.level===i.toLowerCase())),n&&(c=c.filter(d=>d.category===n)),o){const d=o.toLowerCase();c=c.filter(u=>u.message.toLowerCase().includes(d)||JSON.stringify(u.data).toLowerCase().includes(d))}a&&(c=c.filter(d=>new Date(d.timestamp)>=new Date(a))),l&&(c=c.filter(d=>new Date(d.timestamp)<=new Date(l)));const h=c.slice(s,s+t),g={logs:h,total:c.length,hasMore:s+t<c.length};return this.logger.debug("Logs loaded",{requested:t,returned:h.length,total:g.total}),g}catch(t){throw this.logger.error("Failed to load logs",t),t}}clearLogs(){const e=this.logHistory.length;this.logHistory=[],this.logger.info("Logs cleared",{previousCount:e}),this.eventBus&&this.eventBus.emit("logsCleared",{previousCount:e})}async exportLogs(e={}){try{const{format:t="json",filename:s=`logs_${new Date().toISOString().slice(0,19).replace(/:/g,"-")}`}=e,i=await this.loadLogs({limit:this.maxHistorySize});let n,o,a;switch(t.toLowerCase()){case"csv":n=this.convertLogsToCSV(i.logs),o="text/csv",a="csv";break;case"txt":n=this.convertLogsToText(i.logs),o="text/plain",a="txt";break;case"json":default:n=JSON.stringify(i.logs,null,2),o="application/json",a="json";break}const l=new Blob([n],{type:o}),c=URL.createObjectURL(l),h=document.createElement("a");h.href=c,h.download=`${s}.${a}`,h.style.display="none",document.body.appendChild(h),h.click(),document.body.removeChild(h),URL.revokeObjectURL(c),this.logger.info("Logs exported successfully",{format:t,filename:`${s}.${a}`,logCount:i.logs.length})}catch(t){throw this.logger.error("Failed to export logs",t),t}}convertLogsToCSV(e){const s=[["Timestamp","Level","Category","Message","Data"].join(",")];return e.forEach(i=>{const n=[i.timestamp,i.level,i.category,`"${i.message.replace(/"/g,'""')}"`,`"${JSON.stringify(i.data).replace(/"/g,'""')}"`];s.push(n.join(","))}),s.join(`
`)}convertLogsToText(e){return e.map(t=>{const s=Object.keys(t.data).length>0?` | Data: ${JSON.stringify(t.data)}`:"";return`[${t.timestamp}] ${t.level.toUpperCase()} [${t.category}] ${t.message}${s}`}).join(`
`)}consoleLog(e){const{level:t,message:s,data:i,category:n,timestamp:o}=e,a=`[${o}] [${n}]`;switch(t){case"error":console.error(a,s,i);break;case"warn":console.warn(a,s,i);break;case"debug":console.debug(a,s,i);break;case"trace":console.trace(a,s,i);break;default:console.log(a,s,i)}}sanitizeLogData(e){if(!e||typeof e!="object")return e;try{return JSON.parse(JSON.stringify(e,(s,i)=>{if(["password","token","secret","key","apiKey","clientSecret"].some(o=>s.toLowerCase().includes(o)))return"[REDACTED]";if(typeof i=="object"&&i!==null){if(i.constructor&&i.constructor.name==="HTMLElement")return"[HTMLElement]";if(i instanceof Error)return{name:i.name,message:i.message,stack:i.stack}}return i}))}catch{return{error:"Failed to sanitize log data",original:String(e)}}}generateSessionId(){return`log_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getStats(){const e={totalLogs:this.logHistory.length,levelCounts:{},categoryCounts:{},recentActivity:this.logHistory.slice(0,10)};return this.logHistory.forEach(t=>{e.levelCounts[t.level]=(e.levelCounts[t.level]||0)+1,e.categoryCounts[t.category]=(e.categoryCounts[t.category]||0)+1}),e}}class St{constructor(e,t,s){this.eventBus=e,this.settingsSubsystem=t,this.loggingSubsystem=s,this.history=[],this.maxHistorySize=500,this.categories={IMPORT:"import",EXPORT:"export",DELETE:"delete",MODIFY:"modify",SETTINGS:"settings",AUTH:"auth",SYSTEM:"system"},this.statusTypes={STARTED:"started",IN_PROGRESS:"in_progress",COMPLETED:"completed",FAILED:"failed",CANCELLED:"cancelled",PARTIAL:"partial"},this.currentFilter={category:null,status:null,dateRange:null,search:null},this.init(),this.loggingSubsystem&&this.loggingSubsystem.info("HistorySubsystem initialized successfully",{},"system")}async init(){try{await this.loadSettings(),this.setupEventListeners(),await this.loadHistoryFromStorage(),this.loggingSubsystem&&this.loggingSubsystem.info("HistorySubsystem initialization complete",{historyCount:this.history.length},"system")}catch(e){throw this.loggingSubsystem&&this.loggingSubsystem.error("Failed to initialize HistorySubsystem",e,"system"),e}}async loadSettings(){try{if(this.settingsSubsystem){const e=this.settingsSubsystem.currentSettings;e&&e.maxHistorySize&&(this.maxHistorySize=e.maxHistorySize)}}catch(e){this.loggingSubsystem&&this.loggingSubsystem.warn("Could not load history settings, using defaults",e,"system")}}setupEventListeners(){this.eventBus&&(this.eventBus.on("importStarted",e=>{this.addHistoryEntry("import","Import operation started","started",e)}),this.eventBus.on("importCompleted",e=>{this.updateHistoryEntry(e.sessionId,"completed","Import operation completed",e)}),this.eventBus.on("importFailed",e=>{this.updateHistoryEntry(e.sessionId,"failed","Import operation failed",e)}),this.eventBus.on("exportStarted",e=>{this.addHistoryEntry("export","Export operation started","started",e)}),this.eventBus.on("exportCompleted",e=>{this.updateHistoryEntry(e.sessionId,"completed","Export operation completed",e)}),this.eventBus.on("exportFailed",e=>{this.updateHistoryEntry(e.sessionId,"failed","Export operation failed",e)}),this.eventBus.on("deleteOperationStarted",e=>{this.addHistoryEntry("delete","Delete operation started","started",e)}),this.eventBus.on("deleteOperationCompleted",e=>{this.updateHistoryEntry(e.sessionId,"completed","Delete operation completed",e)}),this.eventBus.on("deleteOperationFailed",e=>{this.updateHistoryEntry(e.sessionId,"failed","Delete operation failed",e)}),this.eventBus.on("modifyOperationStarted",e=>{this.addHistoryEntry("modify","Modify operation started","started",e)}),this.eventBus.on("modifyOperationCompleted",e=>{this.updateHistoryEntry(e.sessionId,"completed","Modify operation completed",e)}),this.eventBus.on("modifyOperationFailed",e=>{this.updateHistoryEntry(e.sessionId,"failed","Modify operation failed",e)}),this.eventBus.on("clearHistory",()=>{this.clearHistory()}),this.eventBus.on("exportHistory",e=>{this.exportHistory(e.options)}),this.eventBus.on("filterHistory",e=>{this.setFilter(e.filter)}))}addHistoryEntry(e,t,s,i={}){const n={id:this.generateHistoryId(),timestamp:new Date().toISOString(),category:e,description:t,status:s,data:this.sanitizeHistoryData(i),sessionId:i.sessionId||this.generateSessionId(),duration:null,startTime:new Date().toISOString()};return this.history.unshift(n),this.history.length>this.maxHistorySize&&(this.history=this.history.slice(0,this.maxHistorySize)),this.saveHistoryToStorage(),this.loggingSubsystem&&this.loggingSubsystem.info("History entry added",{category:e,description:t,status:s,sessionId:n.sessionId},"system"),this.eventBus&&this.eventBus.emit("historyEntryAdded",n),n.id}updateHistoryEntry(e,t,s=null,i={}){const n=this.history.find(o=>o.sessionId===e);return n?(n.status=t,n.timestamp=new Date().toISOString(),s&&(n.description=s),["completed","failed","cancelled"].includes(t)&&n.startTime&&(n.duration=new Date-new Date(n.startTime)),i&&Object.keys(i).length>0&&(n.data={...n.data,...this.sanitizeHistoryData(i)}),this.saveHistoryToStorage(),this.loggingSubsystem&&this.loggingSubsystem.info("History entry updated",{sessionId:e,status:t,description:s,duration:n.duration},"system"),this.eventBus&&this.eventBus.emit("historyEntryUpdated",n),!0):(this.loggingSubsystem&&this.loggingSubsystem.warn("History entry not found for update",{sessionId:e},"system"),!1)}async getHistory(e={}){try{const{limit:t=50,offset:s=0,category:i=null,status:n=null,search:o=null,startDate:a=null,endDate:l=null,sortBy:c="timestamp",sortOrder:h="desc"}=e;let g=[...this.history];if(i&&(g=g.filter(m=>m.category===i)),n&&(g=g.filter(m=>m.status===n)),o){const m=o.toLowerCase();g=g.filter(w=>w.description.toLowerCase().includes(m)||JSON.stringify(w.data).toLowerCase().includes(m))}a&&(g=g.filter(m=>new Date(m.timestamp)>=new Date(a))),l&&(g=g.filter(m=>new Date(m.timestamp)<=new Date(l))),g.sort((m,w)=>{const y=m[c],b=w[c];return h==="asc"?y<b?-1:y>b?1:0:y>b?-1:y<b?1:0});const d=g.slice(s,s+t),u={history:d,total:g.length,hasMore:s+t<g.length,stats:this.getHistoryStats(g)};return this.loggingSubsystem&&this.loggingSubsystem.debug("History retrieved",{requested:t,returned:d.length,total:u.total,filters:{category:i,status:n,search:o}},"system"),u}catch(t){throw this.loggingSubsystem&&this.loggingSubsystem.error("Failed to get history",t,"system"),t}}getHistoryStats(e=null){const t=e||this.history,s={total:t.length,categories:{},statuses:{},recentActivity:t.slice(0,5),averageDuration:0,totalDuration:0};let i=0,n=0;return t.forEach(o=>{s.categories[o.category]=(s.categories[o.category]||0)+1,s.statuses[o.status]=(s.statuses[o.status]||0)+1,o.duration&&(n+=o.duration,i++)}),i>0&&(s.averageDuration=n/i,s.totalDuration=n),s}setFilter(e){this.currentFilter={...this.currentFilter,...e},this.loggingSubsystem&&this.loggingSubsystem.debug("History filter updated",this.currentFilter,"system"),this.eventBus&&this.eventBus.emit("historyFilterChanged",this.currentFilter)}clearHistory(){const e=this.history.length;this.history=[],this.saveHistoryToStorage(),this.loggingSubsystem&&this.loggingSubsystem.info("History cleared",{previousCount:e},"system"),this.eventBus&&this.eventBus.emit("historyCleared",{previousCount:e})}async exportHistory(e={}){try{const{format:t="json",filename:s=`history_${new Date().toISOString().slice(0,19).replace(/:/g,"-")}`,includeData:i=!0}=e,n=await this.getHistory({limit:this.maxHistorySize});let o,a,l;const c=n.history.map(u=>({id:u.id,timestamp:u.timestamp,category:u.category,description:u.description,status:u.status,duration:u.duration,...i&&{data:u.data}}));switch(t.toLowerCase()){case"csv":o=this.convertHistoryToCSV(c),a="text/csv",l="csv";break;case"txt":o=this.convertHistoryToText(c),a="text/plain",l="txt";break;case"json":default:o=JSON.stringify({exportDate:new Date().toISOString(),stats:n.stats,history:c},null,2),a="application/json",l="json";break}const h=new Blob([o],{type:a}),g=URL.createObjectURL(h),d=document.createElement("a");d.href=g,d.download=`${s}.${l}`,d.style.display="none",document.body.appendChild(d),d.click(),document.body.removeChild(d),URL.revokeObjectURL(g),this.loggingSubsystem&&this.loggingSubsystem.info("History exported successfully",{format:t,filename:`${s}.${l}`,entryCount:c.length},"system")}catch(t){throw this.loggingSubsystem&&this.loggingSubsystem.error("Failed to export history",t,"system"),t}}convertHistoryToCSV(e){const s=[["ID","Timestamp","Category","Description","Status","Duration"].join(",")];return e.forEach(i=>{const n=[i.id,i.timestamp,i.category,`"${i.description.replace(/"/g,'""')}"`,i.status,i.duration||""];s.push(n.join(","))}),s.join(`
`)}convertHistoryToText(e){return e.map(t=>{const s=t.duration?` (${Math.round(t.duration/1e3)}s)`:"";return`[${t.timestamp}] ${t.category.toUpperCase()} [${t.status.toUpperCase()}] ${t.description}${s}`}).join(`
`)}async loadHistoryFromStorage(){try{const e=localStorage.getItem("pingone-import-history");if(e){const t=JSON.parse(e);Array.isArray(t)&&(this.history=t,this.loggingSubsystem&&this.loggingSubsystem.info("History loaded from storage",{entryCount:this.history.length},"system"))}}catch(e){this.loggingSubsystem&&this.loggingSubsystem.warn("Failed to load history from storage",e,"system")}}saveHistoryToStorage(){try{localStorage.setItem("pingone-import-history",JSON.stringify(this.history))}catch(e){this.loggingSubsystem&&this.loggingSubsystem.warn("Failed to save history to storage",e,"system")}}sanitizeHistoryData(e){if(!e||typeof e!="object")return e;try{return JSON.parse(JSON.stringify(e,(t,s)=>{if(["password","token","secret","key","apiKey","clientSecret"].some(n=>t.toLowerCase().includes(n)))return"[REDACTED]";if(typeof s=="object"&&s!==null){if(s.constructor&&s.constructor.name==="HTMLElement")return"[HTMLElement]";if(s instanceof Error)return{name:s.name,message:s.message}}return s}))}catch{return{error:"Failed to sanitize history data",original:String(e)}}}generateHistoryId(){return`hist_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateSessionId(){return`session_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getHistoryEntry(e){return this.history.find(t=>t.id===e)}deleteHistoryEntry(e){const t=this.history.findIndex(s=>s.id===e);if(t!==-1){const s=this.history.splice(t,1)[0];return this.saveHistoryToStorage(),this.loggingSubsystem&&this.loggingSubsystem.info("History entry deleted",{id:e,description:s.description},"system"),this.eventBus&&this.eventBus.emit("historyEntryDeleted",{id:e,entry:s}),!0}return!1}}class Et{constructor(e,t,s,i){this.eventBus=e,this.settingsSubsystem=t,this.loggingSubsystem=s,this.apiClient=i,this.populationCache=new Map,this.cacheExpiry=300*1e3,this.lastCacheUpdate=null,this.isLoading=!1,this.loadingPromise=null,this.managedDropdowns=new Set,this.dropdownConfigs=new Map,this.init(),this.loggingSubsystem&&this.loggingSubsystem.info("PopulationSubsystem initialized successfully",{},"system")}async init(){try{this.setupEventListeners(),this.loadCachedPopulations(),this.loggingSubsystem&&this.loggingSubsystem.info("PopulationSubsystem initialization complete",{cachedPopulations:this.populationCache.size},"system")}catch(e){throw this.loggingSubsystem&&this.loggingSubsystem.error("Failed to initialize PopulationSubsystem",e,"system"),e}}setupEventListeners(){this.eventBus&&(this.eventBus.on("settingsChanged",()=>{this.invalidateCache()}),this.eventBus.on("authenticationSuccess",()=>{this.refreshPopulations()}),this.eventBus.on("authenticationFailed",()=>{this.clearCache()}),this.eventBus.on("refreshPopulations",e=>{this.refreshPopulations(e.force)}),this.eventBus.on("registerDropdown",e=>{this.registerDropdown(e.dropdownId,e.config)}))}async loadPopulations(e={}){const{force:t=!1,useCache:s=!0}=e;try{if(!t&&s&&this.isCacheValid()){const n=this.getCachedPopulations();if(n&&n.length>0)return this.loggingSubsystem&&this.loggingSubsystem.debug("Returning cached populations",{count:n.length},"system"),n}if(this.isLoading&&this.loadingPromise)return await this.loadingPromise;this.isLoading=!0,this.loadingPromise=this.performPopulationLoad();const i=await this.loadingPromise;return this.cachePopulations(i),this.eventBus&&this.eventBus.emit("populationsLoaded",{populations:i,count:i.length,cached:!1}),this.loggingSubsystem&&this.loggingSubsystem.info("Populations loaded successfully",{count:i.length},"system"),i}catch(i){throw this.loggingSubsystem&&this.loggingSubsystem.error("Failed to load populations",i,"system"),this.eventBus&&this.eventBus.emit("populationsLoadFailed",{error:i.message}),i}finally{this.isLoading=!1,this.loadingPromise=null}}async performPopulationLoad(){if(this.loggingSubsystem&&this.loggingSubsystem.debug("Starting performPopulationLoad",{},"system"),!this.apiClient){const e="API client not available for population loading";throw this.loggingSubsystem&&this.loggingSubsystem.error(e,{},"system"),new Error(e)}if(typeof this.apiClient.get!="function"){const e="API client does not support HTTP GET requests";throw this.loggingSubsystem&&this.loggingSubsystem.error(e,{apiClientType:typeof this.apiClient},"system"),new Error(e)}this.loggingSubsystem&&this.loggingSubsystem.debug("Making API call to /api/populations",{},"system");try{const e=await this.apiClient.get("/api/populations");if(this.loggingSubsystem&&this.loggingSubsystem.debug("API response received",{hasResponse:!!e,hasPopulations:!!(e&&e.populations),populationsIsArray:!!(e&&Array.isArray(e.populations)),populationCount:e&&e.populations?e.populations.length:0},"system"),!e||!Array.isArray(e.populations)){const t="Invalid populations response from API";throw this.loggingSubsystem&&this.loggingSubsystem.error(t,{response:e},"system"),new Error(t)}return this.loggingSubsystem&&this.loggingSubsystem.info(`Successfully loaded ${e.populations.length} populations from API`,{},"system"),e.populations}catch(e){throw this.loggingSubsystem&&this.loggingSubsystem.error("API call to /api/populations failed",{error:e.message,stack:e.stack},"system"),e}}async populateDropdown(e,t={}){try{this.loggingSubsystem&&this.loggingSubsystem.debug(`Starting population dropdown population for: ${e}`,t,"system");const{includeEmpty:s=!0,emptyText:i="Select a population",emptyValue:n="",filter:o=null,sortBy:a="name",sortOrder:l="asc"}=t;this.registerDropdown(e,t);const c=document.getElementById(e);if(!c){const d=`Dropdown element not found: ${e}`;throw this.loggingSubsystem&&this.loggingSubsystem.error(d,{},"system"),new Error(d)}this.loggingSubsystem&&this.loggingSubsystem.debug(`Dropdown element found, showing loading state for: ${e}`,{},"system"),this.showDropdownLoading(c),this.loggingSubsystem&&this.loggingSubsystem.debug(`Loading populations for dropdown: ${e}`,{},"system");const h=await this.loadPopulations();let g=h;if(o&&typeof o=="function"&&(g=h.filter(o)),g=this.sortPopulations(g,a,l),c.innerHTML="",s){const d=document.createElement("option");d.value=n,d.textContent=i,c.appendChild(d)}return g.forEach(d=>{const u=document.createElement("option");u.value=d.id,u.textContent=d.name,u.dataset.populationId=d.id,u.dataset.populationName=d.name,c.appendChild(u)}),this.hideDropdownLoading(c),this.eventBus&&this.eventBus.emit("dropdownPopulated",{dropdownId:e,populationCount:g.length}),this.loggingSubsystem&&this.loggingSubsystem.debug("Dropdown populated successfully",{dropdownId:e,populationCount:g.length},"system"),!0}catch(s){return this.loggingSubsystem&&this.loggingSubsystem.error("Failed to populate dropdown",{dropdownId:e,error:s.message},"system"),this.showDropdownError(e,s.message),this.eventBus&&this.eventBus.emit("dropdownPopulationFailed",{dropdownId:e,error:s.message}),!1}}registerDropdown(e,t={}){this.managedDropdowns.add(e),this.dropdownConfigs.set(e,t),this.loggingSubsystem&&this.loggingSubsystem.debug("Dropdown registered",{dropdownId:e},"system")}async refreshAllDropdowns(){try{const e=Array.from(this.managedDropdowns).map(t=>{const s=this.dropdownConfigs.get(t)||{};return this.populateDropdown(t,s)});await Promise.all(e),this.loggingSubsystem&&this.loggingSubsystem.info("All dropdowns refreshed",{count:this.managedDropdowns.size},"system")}catch(e){this.loggingSubsystem&&this.loggingSubsystem.error("Failed to refresh all dropdowns",e,"system")}}async refreshPopulations(e=!1){try{await this.loadPopulations({force:!0}),await this.refreshAllDropdowns(),this.loggingSubsystem&&this.loggingSubsystem.info("Populations refreshed successfully",{},"system")}catch(t){this.loggingSubsystem&&this.loggingSubsystem.error("Failed to refresh populations",t,"system")}}sortPopulations(e,t="name",s="asc"){return e.sort((i,n)=>{let o=i[t],a=n[t];typeof o=="string"&&typeof a=="string"&&(o=o.toLowerCase(),a=a.toLowerCase());let l=0;return o<a?l=-1:o>a&&(l=1),s==="desc"?-l:l})}showDropdownLoading(e){e.innerHTML='<option value="">Loading populations...</option>',e.disabled=!0,e.classList.add("loading")}hideDropdownLoading(e){e.disabled=!1,e.classList.remove("loading")}showDropdownError(e,t){const s=document.getElementById(e);s&&(s.innerHTML=`<option value="">Error: ${t}</option>`,s.disabled=!1,s.classList.add("error"))}cachePopulations(e){this.populationCache.set("populations",e),this.lastCacheUpdate=Date.now();try{localStorage.setItem("pingone-populations-cache",JSON.stringify({populations:e,timestamp:this.lastCacheUpdate}))}catch(t){this.loggingSubsystem&&this.loggingSubsystem.warn("Failed to save populations to localStorage",t,"system")}}getCachedPopulations(){return this.populationCache.get("populations")||[]}isCacheValid(){return this.lastCacheUpdate?Date.now()-this.lastCacheUpdate<this.cacheExpiry:!1}loadCachedPopulations(){try{const e=localStorage.getItem("pingone-populations-cache");if(e){const{populations:t,timestamp:s}=JSON.parse(e),i=Date.now()-s;i<this.cacheExpiry&&(this.populationCache.set("populations",t),this.lastCacheUpdate=s,this.loggingSubsystem&&this.loggingSubsystem.debug("Loaded populations from localStorage cache",{count:t.length,age:Math.round(i/1e3)},"system"))}}catch(e){this.loggingSubsystem&&this.loggingSubsystem.warn("Failed to load populations from localStorage",e,"system")}}invalidateCache(){this.populationCache.clear(),this.lastCacheUpdate=null;try{localStorage.removeItem("pingone-populations-cache")}catch{}this.loggingSubsystem&&this.loggingSubsystem.debug("Population cache invalidated",{},"system")}clearCache(){this.invalidateCache(),this.loggingSubsystem&&this.loggingSubsystem.debug("Population cache cleared",{},"system")}async getPopulationById(e){try{return(await this.loadPopulations()).find(s=>s.id===e)||null}catch(t){return this.loggingSubsystem&&this.loggingSubsystem.error("Failed to get population by ID",{populationId:e,error:t.message},"system"),null}}async searchPopulations(e){try{const t=await this.loadPopulations(),s=e.toLowerCase();return t.filter(i=>i.name.toLowerCase().includes(s)||i.description&&i.description.toLowerCase().includes(s))}catch(t){return this.loggingSubsystem&&this.loggingSubsystem.error("Failed to search populations",{searchTerm:e,error:t.message},"system"),[]}}getCacheStats(){return{isValid:this.isCacheValid(),lastUpdate:this.lastCacheUpdate,age:this.lastCacheUpdate?Date.now()-this.lastCacheUpdate:null,populationCount:this.getCachedPopulations().length,managedDropdowns:this.managedDropdowns.size}}}class kt{constructor(e,t,s,i,n,o){this.logger=e,this.uiManager=t,this.localClient=s,this.settingsManager=i,this.eventBus=n,this.credentialsManager=o,this.isSaving=!1,this.currentSettings=null,this.logger.info("Settings Subsystem initialized"),this.setupCrossSubsystemEvents()}async init(){try{this.setupEventListeners(),await this.loadCurrentSettings(),this.logger.info("Settings Subsystem initialized successfully")}catch(e){this.logger.error("Failed to initialize Settings Subsystem",e),this.uiManager.showSettingsActionStatus("Failed to initialize Settings Subsystem: "+e.message,"error")}}setupEventListeners(){this.logger.info("Setting up Settings Subsystem event listeners");const e=document.getElementById("save-settings");e?(this.logger.info("Found save settings button, attaching event listener"),e.addEventListener("click",async n=>{n.preventDefault(),this.logger.info("Save settings button clicked"),await this.saveSettings()})):this.logger.warn("Save settings button not found in DOM");const t=document.getElementById("test-connection-btn");t&&t.addEventListener("click",async n=>{n.preventDefault(),await this.testConnection()});const s=document.getElementById("get-token-btn");s&&s.addEventListener("click",async n=>{n.preventDefault(),await this.getToken()});const i=document.getElementById("toggle-api-secret-visibility");i&&i.addEventListener("click",n=>{n.preventDefault(),this.toggleSecretVisibility()}),this.logger.info("Settings Subsystem event listeners setup complete")}async loadCurrentSettings(){try{if(!this.settingsManager){this.logger.warn("Settings manager not available, using default settings"),this.currentSettings=this.getDefaultSettings();return}if(typeof this.settingsManager.getAllSettings!="function"){this.logger.warn("Settings manager getAllSettings method not available, using default settings"),this.currentSettings=this.getDefaultSettings();return}this.currentSettings=this.settingsManager.getAllSettings(),(!this.currentSettings||Object.keys(this.currentSettings).length===0)&&(this.logger.info("No existing settings found, using defaults"),this.currentSettings=this.getDefaultSettings()),this.populateSettingsForm(this.currentSettings),this.logger.info("Current settings loaded successfully")}catch(e){this.logger.warn("Failed to load current settings, using defaults:",e.message),this.currentSettings=this.getDefaultSettings()}}getDefaultSettings(){return{environmentId:"",apiClientId:"",apiSecret:"",region:"NorthAmerica",rateLimit:50,populationId:""}}async saveSettings(){if(this.isSaving){this.logger.warn("Settings save already in progress");return}try{this.isSaving=!0,this.logger.info("Starting settings save process"),this.uiManager.showSettingsActionStatus("Saving settings...","info");const e=this.getFormData();if(this.logger.info("Form data extracted:",e),!this.validateSettings(e))return;if(this.credentialsManager){const s={environmentId:e.environmentId||"",apiClientId:e.apiClientId||"",apiSecret:e.apiSecret||"",populationId:e.populationId||"",region:e.region||"NorthAmerica"},i=this.credentialsManager.validateCredentials(s);if(!i.isValid)throw new Error(`Invalid credentials: ${i.errors.join(", ")}`);this.credentialsManager.saveCredentials(s),this.logger.info("Credentials saved to localStorage")}try{const s=await this.localClient.post("/api/settings",e);this.logger.info("Settings saved to server successfully")}catch(s){this.logger.warn("Failed to save to server, but credentials saved to localStorage:",s.message)}this.settingsManager.updateSettings(e),this.currentSettings=e,this.uiManager.showSettingsActionStatus("Settings saved successfully","success",{autoHideDelay:3e3}),this.updateConnectionStatus("✅ Settings saved! Please - Get token","success"),this.eventBus&&this.eventBus.emit("settingsSaved",{settings:e});const t=new CustomEvent("credentials-updated",{detail:{settings:e,timestamp:Date.now()}});document.dispatchEvent(t),this.logger.info("Credentials-updated event dispatched for population dropdown system"),this.logger.info("Settings save process completed successfully")}catch(e){this.logger.error("Failed to save settings",e),this.uiManager.showSettingsActionStatus("Failed to save settings: "+e.message,"error",{autoHide:!1})}finally{this.isSaving=!1}}getFormData(){const e=document.getElementById("settings-form");if(!e)throw new Error("Settings form not found");return new FormData(e),{environmentId:document.getElementById("environment-id")?.value||"",apiClientId:document.getElementById("api-client-id")?.value||"",apiSecret:document.getElementById("api-secret")?.value||"",region:document.getElementById("region")?.value||"NorthAmerica",rateLimit:parseInt(document.getElementById("rate-limit")?.value)||50,populationId:document.getElementById("population-id")?.value||""}}validateSettings(e){const t=[];if(e.environmentId?.trim()||t.push("Environment ID is required"),e.apiClientId?.trim()||t.push("API Client ID is required"),e.apiSecret?.trim()||t.push("API Secret is required"),e.region?.trim()||t.push("Region is required"),e.rateLimit&&(e.rateLimit<1||e.rateLimit>1e3)&&t.push("Rate limit must be between 1 and 1000"),t.length>0){const s="Validation failed: "+t.join(", ");return this.logger.error("Settings validation failed",{errors:t}),this.uiManager.showSettingsActionStatus(s,"error",{autoHide:!1}),!1}return!0}populateSettingsForm(e){if(!e)return;const t={"environment-id":e.environmentId,"api-client-id":e.apiClientId,"api-secret":e.apiSecret,region:e.region,"rate-limit":e.rateLimit,"population-id":e.populationId};Object.entries(t).forEach(([s,i])=>{const n=document.getElementById(s);n&&i!==void 0&&i!==null&&(n.value=i)}),this.logger.info("Settings form populated with current values")}async testConnection(){try{this.logger.info("Testing connection..."),this.uiManager.showSettingsActionStatus("Testing connection...","info");const e=this.getFormData(),t=await this.localClient.get("/api/pingone/test-connection");t.success?(this.uiManager.showSettingsActionStatus("Connection test successful","success",{autoHideDelay:3e3}),this.updateConnectionStatus("✅ Connection successful","success")):(this.uiManager.showSettingsActionStatus("Connection test failed: "+t.message,"error"),this.updateConnectionStatus("❌ Connection failed","error"))}catch(e){this.logger.error("Connection test failed",e),this.uiManager.showSettingsActionStatus("Connection test failed: "+e.message,"error"),this.updateConnectionStatus("❌ Connection failed","error")}}async getToken(){try{this.logger.info("Getting token..."),this.uiManager.showSettingsActionStatus("Getting token...","info");const e=this.getFormData(),t=await this.localClient.post("/api/token",e);if(t.success){this.uiManager.showSettingsActionStatus("Token obtained successfully","success",{autoHideDelay:3e3}),this.updateConnectionStatus("✅ Token obtained","success"),console.log("🚀 [DEBUG] SettingsSubsystem: About to call updateGlobalTokenStatusDirect");try{if(window.app&&typeof window.app.updateGlobalTokenStatusDirect=="function"){const s=t.timeLeft||t.timeRemaining||"";window.app.updateGlobalTokenStatusDirect(s),console.log("✅ [DEBUG] SettingsSubsystem: updateGlobalTokenStatusDirect called successfully with timeLeft:",s)}else console.warn("⚠️ [DEBUG] SettingsSubsystem: window.app.updateGlobalTokenStatusDirect not available")}catch(s){console.error("❌ [DEBUG] SettingsSubsystem: Error calling updateGlobalTokenStatusDirect:",s)}this.eventBus&&this.eventBus.emit("tokenObtained",{token:t.token})}else this.uiManager.showSettingsActionStatus("Failed to get token: "+t.message,"error"),this.updateConnectionStatus("❌ Token failed","error")}catch(e){this.logger.error("Failed to get token",e),this.uiManager.showSettingsActionStatus("Failed to get token: "+e.message,"error"),this.updateConnectionStatus("❌ Token failed","error")}}toggleSecretVisibility(){const e=document.getElementById("api-secret"),t=document.getElementById("toggle-api-secret-visibility"),s=t?.querySelector("i");e&&t&&s&&(e.type==="password"?(e.type="text",s.className="fas fa-eye-slash",t.setAttribute("aria-label","Hide password")):(e.type="password",s.className="fas fa-eye",t.setAttribute("aria-label","Show password")))}updateConnectionStatus(e,t){const s=document.getElementById("settings-connection-status");s&&(s.textContent=e,s.className=`connection-status status-${t}`)}setupCrossSubsystemEvents(){if(!this.eventBus){this.logger.warn("EventBus not available for cross-subsystem events");return}this.eventBus.on("tokenExpired",e=>{this.logger.warn("Token expired"),this.updateConnectionStatus("⚠️ Token expired","warning")}),this.eventBus.on("tokenError",e=>{this.logger.error("Token error detected",e),this.updateConnectionStatus("❌ Token error","error")}),this.eventBus.on("tokenRefreshed",e=>{this.logger.info("Token refreshed successfully"),this.updateConnectionStatus("✅ Token refreshed","success")}),this.logger.debug("Cross-subsystem event listeners set up for SettingsSubsystem")}getAllSettings(){return this.settingsManager&&this.settingsManager.getAllSettings?this.settingsManager.getAllSettings():this.settingsManager&&this.settingsManager.getSettings?this.settingsManager.getSettings():this.currentSettings?this.currentSettings:(this.logger.warn("No settings available, returning empty object"),{})}}class Tt{constructor(e,t){if(!e)throw new Error("Logger is required for FileHandler");this.logger=e,this.uiManager=t,this.requiredFields=["username"],this.validationResults={total:0,valid:0,errors:0,warnings:0},this.lastParsedUsers=[],this.currentFile=null,this.fileInput=p.fileInput?p.fileInput():null,this.fileInfo=p.fileInfo?p.fileInfo():null,this.previewContainer=p.previewContainer?p.previewContainer():null,this.lastFileInfo=this.loadLastFileInfo(),this.initializeFileInput()}loadLastFileInfo(){try{const e=localStorage.getItem("lastSelectedFile");return e?JSON.parse(e):null}catch(e){return this.logger.error("Error loading last file info:",e),null}}getCurrentFile(){return this.currentFile}async setFile(e,t="import"){if(!e)throw new Error("File is required for setFile operation");try{return this.logger.info("Setting file",{fileName:e.name,fileSize:e.size,operationType:t}),this.currentFile=e,await this._handleFileInternal(e,null,t),{success:!0,file:e}}catch(s){throw this.logger.error("Failed to set file",{error:s.message,fileName:e.name,operationType:t}),s}}getUsers(){return this.lastParsedUsers||[]}getTotalUsers(){const e=this.validationResults.total||0;return console.log("[CSV] getTotalUsers() called, returning:",e,"validationResults:",this.validationResults),e}readFileAsText(e){if(!e)throw new Error("File is required for reading");return new Promise((t,s)=>{const i=new FileReader;i.onload=n=>t(n.target.result),i.onerror=()=>s(new Error("Failed to read file")),i.readAsText(e)})}saveLastFolderPath(e,t="import"){if(e)try{let s=null;if(e.webkitRelativePath){const i=e.webkitRelativePath.split("/");i.length>1&&(s=i.slice(0,-1).join("/"))}else if(e.name){const i=e.name,n=i.lastIndexOf("/");n!==-1&&(s=i.substring(0,n))}if(s){const i=`lastFolderPath_${t}`;localStorage.setItem(i,s),this.logger.info(`Saved last folder path for ${t}:`,s)}s&&localStorage.setItem("lastFolderPath",s)}catch(s){this.logger.warn("Could not save folder path:",s.message)}}getLastFolderPath(e="import"){try{const t=`lastFolderPath_${e}`;let s=localStorage.getItem(t);return s||(s=localStorage.getItem("lastFolderPath")),s}catch(t){return this.logger.warn("Could not get last folder path:",t.message),null}}updateFileLabel(e="import"){try{let t=null,s=null;switch(e){case"import":t=p.fileInputLabel?p.fileInputLabel():null,s=p.fileInput?p.fileInput():null;break;case"delete":t=p.deleteFileInputLabel?p.deleteFileInputLabel():null,s=p.deleteFileInput?p.deleteFileInput():null;break;case"modify":t=p.modifyFileInputLabel?p.modifyFileInputLabel():null,s=p.modifyFileInput?p.modifyFileInput():null;break;default:t=p.fileInputLabel?p.fileInputLabel():null;break}if(t){const i=this.getLastFolderPath(e);if(i){const n=this.shortenPath(i);t.textContent=`Choose CSV File (Last: ${n})`,t.title=`Last used folder: ${i}`}else t.textContent="Choose CSV File",t.title="Select a CSV file to process"}}catch(t){this.logger.warn("Could not update file label:",t.message)}}shortenPath(e){if(!e)return"";const t=30;if(e.length<=t)return e;const s=e.split("/");if(s.length<=2)return e.length>t?"..."+e.slice(-t+3):e;const i=s[0],n=s[s.length-1],o=s.slice(1,-1);let a=i;return o.length>0?a+="/.../"+n:a+="/"+n,a.length>t?"..."+a.slice(-t+3):a}saveFileInfo(e){if(e)try{const t={name:e.name,size:e.size,lastModified:e.lastModified,type:e.type};localStorage.setItem("lastSelectedFile",JSON.stringify(t)),this.lastFileInfo=t}catch(t){this.logger.error("Error saving file info:",t)}}clearFileInfo(){try{localStorage.removeItem("lastSelectedFile"),this.lastFileInfo=null,this.fileInfo&&(this.fileInfo.innerHTML="No file selected")}catch(e){this.logger.error("Error clearing file info:",e)}}clearLastFolderPath(){try{localStorage.removeItem("lastFolderPath"),this.updateFileLabel(),this.logger.info("Cleared last folder path")}catch(e){this.logger.warn("Could not clear last folder path:",e.message)}}initializeFileInput(){if(!this.fileInput)return;const e=this.fileInput.cloneNode(!0);this.fileInput.parentNode.replaceChild(e,this.fileInput),this.fileInput=e,this.fileInput.addEventListener("change",t=>this.handleFileSelect(t)),this.updateFileLabel()}async handleFileObject(e){if(!e)throw new Error("File is required for handleFileObject");await this._handleFileInternal(e)}async handleFileSelect(e){if(!e||!e.target){this.logger.warn("Invalid file selection event");return}const t=e.target.files[0];if(!t){this.logger.warn("No file selected");return}this.saveLastFolderPath(t,"import"),await this._handleFileInternal(t,e)}async _handleFileInternal(e,t,s="import"){if(!e)throw new Error("File is required for internal file handling");console.log("[CSV] _handleFileInternal called with file:",e.name,"size:",e.size,"operationType:",s);try{this.logger.info("Processing file",{fileName:e.name,fileSize:e.size,operationType:s});const i=e.name||"",n=this.getFileExtension(i).toLowerCase();if(n&&["exe","js","png","jpg","jpeg","gif","pdf","zip","tar","gz"].includes(n)){const d=`Unsupported file type: ${n}. Please upload a CSV or text file.`;throw this.logger.error(d,{fileName:i,fileExt:n}),new Error(d)}const a=10*1024*1024;if(e.size>a)throw new Error("File too large. Please select a file smaller than 10MB.");const l=await this.readFileAsText(e);console.log("[CSV] _handleFileInternal: About to parse CSV content, length:",l.length);const c=this.parseCSV(l);console.log("[CSV] _handleFileInternal: parseCSV completed, parseResults:",c),this.parsedUsers=c.users,this.lastParsedUsers=[...c.users],this.validationResults={total:c.users.length,valid:c.validUsers||c.users.length,errors:c.errors.length,warnings:c.warnings.length},console.log("[CSV] File parsed successfully:",{totalUsers:this.validationResults.total,validUsers:this.validationResults.valid,errors:this.validationResults.errors,warnings:this.validationResults.warnings});const h=`File processed: ${c.validUsers} valid users, ${c.invalidRows} invalid rows`;this.uiManager.showNotification(h,c.invalidRows>0?"warning":"success");const g=s==="modify"?"modify-file-info":"file-info";this.updateFileInfoForElement(e,g,c.validUsers),this.updateFileLabel(s),c.errors.length>0&&this.logger.warn("CSV parsing errors",{errorCount:c.errors.length,errors:c.errors.slice(0,10)}),window.app&&(s==="modify"&&window.app.updateModifyButtonState?window.app.updateModifyButtonState():s==="import"&&window.app.updateImportButtonState&&window.app.updateImportButtonState())}catch(i){this.logger.error("Failed to process CSV file",{error:i.message,fileName:e.name,operationType:s}),console.error("Error in _handleFileInternal:",i);let n="Failed to process CSV file. ";i.message.includes("Missing required headers")?n=`CSV file is missing required columns. ${i.message} Please ensure your CSV file has a 'username' column.`:i.message.includes("Invalid file type")?n+="Please select a valid CSV file.":i.message.includes("File too large")?n+="Please select a smaller file (max 10MB).":n+=i.message,this.uiManager.showNotification(n,"error"),t&&t.target&&t.target.value&&(t.target.value="")}}async processCSV(e){if(this.logger.log("Processing file object:","debug",e),!e)throw this.logger.error("No file provided to processCSV"),new Error("No file selected");if(e.size===0)throw this.logger.error("Empty file provided",{fileName:e.name,size:e.size}),new Error("File is empty");const t=e.name||"",s=this.getFileExtension(t).toLowerCase();if(s&&["exe","js","png","jpg","jpeg","gif","pdf","zip","tar","gz"].includes(s)){const o=`Unsupported file type: ${s}. Please upload a CSV or text file.`;throw this.logger.error(o,{fileName:t,fileExt:s}),new Error(o)}const n=10*1024*1024;if(e.size>n)throw new Error(`File is too large. Maximum size is ${this.formatFileSize(n)}`);return this.saveFileInfo(e),this.updateFileInfo(e),this.currentFile=e,new Promise((o,a)=>{const l=new FileReader;l.onload=c=>{try{const h=c.target.result;if(!h||h.trim()==="")throw new Error("File is empty or contains no text");console.log("[CSV] About to parse CSV text, length:",h.length);const{headers:g,rows:d}=this.parseCSV(h);console.log("[CSV] parseCSV completed, headers:",g,"rows count:",d.length);const u=this.requiredFields.filter(m=>!g.includes(m));if(u.length>0)throw new Error(`Missing required columns: ${u.join(", ")}`);this.lastParsedUsers=d.map(m=>{const w={};return g.forEach((y,b)=>{w[y]=m[y]||""}),w}),this.parsedUsers=this.lastParsedUsers,this.validationResults={total:this.lastParsedUsers.length,valid:this.lastParsedUsers.length,errors:0,warnings:0},console.log("[CSV] File parsed successfully (processCSV):",{totalUsers:this.validationResults.total,validUsers:this.validationResults.valid,errors:this.validationResults.errors,warnings:this.validationResults.warnings}),o({success:!0,headers:g,rows:this.lastParsedUsers,userCount:this.lastParsedUsers.length})}catch(h){a(h)}},l.onerror=()=>{a(new Error("Error reading file"))},l.readAsText(e)})}parseCSV(e){const t=e.split(`
`).filter(u=>u.trim());if(t.length<2)throw new Error("CSV file must have at least a header row and one data row");const s=this.parseCSVLine(t[0]),i=["username"],n=["firstName","lastName","email"];console.log("[CSV] All headers:",s),console.log("[CSV] Required headers:",i),console.log("[CSV] Recommended headers:",n);const o=i.filter(u=>{const m=s.some(w=>{const y=w.toLowerCase(),b=this.getHeaderMapping(y),B=y===u.toLowerCase()||b===u;return console.log(`[CSV] Checking header "${w}" (${y}) -> "${b}" for required "${u}": ${B}`),B});return console.log(`[CSV] Required header "${u}" found: ${m}`),!m}),a=n.filter(u=>{const m=s.some(w=>{const y=w.toLowerCase(),b=this.getHeaderMapping(y),B=y===u.toLowerCase()||b===u;return console.log(`[CSV] Checking header "${w}" (${y}) -> "${b}" for recommended "${u}": ${B}`),B});return console.log(`[CSV] Recommended header "${u}" found: ${m}`),!m});if(o.length>0){const u=`Missing required headers: ${o.join(", ")}. At minimum, you need a 'username' column.`;throw this.logger.error("CSV validation failed - missing required headers",{missingRequired:o,availableHeaders:s,errorMsg:u}),new Error(u)}if(a.length>0){const u=`Missing recommended headers: ${a.join(", ")}. These are not required but recommended for better user data.`;this.logger.warn("CSV validation warning - missing recommended headers",{missingRecommended:a,availableHeaders:s,warningMsg:u}),window.app&&window.app.uiManager&&window.app.uiManager.showNotification(u,"warning")}const l=[],c=[],h=[];let g=1;for(let u=1;u<t.length;u++){g=u+1;const m=t[u].trim();if(m)try{const w=this.parseUserRow(m,s,g),y=this.validateUserData(w,g);y.isValid?l.push(w):(c.push({row:g,user:w,errors:y.errors,warnings:y.warnings}),h.push(...y.warnings.map(b=>({row:g,...b}))))}catch(w){c.push({row:g,error:w.message,line:m})}}const d={totalRows:t.length-1,validUsers:l.length,invalidRows:c.length,warnings:h.length,missingRequiredHeaders:o,missingRecommendedHeaders:a,availableHeaders:s};if(this.logger.info("CSV parsing completed",d),c.length>0){const u=c.map(m=>({row:m.row,errors:m.errors||[m.error],warnings:m.warnings||[]}));this.logger.warn("CSV validation issues found",{totalErrors:c.length,errorDetails:u.slice(0,10)})}return this.showValidationSummary(d,c,h),{users:l,errors:c,warnings:h,totalRows:t.length-1,validUsers:l.length,invalidRows:c.length,headerCount:s.length,availableHeaders:s}}parseCSVLine(e,t=","){const s=[];let i="",n=!1;for(let o=0;o<e.length;o++){const a=e[o],l=e[o+1];a==='"'?l==='"'?(i+='"',o++):n=!n:a===t&&!n?(s.push(i),i=""):i+=a}return s.push(i),s.map(o=>o.trim())}parseUserRow(e,t,s){const i=this.parseCSVLine(e);if(i.length!==t.length)throw new Error(`Row ${s}: Number of columns (${i.length}) doesn't match headers (${t.length})`);const n={};for(let o=0;o<t.length;o++){const a=t[o].toLowerCase().trim();let l=i[o].trim();if(a==="enabled"){const h=l.toLowerCase();if(h==="true"||l==="1")l=!0;else if(h==="false"||l==="0")l=!1;else if(l==="")l=!0;else throw new Error(`Row ${s}: Invalid enabled value '${l}'. Must be true/false or 1/0`)}const c=this.getHeaderMapping(a);console.log(`[CSV] Mapping header: "${a}" -> "${c}"`),n[c]=l}return!n.username&&n.email&&(n.username=n.email),n}validateUserData(e,t){const s=[],i=[];return(!e.username||e.username.trim()==="")&&s.push("Username is required and cannot be empty"),(!e.firstName||e.firstName.trim()==="")&&i.push("firstName is recommended for better user data"),(!e.lastName||e.lastName.trim()==="")&&i.push("lastName is recommended for better user data"),(!e.email||e.email.trim()==="")&&i.push("email is recommended for better user data"),e.email&&e.email.trim()!==""&&!this.isValidEmail(e.email)&&s.push("Invalid email format"),e.username&&!this.isValidUsername(e.username)&&s.push("Username contains invalid characters (no spaces or special characters allowed)"),{isValid:s.length===0,errors:s,warnings:i}}showValidationSummary(e,t,s){let i="",n="success";e.invalidRows>0?(n="error",i=`File validation failed!

`,i+=`• Total rows: ${e.totalRows}
`,i+=`• Valid users: ${e.validUsers}
`,i+=`• Invalid rows: ${e.invalidRows}
`,i+=`• Warnings: ${s.length}

`,e.missingRequiredHeaders.length>0&&(i+=`❌ Missing required headers: ${e.missingRequiredHeaders.join(", ")}
`),t.length>0&&(i+=`❌ Data errors found in ${t.length} row(s)
`,t.slice(0,3).forEach(a=>{a.errors?i+=`  Row ${a.row}: ${a.errors.join(", ")}
`:a.error&&(i+=`  Row ${a.row}: ${a.error}
`)}),t.length>3&&(i+=`  ... and ${t.length-3} more errors
`))):s.length>0?(n="warning",i=`File loaded with warnings:

`,i+=`• Total rows: ${e.totalRows}
`,i+=`• Valid users: ${e.validUsers}
`,i+=`• Warnings: ${s.length}

`,e.missingRecommendedHeaders.length>0&&(i+=`⚠️ Missing recommended headers: ${e.missingRecommendedHeaders.join(", ")}
`),s.slice(0,3).forEach(a=>{i+=`  Row ${a.row}: ${a.message||a}
`}),s.length>3&&(i+=`  ... and ${s.length-3} more warnings
`)):(i=`File loaded successfully!

`,i+=`• Total rows: ${e.totalRows}
`,i+=`• Valid users: ${e.validUsers}
`,i+=`• Headers found: ${e.availableHeaders.join(", ")}`),window.app&&window.app.uiManager&&window.app.uiManager.showNotification(i,n),this.logger.info("CSV validation summary shown to user",{summary:e,message:i,type:n})}getHeaderMapping(e){return{firstname:"firstName",first_name:"firstName",givenname:"firstName",given_name:"firstName",lastname:"lastName",last_name:"lastName",familyname:"lastName",family_name:"lastName",surname:"lastName",emailaddress:"email",email_address:"email",userid:"username",user_id:"username",login:"username",user:"username",populationid:"populationId",population_id:"populationId",popid:"populationId",pop_id:"populationId"}[e]||e}isValidEmail(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}isValidUsername(e){return/^[a-zA-Z0-9._-]+$/.test(e)}updateFileInfoForElement(e,t,s=null){const i=document.getElementById(t);if(console.log("updateFileInfoForElement called:",{containerId:t,container:!!i,file:!!e,recordCount:s}),!i||!e){console.warn("updateFileInfoForElement: container or file is null",{containerId:t,hasContainer:!!i,hasFile:!!e});return}const n=this.formatFileSize(e.size),o=new Date(e.lastModified).toLocaleString(),a=e.type||this.getFileExtension(e.name),l=this.getFileExtension(e.name);let c="Unknown";if(e.webkitRelativePath)c=e.webkitRelativePath;else if(e.name){const b=e.name.split(/[\/\\]/);b.length>1?c=b.slice(0,-1).join("/"):c="Current Directory"}const d=l==="csv"||l==="txt"||a==="text/csv"||a==="text/plain",u=Math.round(e.size/1024),m=Math.round(e.size/1024/1024*100)/100;let w="";d&&s!==null&&typeof s=="number"&&(s>0?w=`<div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;"><strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">🧾 Records</strong><span style="color: #0073C8; font-size: 0.8rem; font-weight: bold;">${s}</span></div>`:w='<div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;"><strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">🧾 Records</strong><span style="color: #dc3545; font-size: 0.8rem; font-weight: bold;">No user records found</span></div>');const y=`
            <div class="file-info-details" style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 6px; padding: 12px; margin: 8px 0; box-shadow: 0 1px 4px rgba(0,0,0,0.08);">
                
                <!-- Compact File Name Section -->
                <div class="file-name-section" style="text-align: center; margin-bottom: 12px; padding: 8px; background: #e6f4ff; border-radius: 4px; color: #1a237e; font-weight: bold; font-size: 1.1rem;">
                    <div style="font-size: 1.3rem; font-weight: 600; margin-bottom: 3px; color: #1a237e; text-shadow: none; word-break: break-word; overflow-wrap: break-word;">
                        <i class="fas fa-file-csv" style="margin-right: 6px; font-size: 1.2rem; color: #1976d2;"></i>
                        ${e.name}
                    </div>
                    <div style="font-size: 0.85rem; opacity: 0.9; font-weight: 500; color: #1976d2;">
                        File Selected Successfully
                    </div>
                </div>
                
                <!-- Compact File Information Grid -->
                <div class="file-info-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 0.8em; margin-bottom: 10px;">
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📊 File Size</strong>
                        <span style="color: #6c757d; font-size: 0.8rem;">${n} (${u} KB, ${m} MB)</span>
                    </div>
                    
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📂 Directory</strong>
                        <span style="color: #6c757d; word-break: break-all; font-size: 0.8rem;">${c}</span>
                    </div>
                    
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📅 Last Modified</strong>
                        <span style="color: #6c757d; font-size: 0.8rem;">${o}</span>
                    </div>
                    
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">🔤 File Type</strong>
                        <span style="color: #6c757d; font-size: 0.8rem;">${a||"Unknown"}</span>
                    </div>
                    
                    <div class="file-info-item" style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #e9ecef;">
                        <strong style="color: #495057; display: block; margin-bottom: 3px; font-size: 0.85rem;">📄 Extension</strong>
                        <span style="color: ${d?"#28a745":"#dc3545"}; font-weight: bold; font-size: 0.8rem;">
                            ${l?"."+l:"None"}
                        </span>
                    </div>
                    ${w}
                </div>
                
                <!-- Compact File Status Section -->
                <div class="file-info-status" style="margin-top: 8px; padding: 8px; border-radius: 4px; background: ${d?"#d4edda":"#f8d7da"}; border: 1px solid ${d?"#c3e6cb":"#f5c6cb"}; display: flex; align-items: center; gap: 6px;">
                    <i class="fas ${d?"fa-check-circle":"fa-exclamation-triangle"}" style="color: ${d?"#155724":"#721c24"}; font-size: 1rem;"></i>
                    <span style="color: ${d?"#155724":"#721c24"}; font-weight: bold; font-size: 0.85rem;">
                        ${d?"✅ File type is supported and ready for processing":"⚠️ Warning: File type may not be optimal for import"}
                    </span>
                </div>
                
                ${e.size>5*1024*1024?`
                <div class="file-info-warning" style="margin-top: 8px; padding: 8px; border-radius: 4px; background: #fff3cd; border: 1px solid #ffeaa7; display: flex; align-items: center; gap: 6px;">
                    <i class="fas fa-exclamation-triangle" style="color: #856404; font-size: 1rem;"></i>
                    <span style="color: #856404; font-weight: bold; font-size: 0.85rem;">Large file detected - processing may take longer than usual</span>
                </div>
                `:""}
                
                <!-- Responsive Design -->
                <style>
                    @media (max-width: 768px) {
                        .file-info-details .file-name-section div:first-child {
                            font-size: 1.1rem !important;
                        }
                        .file-info-grid {
                            grid-template-columns: 1fr !important;
                            gap: 6px !important;
                        }
                        .file-info-item {
                            padding: 6px !important;
                        }
                    }
                    @media (max-width: 480px) {
                        .file-info-details .file-name-section div:first-child {
                            font-size: 0.95rem !important;
                        }
                        .file-info-details {
                            padding: 8px !important;
                        }
                    }
                </style>
            </div>
        `;i.innerHTML=y}updateFileInfo(e,t=null){this.updateFileInfoForElement(e,"file-info",t)}showPreview(e){if(!this.previewContainer)return;if(!e||e.length===0){this.previewContainer.innerHTML='<div class="alert alert-info">No data to display</div>';const a=p.startImportBtnBottom?p.startImportBtnBottom():null;a&&(a.disabled=!0);return}const t=Object.keys(e[0]),s=e.slice(0,5);let i=`
            <div class="table-responsive">
                <table class="table table-sm table-striped">
                    <thead>
                        <tr>
                            ${t.map(a=>`<th>${a}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${s.map(a=>`
                            <tr>
                                ${t.map(l=>`<td>${a[l]||""}</td>`).join("")}
                            </tr>
                        `).join("")}
                    </tbody>
                </table>
                ${e.length>5?`<small class="text-muted">Showing 5 of ${e.length} rows</small>`:""}
            </div>
        `;this.previewContainer.innerHTML=i;const n=this.checkPopulationChoice(),o=p.startImportBtnBottom?p.startImportBtnBottom():null;o?(o.disabled=!n,this.logger.log(`Import button ${n?"enabled":"disabled"}`,"debug")):this.logger.warn("Could not find import button to enable","warn")}checkPopulationChoice(){const e=p.importPopulationSelect&&p.importPopulationSelect().value||"",t=p.useDefaultPopulationCheckbox&&p.useDefaultPopulationCheckbox().checked||!1,s=p.useCsvPopulationIdCheckbox&&p.useCsvPopulationIdCheckbox().checked||!1;return e&&e.trim()!==""||t||s}getFileExtension(e){if(!e||typeof e!="string")return"";const t=e.lastIndexOf("."),s=Math.max(e.lastIndexOf("/"),e.lastIndexOf("\\"));return t===-1||s>t?"":e.slice(t+1).toLowerCase().trim()}formatFileSize(e){if(e===0)return"0 Bytes";const t=1024,s=["Bytes","KB","MB","GB"],i=Math.floor(Math.log(e)/Math.log(t));return parseFloat((e/Math.pow(t,i)).toFixed(2))+" "+s[i]}generateTemporaryPassword(){const t="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]\\:;?><,./-";let s="";s+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random()*26)],s+="abcdefghijklmnopqrstuvwxyz"[Math.floor(Math.random()*26)],s+="0123456789"[Math.floor(Math.random()*10)],s+="!@#$%^&*"[Math.floor(Math.random()*8)];for(let i=s.length;i<16;i++)s+=t[Math.floor(Math.random()*t.length)];return s.split("").sort(()=>Math.random()-.5).join("")}getParsedUsers(){return this.logger.info("getParsedUsers called",{hasParsedUsers:!!this.parsedUsers,parsedUsersType:typeof this.parsedUsers,parsedUsersLength:this.parsedUsers?this.parsedUsers.length:0,hasLastParsedUsers:!!this.lastParsedUsers,lastParsedUsersType:typeof this.lastParsedUsers,lastParsedUsersLength:this.lastParsedUsers?this.lastParsedUsers.length:0}),!this.parsedUsers||!Array.isArray(this.parsedUsers)?(this.logger.warn("No parsed users available"),this.uiManager&&this.uiManager.showNotification&&this.uiManager.showNotification("No CSV file has been uploaded yet. Please upload a CSV file first.","info"),[]):(this.logger.info("Retrieving parsed users for import",{userCount:this.parsedUsers.length,hasUsers:this.parsedUsers.length>0}),this.parsedUsers)}getParseResults(){return this.parseResults||null}initializeDropZone(e){e&&(e.removeEventListener("dragenter",this._onDragEnter),e.removeEventListener("dragover",this._onDragOver),e.removeEventListener("dragleave",this._onDragLeave),e.removeEventListener("drop",this._onDrop),this._onDragEnter=t=>{t.preventDefault(),t.stopPropagation(),e.classList.add("drag-over")},this._onDragOver=t=>{t.preventDefault(),t.stopPropagation(),e.classList.add("drag-over")},this._onDragLeave=t=>{t.preventDefault(),t.stopPropagation(),e.classList.remove("drag-over")},this._onDrop=async t=>{t.preventDefault(),t.stopPropagation(),e.classList.remove("drag-over");const s=t.dataTransfer.files;if(s&&s.length>0)try{await this.setFile(s[0])}catch(i){this.logger.error("Drag-and-drop file error",{error:i.message}),this.uiManager.showNotification("Failed to process dropped file: "+i.message,"error")}},e.addEventListener("dragenter",this._onDragEnter),e.addEventListener("dragover",this._onDragOver),e.addEventListener("dragleave",this._onDragLeave),e.addEventListener("drop",this._onDrop))}initializeGlobalDragAndDrop(){const e=n=>{n.preventDefault(),n.stopPropagation()},t=async n=>{n.preventDefault(),n.stopPropagation(),document.body.classList.remove("drag-over");const o=n.dataTransfer.files;if(o&&o.length>0){const a=o[0],l=a.name||"",c=this.getFileExtension(l).toLowerCase();if(c&&["exe","js","png","jpg","jpeg","gif","pdf","zip","tar","gz"].includes(c)){this.uiManager.showNotification(`Unsupported file type: ${c}. Please upload a CSV or text file.`,"error");return}const g=this.getCurrentView();let d=null;switch(g){case"import":d=document.getElementById("import-drop-zone");break;case"modify":d=document.getElementById("modify-drop-zone");break;case"import-dashboard":d=document.getElementById("upload-zone");break;default:d=document.getElementById("import-drop-zone");break}d&&(d.classList.add("drag-over"),setTimeout(()=>{d.classList.remove("drag-over")},2e3));try{await this.setFile(a),this.uiManager.showNotification(`File "${a.name}" processed successfully`,"success")}catch(u){this.logger.error("Global drag-and-drop file error",{error:u.message}),this.uiManager.showNotification("Failed to process dropped file: "+u.message,"error")}}},s=n=>{n.preventDefault(),n.stopPropagation(),n.dataTransfer.types.includes("Files")&&document.body.classList.add("drag-over")},i=n=>{n.preventDefault(),n.stopPropagation(),(n.target===document||n.target===document.body)&&document.body.classList.remove("drag-over")};document.addEventListener("dragover",e),document.addEventListener("dragenter",s),document.addEventListener("dragleave",i),document.addEventListener("drop",t),this._globalDragHandlers={preventDefaultDragEvents:e,handleGlobalDragEnter:s,handleGlobalDragLeave:i,handleGlobalDrop:t},this.logger.info("Global drag-and-drop prevention initialized")}cleanupGlobalDragAndDrop(){this._globalDragHandlers&&(document.removeEventListener("dragover",this._globalDragHandlers.preventDefaultDragEvents),document.removeEventListener("dragenter",this._globalDragHandlers.handleGlobalDragEnter),document.removeEventListener("dragleave",this._globalDragHandlers.handleGlobalDragLeave),document.removeEventListener("drop",this._globalDragHandlers.handleGlobalDrop),this._globalDragHandlers=null),document.body.classList.remove("drag-over")}getCurrentView(){const e=document.querySelector('.view[style*="block"]')||document.querySelector('.view:not([style*="none"])');if(!e)return"import";const t=e.id;return t==="import-dashboard-view"?"import-dashboard":t==="modify-csv-view"?"modify":t==="delete-csv-view"?"delete":t==="export-view"?"export":t==="settings-view"?"settings":t==="logs-view"?"logs":"import"}}class It{constructor(){this.version="6.1",console.log(`Version Manager initialized with version ${this.version}`)}getVersion(){return this.version}getFormattedVersion(){return`v${this.version}`}updateTitle(){const e=document.querySelector("h1");if(e){const t=e.textContent.replace(/\s*\(v\d+\.\d+\.\d+\)\s*$/,"").trim();e.textContent=`${t} (${this.getFormattedVersion()})`}document.title=`PingOne User Import ${this.getFormattedVersion()}`,this.updateImportButton(),this.updateTopVersionBadge(),this.addSidebarVersionBadge()}updateImportButton(){const e=document.getElementById("start-import-btn");if(e){const t=e.textContent.replace(/\s*\(v\d+\.\d+\.\d+\)\s*$/,"").trim();e.innerHTML=`<i class="pi pi-upload"></i> ${t} (${this.getFormattedVersion()})`}}updateTopVersionBadge(){const e=document.getElementById("version-text");e&&(e.textContent=this.getFormattedVersion())}addSidebarVersionBadge(){const e=document.getElementById("top-left-version-badge");e&&e.remove();const t=document.getElementById("sidebar-version-badge");if(t&&t.remove(),document.getElementById("sidebar-version-badge"))return;const s=document.createElement("div");s.id="sidebar-version-badge",s.className="sidebar-version-badge",s.textContent=this.getFormattedVersion();const i=document.querySelector(".ping-footer");if(i){const n=i.querySelector(".footer-left");if(n){const o=n.querySelector(".footer-logo");o?n.insertBefore(s,o.nextSibling):n.insertBefore(s,n.firstChild)}else i.appendChild(s)}else document.body.appendChild(s)}}const A=Object.create(null);A.open="0";A.close="1";A.ping="2";A.pong="3";A.message="4";A.upgrade="5";A.noop="6";const z=Object.create(null);Object.keys(A).forEach(r=>{z[A[r]]=r});const ne={type:"error",data:"parser error"},De=typeof Blob=="function"||typeof Blob<"u"&&Object.prototype.toString.call(Blob)==="[object BlobConstructor]",Oe=typeof ArrayBuffer=="function",Le=r=>typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(r):r&&r.buffer instanceof ArrayBuffer,me=({type:r,data:e},t,s)=>De&&e instanceof Blob?t?s(e):Se(e,s):Oe&&(e instanceof ArrayBuffer||Le(e))?t?s(e):Se(new Blob([e]),s):s(A[r]+(e||"")),Se=(r,e)=>{const t=new FileReader;return t.onload=function(){const s=t.result.split(",")[1];e("b"+(s||""))},t.readAsDataURL(r)};function Ee(r){return r instanceof Uint8Array?r:r instanceof ArrayBuffer?new Uint8Array(r):new Uint8Array(r.buffer,r.byteOffset,r.byteLength)}let Q;function Ct(r,e){if(De&&r.data instanceof Blob)return r.data.arrayBuffer().then(Ee).then(e);if(Oe&&(r.data instanceof ArrayBuffer||Le(r.data)))return e(Ee(r.data));me(r,!1,t=>{Q||(Q=new TextEncoder),e(Q.encode(t))})}const ke="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",U=typeof Uint8Array>"u"?[]:new Uint8Array(256);for(let r=0;r<ke.length;r++)U[ke.charCodeAt(r)]=r;const Mt=r=>{let e=r.length*.75,t=r.length,s,i=0,n,o,a,l;r[r.length-1]==="="&&(e--,r[r.length-2]==="="&&e--);const c=new ArrayBuffer(e),h=new Uint8Array(c);for(s=0;s<t;s+=4)n=U[r.charCodeAt(s)],o=U[r.charCodeAt(s+1)],a=U[r.charCodeAt(s+2)],l=U[r.charCodeAt(s+3)],h[i++]=n<<2|o>>4,h[i++]=(o&15)<<4|a>>2,h[i++]=(a&3)<<6|l&63;return c},xt=typeof ArrayBuffer=="function",fe=(r,e)=>{if(typeof r!="string")return{type:"message",data:Pe(r,e)};const t=r.charAt(0);return t==="b"?{type:"message",data:At(r.substring(1),e)}:z[t]?r.length>1?{type:z[t],data:r.substring(1)}:{type:z[t]}:ne},At=(r,e)=>{if(xt){const t=Mt(r);return Pe(t,e)}else return{base64:!0,data:r}},Pe=(r,e)=>{switch(e){case"blob":return r instanceof Blob?r:new Blob([r]);case"arraybuffer":default:return r instanceof ArrayBuffer?r:r.buffer}},Re="",Dt=(r,e)=>{const t=r.length,s=new Array(t);let i=0;r.forEach((n,o)=>{me(n,!1,a=>{s[o]=a,++i===t&&e(s.join(Re))})})},Ot=(r,e)=>{const t=r.split(Re),s=[];for(let i=0;i<t.length;i++){const n=fe(t[i],e);if(s.push(n),n.type==="error")break}return s};function Lt(){return new TransformStream({transform(r,e){Ct(r,t=>{const s=t.length;let i;if(s<126)i=new Uint8Array(1),new DataView(i.buffer).setUint8(0,s);else if(s<65536){i=new Uint8Array(3);const n=new DataView(i.buffer);n.setUint8(0,126),n.setUint16(1,s)}else{i=new Uint8Array(9);const n=new DataView(i.buffer);n.setUint8(0,127),n.setBigUint64(1,BigInt(s))}r.data&&typeof r.data!="string"&&(i[0]|=128),e.enqueue(i),e.enqueue(t)})}})}let Z;function $(r){return r.reduce((e,t)=>e+t.length,0)}function H(r,e){if(r[0].length===e)return r.shift();const t=new Uint8Array(e);let s=0;for(let i=0;i<e;i++)t[i]=r[0][s++],s===r[0].length&&(r.shift(),s=0);return r.length&&s<r[0].length&&(r[0]=r[0].slice(s)),t}function Pt(r,e){Z||(Z=new TextDecoder);const t=[];let s=0,i=-1,n=!1;return new TransformStream({transform(o,a){for(t.push(o);;){if(s===0){if($(t)<1)break;const l=H(t,1);n=(l[0]&128)===128,i=l[0]&127,i<126?s=3:i===126?s=1:s=2}else if(s===1){if($(t)<2)break;const l=H(t,2);i=new DataView(l.buffer,l.byteOffset,l.length).getUint16(0),s=3}else if(s===2){if($(t)<8)break;const l=H(t,8),c=new DataView(l.buffer,l.byteOffset,l.length),h=c.getUint32(0);if(h>Math.pow(2,21)-1){a.enqueue(ne);break}i=h*Math.pow(2,32)+c.getUint32(4),s=3}else{if($(t)<i)break;const l=H(t,i);a.enqueue(fe(n?l:Z.decode(l),e)),s=0}if(i===0||i>r){a.enqueue(ne);break}}}})}const Be=4;function v(r){if(r)return Rt(r)}function Rt(r){for(var e in v.prototype)r[e]=v.prototype[e];return r}v.prototype.on=v.prototype.addEventListener=function(r,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+r]=this._callbacks["$"+r]||[]).push(e),this};v.prototype.once=function(r,e){function t(){this.off(r,t),e.apply(this,arguments)}return t.fn=e,this.on(r,t),this};v.prototype.off=v.prototype.removeListener=v.prototype.removeAllListeners=v.prototype.removeEventListener=function(r,e){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var t=this._callbacks["$"+r];if(!t)return this;if(arguments.length==1)return delete this._callbacks["$"+r],this;for(var s,i=0;i<t.length;i++)if(s=t[i],s===e||s.fn===e){t.splice(i,1);break}return t.length===0&&delete this._callbacks["$"+r],this};v.prototype.emit=function(r){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),t=this._callbacks["$"+r],s=1;s<arguments.length;s++)e[s-1]=arguments[s];if(t){t=t.slice(0);for(var s=0,i=t.length;s<i;++s)t[s].apply(this,e)}return this};v.prototype.emitReserved=v.prototype.emit;v.prototype.listeners=function(r){return this._callbacks=this._callbacks||{},this._callbacks["$"+r]||[]};v.prototype.hasListeners=function(r){return!!this.listeners(r).length};const Y=typeof Promise=="function"&&typeof Promise.resolve=="function"?e=>Promise.resolve().then(e):(e,t)=>t(e,0),I=typeof self<"u"?self:typeof window<"u"?window:Function("return this")(),Bt="arraybuffer";function Ne(r,...e){return e.reduce((t,s)=>(r.hasOwnProperty(s)&&(t[s]=r[s]),t),{})}const Nt=I.setTimeout,Ut=I.clearTimeout;function J(r,e){e.useNativeTimers?(r.setTimeoutFn=Nt.bind(I),r.clearTimeoutFn=Ut.bind(I)):(r.setTimeoutFn=I.setTimeout.bind(I),r.clearTimeoutFn=I.clearTimeout.bind(I))}const _t=1.33;function Ft(r){return typeof r=="string"?$t(r):Math.ceil((r.byteLength||r.size)*_t)}function $t(r){let e=0,t=0;for(let s=0,i=r.length;s<i;s++)e=r.charCodeAt(s),e<128?t+=1:e<2048?t+=2:e<55296||e>=57344?t+=3:(s++,t+=4);return t}function Ue(){return Date.now().toString(36).substring(3)+Math.random().toString(36).substring(2,5)}function Ht(r){let e="";for(let t in r)r.hasOwnProperty(t)&&(e.length&&(e+="&"),e+=encodeURIComponent(t)+"="+encodeURIComponent(r[t]));return e}function zt(r){let e={},t=r.split("&");for(let s=0,i=t.length;s<i;s++){let n=t[s].split("=");e[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return e}class Vt extends Error{constructor(e,t,s){super(e),this.description=t,this.context=s,this.type="TransportError"}}class ye extends v{constructor(e){super(),this.writable=!1,J(this,e),this.opts=e,this.query=e.query,this.socket=e.socket,this.supportsBinary=!e.forceBase64}onError(e,t,s){return super.emitReserved("error",new Vt(e,t,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return(this.readyState==="opening"||this.readyState==="open")&&(this.doClose(),this.onClose()),this}send(e){this.readyState==="open"&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=fe(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}pause(e){}createUri(e,t={}){return e+"://"+this._hostname()+this._port()+this.opts.path+this._query(t)}_hostname(){const e=this.opts.hostname;return e.indexOf(":")===-1?e:"["+e+"]"}_port(){return this.opts.port&&(this.opts.secure&&+(this.opts.port!==443)||!this.opts.secure&&Number(this.opts.port)!==80)?":"+this.opts.port:""}_query(e){const t=Ht(e);return t.length?"?"+t:""}}class Gt extends ye{constructor(){super(...arguments),this._polling=!1}get name(){return"polling"}doOpen(){this._poll()}pause(e){this.readyState="pausing";const t=()=>{this.readyState="paused",e()};if(this._polling||!this.writable){let s=0;this._polling&&(s++,this.once("pollComplete",function(){--s||t()})),this.writable||(s++,this.once("drain",function(){--s||t()}))}else t()}_poll(){this._polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){const t=s=>{if(this.readyState==="opening"&&s.type==="open"&&this.onOpen(),s.type==="close")return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(s)};Ot(e,this.socket.binaryType).forEach(t),this.readyState!=="closed"&&(this._polling=!1,this.emitReserved("pollComplete"),this.readyState==="open"&&this._poll())}doClose(){const e=()=>{this.write([{type:"close"}])};this.readyState==="open"?e():this.once("open",e)}write(e){this.writable=!1,Dt(e,t=>{this.doWrite(t,()=>{this.writable=!0,this.emitReserved("drain")})})}uri(){const e=this.opts.secure?"https":"http",t=this.query||{};return this.opts.timestampRequests!==!1&&(t[this.opts.timestampParam]=Ue()),!this.supportsBinary&&!t.sid&&(t.b64=1),this.createUri(e,t)}}let _e=!1;try{_e=typeof XMLHttpRequest<"u"&&"withCredentials"in new XMLHttpRequest}catch{}const qt=_e;function jt(){}class Wt extends Gt{constructor(e){if(super(e),typeof location<"u"){const t=location.protocol==="https:";let s=location.port;s||(s=t?"443":"80"),this.xd=typeof location<"u"&&e.hostname!==location.hostname||s!==e.port}}doWrite(e,t){const s=this.request({method:"POST",data:e});s.on("success",t),s.on("error",(i,n)=>{this.onError("xhr post error",i,n)})}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(t,s)=>{this.onError("xhr poll error",t,s)}),this.pollXhr=e}}class x extends v{constructor(e,t,s){super(),this.createRequest=e,J(this,s),this._opts=s,this._method=s.method||"GET",this._uri=t,this._data=s.data!==void 0?s.data:null,this._create()}_create(){var e;const t=Ne(this._opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this._opts.xd;const s=this._xhr=this.createRequest(t);try{s.open(this._method,this._uri,!0);try{if(this._opts.extraHeaders){s.setDisableHeaderCheck&&s.setDisableHeaderCheck(!0);for(let i in this._opts.extraHeaders)this._opts.extraHeaders.hasOwnProperty(i)&&s.setRequestHeader(i,this._opts.extraHeaders[i])}}catch{}if(this._method==="POST")try{s.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch{}try{s.setRequestHeader("Accept","*/*")}catch{}(e=this._opts.cookieJar)===null||e===void 0||e.addCookies(s),"withCredentials"in s&&(s.withCredentials=this._opts.withCredentials),this._opts.requestTimeout&&(s.timeout=this._opts.requestTimeout),s.onreadystatechange=()=>{var i;s.readyState===3&&((i=this._opts.cookieJar)===null||i===void 0||i.parseCookies(s.getResponseHeader("set-cookie"))),s.readyState===4&&(s.status===200||s.status===1223?this._onLoad():this.setTimeoutFn(()=>{this._onError(typeof s.status=="number"?s.status:0)},0))},s.send(this._data)}catch(i){this.setTimeoutFn(()=>{this._onError(i)},0);return}typeof document<"u"&&(this._index=x.requestsCount++,x.requests[this._index]=this)}_onError(e){this.emitReserved("error",e,this._xhr),this._cleanup(!0)}_cleanup(e){if(!(typeof this._xhr>"u"||this._xhr===null)){if(this._xhr.onreadystatechange=jt,e)try{this._xhr.abort()}catch{}typeof document<"u"&&delete x.requests[this._index],this._xhr=null}}_onLoad(){const e=this._xhr.responseText;e!==null&&(this.emitReserved("data",e),this.emitReserved("success"),this._cleanup())}abort(){this._cleanup()}}x.requestsCount=0;x.requests={};if(typeof document<"u"){if(typeof attachEvent=="function")attachEvent("onunload",Te);else if(typeof addEventListener=="function"){const r="onpagehide"in I?"pagehide":"unload";addEventListener(r,Te,!1)}}function Te(){for(let r in x.requests)x.requests.hasOwnProperty(r)&&x.requests[r].abort()}const Yt=function(){const r=Fe({xdomain:!1});return r&&r.responseType!==null}();class oe extends Wt{constructor(e){super(e);const t=e&&e.forceBase64;this.supportsBinary=Yt&&!t}request(e={}){return Object.assign(e,{xd:this.xd},this.opts),new x(Fe,this.uri(),e)}}function Fe(r){const e=r.xdomain;try{if(typeof XMLHttpRequest<"u"&&(!e||qt))return new XMLHttpRequest}catch{}if(!e)try{return new I[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP")}catch{}}const $e=typeof navigator<"u"&&typeof navigator.product=="string"&&navigator.product.toLowerCase()==="reactnative";class Jt extends ye{get name(){return"websocket"}doOpen(){const e=this.uri(),t=this.opts.protocols,s=$e?{}:Ne(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=this.createSocket(e,t,s)}catch(i){return this.emitReserved("error",i)}this.ws.binaryType=this.socket.binaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],i=t===e.length-1;me(s,this.supportsBinary,n=>{try{this.doWrite(s,n)}catch{}i&&Y(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){typeof this.ws<"u"&&(this.ws.onerror=()=>{},this.ws.close(),this.ws=null)}uri(){const e=this.opts.secure?"wss":"ws",t=this.query||{};return this.opts.timestampRequests&&(t[this.opts.timestampParam]=Ue()),this.supportsBinary||(t.b64=1),this.createUri(e,t)}}const ee=I.WebSocket||I.MozWebSocket;class re extends Jt{createSocket(e,t,s){return $e?new ee(e,t,s):t?new ee(e,t):new ee(e)}doWrite(e,t){this.ws.send(t)}}class He extends ye{get name(){return"webtransport"}doOpen(){try{this._transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name])}catch(e){return this.emitReserved("error",e)}this._transport.closed.then(()=>{this.onClose()}).catch(e=>{this.onError("webtransport error",e)}),this._transport.ready.then(()=>{this._transport.createBidirectionalStream().then(e=>{const t=Pt(Number.MAX_SAFE_INTEGER,this.socket.binaryType),s=e.readable.pipeThrough(t).getReader(),i=Lt();i.readable.pipeTo(e.writable),this._writer=i.writable.getWriter();const n=()=>{s.read().then(({done:a,value:l})=>{a||(this.onPacket(l),n())}).catch(a=>{})};n();const o={type:"open"};this.query.sid&&(o.data=`{"sid":"${this.query.sid}"}`),this._writer.write(o).then(()=>this.onOpen())})})}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],i=t===e.length-1;this._writer.write(s).then(()=>{i&&Y(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){var e;(e=this._transport)===null||e===void 0||e.close()}}const Xt={websocket:re,webtransport:He,polling:oe},Kt=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,Qt=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function ae(r){if(r.length>8e3)throw"URI too long";const e=r,t=r.indexOf("["),s=r.indexOf("]");t!=-1&&s!=-1&&(r=r.substring(0,t)+r.substring(t,s).replace(/:/g,";")+r.substring(s,r.length));let i=Kt.exec(r||""),n={},o=14;for(;o--;)n[Qt[o]]=i[o]||"";return t!=-1&&s!=-1&&(n.source=e,n.host=n.host.substring(1,n.host.length-1).replace(/;/g,":"),n.authority=n.authority.replace("[","").replace("]","").replace(/;/g,":"),n.ipv6uri=!0),n.pathNames=Zt(n,n.path),n.queryKey=es(n,n.query),n}function Zt(r,e){const t=/\/{2,9}/g,s=e.replace(t,"/").split("/");return(e.slice(0,1)=="/"||e.length===0)&&s.splice(0,1),e.slice(-1)=="/"&&s.splice(s.length-1,1),s}function es(r,e){const t={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(s,i,n){i&&(t[i]=n)}),t}const le=typeof addEventListener=="function"&&typeof removeEventListener=="function",V=[];le&&addEventListener("offline",()=>{V.forEach(r=>r())},!1);class D extends v{constructor(e,t){if(super(),this.binaryType=Bt,this.writeBuffer=[],this._prevBufferLen=0,this._pingInterval=-1,this._pingTimeout=-1,this._maxPayload=-1,this._pingTimeoutTime=1/0,e&&typeof e=="object"&&(t=e,e=null),e){const s=ae(e);t.hostname=s.host,t.secure=s.protocol==="https"||s.protocol==="wss",t.port=s.port,s.query&&(t.query=s.query)}else t.host&&(t.hostname=ae(t.host).host);J(this,t),this.secure=t.secure!=null?t.secure:typeof location<"u"&&location.protocol==="https:",t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||(typeof location<"u"?location.hostname:"localhost"),this.port=t.port||(typeof location<"u"&&location.port?location.port:this.secure?"443":"80"),this.transports=[],this._transportsByName={},t.transports.forEach(s=>{const i=s.prototype.name;this.transports.push(i),this._transportsByName[i]=s}),this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},t),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),typeof this.opts.query=="string"&&(this.opts.query=zt(this.opts.query)),le&&(this.opts.closeOnBeforeunload&&(this._beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this._beforeunloadEventListener,!1)),this.hostname!=="localhost"&&(this._offlineEventListener=()=>{this._onClose("transport close",{description:"network connection lost"})},V.push(this._offlineEventListener))),this.opts.withCredentials&&(this._cookieJar=void 0),this._open()}createTransport(e){const t=Object.assign({},this.opts.query);t.EIO=Be,t.transport=e,this.id&&(t.sid=this.id);const s=Object.assign({},this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[e]);return new this._transportsByName[e](s)}_open(){if(this.transports.length===0){this.setTimeoutFn(()=>{this.emitReserved("error","No transports available")},0);return}const e=this.opts.rememberUpgrade&&D.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1?"websocket":this.transports[0];this.readyState="opening";const t=this.createTransport(e);t.open(),this.setTransport(t)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this._onDrain.bind(this)).on("packet",this._onPacket.bind(this)).on("error",this._onError.bind(this)).on("close",t=>this._onClose("transport close",t))}onOpen(){this.readyState="open",D.priorWebsocketSuccess=this.transport.name==="websocket",this.emitReserved("open"),this.flush()}_onPacket(e){if(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this._sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong"),this._resetPingTimeout();break;case"error":const t=new Error("server error");t.code=e.data,this._onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data);break}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this._pingInterval=e.pingInterval,this._pingTimeout=e.pingTimeout,this._maxPayload=e.maxPayload,this.onOpen(),this.readyState!=="closed"&&this._resetPingTimeout()}_resetPingTimeout(){this.clearTimeoutFn(this._pingTimeoutTimer);const e=this._pingInterval+this._pingTimeout;this._pingTimeoutTime=Date.now()+e,this._pingTimeoutTimer=this.setTimeoutFn(()=>{this._onClose("ping timeout")},e),this.opts.autoUnref&&this._pingTimeoutTimer.unref()}_onDrain(){this.writeBuffer.splice(0,this._prevBufferLen),this._prevBufferLen=0,this.writeBuffer.length===0?this.emitReserved("drain"):this.flush()}flush(){if(this.readyState!=="closed"&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this._getWritablePackets();this.transport.send(e),this._prevBufferLen=e.length,this.emitReserved("flush")}}_getWritablePackets(){if(!(this._maxPayload&&this.transport.name==="polling"&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+=Ft(i)),s>0&&t>this._maxPayload)return this.writeBuffer.slice(0,s);t+=2}return this.writeBuffer}_hasPingExpired(){if(!this._pingTimeoutTime)return!0;const e=Date.now()>this._pingTimeoutTime;return e&&(this._pingTimeoutTime=0,Y(()=>{this._onClose("ping timeout")},this.setTimeoutFn)),e}write(e,t,s){return this._sendPacket("message",e,t,s),this}send(e,t,s){return this._sendPacket("message",e,t,s),this}_sendPacket(e,t,s,i){if(typeof t=="function"&&(i=t,t=void 0),typeof s=="function"&&(i=s,s=null),this.readyState==="closing"||this.readyState==="closed")return;s=s||{},s.compress=s.compress!==!1;const n={type:e,data:t,options:s};this.emitReserved("packetCreate",n),this.writeBuffer.push(n),i&&this.once("flush",i),this.flush()}close(){const e=()=>{this._onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},s=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return(this.readyState==="opening"||this.readyState==="open")&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",()=>{this.upgrading?s():e()}):this.upgrading?s():e()),this}_onError(e){if(D.priorWebsocketSuccess=!1,this.opts.tryAllTransports&&this.transports.length>1&&this.readyState==="opening")return this.transports.shift(),this._open();this.emitReserved("error",e),this._onClose("transport error",e)}_onClose(e,t){if(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing"){if(this.clearTimeoutFn(this._pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),le&&(this._beforeunloadEventListener&&removeEventListener("beforeunload",this._beforeunloadEventListener,!1),this._offlineEventListener)){const s=V.indexOf(this._offlineEventListener);s!==-1&&V.splice(s,1)}this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this._prevBufferLen=0}}}D.protocol=Be;class ts extends D{constructor(){super(...arguments),this._upgrades=[]}onOpen(){if(super.onOpen(),this.readyState==="open"&&this.opts.upgrade)for(let e=0;e<this._upgrades.length;e++)this._probe(this._upgrades[e])}_probe(e){let t=this.createTransport(e),s=!1;D.priorWebsocketSuccess=!1;const i=()=>{s||(t.send([{type:"ping",data:"probe"}]),t.once("packet",g=>{if(!s)if(g.type==="pong"&&g.data==="probe"){if(this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;D.priorWebsocketSuccess=t.name==="websocket",this.transport.pause(()=>{s||this.readyState!=="closed"&&(h(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())})}else{const d=new Error("probe error");d.transport=t.name,this.emitReserved("upgradeError",d)}}))};function n(){s||(s=!0,h(),t.close(),t=null)}const o=g=>{const d=new Error("probe error: "+g);d.transport=t.name,n(),this.emitReserved("upgradeError",d)};function a(){o("transport closed")}function l(){o("socket closed")}function c(g){t&&g.name!==t.name&&n()}const h=()=>{t.removeListener("open",i),t.removeListener("error",o),t.removeListener("close",a),this.off("close",l),this.off("upgrading",c)};t.once("open",i),t.once("error",o),t.once("close",a),this.once("close",l),this.once("upgrading",c),this._upgrades.indexOf("webtransport")!==-1&&e!=="webtransport"?this.setTimeoutFn(()=>{s||t.open()},200):t.open()}onHandshake(e){this._upgrades=this._filterUpgrades(e.upgrades),super.onHandshake(e)}_filterUpgrades(e){const t=[];for(let s=0;s<e.length;s++)~this.transports.indexOf(e[s])&&t.push(e[s]);return t}}let ss=class extends ts{constructor(e,t={}){const s=typeof e=="object"?e:t;(!s.transports||s.transports&&typeof s.transports[0]=="string")&&(s.transports=(s.transports||["polling","websocket","webtransport"]).map(i=>Xt[i]).filter(i=>!!i)),super(e,s)}};function is(r,e="",t){let s=r;t=t||typeof location<"u"&&location,r==null&&(r=t.protocol+"//"+t.host),typeof r=="string"&&(r.charAt(0)==="/"&&(r.charAt(1)==="/"?r=t.protocol+r:r=t.host+r),/^(https?|wss?):\/\//.test(r)||(typeof t<"u"?r=t.protocol+"//"+r:r="https://"+r),s=ae(r)),s.port||(/^(http|ws)$/.test(s.protocol)?s.port="80":/^(http|ws)s$/.test(s.protocol)&&(s.port="443")),s.path=s.path||"/";const n=s.host.indexOf(":")!==-1?"["+s.host+"]":s.host;return s.id=s.protocol+"://"+n+":"+s.port+e,s.href=s.protocol+"://"+n+(t&&t.port===s.port?"":":"+s.port),s}const ns=typeof ArrayBuffer=="function",os=r=>typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(r):r.buffer instanceof ArrayBuffer,ze=Object.prototype.toString,rs=typeof Blob=="function"||typeof Blob<"u"&&ze.call(Blob)==="[object BlobConstructor]",as=typeof File=="function"||typeof File<"u"&&ze.call(File)==="[object FileConstructor]";function we(r){return ns&&(r instanceof ArrayBuffer||os(r))||rs&&r instanceof Blob||as&&r instanceof File}function G(r,e){if(!r||typeof r!="object")return!1;if(Array.isArray(r)){for(let t=0,s=r.length;t<s;t++)if(G(r[t]))return!0;return!1}if(we(r))return!0;if(r.toJSON&&typeof r.toJSON=="function"&&arguments.length===1)return G(r.toJSON(),!0);for(const t in r)if(Object.prototype.hasOwnProperty.call(r,t)&&G(r[t]))return!0;return!1}function ls(r){const e=[],t=r.data,s=r;return s.data=ce(t,e),s.attachments=e.length,{packet:s,buffers:e}}function ce(r,e){if(!r)return r;if(we(r)){const t={_placeholder:!0,num:e.length};return e.push(r),t}else if(Array.isArray(r)){const t=new Array(r.length);for(let s=0;s<r.length;s++)t[s]=ce(r[s],e);return t}else if(typeof r=="object"&&!(r instanceof Date)){const t={};for(const s in r)Object.prototype.hasOwnProperty.call(r,s)&&(t[s]=ce(r[s],e));return t}return r}function cs(r,e){return r.data=de(r.data,e),delete r.attachments,r}function de(r,e){if(!r)return r;if(r&&r._placeholder===!0){if(typeof r.num=="number"&&r.num>=0&&r.num<e.length)return e[r.num];throw new Error("illegal attachments")}else if(Array.isArray(r))for(let t=0;t<r.length;t++)r[t]=de(r[t],e);else if(typeof r=="object")for(const t in r)Object.prototype.hasOwnProperty.call(r,t)&&(r[t]=de(r[t],e));return r}const ds=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"],Ve=5;var f;(function(r){r[r.CONNECT=0]="CONNECT",r[r.DISCONNECT=1]="DISCONNECT",r[r.EVENT=2]="EVENT",r[r.ACK=3]="ACK",r[r.CONNECT_ERROR=4]="CONNECT_ERROR",r[r.BINARY_EVENT=5]="BINARY_EVENT",r[r.BINARY_ACK=6]="BINARY_ACK"})(f||(f={}));class hs{constructor(e){this.replacer=e}encode(e){return(e.type===f.EVENT||e.type===f.ACK)&&G(e)?this.encodeAsBinary({type:e.type===f.EVENT?f.BINARY_EVENT:f.BINARY_ACK,nsp:e.nsp,data:e.data,id:e.id}):[this.encodeAsString(e)]}encodeAsString(e){let t=""+e.type;return(e.type===f.BINARY_EVENT||e.type===f.BINARY_ACK)&&(t+=e.attachments+"-"),e.nsp&&e.nsp!=="/"&&(t+=e.nsp+","),e.id!=null&&(t+=e.id),e.data!=null&&(t+=JSON.stringify(e.data,this.replacer)),t}encodeAsBinary(e){const t=ls(e),s=this.encodeAsString(t.packet),i=t.buffers;return i.unshift(s),i}}function Ie(r){return Object.prototype.toString.call(r)==="[object Object]"}class ve extends v{constructor(e){super(),this.reviver=e}add(e){let t;if(typeof e=="string"){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(e);const s=t.type===f.BINARY_EVENT;s||t.type===f.BINARY_ACK?(t.type=s?f.EVENT:f.ACK,this.reconstructor=new gs(t),t.attachments===0&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else if(we(e)||e.base64)if(this.reconstructor)t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t));else throw new Error("got binary data when not reconstructing a packet");else throw new Error("Unknown type: "+e)}decodeString(e){let t=0;const s={type:Number(e.charAt(0))};if(f[s.type]===void 0)throw new Error("unknown packet type "+s.type);if(s.type===f.BINARY_EVENT||s.type===f.BINARY_ACK){const n=t+1;for(;e.charAt(++t)!=="-"&&t!=e.length;);const o=e.substring(n,t);if(o!=Number(o)||e.charAt(t)!=="-")throw new Error("Illegal attachments");s.attachments=Number(o)}if(e.charAt(t+1)==="/"){const n=t+1;for(;++t&&!(e.charAt(t)===","||t===e.length););s.nsp=e.substring(n,t)}else s.nsp="/";const i=e.charAt(t+1);if(i!==""&&Number(i)==i){const n=t+1;for(;++t;){const o=e.charAt(t);if(o==null||Number(o)!=o){--t;break}if(t===e.length)break}s.id=Number(e.substring(n,t+1))}if(e.charAt(++t)){const n=this.tryParse(e.substr(t));if(ve.isPayloadValid(s.type,n))s.data=n;else throw new Error("invalid payload")}return s}tryParse(e){try{return JSON.parse(e,this.reviver)}catch{return!1}}static isPayloadValid(e,t){switch(e){case f.CONNECT:return Ie(t);case f.DISCONNECT:return t===void 0;case f.CONNECT_ERROR:return typeof t=="string"||Ie(t);case f.EVENT:case f.BINARY_EVENT:return Array.isArray(t)&&(typeof t[0]=="number"||typeof t[0]=="string"&&ds.indexOf(t[0])===-1);case f.ACK:case f.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class gs{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const t=cs(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}const us=Object.freeze(Object.defineProperty({__proto__:null,Decoder:ve,Encoder:hs,get PacketType(){return f},protocol:Ve},Symbol.toStringTag,{value:"Module"}));function C(r,e,t){return r.on(e,t),function(){r.off(e,t)}}const ps=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class be extends v{constructor(e,t,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[C(e,"open",this.onopen.bind(this)),C(e,"packet",this.onpacket.bind(this)),C(e,"error",this.onerror.bind(this)),C(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),this.io._readyState==="open"&&this.onopen(),this)}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){var s,i,n;if(ps.hasOwnProperty(e))throw new Error('"'+e.toString()+'" is a reserved event name');if(t.unshift(e),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(t),this;const o={type:f.EVENT,data:t};if(o.options={},o.options.compress=this.flags.compress!==!1,typeof t[t.length-1]=="function"){const h=this.ids++,g=t.pop();this._registerAckCallback(h,g),o.id=h}const a=(i=(s=this.io.engine)===null||s===void 0?void 0:s.transport)===null||i===void 0?void 0:i.writable,l=this.connected&&!(!((n=this.io.engine)===null||n===void 0)&&n._hasPingExpired());return this.flags.volatile&&!a||(l?(this.notifyOutgoingListeners(o),this.packet(o)):this.sendBuffer.push(o)),this.flags={},this}_registerAckCallback(e,t){var s;const i=(s=this.flags.timeout)!==null&&s!==void 0?s:this._opts.ackTimeout;if(i===void 0){this.acks[e]=t;return}const n=this.io.setTimeoutFn(()=>{delete this.acks[e];for(let a=0;a<this.sendBuffer.length;a++)this.sendBuffer[a].id===e&&this.sendBuffer.splice(a,1);t.call(this,new Error("operation has timed out"))},i),o=(...a)=>{this.io.clearTimeoutFn(n),t.apply(this,a)};o.withError=!0,this.acks[e]=o}emitWithAck(e,...t){return new Promise((s,i)=>{const n=(o,a)=>o?i(o):s(a);n.withError=!0,t.push(n),this.emit(e,...t)})}_addToQueue(e){let t;typeof e[e.length-1]=="function"&&(t=e.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:e,flags:Object.assign({fromQueue:!0},this.flags)};e.push((i,...n)=>s!==this._queue[0]?void 0:(i!==null?s.tryCount>this._opts.retries&&(this._queue.shift(),t&&t(i)):(this._queue.shift(),t&&t(null,...n)),s.pending=!1,this._drainQueue())),this._queue.push(s),this._drainQueue()}_drainQueue(e=!1){if(!this.connected||this._queue.length===0)return;const t=this._queue[0];t.pending&&!e||(t.pending=!0,t.tryCount++,this.flags=t.flags,this.emit.apply(this,t.args))}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){typeof this.auth=="function"?this.auth(e=>{this._sendConnectPacket(e)}):this._sendConnectPacket(this.auth)}_sendConnectPacket(e){this.packet({type:f.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},e):e})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t),this._clearAcks()}_clearAcks(){Object.keys(this.acks).forEach(e=>{if(!this.sendBuffer.some(s=>String(s.id)===e)){const s=this.acks[e];delete this.acks[e],s.withError&&s.call(this,new Error("socket has been disconnected"))}})}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case f.CONNECT:e.data&&e.data.sid?this.onconnect(e.data.sid,e.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case f.EVENT:case f.BINARY_EVENT:this.onevent(e);break;case f.ACK:case f.BINARY_ACK:this.onack(e);break;case f.DISCONNECT:this.ondisconnect();break;case f.CONNECT_ERROR:this.destroy();const s=new Error(e.data.message);s.data=e.data.data,this.emitReserved("connect_error",s);break}}onevent(e){const t=e.data||[];e.id!=null&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const s of t)s.apply(this,e)}super.emit.apply(this,e),this._pid&&e.length&&typeof e[e.length-1]=="string"&&(this._lastOffset=e[e.length-1])}ack(e){const t=this;let s=!1;return function(...i){s||(s=!0,t.packet({type:f.ACK,id:e,data:i}))}}onack(e){const t=this.acks[e.id];typeof t=="function"&&(delete this.acks[e.id],t.withError&&e.data.unshift(null),t.apply(this,e.data))}onconnect(e,t){this.id=e,this.recovered=t&&this._pid===t,this._pid=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach(e=>this.emitEvent(e)),this.receiveBuffer=[],this.sendBuffer.forEach(e=>{this.notifyOutgoingListeners(e),this.packet(e)}),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach(e=>e()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:f.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const s of t)s.apply(this,e.data)}}}function R(r){r=r||{},this.ms=r.min||100,this.max=r.max||1e4,this.factor=r.factor||2,this.jitter=r.jitter>0&&r.jitter<=1?r.jitter:0,this.attempts=0}R.prototype.duration=function(){var r=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),t=Math.floor(e*this.jitter*r);r=(Math.floor(e*10)&1)==0?r-t:r+t}return Math.min(r,this.max)|0};R.prototype.reset=function(){this.attempts=0};R.prototype.setMin=function(r){this.ms=r};R.prototype.setMax=function(r){this.max=r};R.prototype.setJitter=function(r){this.jitter=r};class W extends v{constructor(e,t){var s;super(),this.nsps={},this.subs=[],e&&typeof e=="object"&&(t=e,e=void 0),t=t||{},t.path=t.path||"/socket.io",this.opts=t,J(this,t),this.reconnection(t.reconnection!==!1),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor((s=t.randomizationFactor)!==null&&s!==void 0?s:.5),this.backoff=new R({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(t.timeout==null?2e4:t.timeout),this._readyState="closed",this.uri=e;const i=t.parser||us;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=t.autoConnect!==!1,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,e||(this.skipReconnect=!0),this):this._reconnection}reconnectionAttempts(e){return e===void 0?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return e===void 0?this._reconnectionDelay:(this._reconnectionDelay=e,(t=this.backoff)===null||t===void 0||t.setMin(e),this)}randomizationFactor(e){var t;return e===void 0?this._randomizationFactor:(this._randomizationFactor=e,(t=this.backoff)===null||t===void 0||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return e===void 0?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,(t=this.backoff)===null||t===void 0||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&this.backoff.attempts===0&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new ss(this.uri,this.opts);const t=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=C(t,"open",function(){s.onopen(),e&&e()}),n=a=>{this.cleanup(),this._readyState="closed",this.emitReserved("error",a),e?e(a):this.maybeReconnectOnOpen()},o=C(t,"error",n);if(this._timeout!==!1){const a=this._timeout,l=this.setTimeoutFn(()=>{i(),n(new Error("timeout")),t.close()},a);this.opts.autoUnref&&l.unref(),this.subs.push(()=>{this.clearTimeoutFn(l)})}return this.subs.push(i),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(C(e,"ping",this.onping.bind(this)),C(e,"data",this.ondata.bind(this)),C(e,"error",this.onerror.bind(this)),C(e,"close",this.onclose.bind(this)),C(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){try{this.decoder.add(e)}catch(t){this.onclose("parse error",t)}}ondecoded(e){Y(()=>{this.emitReserved("packet",e)},this.setTimeoutFn)}onerror(e){this.emitReserved("error",e)}socket(e,t){let s=this.nsps[e];return s?this._autoConnect&&!s.active&&s.connect():(s=new be(this,e,t),this.nsps[e]=s),s}_destroy(e){const t=Object.keys(this.nsps);for(const s of t)if(this.nsps[s].active)return;this._close()}_packet(e){const t=this.encoder.encode(e);for(let s=0;s<t.length;s++)this.engine.write(t[s],e.options)}cleanup(){this.subs.forEach(e=>e()),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close")}disconnect(){return this._close()}onclose(e,t){var s;this.cleanup(),(s=this.engine)===null||s===void 0||s.close(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn(()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),!e.skipReconnect&&e.open(i=>{i?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",i)):e.onreconnect()}))},t);this.opts.autoUnref&&s.unref(),this.subs.push(()=>{this.clearTimeoutFn(s)})}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const N={};function P(r,e){typeof r=="object"&&(e=r,r=void 0),e=e||{};const t=is(r,e.path||"/socket.io"),s=t.source,i=t.id,n=t.path,o=N[i]&&n in N[i].nsps,a=e.forceNew||e["force new connection"]||e.multiplex===!1||o;let l;return a?l=new W(s,e):(N[i]||(N[i]=new W(s,e)),l=N[i]),t.query&&!e.query&&(e.query=t.queryKey),l.socket(t.path,e)}Object.assign(P,{Manager:W,Socket:be,io:P,connect:P});const ms=Object.freeze(Object.defineProperty({__proto__:null,Manager:W,NodeWebSocket:re,NodeXHR:oe,Socket:be,WebSocket:re,WebTransport:He,XHR:oe,connect:P,default:P,io:P,protocol:Ve},Symbol.toStringTag,{value:"Module"})),S={USE_CENTRALIZED_LOGGING:!0,ENABLE_PERFORMANCE_MONITORING:!0,ENABLE_ERROR_TRACKING:!0,USE_NAVIGATION_SUBSYSTEM:!1,USE_CONNECTION_MANAGER:!0,USE_AUTH_MANAGEMENT:!0,USE_VIEW_MANAGEMENT:!0,USE_OPERATION_MANAGER:!0,USE_IMPORT_SUBSYSTEM:!0,USE_EXPORT_SUBSYSTEM:!0,USE_REALTIME_SUBSYSTEM:!0,USE_ADVANCED_REALTIME:!0,USE_ANALYTICS_DASHBOARD:!0,ENABLE_ADVANCED_PROGRESS_UI:!0,ENABLE_DRAG_DROP_IMPROVEMENTS:!0,ENABLE_KEYBOARD_SHORTCUTS:!1,ENABLE_REQUEST_BATCHING:!1,ENABLE_RESPONSE_CACHING:!1,ENABLE_RETRY_LOGIC:!0,ENABLE_DEBUG_MODE:!1,ENABLE_VERBOSE_LOGGING:!1,SHOW_PERFORMANCE_METRICS:!1};function fs(r){return S[r]===!0}class ys{constructor(){this.logger=S.USE_CENTRALIZED_LOGGING?O({serviceName:"pingone-import-app",enableServer:!0,enableConsole:!0}):new Je,this.logger.info("Application initialization started",{version:"6.3.0",featureFlags:S}),L.systemState("app","initialization_started",{version:"6.3.0",featureFlags:S,userAgent:navigator.userAgent}),this.eventBus=new ge,this.settingsManager=null,this.uiManager=null,this.tokenManager=null,this.fileHandler=null,this.versionManager=null,this.localClient=null,this.globalTokenManager=null,this.progressSubsystem=null,this.enhancedProgressSubsystem=null,this.enhancedTokenStatusSubsystem=null,this.sessionSubsystem=null,this.loggingSubsystem=null,this.historySubsystem=null,this.populationSubsystem=null,this.settingsSubsystem=null,this.advancedRealtimeSubsystem=null,this.realtimeCollaborationUI=null,this.subsystems={},this.analyticsDashboardSubsystem=null,this.analyticsDashboardUI=null,this.isInitialized=!1,this.currentView="home",this.socket=null,this.logger.startTimer("app-initialization")}async init(){try{this.logger.info("Starting application initialization"),this.updateStartupMessage("Initializing core components..."),await this.initializeCoreComponents(),this.updateStartupMessage("Setting up subsystems..."),await this.initializeSubsystems(),this.updateStartupMessage("Loading legacy components..."),await this.initializeLegacyComponents(),this.updateStartupMessage("Setting up event listeners..."),this.setupEventListeners(),this.setupModalCompletionListeners(),this.updateStartupMessage("Finalizing user interface..."),await this.initializeUI(),this.isInitialized=!0,this.hideStartupScreen();const e=this.logger.endTimer("app-initialization");this.logger.info("Application initialization completed",{initializationTime:`${e}ms`,subsystemsEnabled:Object.keys(this.subsystems).length})}catch(e){throw this.logger.error("Application initialization failed",{error:e.message,stack:e.stack}),e}}hideStartupScreen(){try{const e=document.getElementById("startup-wait-screen"),t=document.querySelector(".app-container");e?(this.logger.debug("Hiding startup wait screen"),e.style.display="none"):this.logger.warn("Startup wait screen element not found"),t&&t.classList.remove("startup-loading"),this.logger.debug("Startup screen hidden successfully")}catch(e){this.logger.error("Failed to hide startup screen",{error:e.message})}}async initializeCoreComponents(){this.logger.debug("Initializing core components"),this.localClient=new Xe(this.logger),this.uiManager=new it({logger:this.logger}),this.settingsManager=new Ke(this.logger.child({component:"settings-manager"})),await this.settingsManager.init(),this.logger.debug("Settings manager initialized"),this.settingsSubsystem=new kt(this.logger.child({subsystem:"settings"}),this.uiManager,this.localClient,this.settingsManager,this.eventBus,null),await this.settingsSubsystem.init(),this.subsystems.settings=this.settingsSubsystem,this.logger.debug("Settings subsystem initialized as a core component"),this.tokenManager=new nt(this.logger,this.subsystems.settings.getAllSettings(),this.eventBus),this.fileHandler=new Tt(this.logger,this.uiManager),this.versionManager=new It;try{this.pingOneClient=new Qe,this.logger.debug("PingOne client created successfully")}catch(e){this.logger.error("Failed to create PingOne client:",e),this.pingOneClient=null}this.logger.debug("Core components initialized")}isPingOneClientAvailable(){return this.pingOneClient!==null&&typeof this.pingOneClient=="object"}async initializeSubsystems(){if(this.logger.info("Initializing subsystems..."),!this.logger){console.error("CRITICAL: Logger not initialized before subsystem setup. Aborting."),this.uiManager.showGlobalError("A critical error occurred during startup. Please refresh the page.");return}try{const e=[{name:"logging",flag:!0,constructor:bt,deps:[this.eventBus,this.logger]},{name:"navigation",flag:S.USE_NAVIGATION_SUBSYSTEM,constructor:lt,deps:[this.logger,this.uiManager,this.subsystems.settings]},{name:"connectionManager",flag:S.USE_CONNECTION_MANAGER,constructor:ct,deps:[this.logger,this.uiManager,this.subsystems.settings,this.localClient]},{name:"realtimeManager",flag:S.USE_REALTIME_SUBSYSTEM,constructor:dt,deps:[this.logger,this.uiManager]},{name:"authManager",flag:S.USE_AUTH_MANAGEMENT,constructor:ht,deps:[this.logger,this.uiManager,this.localClient,this.subsystems.settings]},{name:"viewManager",flag:S.USE_VIEW_MANAGEMENT,constructor:gt,deps:[this.logger,this.uiManager]},{name:"operationManager",flag:S.USE_OPERATION_MANAGER,constructor:at,deps:[this.logger,this.uiManager,this.subsystems.settings,this.localClient]},{name:"population",flag:!0,constructor:Et,deps:[this.eventBus,this.subsystems.settings,()=>this.subsystems.logging,this.localClient]},{name:"history",flag:!0,constructor:St,deps:[this.eventBus,this.subsystems.settings,()=>this.subsystems.logging]},{name:"import",flag:S.USE_IMPORT_SUBSYSTEM,constructor:ot,deps:[this.logger,this.uiManager,this.localClient,this.subsystems.settings,this.eventBus,()=>this.subsystems.population,()=>this.subsystems.authManager]},{name:"export",flag:S.USE_EXPORT_SUBSYSTEM,constructor:rt,deps:[this.logger,this.uiManager,this.localClient,this.subsystems.settings,this.eventBus,()=>this.subsystems.population]},{name:"analyticsDashboard",flag:S.USE_ANALYTICS_DASHBOARD,constructor:yt,deps:[this.logger,this.eventBus,()=>this.subsystems.advancedRealtime,this.progressSubsystem,this.sessionSubsystem]},{name:"advancedRealtime",flag:S.USE_ADVANCED_REALTIME,constructor:mt,deps:[this.logger,this.eventBus,()=>this.subsystems.realtimeManager,this.sessionSubsystem,this.progressSubsystem]}];for(const t of e)if(t.flag){this.logger.debug(`Initializing ${t.name} subsystem...`);const s=t.deps.map(i=>typeof i=="function"?i():i);this.subsystems[t.name]=new t.constructor(...s),await this.subsystems[t.name].init(),this.logger.info(`${t.name} subsystem initialized.`)}this.subsystems.advancedRealtime&&(this.realtimeCollaborationUI=new ft(this.eventBus,this.logger),this.realtimeCollaborationUI.init()),this.logger.info("All subsystems initialized successfully.")}catch(e){throw this.logger.error("Subsystem initialization failed",{error:e.message,stack:e.stack}),e}this.subsystems.globalTokenManager=new ut(this.logger.child({subsystem:"globalTokenManager"}),this.eventBus),await this.subsystems.globalTokenManager.init(),this.logger.debug("Global Token Manager subsystem initialized"),this.subsystems.tokenNotification=new pt(this.logger.child({subsystem:"token-notification"}),this.eventBus,this.subsystems.navigation),await this.subsystems.tokenNotification.init(),this.logger.debug("Token Notification subsystem initialized"),this.enhancedProgressSubsystem=new wt(this.logger.child({subsystem:"enhanced-progress"}),this.uiManager,this.eventBus,this.subsystems.realtimeManager),await this.enhancedProgressSubsystem.init(),this.subsystems.enhancedProgress=this.enhancedProgressSubsystem,this.logger.debug("Enhanced Progress subsystem initialized"),this.enhancedTokenStatusSubsystem=new vt(this.logger.child({subsystem:"enhanced-token-status"}),this.eventBus,this.uiManager),await this.enhancedTokenStatusSubsystem.init(),this.subsystems.enhancedTokenStatus=this.enhancedTokenStatusSubsystem,this.logger.debug("Enhanced Token Status subsystem initialized"),this.logger.info("All subsystems initialized successfully",{subsystemCount:Object.keys(this.subsystems).length,enabledSubsystems:Object.keys(this.subsystems)})}async initializeLegacyComponents(){this.logger.debug("Initializing remaining legacy components"),this.logger.debug("Legacy components initialized (minimal set)")}setupEventListeners(){this.logger.debug("Setting up event listeners and EventBus patterns"),window.addEventListener("error",e=>{const t={message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno,error:e.error?.stack};this.logger.error("Global error caught",t),this.eventBus.emit("app:global-error",t)}),window.addEventListener("unhandledrejection",e=>{const t={reason:e.reason,promise:e.promise};this.logger.error("Unhandled promise rejection",t),this.eventBus.emit("app:unhandled-rejection",t)}),window.addEventListener("load",()=>{const e={loadTime:performance.now(),timing:performance.timing};this.logger.info("Page load completed",e),this.eventBus.emit("app:page-loaded",e)}),window.addEventListener("settings:save-success",e=>{const t=document.getElementById("settings-status-box");t&&(t.textContent=e.detail.message,t.className="status-message status-success",t.style.display="flex",setTimeout(()=>{t.style.display="none"},5e3))}),window.addEventListener("settings:save-error",e=>{const t=document.getElementById("settings-status-box");t&&(t.textContent=e.detail.message,t.className="status-message status-error",t.style.display="flex",setTimeout(()=>{t.style.display="none"},8e3))}),this.setupEventBusListeners(),this.setupMainUIEventListeners(),this.logger.debug("Event listeners and EventBus patterns set up")}setupMainUIEventListeners(){this.logger.debug("Setting up main UI event listeners");try{const e=document.getElementById("csv-file");e&&e.addEventListener("change",i=>{this.logger.debug("File input changed"),this.handleFileSelection(i)});const t=document.getElementById("import-drop-zone");t&&(t.addEventListener("click",i=>{i.preventDefault(),this.logger.debug("Drop zone clicked"),e&&e.click()}),t.addEventListener("dragover",i=>{i.preventDefault(),t.classList.add("dragover")}),t.addEventListener("dragleave",i=>{i.preventDefault(),t.classList.remove("dragover")}),t.addEventListener("drop",i=>{i.preventDefault(),t.classList.remove("dragover"),this.logger.debug("File dropped"),this.handleFileDrop(i)}));const s=document.getElementById("cancel-import-btn");s&&s.addEventListener("click",i=>{i.preventDefault(),this.logger.debug("Cancel import button clicked"),this.cancelImport()}),this.logger.debug("Setting up direct navigation event listeners as fallback"),this.setupDirectNavigation(),this.logger.debug("Main UI event listeners set up successfully")}catch(e){this.logger.error("Failed to set up main UI event listeners",{error:e.message})}}setupEventBusListeners(){this.logger.debug("Setting up EventBus listeners for subsystem coordination"),this.eventBus.on("app:init-complete",e=>{this.logger.info("Application initialization complete",e)}),this.eventBus.on("app:shutdown",e=>{this.logger.info("Application shutdown initiated",e)}),this.eventBus.on("subsystem:error",e=>{this.logger.error("Subsystem error occurred",e)}),this.eventBus.on("subsystem:ready",e=>{this.logger.debug("Subsystem ready",e)}),this.eventBus.on("navigation:view-changed",({newView:e})=>{this.currentView=e,this.logger.info(`View changed to: ${e}`),fs("ANALYTICS_DASHBOARD")&&this.analyticsDashboardUI&&(e==="analytics"?this.analyticsDashboardUI.show():this.analyticsDashboardUI.hide())}),this.eventBus.on("operation:started",e=>{this.logger.info("Operation started",e)}),this.eventBus.on("operation:completed",e=>{this.logger.info("Operation completed",e)}),this.eventBus.on("operation:failed",e=>{this.logger.error("Operation failed",e)}),this.eventBus.on("progress:updated",e=>{this.logger.debug("Progress updated",e)}),this.eventBus.on("status:changed",e=>{this.logger.debug("Status changed",e)}),this.logger.debug("EventBus listeners set up for subsystem coordination")}setupModalCompletionListeners(){try{document.addEventListener("credentials-modal-completed",e=>{this.logger.info("🔄 LOADING: Credentials modal completed",e.detail),this.showModalLoading("Finalizing Setup...","Completing your PingOne Import Tool configuration."),setTimeout(()=>{this.hideModalLoading()},1500)}),document.addEventListener("application_enabled_after_credentials",e=>{this.logger.info("🔄 LOADING: Application enabled after credentials"),this.showModalLoading("Almost Ready...","Finalizing your workspace setup."),setTimeout(()=>{this.hideModalLoading()},1e3)}),this.logger.debug("Modal completion listeners set up")}catch(e){this.logger.error("Failed to set up modal completion listeners",{error:e.message})}}showModalLoading(e="Loading...",t="Please wait while we set up your experience."){try{const s=document.getElementById("modal-loading-overlay"),i=document.getElementById("modal-loading-title"),n=document.getElementById("modal-loading-message");s&&i&&n&&(i.textContent=e,n.textContent=t,s.classList.remove("fade-out"),s.classList.add("fade-in"),s.style.display="flex",this.logger.debug("🔄 LOADING: Modal loading shown",{title:e,message:t}))}catch(s){this.logger.error("🔄 LOADING: Failed to show modal loading",{error:s.message})}}hideModalLoading(){try{const e=document.getElementById("modal-loading-overlay");e&&(e.classList.remove("fade-in"),e.classList.add("fade-out"),setTimeout(()=>{e.style.display="none",e.classList.remove("fade-out")},300),this.logger.debug("🔄 LOADING: Modal loading hidden"))}catch(e){this.logger.error("🔄 LOADING: Failed to hide modal loading",{error:e.message})}}updateStartupMessage(e){try{const s=document.getElementById("startup-wait-screen")?.querySelector(".startup-text p");s&&(s.textContent=e,this.logger.debug("🔄 LOADING: Startup message updated",{message:e}))}catch(t){this.logger.error("🔄 LOADING: Failed to update startup message",{error:t.message})}}setupDirectNavigation(){this.logger.debug("🔧 DIRECT NAV: Setting up direct navigation event listeners");try{const e=document.querySelectorAll("[data-view]");if(this.logger.debug(`🔧 DIRECT NAV: Found ${e.length} navigation elements`),e.length===0){this.logger.warn("🔧 DIRECT NAV: No navigation elements found with [data-view] attribute");return}e.forEach((t,s)=>{const i=t.getAttribute("data-view");this.logger.debug(`🔧 DIRECT NAV: Setting up listener for ${i} (element ${s})`),t.removeEventListener("click",this.handleDirectNavigation);const n=o=>{o.preventDefault(),o.stopPropagation(),this.logger.info(`🔧 DIRECT NAV: Navigation clicked: ${i}`),this.directShowView(i)};t.addEventListener("click",n),t._directNavHandler=n}),this.logger.info("🔧 DIRECT NAV: Direct navigation setup completed successfully"),this.setupSettingsPageButtons()}catch(e){this.logger.error("🔧 DIRECT NAV: Failed to set up direct navigation",{error:e.message})}}setupSettingsPageButtons(){this.logger.debug("🔧 SETTINGS: Setting up settings page button listeners");try{const e=document.getElementById("save-settings");e&&(e.addEventListener("click",n=>{n.preventDefault(),this.logger.info("🔧 SETTINGS: Save Settings clicked"),this.handleSaveSettings()}),this.logger.debug("🔧 SETTINGS: Save Settings button listener added"));const t=document.getElementById("test-connection-btn");t&&(t.addEventListener("click",n=>{n.preventDefault(),this.logger.info("🔧 SETTINGS: Test Connection clicked"),this.handleTestConnection()}),this.logger.debug("🔧 SETTINGS: Test Connection button listener added"));const s=document.getElementById("get-token-btn");s&&(s.addEventListener("click",n=>{n.preventDefault(),this.logger.info("🔧 SETTINGS: Get Token clicked"),this.handleGetToken()}),this.logger.debug("🔧 SETTINGS: Get Token button listener added"));const i=document.getElementById("toggle-api-secret-visibility");i&&(i.addEventListener("click",n=>{n.preventDefault(),this.logger.info("🔧 SETTINGS: Toggle Secret Visibility clicked"),this.handleToggleSecretVisibility()}),this.logger.debug("🔧 SETTINGS: Toggle Secret Visibility button listener added")),this.logger.info("🔧 SETTINGS: Settings page buttons setup completed")}catch(e){this.logger.error("🔧 SETTINGS: Failed to set up settings page buttons",{error:e.message})}}async handleSaveSettings(){this.logger.info("🔧 SETTINGS: Saving settings..."),L.userAction("save_settings","save-settings-button",{timestamp:Date.now()});try{const e=document.getElementById("environment-id")?.value,t=document.getElementById("api-client-id")?.value,s=document.getElementById("api-secret")?.value,i=document.getElementById("region")?.value,n=document.getElementById("rate-limit")?.value,o=document.getElementById("population-id")?.value,a={environmentId:e,apiClientId:t,apiSecret:s,region:i,rateLimit:parseInt(n)||90,populationId:o};if(this.logger.debug("🔧 SETTINGS: Settings to save",{...a,clientSecret:"[HIDDEN]"}),this.settingsManager&&typeof this.settingsManager.saveSettings=="function")await this.settingsManager.saveSettings(a),this.showSettingsStatus("Settings saved successfully!","success");else{localStorage.setItem("pingone-settings",JSON.stringify(a));const l=await fetch("/api/settings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(l.ok){const c=await l.json();this.showSettingsStatus("Settings saved successfully!","success"),this.logger.info("🔧 SETTINGS: Settings saved successfully",c)}else{const c=await l.json().catch(()=>({error:"Unknown error"}));throw new Error(c.error||`HTTP ${l.status}: ${l.statusText}`)}}}catch(e){this.logger.error("🔧 SETTINGS: Failed to save settings",{error:e.message}),L.error("settings","Save settings failed",e,{action:"save_settings",timestamp:Date.now()}),this.showSettingsStatus(`Failed to save settings: ${e.message}`,"error")}}async loadSettings(){this.logger.info("🔧 SETTINGS: Loading settings for form population...");try{if(this.settingsSubsystem&&typeof this.settingsSubsystem.loadSettings=="function"){this.logger.debug("🔧 SETTINGS: Using SettingsSubsystem to load settings");const e=await this.settingsSubsystem.loadSettings();return this.populateSettingsForm(e),e}this.logger.debug("🔧 SETTINGS: Using direct API call to load settings");try{const e=await fetch("/api/settings");if(e.ok){const t=await e.json();return this.populateSettingsForm(t),t}}catch(e){return this.logger.error("🔧 SETTINGS: Failed to load settings from API",{error:e.message}),this.showSettingsStatus(`Failed to load settings: ${e.message}`,"error"),{}}}catch(e){return this.logger.error("🔧 SETTINGS: Failed to load settings",{error:e.message}),this.showSettingsStatus(`Failed to load settings: ${e.message}`,"error"),{}}}populateSettingsForm(e){this.logger.debug("🔧 SETTINGS: Populating form fields with settings data");try{const t={"environment-id":e.environmentId||e["environment-id"]||"","api-client-id":e.apiClientId||e["api-client-id"]||"","api-secret":e.apiSecret||e["api-secret"]||"",region:e.region||"NorthAmerica","population-id":e.populationId||e["population-id"]||"","rate-limit":e.rateLimit||e["rate-limit"]||90};Object.entries(t).forEach(([s,i])=>{const n=document.getElementById(s);n&&i&&(n.value=i,this.logger.debug(`🔧 SETTINGS: Populated field ${s}`,{hasValue:!!i}))}),this.logger.info("🔧 SETTINGS: Form fields populated successfully")}catch(t){this.logger.error("🔧 SETTINGS: Failed to populate form fields",{error:t.message})}}async handleTestConnection(){this.logger.info("🔧 SETTINGS: Testing connection..."),L.userAction("test_connection","test-connection-btn",{timestamp:Date.now()});try{if(this.showSettingsStatus("Testing connection...","info"),this.subsystems.connectionManager&&typeof this.subsystems.connectionManager.testConnection=="function"){const e=await this.subsystems.connectionManager.testConnection();e.success?this.showSettingsStatus("Connection test successful!","success"):this.showSettingsStatus(`Connection test failed: ${e.error}`,"error")}else{const t=await(await fetch("/api/pingone/test-connection",{method:"GET",headers:{"Content-Type":"application/json"}})).json();t.success?this.showSettingsStatus("Connection test successful!","success"):this.showSettingsStatus(`Connection test failed: ${t.error}`,"error")}}catch(e){this.logger.error("🔧 SETTINGS: Connection test failed",{error:e.message}),this.showSettingsStatus(`Connection test failed: ${e.message}`,"error")}}async handleGetToken(){this.logger.info("🔧 SETTINGS: Getting token..."),L.userAction("get_token","get-token-btn",{timestamp:Date.now()});try{this.showSettingsStatus("Getting token...","info"),this.tokenManager&&typeof this.tokenManager.getToken=="function"?await this.tokenManager.getToken()?this.showSettingsStatus("Token acquired successfully!","success"):this.showSettingsStatus("Failed to get token","error"):(await(await fetch("/api/pingone/token",{method:"POST",headers:{"Content-Type":"application/json"}})).json()).access_token?this.showSettingsStatus("Token acquired successfully!","success"):this.showSettingsStatus("Failed to get token","error")}catch(e){this.logger.error("🔧 SETTINGS: Failed to get token",{error:e.message}),this.showSettingsStatus(`Failed to get token: ${e.message}`,"error")}}handleToggleSecretVisibility(){this.logger.debug("🔧 SETTINGS: Toggling secret visibility");try{const e=document.getElementById("api-secret"),t=document.getElementById("toggle-api-secret-visibility"),s=t?.querySelector("i");e&&t&&s&&(e.type==="password"?(e.type="text",s.className="fas fa-eye-slash",this.logger.debug("🔧 SETTINGS: Secret visibility: shown")):(e.type="password",s.className="fas fa-eye",this.logger.debug("🔧 SETTINGS: Secret visibility: hidden")))}catch(e){this.logger.error("🔧 SETTINGS: Failed to toggle secret visibility",{error:e.message})}}showSettingsStatus(e,t="info"){try{const s=document.getElementById("settings-action-status"),i=s?.querySelector(".status-message"),n=s?.querySelector(".status-icon");if(s&&i&&n){i.textContent=e;const o={success:"fas fa-check-circle",error:"fas fa-exclamation-circle",info:"fas fa-info-circle",warning:"fas fa-exclamation-triangle"};n.className=o[t]||o.info,s.className=`action-status ${t}`,s.style.display="block",(t==="success"||t==="info")&&setTimeout(()=>{s.style.display="none"},5e3),this.logger.debug(`🔧 SETTINGS: Status shown: ${t} - ${e}`)}}catch(s){this.logger.error("🔧 SETTINGS: Failed to show status",{error:s.message})}}async directShowView(e){this.logger.info(`🔧 DIRECT NAV: Switching to view: ${e}`),L.navigation(this.currentView,e,{method:"direct_navigation",timestamp:Date.now()});try{const t=document.querySelectorAll(".view, .view-container");this.logger.debug(`🔧 DIRECT NAV: Found ${t.length} view containers to hide`),t.forEach(i=>{i.style.display="none",i.classList.remove("active")});const s=document.getElementById(`${e}-view`);s?(s.style.display="block",s.classList.add("active"),this.logger.info(`🔧 DIRECT NAV: Successfully showed ${e}-view`),this.updateDirectNavigationState(e),this.currentView=e,this.updatePageTitle(e),this.logger.info(`🔧 DIRECT NAV: Navigation to ${e} completed successfully`)):this.logger.error(`🔧 DIRECT NAV: View element not found: ${e}-view`)}catch(t){this.logger.error(`🔧 DIRECT NAV: Failed to show view ${e}`,{error:t.message})}}updateDirectNavigationState(e){try{document.querySelectorAll("[data-view]").forEach(s=>{s.getAttribute("data-view")===e?s.classList.add("active"):s.classList.remove("active")}),this.logger.debug(`🔧 DIRECT NAV: Updated navigation state for ${e}`)}catch(t){this.logger.error("🔧 DIRECT NAV: Failed to update navigation state",{error:t.message})}}updatePageTitle(e){try{const s={home:"Home",import:"Import Users",export:"Export Users",modify:"Modify Users","delete-csv":"Delete Users",settings:"Settings",logs:"Logs",history:"History"}[e]||"PingOne Import Tool";document.title=`${s} - PingOne Import Tool v6.5.1.1`,this.logger.debug(`🔧 DIRECT NAV: Updated page title to: ${document.title}`)}catch(t){this.logger.error("🔧 DIRECT NAV: Failed to update page title",{error:t.message})}}async initializeUI(){this.logger.debug("Initializing UI"),this.subsystems.viewManager?await this.subsystems.viewManager.showView(this.currentView):await this.legacyShowView(this.currentView),this.logger.debug("UI initialized")}async showView(e){return this.logger.debug("Showing view",{view:e,useSubsystem:!!this.subsystems.viewManager}),this.subsystems.viewManager?await this.subsystems.viewManager.showView(e):await this.legacyShowView(e)}async legacyShowView(e){this.logger.debug("Using legacy view management",{view:e}),this.currentView=e}async startImport(){return this.logger.info("Starting import operation"),this.subsystems.importManager?await this.subsystems.importManager.startImport():(this.logger.warn("Using legacy import - subsystem not available"),await this.legacyStartImport())}async startExport(){return this.logger.info("Starting export operation"),this.subsystems.exportManager?await this.subsystems.exportManager.startExport():(this.logger.warn("Using legacy export - subsystem not available"),await this.legacyStartExport())}async getToken(){return this.logger.debug("Getting authentication token"),this.subsystems.authManager?await this.subsystems.authManager.getToken():(this.logger.warn("Using legacy token management - subsystem not available"),await this.tokenManager.getToken())}async legacyStartImport(){this.logger.debug("Legacy import method called")}async legacyStartExport(){this.logger.debug("Legacy export method called")}navigateToView(e){this.logger.debug("Navigating to view",{viewName:e});try{this.subsystems.viewManager?this.subsystems.viewManager.showView(e):this.legacyShowView(e),this.currentView=e,this.logger.info("Navigation completed",{viewName:e})}catch(t){this.logger.error("Navigation failed",{viewName:e,error:t.message})}}handleFileSelection(e){this.logger.debug("Handling file selection");try{const t=e.target.files;if(t&&t.length>0){const s=t[0];this.logger.info("File selected",{fileName:s.name,fileSize:s.size,fileType:s.type}),this.subsystems.importManager?this.subsystems.importManager.handleFileSelection(s):(this.logger.warn("Import subsystem not available, using legacy import"),this.fileHandler&&typeof this.fileHandler.handleFile=="function"?this.fileHandler.handleFile(s):(this.logger.error("No file handling method available"),this.showMessage("File handling is not available. Please refresh the page.","error")))}}catch(t){this.logger.error("File selection handling failed",{error:t.message})}}handleFileDrop(e){this.logger.debug("Handling file drop");try{const t=e.dataTransfer.files;if(t&&t.length>0){const s=t[0];this.logger.info("File dropped",{fileName:s.name,fileSize:s.size,fileType:s.type}),this.subsystems.importManager?this.subsystems.importManager.handleFileSelection(s):(this.logger.warn("Import subsystem not available, using legacy import"),this.fileHandler&&typeof this.fileHandler.handleFile=="function"?this.fileHandler.handleFile(s):(this.logger.error("No file handling method available"),this.showMessage("File handling is not available. Please refresh the page.","error")))}}catch(t){this.logger.error("File drop handling failed",{error:t.message})}}cancelImport(){this.logger.debug("Cancelling import operation");try{this.subsystems.importManager?this.subsystems.importManager.cancelImport():(this.logger.warn("Import subsystem not available, using legacy cancel"),this.legacyCancelImport()),this.logger.info("Import cancellation requested")}catch(e){this.logger.error("Import cancellation failed",{error:e.message})}}enableToolAfterDisclaimer(){this.logger.info("Enabling tool after disclaimer acceptance");try{this.showModalLoading("Setting up...","Preparing your PingOne Import Tool experience."),this.hideStartupScreen(),this.uiManager&&typeof this.uiManager.enableUI=="function"&&this.uiManager.enableUI(),this.eventListenersSetup||(this.setupEventListeners(),this.eventListenersSetup=!0),Object.values(this.subsystems).forEach(s=>{s&&typeof s.enable=="function"&&s.enable()});const e=document.querySelector(".app-container");e&&(e.classList.remove("disabled","modal-active"),e.style.pointerEvents="auto"),document.querySelectorAll("button, .btn").forEach(s=>{s.disabled=!1,s.style.pointerEvents="auto"}),this.logger.info("Tool enabled successfully after disclaimer"),setTimeout(()=>{this.hideModalLoading()},1e3)}catch(e){this.logger.error("Failed to enable tool after disclaimer",{error:e.message}),this.hideModalLoading()}}getHealthStatus(){return{initialized:this.isInitialized,subsystems:Object.keys(this.subsystems).reduce((e,t)=>(e[t]=this.subsystems[t].isInitialized||!1,e),{}),featureFlags:S,currentView:this.currentView,timestamp:new Date().toISOString()}}showMessage(e,t="info"){this.logger.debug(`Showing message: ${e}`,{type:t}),this.showSettingsStatus(e,t)}}const q=new ys;window.app=q;window.enableToolAfterDisclaimer=()=>{window.app&&typeof window.app.enableToolAfterDisclaimer=="function"?window.app.enableToolAfterDisclaimer():window.logger?.warn("App not available or enableToolAfterDisclaimer method not found")||console.warn("App not available or enableToolAfterDisclaimer method not found")};window.testLoading={show:(r,e)=>{window.app&&window.app.showModalLoading(r,e)},hide:()=>{window.app&&window.app.hideModalLoading()},testSequence:()=>{window.app&&(window.logger?.info("🔄 Testing loading sequence...")||console.log("🔄 Testing loading sequence..."),window.app.showModalLoading("Step 1","Testing loading overlay..."),setTimeout(()=>{window.app.showModalLoading("Step 2","Updating message..."),setTimeout(()=>{window.app.showModalLoading("Step 3","Almost done..."),setTimeout(()=>{window.app.hideModalLoading(),window.logger?.info("🔄 Loading test completed")||console.log("🔄 Loading test completed")},1500)},1500)},1500))}};document.addEventListener("DOMContentLoaded",async()=>{try{await q.init(),window.logger?.info("🚀 PingOne Import Tool v6.5.1.2 initialized successfully")||console.log("🚀 PingOne Import Tool v6.5.1.2 initialized successfully"),window.logger?.info("📊 Health Status:",q.getHealthStatus())||console.log("📊 Health Status:",q.getHealthStatus())}catch(r){window.logger?.error("❌ Application initialization failed:",r)||console.error("❌ Application initialization failed:",r)}})});export default ws();
//# sourceMappingURL=main-DqHzo1YN.js.map
