(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const D="modulepreload",N=function(c){return"/"+c},L={},$=function(e,t,r){let s=Promise.resolve();if(t&&t.length>0){let a=function(l){return Promise.all(l.map(p=>Promise.resolve(p).then(m=>({status:"fulfilled",value:m}),m=>({status:"rejected",reason:m}))))};document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),n=o?.nonce||o?.getAttribute("nonce");s=a(t.map(l=>{if(l=N(l),l in L)return;L[l]=!0;const p=l.endsWith(".css"),m=p?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${l}"]${m}`))return;const d=document.createElement("link");if(d.rel=p?"stylesheet":D,p||(d.as="script"),d.crossOrigin="",d.href=l,n&&d.setAttribute("nonce",n),document.head.appendChild(d),p)return new Promise((g,f)=>{d.addEventListener("load",g),d.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${l}`)))})}))}function i(o){const n=new Event("vite:preloadError",{cancelable:!0});if(n.payload=o,window.dispatchEvent(n),!n.defaultPrevented)throw o}return s.then(o=>{for(const n of o||[])n.status==="rejected"&&i(n.reason);return e().catch(i)})};class P{constructor(e={}){this.level=e.level||this.getDefaultLevel(),this.service=e.service||"pingone-import-frontend",this.environment=e.environment||"production",this.enableServerLogging=e.enableServerLogging!==!1,this.enableConsoleLogging=e.enableConsoleLogging!==!1,this.levels={error:0,warn:1,info:2,debug:3},this.transports=[],this.initializeTransports()}getDefaultLevel(){return this.environment==="production"?"info":this.environment==="test"?"warn":"debug"}initializeTransports(){this.enableConsoleLogging&&this.transports.push({name:"console",log:(e,t,r)=>this.logToConsole(e,t,r)}),this.enableServerLogging&&this.transports.push({name:"server",log:(e,t,r)=>this.logToServer(e,t,r)})}shouldLog(e){return this.levels[e]<=this.levels[this.level]}formatTimestamp(){return new Date().toISOString()}formatLogEntry(e,t,r={}){return{timestamp:this.formatTimestamp(),level:e,message:t,service:this.service,environment:this.environment,...r}}logToConsole(e,t,r={}){if(!this.shouldLog(e))return;const i=this.formatLogEntry(e,t,r).timestamp,o=e.toUpperCase();let n=`[${i}] [${this.service}] ${o}: ${t}`;switch(Object.keys(r).length>0&&(n+=`
${JSON.stringify(r,null,2)}`),e){case"error":console.error(n);break;case"warn":console.warn(n);break;case"info":console.info(n);break;case"debug":console.debug(n);break;default:console.log(n)}}async logToServer(e,t,r={}){if(this.shouldLog(e))try{await fetch("/api/logs/ui",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:t,level:e,data:r,source:"frontend"})})}catch(s){if(s.message.includes("Failed to fetch")||s.message.includes("ERR_CONNECTION_REFUSED"))return;console.warn("Server logging failed, falling back to console:",s.message),this.logToConsole(e,t,r)}}log(e,t,r={}){this.shouldLog(e)&&this.transports.forEach(s=>{try{s.log(e,t,r)}catch(i){console.error(`Error in ${s.name} transport:`,i)}})}info(e,t={}){this.log("info",e,t)}warn(e,t={}){this.log("warn",e,t)}error(e,t={}){this.log("error",e,t)}debug(e,t={}){this.log("debug",e,t)}errorWithStack(e,t,r={}){const s={...r,error:{message:t.message,stack:t.stack,code:t.code,name:t.name}};this.error(e,s)}child(e={}){const t=new P({level:this.level,service:this.service,environment:this.environment,enableServerLogging:this.enableServerLogging,enableConsoleLogging:this.enableConsoleLogging});return t.formatLogEntry=(r,s,i={})=>({...this.formatLogEntry(r,s,i),...e}),t}setLevel(e){this.levels.hasOwnProperty(e)?this.level=e:this.warn(`Invalid log level: ${e}`)}setServerLogging(e){this.enableServerLogging=e,this.transports=this.transports.filter(t=>t.name!=="server"),e&&this.transports.push({name:"server",log:(t,r,s)=>this.logToServer(t,r,s)})}setConsoleLogging(e){this.enableConsoleLogging=e,this.transports=this.transports.filter(t=>t.name!=="console"),e&&this.transports.push({name:"console",log:(t,r,s)=>this.logToConsole(t,r,s)})}}function k(c={}){return new P(c)}function I(c,e={}){return k({...e,service:`${e.service||"pingone-import"}-${c}`})}k();I("api");I("ui");I("file");I("settings");I("token");class M{constructor(){this.logger=k({service:"pingone-message-formatter",environment:"production"}),this.formattingOptions={showTimestamps:!0,showEventMarkers:!0,showSeparators:!0,maxMessageLength:200,separatorChar:"*",separatorLength:50},this.eventTypes={import:{start:"IMPORT STARTED",end:"IMPORT COMPLETED",error:"IMPORT ERROR",color:"#3498db"},export:{start:"EXPORT STARTED",end:"EXPORT COMPLETED",error:"EXPORT ERROR",color:"#27ae60"},modify:{start:"MODIFY STARTED",end:"MODIFY COMPLETED",error:"MODIFY ERROR",color:"#f39c12"},delete:{start:"DELETE STARTED",end:"DELETE COMPLETED",error:"DELETE ERROR",color:"#e74c3c"},validation:{start:"VALIDATION STARTED",end:"VALIDATION COMPLETED",error:"VALIDATION ERROR",color:"#9b59b6"},connection:{start:"CONNECTION ESTABLISHED",end:"CONNECTION CLOSED",error:"CONNECTION ERROR",color:"#1abc9c"}}}formatMessageBlock(e,t,r,s={}){try{const i=this.eventTypes[e]||this.eventTypes.import,o=this.formatTimestamp(new Date),n=this.createSeparator();let a="";if(this.formattingOptions.showSeparators&&(a+=n+`
`),this.formattingOptions.showEventMarkers){const l=this.getEventMarker(i,t);a+=`${l}
`}return this.formattingOptions.showTimestamps&&(a+=`[${o}] `),a+=r+`
`,s&&Object.keys(s).length>0&&(a+=this.formatDetails(s)),this.formattingOptions.showSeparators&&(a+=n+`
`),this.logger.debug("Message block formatted",{eventType:e,eventStage:t,messageLength:r.length}),a}catch(i){return this.logger.error("Error formatting message block",{error:i.message}),r}}formatProgressMessage(e,t,r,s,i={}){try{const o=this.formatTimestamp(new Date),n=r>0?Math.round(t/r*100):0;let a="";return this.formattingOptions.showTimestamps&&(a+=`[${o}] `),a+=`PROGRESS: ${t}/${r} (${n}%)`,s&&(a+=` - ${s}`),i&&Object.keys(i).length>0&&(a+=`
`+this.formatProgressStats(i)),a}catch(o){return this.logger.error("Error formatting progress message",{error:o.message}),s||`Progress: ${t}/${r}`}}formatErrorMessage(e,t,r={}){try{const s=this.eventTypes[e]||this.eventTypes.import,i=this.formatTimestamp(new Date),o=this.createSeparator();let n="";return this.formattingOptions.showSeparators&&(n+=o+`
`),n+=`${s.error}
`,this.formattingOptions.showTimestamps&&(n+=`[${i}] `),n+=`ERROR: ${t}
`,r&&Object.keys(r).length>0&&(n+=this.formatErrorDetails(r)),this.formattingOptions.showSeparators&&(n+=o+`
`),n}catch(s){return this.logger.error("Error formatting error message",{error:s.message}),`ERROR: ${t}`}}formatCompletionMessage(e,t={}){try{const r=this.eventTypes[e]||this.eventTypes.import,s=this.formatTimestamp(new Date),i=this.createSeparator();let o="";return this.formattingOptions.showSeparators&&(o+=i+`
`),o+=`${r.end}
`,this.formattingOptions.showTimestamps&&(o+=`[${s}] `),o+=`Operation completed successfully
`,t&&Object.keys(t).length>0&&(o+=this.formatResults(t)),this.formattingOptions.showSeparators&&(o+=i+`
`),o}catch(r){return this.logger.error("Error formatting completion message",{error:r.message}),"Operation completed successfully"}}formatSSEEvent(e){try{const{type:t,message:r,current:s,total:i,counts:o,error:n}=e,a=this.formatTimestamp(new Date);let l="";switch(this.formattingOptions.showTimestamps&&(l+=`[${a}] `),t){case"progress":l+=this.formatProgressMessage("import",s,i,r,o);break;case"completion":l+=this.formatCompletionMessage("import",e);break;case"error":l+=this.formatErrorMessage("import",r,e);break;default:l+=`SSE EVENT [${t.toUpperCase()}]: ${r||"No message"}`}return l}catch(t){return this.logger.error("Error formatting SSE event",{error:t.message}),e.message||"SSE event received"}}createSeparator(){const e=this.formattingOptions.separatorChar,t=this.formattingOptions.separatorLength;return e.repeat(t)}getEventMarker(e,t){switch(t){case"start":return e.start;case"end":return e.end;case"error":return e.error;default:return e.start}}formatTimestamp(e){return e.toLocaleTimeString("en-US",{hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"})}formatDetails(e){try{let t="";for(const[r,s]of Object.entries(e))s!=null&&(t+=`  ${r}: ${s}
`);return t}catch(t){return this.logger.error("Error formatting details",{error:t.message}),""}}formatProgressStats(e){try{let t=`  Statistics:
`;const r={processed:"Processed",success:"Success",failed:"Failed",skipped:"Skipped",duplicates:"Duplicates"};for(const[s,i]of Object.entries(e))i!=null&&r[s]&&(t+=`    ${r[s]}: ${i}
`);return t}catch(t){return this.logger.error("Error formatting progress stats",{error:t.message}),""}}formatErrorDetails(e){try{let t=`  Error Details:
`;for(const[r,s]of Object.entries(e))s!=null&&(t+=`    ${r}: ${s}
`);return t}catch(t){return this.logger.error("Error formatting error details",{error:t.message}),""}}formatResults(e){try{let t=`  Results:
`;const r={total:"Total Records",success:"Successful",failed:"Failed",skipped:"Skipped",duplicates:"Duplicates",duration:"Duration"};for(const[s,i]of Object.entries(e))if(i!=null&&r[s]){let o=i;s==="duration"&&typeof i=="number"&&(o=this.formatDuration(i)),t+=`    ${r[s]}: ${o}
`}return t}catch(t){return this.logger.error("Error formatting results",{error:t.message}),""}}formatDuration(e){try{const t=Math.floor(e/1e3),r=Math.floor(t/60),s=Math.floor(r/60);return s>0?`${s}h ${r%60}m ${t%60}s`:r>0?`${r}m ${t%60}s`:`${t}s`}catch(t){return this.logger.error("Error formatting duration",{error:t.message}),`${e}ms`}}updateFormattingOptions(e){try{this.formattingOptions={...this.formattingOptions,...e},this.logger.debug("Formatting options updated",{options:e})}catch(t){this.logger.error("Error updating formatting options",{error:t.message})}}getFormattingOptions(){return{...this.formattingOptions}}}const R=new M,E={};function h(c,e,t=!0){if(!c||typeof c!="string")return console.error(`[ElementRegistry] Invalid selector provided: ${c}`),null;if(c.includes("<")||c.includes(">")||c.includes('"')&&!c.includes("[")&&!c.includes("]")||c.includes("'")&&!c.includes("[")&&!c.includes("]"))return console.error(`[ElementRegistry] Potentially unsafe selector detected: ${c}`),null;if(E[c])return E[c];try{const r=document.querySelector(c);if(!r&&t)console.warn(`[ElementRegistry] Missing required element: ${e} (${c})`);else if(!r)console.info(`[ElementRegistry] Optional element not found: ${e} (${c})`);else if(!document.contains(r))return console.warn(`[ElementRegistry] Element found but not in DOM: ${e} (${c})`),E[c]=null,null;return E[c]=r,r}catch(r){return console.error(`[ElementRegistry] Error finding element: ${e} (${c})`,r),E[c]=null,null}}const x={importButton:()=>h("#import-btn","Import Button"),fileInput:()=>h("#csv-file","File Input"),dashboardTab:()=>h("#dashboard-tab","Dashboard Tab"),dragDropArea:()=>h("#drag-drop-area","Drag-and-Drop Area",!1),notificationContainer:()=>h("#notification-area","Notification Container"),progressContainer:()=>h("#import-progress-container","Import Progress Container",!1)||h("#delete-progress-container","Delete Progress Container",!1)||h("#modify-progress-container","Modify Progress Container",!1)||h("#export-progress-container","Export Progress Container",!1)||h("#progress-container","Progress Container",!1)||h(".progress-container","Progress Container (class)",!1),tokenStatus:()=>h("#token-status-indicator","Token Status"),connectionStatus:()=>h("#connection-status","Connection Status"),currentTokenStatus:()=>h("#current-token-status","Current Token Status"),homeTokenStatus:()=>h("#home-token-status","Home Token Status"),fileInfo:()=>h("#file-info","File Info"),previewContainer:()=>h("#dashboard-preview","Preview Container"),fileInputLabel:()=>h('label[for="csv-file"]',"File Input Label"),deleteFileInput:()=>h("#delete-csv-file","Delete File Input"),deleteFileInputLabel:()=>h('label[for="delete-csv-file"]',"Delete File Input Label"),modifyFileInput:()=>h("#modify-csv-file","Modify File Input"),modifyFileInputLabel:()=>h('label[for="modify-csv-file"]',"Modify File Input Label"),importPopulationSelect:()=>h("#import-population-select","Import Population Select"),deletePopulationSelect:()=>h("#delete-population-select","Delete Population Select"),modifyPopulationSelect:()=>h("#modify-population-select","Modify Population Select"),dashboardPopulationSelect:()=>h("#dashboard-population-select","Dashboard Population Select"),startImportBtn:()=>h("#start-import","Start Import Button"),startImportBtnBottom:()=>h("#bottom-start-import","Bottom Start Import Button"),settingsSaveStatus:()=>h("#settings-save-status","Settings Save Status"),importStatus:()=>h("#import-status","Import Status"),useDefaultPopulationCheckbox:()=>h("#use-default-population","Use Default Population Checkbox"),useCsvPopulationIdCheckbox:()=>h("#use-csv-population-id","Use CSV Population ID Checkbox"),getTokenBtn:()=>h("#get-token-quick","Get Token Button"),populationIdField:()=>h("#population-id","Population ID Field")};typeof window<"u"&&(window.getElement=h,window.elementCache=E,window.ElementRegistry=x,console.log("✅ Element registry global exports initialized"));class F{constructor(){this.logger=k({service:"pingone-import-session",environment:"production"}),this.activeSessions=new Map,this.sessionCounter=0}generateSessionId(){try{const e=Date.now(),t=Math.random().toString(36).substring(2,15),r=++this.sessionCounter,s=`session_${e}_${t}_${r}`;return this.logger.debug("Session ID generated",{sessionId:s}),s}catch(e){return this.logger.error("Error generating session ID",{error:e.message}),`session_${Date.now()}_${Math.random().toString(36).substring(2,8)}`}}validateSessionId(e){try{return!e||typeof e!="string"?(this.logger.warn("Session ID validation failed: null/undefined/non-string",{sessionId:e,type:typeof e}),!1):e.trim()===""?(this.logger.warn("Session ID validation failed: empty string"),!1):e.length<8?(this.logger.warn("Session ID validation failed: too short",{length:e.length}),!1):/^[a-zA-Z0-9_-]+$/.test(e)?(this.logger.debug("Session ID validation passed",{sessionId:e}),!0):(this.logger.warn("Session ID validation failed: invalid characters",{sessionId:e}),!1)}catch(t){return this.logger.error("Error validating session ID",{error:t.message,sessionId:e}),!1}}registerSession(e,t,r={}){try{if(!this.validateSessionId(e))return this.logger.error("Cannot register invalid session ID",{sessionId:e,operationType:t}),!1;const s={sessionId:e,operationType:t,createdAt:Date.now(),lastActivity:Date.now(),metadata:r};return this.activeSessions.set(e,s),this.logger.info("Session registered",{sessionId:e,operationType:t,metadata:r}),!0}catch(s){return this.logger.error("Error registering session",{error:s.message,sessionId:e,operationType:t}),!1}}updateSessionActivity(e){try{const t=this.activeSessions.get(e);t?(t.lastActivity=Date.now(),this.logger.debug("Session activity updated",{sessionId:e})):this.logger.warn("Session not found for activity update",{sessionId:e})}catch(t){this.logger.error("Error updating session activity",{error:t.message,sessionId:e})}}unregisterSession(e){try{const t=this.activeSessions.get(e);t?(this.activeSessions.delete(e),this.logger.info("Session unregistered",{sessionId:e,operationType:t.operationType})):this.logger.warn("Session not found for unregistration",{sessionId:e})}catch(t){this.logger.error("Error unregistering session",{error:t.message,sessionId:e})}}getSession(e){try{return this.activeSessions.get(e)||null}catch(t){return this.logger.error("Error getting session",{error:t.message,sessionId:e}),null}}getActiveSessions(){try{return Array.from(this.activeSessions.values())}catch(e){return this.logger.error("Error getting active sessions",{error:e.message}),[]}}cleanupExpiredSessions(e=3600*1e3){try{const t=Date.now(),r=[];for(const[s,i]of this.activeSessions.entries())t-i.lastActivity>e&&r.push(s);r.forEach(s=>{this.unregisterSession(s)}),r.length>0&&this.logger.info("Cleaned up expired sessions",{count:r.length})}catch(t){this.logger.error("Error cleaning up expired sessions",{error:t.message})}}getSessionStats(){try{const e=this.getActiveSessions(),t={total:e.length,byOperation:{},oldest:null,newest:null};return e.forEach(r=>{t.byOperation[r.operationType]=(t.byOperation[r.operationType]||0)+1,(!t.oldest||r.createdAt<t.oldest.createdAt)&&(t.oldest=r),(!t.newest||r.createdAt>t.newest.createdAt)&&(t.newest=r)}),t}catch(e){return this.logger.error("Error getting session stats",{error:e.message}),{total:0,byOperation:{},oldest:null,newest:null}}}}new F;class _{constructor(){this.logger=k("pingone-progress"),this.isEnabled=!0,this.currentOperation=null,this.currentSessionId=null,this.isActive=!1,this.startTime=null,this.timingInterval=null,this.progressCallback=null,this.completeCallback=null,this.cancelCallback=null,this.duplicateHandlingMode="skip",this.socket=null,this.websocket=null,this.connectionType=null,this.connectionRetries=0,this.maxRetries=3,this.stats={processed:0,success:0,failed:0,skipped:0,total:0},this.logger.debug("ProgressManager initialized")}initialize(){try{this.setupElements(),this.setupEventListeners(),this.logger.info("Enhanced progress manager initialized successfully")}catch(e){this.logger.error("Failed to initialize progress manager",{error:e.message})}}setupElements(){try{this.progressContainer=document.getElementById("progress-container"),this.progressContainer||(this.logger.info("Main progress container not found - will use operation-specific containers"),this.isEnabled=!0),this.logger.info("Progress container found",{id:this.progressContainer.id,className:this.progressContainer.className,display:this.progressContainer.style.display,visibility:this.progressContainer.style.visibility,offsetParent:this.progressContainer.offsetParent!==null}),this.progressContainer.innerHTML=`
                <div class="progress-overlay">
                    <div class="progress-modal">
                        <div class="progress-header">
                            <div class="operation-info">
                                <h3 class="operation-title">
                                    <i class="fas fa-cog fa-spin"></i>
                                    <span class="title-text">Operation in Progress</span>
                                </h3>
                                <div class="operation-subtitle">Processing your request...</div>
                            </div>
                            <button class="cancel-operation" type="button" aria-label="Cancel operation">
                                <i class="fas fa-times"></i>
                                <span>Cancel</span>
                            </button>
                        </div>
                        
                        <div class="progress-content">
                            <div class="progress-steps">
                                <div class="step active" data-step="init">
                                    <div class="step-icon">
                                        <i class="fas fa-play"></i>
                                    </div>
                                    <div class="step-label">Initializing</div>
                                </div>
                                <div class="step" data-step="validate">
                                    <div class="step-icon">
                                        <i class="fas fa-check"></i>
                                    </div>
                                    <div class="step-label">Validating</div>
                                </div>
                                <div class="step" data-step="process">
                                    <div class="step-icon">
                                        <i class="fas fa-cogs"></i>
                                    </div>
                                    <div class="step-label">Processing</div>
                                </div>
                                <div class="step" data-step="complete">
                                    <div class="step-icon">
                                        <i class="fas fa-check-circle"></i>
                                    </div>
                                    <div class="step-label">Complete</div>
                                </div>
                            </div>
                            
                            <div class="progress-main">
                                <div class="progress-bar-container">
                                    <div class="progress-bar">
                                        <div class="progress-bar-fill"></div>
                                        <div class="progress-bar-glow"></div>
                                    </div>
                                    <div class="progress-percentage">0%</div>
                                </div>
                                
                                <div class="progress-text">Preparing operation...</div>
                                
                                <div class="progress-stats">
                                    <div class="stat-item">
                                        <span class="stat-label">Processed:</span>
                                        <span class="stat-value processed">0</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-label">Success:</span>
                                        <span class="stat-value success">0</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-label">Failed:</span>
                                        <span class="stat-value failed">0</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-label">Skipped:</span>
                                        <span class="stat-value skipped">0</span>
                                    </div>
                                </div>
                                
                                <div class="progress-timing">
                                    <div class="time-elapsed">
                                        <i class="fas fa-clock"></i>
                                        <span>Time: <span class="elapsed-value">00:00</span></span>
                                    </div>
                                    <div class="time-remaining">
                                        <i class="fas fa-hourglass-half"></i>
                                        <span>ETA: <span class="eta-value">Calculating...</span></span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="progress-details">
                                <div class="details-header">
                                    <h4><i class="fas fa-info-circle"></i> Operation Details</h4>
                                </div>
                                <div class="details-content">
                                    <div class="detail-item">
                                        <span class="detail-label">Operation Type:</span>
                                        <span class="detail-value operation-type">-</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Session ID:</span>
                                        <span class="detail-value session-id">-</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Population:</span>
                                        <span class="detail-value population-info">-</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Connection:</span>
                                        <span class="detail-value connection-type">-</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `,this.logger.debug("Progress elements setup completed")}catch(e){this.logger.error("Error setting up progress elements",{error:e.message}),this.isEnabled=!1}}setupEventListeners(){if(!this.isEnabled){this.logger.warn("Progress manager not enabled - skipping event listener setup");return}try{const e=this.progressContainer.querySelector(".cancel-operation");e&&e.addEventListener("click",()=>this.cancelOperation());const t=this.progressContainer.querySelector(".close-progress-btn");t&&t.addEventListener("click",()=>this.hideProgress()),this.logger.debug("Progress event listeners setup completed")}catch(e){this.logger.error("Error setting up progress event listeners",{error:e.message})}}startOperation(e,t={}){if(!this.isEnabled){this.logger.warn("Progress manager not enabled - cannot start operation");return}if(this.currentOperation=e,this.isActive=!0,this.startTime=Date.now(),this.resetOperationStats(),this.selectProgressContainer(e),this.progressContainer||this.createFallbackProgressContainer(e),!this.progressContainer){this.logger.error("No progress container available for operation",{operationType:e});return}this.initializeProgressContainer(),this.updateOperationTitle(e),this.updateOperationDetails(t),this.showProgress(),this.startTimingUpdates(),this.logger.info("Operation started",{operationType:e,options:t})}selectProgressContainer(e){if(this.progressContainer&&this.progressContainer.parentNode)return;const r={import:"progress-container",delete:"progress-container-delete",modify:"progress-container-modify",export:"progress-container-export"}[e]||"progress-container";this.progressContainer=document.getElementById(r),this.progressContainer||(this.progressContainer=document.getElementById("progress-container")),this.progressContainer?this.logger.info("Selected progress container",{id:this.progressContainer.id,operationType:e}):this.logger.warn("No progress container found for operation",{operationType:e})}createFallbackProgressContainer(e){try{const t=document.createElement("div");t.id="progress-container-fallback",t.className="progress-container visible",t.style.cssText=`
                display: block !important;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.7);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
            `,document.body.appendChild(t),this.progressContainer=t,this.logger.info("Created fallback progress container",{operationType:e})}catch(t){this.logger.error("Failed to create fallback progress container",{error:t.message})}}initializeProgressContainer(){this.progressContainer&&!this.progressContainer.querySelector(".progress-overlay")&&(this.setupElements(),this.setupEventListeners())}initializeRealTimeConnection(e){if(!e){this.logger.warn("No session ID provided for real-time connection");return}this.currentSessionId=e,this.connectionRetries=0,this.trySocketIOConnection(e)}trySocketIOConnection(e){try{if(typeof io<"u")this.logger.info("Using global Socket.IO client"),this.connectWithSocketIO(io,e);else{this.logger.info("Loading Socket.IO client dynamically");const t=document.createElement("script");t.src="/socket.io/socket.io.js",t.async=!0,t.onload=()=>{this.logger.info("Socket.IO client loaded successfully"),typeof io<"u"?this.connectWithSocketIO(io,e):(this.logger.warn("Socket.IO loaded but io is undefined, trying WebSocket"),this.tryWebSocketConnection(e))},t.onerror=r=>{this.logger.warn("Failed to load Socket.IO client script",{error:r.message}),this.tryWebSocketConnection(e)},document.head.appendChild(t)}}catch(t){this.logger.warn("Socket.IO connection setup failed, trying WebSocket",{error:t.message}),this.tryWebSocketConnection(e)}}reconnectSocketIO(e){this.isReconnecting||(this.isReconnecting=!0,this.logger.info("Attempting to reconnect Socket.IO",{sessionId:e}),console.log("🔄 [PROGRESS] Attempting to reconnect Socket.IO"),this.socket&&(this.socket.close(),this.socket=null),setTimeout(()=>{this.trySocketIOConnection(e),this.isReconnecting=!1},1e3))}connectWithSocketIO(e,t){try{this.socket=e("/",{transports:["websocket","polling"],timeout:5e3,forceNew:!0}),this.socket.on("connect",()=>{this.connectionType="socketio",this.updateConnectionType("Socket.IO"),this.logger.info("Socket.IO connected",{sessionId:t,socketId:this.socket.id}),console.log(`🔌 [PROGRESS] Socket.IO connected (ID: ${this.socket.id})`),this.socket.emit("registerSession",t),this.socket.emit("join-session",{sessionId:t})}),this.socket.on("progress",r=>{console.log("🔄 [PROGRESS] Received progress event:",r),this.handleProgressEvent(r)}),this.socket.on("completion",r=>{console.log("✅ [PROGRESS] Received completion event:",r),this.handleCompletionEvent(r)}),this.socket.on("complete",r=>{console.log("✅ [PROGRESS] Received complete event:",r),this.handleCompletionEvent(r)}),this.socket.on("error",r=>{console.log("❌ [PROGRESS] Received error event:",r),this.handleErrorEvent(r)}),this.socket.on("disconnect",()=>{console.log("🔌 [PROGRESS] Socket.IO disconnected"),this.logger.warn("Socket.IO disconnected"),this.handleConnectionFailure()}),this.socket.on("connect_error",r=>{console.log("❌ [PROGRESS] Socket.IO connection error:",r.message),this.logger.warn("Socket.IO connection error",{error:r.message}),this.handleConnectionFailure()})}catch(r){this.logger.warn("Socket.IO connection failed, trying WebSocket",{error:r.message}),this.tryWebSocketConnection(t)}}tryWebSocketConnection(e){try{const r=`${window.location.protocol==="https:"?"wss:":"ws:"}//${window.location.host}/ws`;this.websocket=new WebSocket(r),this.websocket.onopen=()=>{this.connectionType="websocket",this.updateConnectionType("WebSocket"),this.logger.info("WebSocket connected",{sessionId:e}),this.websocket.send(JSON.stringify({type:"join-session",sessionId:e}))},this.websocket.onmessage=s=>{try{const i=JSON.parse(s.data);switch(i.type){case"progress":this.handleProgressEvent(i);break;case"complete":this.handleCompletionEvent(i);break;case"error":this.handleErrorEvent(i);break}}catch(i){this.logger.error("Error parsing WebSocket message",{error:i.message})}},this.websocket.onclose=s=>{this.logger.warn("WebSocket closed",{code:s.code,reason:s.reason}),this.handleConnectionFailure()},this.websocket.onerror=s=>{this.logger.error("WebSocket error",{error:s.message}),this.handleConnectionFailure()}}catch(t){this.logger.error("WebSocket connection failed",{error:t.message}),this.handleConnectionFailure()}}handleConnectionFailure(){this.connectionRetries++,this.connectionRetries<=this.maxRetries?(this.logger.info("Retrying connection",{attempt:this.connectionRetries,maxRetries:this.maxRetries}),setTimeout(()=>{this.currentSessionId&&this.initializeRealTimeConnection(this.currentSessionId)},1e3*this.connectionRetries)):(this.logger.warn("Max connection retries reached, falling back to polling"),this.updateConnectionType("Polling (Fallback)"))}closeConnections(){this.socket&&(this.socket.disconnect(),this.socket=null),this.websocket&&(this.websocket.close(1e3,"Operation completed"),this.websocket=null),this.connectionType=null,this.logger.debug("Real-time connections closed")}updateSessionId(e){if(!e){this.logger.warn("No session ID provided for update");return}this.currentSessionId=e;const t=this.progressContainer.querySelector(".detail-value.session-id");t&&(t.textContent=e),this.logger.info("Session ID updated",{sessionId:e})}handleProgressEvent(e){if(!e){this.logger.warn("No progress data received");return}const{current:t,total:r,message:s,counts:i}=e;this.updateProgress(t,r,s,i),this.logger.debug("Progress event handled",{current:t,total:r,message:s})}handleCompletionEvent(e){this.completeOperation(e),this.logger.info("Completion event handled",{data:e})}handleErrorEvent(e){const{message:t,details:r}=e;this.handleOperationError(t,r),this.logger.error("Error event handled",{message:t,details:r})}updateProgress(e,t,r="",s={}){if(!this.isEnabled||!this.progressContainer){this.logger.warn("Progress manager not enabled or container not found");return}const i=this.progressContainer.querySelector(".progress-bar-fill");if(i){const a=t>0?Math.min(100,Math.round(e/t*100)):0;i.style.width=`${a}%`}const o=this.progressContainer.querySelector(".progress-percentage");if(o){const a=t>0?Math.min(100,Math.round(e/t*100)):0;o.textContent=`${a}%`}const n=this.progressContainer.querySelector(".progress-text");if(n&&r&&(n.textContent=r),t>0){const a=e/t*100;this.updateStepIndicatorBasedOnProgress(a)}s&&typeof s=="object"&&(this.stats={...this.stats,...s},this.updateStatsDisplay()),this.logger.debug("Progress updated",{current:e,total:t,message:r,details:s})}updateStatsDisplay(){this.progressContainer&&(Object.entries(this.stats).forEach(([e,t])=>{const r=this.progressContainer.querySelector(`.stat-value.${e}`);r&&(r.textContent=t||0)}),this.logger.debug("Statistics display updated",{stats:this.stats}))}updateStepIndicatorBasedOnProgress(e){let t="init";e>=100?t="complete":e>=75?t="process":e>=25&&(t="validate"),this.updateStepIndicator(t)}updateStepIndicator(e){if(!this.progressContainer)return;const t=this.progressContainer.querySelectorAll(".step");t.forEach(i=>{i.classList.remove("active","completed")});const r=this.progressContainer.querySelector(`[data-step="${e}"]`);r&&r.classList.add("active");const s=this.getStepOrder(e);t.forEach(i=>{const o=i.getAttribute("data-step");this.getStepOrder(o)<s&&i.classList.add("completed")}),this.logger.debug("Step indicator updated",{step:e})}getStepOrder(e){return{init:0,validate:1,process:2,complete:3}[e]||0}startTimingUpdates(){this.timingInterval&&clearInterval(this.timingInterval),this.timingInterval=setInterval(()=>{this.updateTiming()},1e3),this.logger.debug("Timing updates started")}updateTiming(){if(!this.startTime||!this.progressContainer)return;const e=Date.now()-this.startTime,t=this.progressContainer.querySelector(".elapsed-value");if(t&&(t.textContent=this.formatDuration(e)),this.stats.total>0&&this.stats.processed>0){const r=this.stats.processed/this.stats.total;if(r>0){const i=e/r-e,o=this.progressContainer.querySelector(".eta-value");o&&(o.textContent=this.formatDuration(i))}}this.logger.debug("Timing updated",{elapsed:e})}completeOperation(e={}){if(!this.isEnabled){this.logger.warn("Progress manager not enabled - cannot complete operation");return}this.timingInterval&&(clearInterval(this.timingInterval),this.timingInterval=null),this.closeConnections();const{processed:t,success:r,failed:s,skipped:i}=e;this.updateProgress(t||0,t||0,"Operation completed"),this.stats={...this.stats,...e},this.updateStatsDisplay(),this.updateStepIndicator("complete"),this.completeCallback&&typeof this.completeCallback=="function"&&this.completeCallback(e),this.isActive=!1,this.logger.info("Operation completed",{results:e})}handleOperationError(e,t={}){if(!this.isEnabled){this.logger.warn("Progress manager not enabled - cannot handle error");return}this.timingInterval&&(clearInterval(this.timingInterval),this.timingInterval=null),this.closeConnections();const r=this.progressContainer.querySelector(".progress-text");r&&(r.textContent=`Error: ${e}`,r.classList.add("error")),this.isActive=!1,this.logger.error("Operation error",{message:e,details:t})}cancelOperation(){if(!this.isEnabled||!this.isActive){this.logger.warn("No active operation to cancel");return}this.timingInterval&&(clearInterval(this.timingInterval),this.timingInterval=null),this.closeConnections(),this.cancelCallback&&typeof this.cancelCallback=="function"&&this.cancelCallback(),this.isActive=!1,this.hideProgress(),this.logger.info("Operation cancelled")}showProgress(){if(!this.isEnabled||!this.progressContainer){this.logger.warn("Progress manager not enabled or container not found");return}this.progressContainer.style.display="block",this.progressContainer.classList.add("visible"),this.progressContainer.setAttribute("style","display: block !important; visibility: visible !important;");const e=this.progressContainer.querySelector(".cancel-operation");e&&e.focus(),this.logger.debug("Progress display shown",{containerId:this.progressContainer.id}),console.log(`🔍 [PROGRESS] Showing progress container: ${this.progressContainer.id}`)}hideProgress(){this.progressContainer&&(this.logger.debug("Hiding progress display",{containerId:this.progressContainer.id}),console.log(`🔍 [PROGRESS] Hiding progress container: ${this.progressContainer.id}`),this.progressContainer.classList.remove("visible"),this.progressContainer.style.display="none",this.logger.debug("Progress display hidden"))}updateOperationTitle(e){if(!this.progressContainer)return;const t=this.progressContainer.querySelector(".title-text");if(t){const r={import:"Import Users",export:"Export Users",delete:"Delete Users",modify:"Modify Users"};t.textContent=r[e]||"Operation in Progress"}this.logger.debug("Operation title updated",{operationType:e})}updateOperationDetails(e={}){if(!this.progressContainer)return;const{populationName:t,populationId:r,totalUsers:s}=e,i=this.progressContainer.querySelector(".detail-value.operation-type");i&&(i.textContent=this.currentOperation||"Unknown");const o=this.progressContainer.querySelector(".detail-value.population-info");o&&(o.textContent=t||r||"Unknown"),s&&(this.stats.total=s,this.updateStatsDisplay()),this.logger.debug("Operation details updated",{options:e})}updateOperationStatus(e,t=""){if(!this.progressContainer)return;const r=this.progressContainer.querySelector(".operation-subtitle");r&&(r.textContent=t||e),this.logger.debug("Operation status updated",{status:e,message:t})}updateConnectionType(e){if(!this.progressContainer)return;const t=this.progressContainer.querySelector(".detail-value.connection-type");t&&(t.textContent=e),this.logger.debug("Connection type updated",{type:e})}resetOperationStats(){this.stats={processed:0,success:0,failed:0,skipped:0,total:0},this.updateStatsDisplay(),this.logger.debug("Operation statistics reset")}formatDuration(e){const t=Math.floor(e/1e3),r=Math.floor(t/60),s=Math.floor(r/60);return s>0?`${s}:${String(r%60).padStart(2,"0")}:${String(t%60).padStart(2,"0")}`:r>0?`${r}:${String(t%60).padStart(2,"0")}`:`${t}s`}setProgressCallback(e){this.progressCallback=e,this.logger.debug("Progress callback set")}setCompleteCallback(e){this.completeCallback=e,this.logger.debug("Completion callback set")}setCancelCallback(e){this.cancelCallback=e,this.logger.debug("Cancel callback set")}debugLog(e,t){}destroy(){this.timingInterval&&(clearInterval(this.timingInterval),this.timingInterval=null),this.closeConnections(),this.progressCallback=null,this.completeCallback=null,this.cancelCallback=null,this.isActive=!1,this.currentOperation=null,this.currentSessionId=null,this.logger.info("Progress manager destroyed")}}new _;const y=Object.freeze({VALIDATION:"VALIDATION",AUTHENTICATION:"AUTHENTICATION",AUTHORIZATION:"AUTHORIZATION",NETWORK:"NETWORK",TIMEOUT:"TIMEOUT",SERVER:"SERVER",SERVICE_UNAVAILABLE:"SERVICE_UNAVAILABLE",NOT_FOUND:"NOT_FOUND",CONFLICT:"CONFLICT",CONFIGURATION:"CONFIGURATION",INTEGRATION:"INTEGRATION",UNKNOWN:"UNKNOWN"}),b=Object.freeze({FATAL:"FATAL",ERROR:"ERROR",WARNING:"WARNING",INFO:"INFO",DEBUG:"DEBUG"});Object.freeze({[y.VALIDATION]:"Validation failed",[y.AUTHENTICATION]:"Authentication required",[y.AUTHORIZATION]:"Permission denied",[y.NETWORK]:"Network error occurred",[y.TIMEOUT]:"Request timed out",[y.SERVER]:"Internal server error",[y.SERVICE_UNAVAILABLE]:"Service unavailable",[y.NOT_FOUND]:"Resource not found",[y.CONFLICT]:"Resource conflict",[y.CONFIGURATION]:"Configuration error",[y.INTEGRATION]:"Integration error",[y.UNKNOWN]:"An unexpected error occurred"});Object.freeze({[y.VALIDATION]:{severity:b.WARNING,isRecoverable:!0,userMessage:"Please check your input and try again."},[y.AUTHENTICATION]:{severity:b.ERROR,isRecoverable:!0,userMessage:"Your session has expired. Please log in again."},[y.AUTHORIZATION]:{severity:b.ERROR,isRecoverable:!1,userMessage:"You do not have permission to perform this action."},[y.NETWORK]:{severity:b.WARNING,isRecoverable:!0,userMessage:"Unable to connect to the server. Please check your internet connection."},[y.SERVER]:{severity:b.ERROR,isRecoverable:!1,userMessage:"An unexpected server error occurred. Please try again later."},[y.UNKNOWN]:{severity:b.ERROR,isRecoverable:!1,userMessage:"An unexpected error occurred. Please try again."}});const A=window.app&&window.app.uiManager;class z{constructor(e=null){if(typeof e=="string")try{const t=document.getElementById(e)||document.querySelector(e);this.logElement=t,t||console.debug(`[LOGGER] DOM element not found for '${e}', using UI-less logging`)}catch(t){console.debug(`[LOGGER] Error finding DOM element for '${e}':`,t.message),this.logElement=null}else e&&e.nodeType===Node.ELEMENT_NODE?this.logElement=e:e&&typeof e=="object"&&e.length!==void 0?(this.logElement=e.length>0?e[0]:null,e.length>1&&console.debug("[LOGGER] Multiple elements found, using first element")):this.logElement=null;this.logs=[],this.validCount=0,this.errorCount=0,this.initialized=!1,this.serverLoggingEnabled=!0,this.isLoadingLogs=!1,this.offlineLogs=[],this.winstonLogger=k({service:"pingone-import-frontend",environment:"production",enableServerLogging:!0,enableConsoleLogging:!0}),this.initialize()}initialize(){try{this.winstonLogger.info("Logger initialized successfully"),this.initialized=!0}catch(e){console.error("Failed to initialize logger:",e)}}disableServerLogging(){this.serverLoggingEnabled=!1,this.winstonLogger.setServerLogging(!1),this.winstonLogger.debug("Server logging disabled")}enableServerLogging(){this.serverLoggingEnabled=!0,this.winstonLogger.setServerLogging(!0),this.winstonLogger.debug("Server logging enabled")}setLoadingLogs(e){this.isLoadingLogs=e,this.winstonLogger.debug(`Loading logs flag set to: ${e}`)}_createSafeFileLogger(){return{_initialized:!1,_logger:null,_queue:[],_initializing:!1,async init(){if(!(this._initialized||this._initializing)){this._initializing=!0;try{const{FileLogger:t}=await $(async()=>{const{FileLogger:r}=await import("./file-logger-hNRkJ05M.js");return{FileLogger:r}},[]);this._logger=new t("client.log"),this._initialized=!0,this._processQueue()}catch(t){console.warn("Failed to initialize file logger, falling back to console:",t.message),this._logger={log:(r,s,i)=>{console[r]||console.log(`[${r.toUpperCase()}] ${s}`,i)}},this._initialized=!0,this._processQueue()}finally{this._initializing=!1}}},_processQueue(){for(;this._queue.length>0;){const{level:t,message:r,data:s}=this._queue.shift();this._logger&&typeof this._logger.log=="function"&&this._logger.log(t,r,s)}},log(t,r,s){this._initialized&&this._logger?this._logger.log(t,r,s):(this._queue.push({level:t,message:r,data:s}),this._initializing||this.init())}}}_parseLogArgs(e){let t="Log message",r=null,s=null;return e.length>0&&(typeof e[0]=="string"?(t=e[0],e.length>1&&typeof e[1]=="object"&&(r=e[1],e.length>2&&typeof e[2]=="object"&&(s=e[2]))):typeof e[0]=="object"&&(r=e[0],t="Log data",e.length>1&&typeof e[1]=="object"&&(s=e[1]))),[t,r,s]}log(e,t,r={}){try{if(typeof e=="string"&&typeof t=="string")this._logToWinston(e,t,r);else{const[s,i,o]=this._parseLogArgs(arguments);this._logToWinston(e||"info",s,{...i,...o})}this._updateLogUI({level:e,message:t,data:r,timestamp:new Date})}catch(s){console.error("Error in logger.log:",s)}}_logToWinston(e,t,r={}){const s={...r,component:"frontend-logger",timestamp:new Date().toISOString()};this.winstonLogger.log(e,t,s)}info(e,t={}){this.log("info",e,t)}warn(e,t={}){this.log("warn",e,t)}error(e,t={}){this.log("error",e,t),A&&A.showStatusBar(e,"error",{autoDismiss:!1}),this.errorCount++,this.updateSummary()}debug(e,t={}){this.log("debug",e,t)}success(e,t={}){this.log("info",e,{...t,type:"success"}),this.validCount++,this.updateSummary()}errorWithStack(e,t,r={}){this.winstonLogger.errorWithStack(e,t,r),this.errorCount++,this.updateSummary()}_updateLogUI(e){if(this.logElement)try{const t=document.createElement("div");t.className=`log-entry ${e.level}`;const r=document.createElement("span");r.className="log-timestamp",r.textContent=new Date(e.timestamp).toLocaleTimeString(),t.appendChild(r);const s=document.createElement("span");s.className="log-level",s.textContent=e.level.toUpperCase(),t.appendChild(s);const i=document.createElement("span");i.className="log-message";let o=e.message;if(e.data&&e.data.type)switch(e.data.type){case"progress":o=R.formatProgressMessage(e.data.operation||"import",e.data.current||0,e.data.total||0,e.message,e.data.counts||{});break;case"error":o=R.formatErrorMessage(e.data.operation||"import",e.message,e.data);break;case"completion":o=R.formatCompletionMessage(e.data.operation||"import",e.data);break;default:o=e.message}if(i.textContent=o,t.appendChild(i),e.data&&Object.keys(e.data).length>0){const a=document.createElement("div");a.className="log-details";const l=document.createElement("h4");l.textContent="Details",a.appendChild(l);const p=document.createElement("pre");p.className="log-detail-json",p.textContent=JSON.stringify(e.data,null,2),a.appendChild(p),t.appendChild(a)}this.logElement.firstChild?this.logElement.insertBefore(t,this.logElement.firstChild):this.logElement.appendChild(t),this.logElement.scrollTop=0;const n=100;for(;this.logElement.children.length>n;)this.logElement.removeChild(this.logElement.lastChild)}catch(t){console.error("Error updating log UI:",t)}}async _sendToServer(e){if(!(!this.serverLoggingEnabled||this.isLoadingLogs))try{await fetch("/api/logs/ui",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({level:e.level,message:e.message,data:e.data})})}catch(t){this.winstonLogger.warn("Failed to send log to server",{error:t.message}),this.offlineLogs.push(e)}}renderLogs(){this.logElement&&(this.logElement.innerHTML="",this.logs.forEach(e=>this._updateLogUI(e)),this.logElement.scrollTop=this.logElement.scrollHeight)}clearLogs(){this.logs=[],this.logElement&&(this.logElement.innerHTML=""),this.winstonLogger.info("Logs cleared")}getLogs(){return[...this.logs]}updateSummary(){this.winstonLogger.debug("Summary updated",{validCount:this.validCount,errorCount:this.errorCount})}clearSummary(){this.validCount=0,this.errorCount=0,this.winstonLogger.debug("Summary cleared")}startTimer(e){this.timers||(this.timers=new Map),this.timers.set(e,Date.now()),this.debug(`Timer started: ${e}`)}endTimer(e){if(!this.timers||!this.timers.has(e))return this.warn(`Timer '${e}' not found`),0;const t=this.timers.get(e),r=Date.now()-t;return this.timers.delete(e),this.info(`Timer completed: ${e}`,{duration:`${r}ms`}),r}child(e={}){console.log("🔥 [LOGGER DEBUG] Creating child logger with options:",e);const t=Object.create(this);return t.context={...this.context,...e},["info","warn","error","debug"].forEach(s=>{const i=this[s].bind(this);t[s]=(o,n={})=>{const a={...t.context,...n};return i(o,a)}}),console.log("🔥 [LOGGER DEBUG] Child logger created successfully"),t}}class T{static async generateKey(e){const t=new TextEncoder,r=await window.crypto.subtle.importKey("raw",t.encode(e),"PBKDF2",!1,["deriveBits","deriveKey"]);return window.crypto.subtle.deriveKey({name:"PBKDF2",salt:new TextEncoder().encode("PingOneImportSalt"),iterations:1e5,hash:"SHA-256"},r,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}static async encrypt(e,t){const s=new TextEncoder().encode(e),i=window.crypto.getRandomValues(new Uint8Array(12)),o=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:i},t,s),n=new Uint8Array(i.length+o.byteLength);return n.set(i,0),n.set(new Uint8Array(o),i.length),btoa(String.fromCharCode(...n))}static async decrypt(e,t){try{const r=Uint8Array.from(atob(e),n=>n.charCodeAt(0)),s=r.slice(0,12),i=r.slice(12),o=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:s},t,i);return new TextDecoder().decode(o)}catch(r){throw r}}}class j{constructor(e=null){this.settings=this.getDefaultSettings(),this.storageKey="pingone-import-settings",this.encryptionKey=null,this.initializeLogger(e),this.encryptionInitialized=!1}async init(){try{await this.initializeEncryption(),this.encryptionInitialized=!0,this.logger.info("Settings manager initialized successfully")}catch(e){throw this.logger.error("Failed to initialize settings manager",{error:e.message}),e}}initializeLogger(e){e&&typeof e.child=="function"?this.logger=e.child({component:"settings-manager"}):this.logger=k({service:"pingone-import-settings",environment:"production"})}createDefaultLogger(){return{log:(e,t="info")=>this.logger.log(t,`[Settings] ${e}`),info:e=>this.logger.info(`[Settings] ${e}`),warn:e=>this.logger.warn(`[Settings] ${e}`),error:e=>this.logger.error(`[Settings] ${e}`),debug:e=>this.logger.debug(`[Settings] ${e}`)}}static getRegionInfo(e){if(!e)return{code:"NA",tld:"com",label:"North America (excluding Canada)"};const t={NA:{code:"NA",tld:"com",label:"North America (excluding Canada)"},CA:{code:"CA",tld:"ca",label:"Canada"},EU:{code:"EU",tld:"eu",label:"European Union"},AU:{code:"AU",tld:"com.au",label:"Australia"},SG:{code:"SG",tld:"sg",label:"Singapore"},AP:{code:"AP",tld:"asia",label:"Asia-Pacific"}};return t[e]||t.NA}getDefaultSettings(){return{environmentId:"",region:"NA",apiClientId:"",populationId:"",rateLimit:50,connectionStatus:"disconnected",connectionMessage:"Not connected",lastConnectionTest:null,autoSave:!0,lastUsedDirectory:"",theme:"light",pageSize:50,showNotifications:!0}}async loadSettings(){try{const e=localStorage.getItem(this.storageKey);if(!e)return this.logger.info("No stored settings found, using defaults"),this.settings;try{const t=JSON.parse(e);return this.settings={...this.getDefaultSettings(),...t},this.logger.info("Settings loaded successfully (unencrypted)",{hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId,region:this.settings.region}),this.settings}catch{if(!this.encryptionInitialized)return this.logger.warn("Encryption not initialized and JSON parsing failed, using defaults"),this.settings;try{const r=await T.decrypt(e,this.encryptionKey),s=JSON.parse(r);return this.settings={...this.getDefaultSettings(),...s},this.logger.info("Settings loaded successfully (encrypted)",{hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId,region:this.settings.region}),this.settings}catch(r){return this.logger.error("Failed to decrypt settings",{error:r.message}),this.settings}}}catch(e){return this.logger.error("Failed to load settings",{error:e.message}),this.settings}}async saveSettings(e=null){try{e&&(this.settings={...this.settings,...e});const t=JSON.stringify(this.settings);if(!this.encryptionInitialized){this.logger.warn("Encryption not initialized, saving settings without encryption"),localStorage.setItem(this.storageKey,t),this.logger.info("Settings saved successfully (unencrypted)",{hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId,region:this.settings.region}),window.dispatchEvent(new CustomEvent("settings:save-success",{detail:{message:"Settings saved successfully (unencrypted)."}}));return}try{const r=await T.encrypt(t,this.encryptionKey);localStorage.setItem(this.storageKey,r),this.logger.info("Settings saved successfully (encrypted)",{hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId,region:this.settings.region}),window.dispatchEvent(new CustomEvent("settings:save-success",{detail:{message:"Settings saved successfully."}}))}catch(r){this.logger.warn("Encryption failed, saving settings without encryption",{error:r.message}),localStorage.setItem(this.storageKey,t),this.logger.info("Settings saved successfully (unencrypted fallback)",{hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId,region:this.settings.region}),window.dispatchEvent(new CustomEvent("settings:save-success",{detail:{message:"Settings saved successfully (encryption failed, used fallback)."}}))}}catch(t){throw this.logger.error("Failed to save settings",{error:t.message}),window.dispatchEvent(new CustomEvent("settings:save-error",{detail:{message:`Failed to save settings: ${t.message}`}})),t}}getSetting(e){if(!e)throw new Error("Setting key is required");return this.settings[e]}async setSetting(e,t){if(!e)throw new Error("Setting key is required");try{this.settings[e]=t,await this.saveSettings(),this.logger.debug("Setting updated",{key:e,value:typeof t=="string"?t:"[object]"})}catch(r){throw this.logger.error("Failed to update setting",{key:e,error:r.message}),r}}getAllSettings(){return{...this.settings}}async updateSettings(e){if(!e||typeof e!="object")throw new Error("New settings object is required");try{this.settings={...this.settings,...e},await this.saveSettings(),this.logger.info("Multiple settings updated",{updatedKeys:Object.keys(e),hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId})}catch(t){throw this.logger.error("Failed to update settings",{error:t.message}),t}}async resetSettings(){try{this.settings=this.getDefaultSettings(),await this.saveSettings(),this.logger.info("Settings reset to defaults")}catch(e){throw this.logger.error("Failed to reset settings",{error:e.message}),e}}async clearSettings(){try{localStorage.removeItem(this.storageKey),this.settings=this.getDefaultSettings(),this.logger.info("Settings cleared")}catch(e){throw this.logger.error("Failed to clear settings",{error:e.message}),e}}async initializeEncryption(){try{let e=await this.getDeviceId();typeof e!="string"&&(e=String(e||"")),e||(e="fallback-device-id"),this.encryptionKey=await T.generateKey(e),this.logger.debug("Encryption initialized successfully")}catch(e){this.logger.error("Failed to initialize encryption",{error:e.message}),this.encryptionKey=await T.generateKey("fallback-encryption-key"),this.logger.warn("Using fallback encryption key")}}async getDeviceId(){try{if(this.isLocalStorageAvailable()){const n=localStorage.getItem("pingone-device-id");if(n&&typeof n=="string")return n}const e={userAgent:navigator.userAgent,platform:navigator.platform,hardwareConcurrency:navigator.hardwareConcurrency,deviceMemory:navigator.deviceMemory,maxTouchPoints:navigator.maxTouchPoints},r=new TextEncoder().encode(JSON.stringify(e)),s=await crypto.subtle.digest("SHA-256",r),o=Array.from(new Uint8Array(s)).map(n=>n.toString(16).padStart(2,"0")).join("");return typeof o!="string"||!o?"fallback-device-id":o}catch(e){return this.logger.error("Failed to generate device ID:",e),"fallback-"+Math.random().toString(36).substring(2,15)}}isLocalStorageAvailable(){try{const e="test";return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(e){return this.logger.warn("localStorage not available",{error:e.message}),!1}}async exportSettings(){try{const e={settings:this.settings,exportDate:new Date().toISOString(),version:"1.0"};return this.logger.info("Settings exported",{exportDate:e.exportDate}),e}catch(e){throw this.logger.error("Failed to export settings",{error:e.message}),e}}async importSettings(e){if(!e)throw new Error("Import data is required");if(!e.settings)throw new Error("Invalid import data: missing settings");try{this.settings={...this.getDefaultSettings(),...e.settings},await this.saveSettings(),this.logger.info("Settings imported successfully",{importDate:e.exportDate,hasEnvironmentId:!!this.settings.environmentId,hasApiClientId:!!this.settings.apiClientId})}catch(t){throw this.logger.error("Failed to import settings",{error:t.message}),t}}debugLocalStorage(){try{const e=localStorage.getItem(this.storageKey);if(!e)return this.logger.info("No data found in localStorage",{key:this.storageKey}),null;this.logger.info("localStorage contents found",{key:this.storageKey,length:e.length,preview:e.substring(0,100)+(e.length>100?"...":"")});try{const t=JSON.parse(e);return this.logger.info("Data is valid JSON",{keys:Object.keys(t),hasEnvironmentId:!!t.environmentId,hasApiClientId:!!t.apiClientId}),t}catch(t){return this.logger.info("Data is not valid JSON, likely encrypted",{error:t.message}),"encrypted"}}catch(e){return this.logger.error("Failed to debug localStorage",{error:e.message}),null}}}class U{constructor(e,t=""){this.logger=e||console,this.baseUrl=t,this.serverHealth={lastCheck:0,isHealthy:!0,consecutiveFailures:0,maxConsecutiveFailures:3},this.healthCheckInterval=3e4}async _checkServerHealth(){const e=Date.now();if(e-this.serverHealth.lastCheck<this.healthCheckInterval)return this.serverHealth.isHealthy;try{const t=await fetch(`${this.baseUrl}/api/health`,{method:"GET",headers:{Accept:"application/json"},signal:AbortSignal.timeout(5e3)});t.ok?(this.serverHealth.isHealthy=!0,this.serverHealth.consecutiveFailures=0,this.logger.debug("✅ Server health check passed")):(this.serverHealth.isHealthy=!1,this.serverHealth.consecutiveFailures++,this.logger.warn("⚠️ Server health check failed",{status:t.status}))}catch(t){this.serverHealth.isHealthy=!1,this.serverHealth.consecutiveFailures++,this.logger.warn("⚠️ Server health check error",{error:t.message})}return this.serverHealth.lastCheck=e,this.serverHealth.isHealthy}_calculateBackoffDelay(e,t,r){const s=t*Math.pow(2,e-1),i=Math.random()*.1*s;return Math.min(s+i,r)}_shouldRetry(e,t,r){return t>=r?!1:!e.status||e.status>=500||e.status===429||e.status===408}async request(e,t,r=null,s={}){const i=`${this.baseUrl}${t}`,o=Date.now(),n={...s,retries:s.retries||3,retryDelay:s.retryDelay||1e3,maxRetryDelay:s.maxRetryDelay||3e4,healthCheck:s.healthCheck!==!1,timeout:s.timeout||1e4};if(n.healthCheck&&t!=="/api/health"&&!await this._checkServerHealth()&&this.serverHealth.consecutiveFailures>=this.serverHealth.maxConsecutiveFailures)throw new Error("Server is unhealthy and unavailable for requests");const a={"Content-Type":"application/json",Accept:"application/json"};this.accessToken&&(a.Authorization=`Bearer ${this.accessToken}`);let l=null;r&&e!=="GET"&&(l=JSON.stringify(r));const p={type:"api_request",method:e,url:i,timestamp:new Date().toISOString(),source:"local-api-client"};this.logger.debug("🔄 Local API Request:",p);let m=null;for(let d=1;d<=n.retries;d++)try{const g=new AbortController,f=setTimeout(()=>g.abort(),n.timeout),v=await fetch(i,{method:e,headers:a,body:l,signal:g.signal});clearTimeout(f);const u=await this._handleResponse(v),S={type:"api_response",status:v.status,method:e,duration:Date.now()-o,attempt:d,source:"local-api-client"};return this.logger.debug("✅ Local API Response:",S),n.healthCheck&&(this.serverHealth.isHealthy=!0,this.serverHealth.consecutiveFailures=0),u}catch(g){m=g,g.name==="AbortError"&&(g.message="Request timeout",g.status=408),this.logger.error(`Local API Error (attempt ${d}/${n.retries}):`,g);const f=g.friendlyMessage||g.message,v=g.status===429;if(!this._shouldRetry(g,d,n.retries))throw g;const u=v?n.retryDelay*2:n.retryDelay,S=this._calculateBackoffDelay(d,u,n.maxRetryDelay);if(window.app&&window.app.uiManager&&(v?d<n.retries?window.app.uiManager.showRateLimitWarning(f,{isRetrying:!0,retryAttempt:d,maxRetries:n.retries,retryDelay:S}):window.app.uiManager.showError(f):d===n.retries&&window.app.uiManager.showError(f)),n.healthCheck&&(this.serverHealth.isHealthy=!1,this.serverHealth.consecutiveFailures++),d===n.retries)throw g;this.logger.info(`Retrying request in ${S}ms... (attempt ${d+1}/${n.retries})`),await new Promise(C=>setTimeout(C,S))}throw m}async _handleResponse(e){const t=e.headers.get("content-type");let r;if(t&&t.includes("application/json")?r=await e.json():r=await e.text(),!e.ok){let s;switch(e.status){case 400:s=this._getBadRequestMessage(r,e.url);break;case 401:s=this._getUnauthorizedMessage();break;case 403:s=this._getForbiddenMessage(r,e.url);break;case 404:s=this._getNotFoundMessage(r,e.url);break;case 429:s=this._getRateLimitMessage();break;case 500:case 501:case 502:case 503:case 504:s=this._getServerErrorMessage(e.status);break;default:s=r.message||`Request failed with status ${e.status}`}const i=new Error(s);throw i.status=e.status,i.details=r,i.friendlyMessage=s,i}return r}_getBadRequestMessage(e,t){return t.includes("/import")?e&&e.error?e.error:e&&e.message?e.message:"🔍 Import failed. Please check your CSV file and settings.":t.includes("/users/")&&t.includes("PUT")?"🔍 User data validation failed. Please check the user information and try again.":t.includes("/users")&&t.includes("POST")?"🔍 User creation failed due to invalid data. Please check required fields and try again.":t.includes("/populations")?"🔍 Population data is invalid. Please check your population settings.":"🔍 Request data is invalid. Please check your input and try again."}_getUnauthorizedMessage(){return"🔑 Authentication failed. Please check your PingOne API credentials in the Settings page."}_getForbiddenMessage(e,t){return t.includes("/users/")&&t.includes("PUT")?"🚫 Permission denied. Your PingOne application may not have permission to modify users.":t.includes("/users")&&t.includes("POST")?"🚫 Permission denied. Your PingOne application may not have permission to create users.":t.includes("/users/")&&t.includes("DELETE")?"🚫 Permission denied. Your PingOne application may not have permission to delete users.":"🚫 Access denied. Your PingOne application may not have the required permissions for this operation."}_getNotFoundMessage(e,t){return t.includes("/users/")?"🔍 User not found. The user may have been deleted or the ID is incorrect.":t.includes("/populations")?"🔍 Population not found. Please check your population settings.":t.includes("/environments/")?"🔍 PingOne environment not found. Please check your environment ID.":"🔍 Resource not found. Please check the ID or settings and try again."}_getRateLimitMessage(){return"⏰ You are sending requests too quickly. Please wait a moment and try again."}_getServerErrorMessage(e){return e>=500?"🔧 Server error. Please check your PingOne API credentials in the Settings page.":"🔧 An unexpected error occurred. Please try again."}get(e,t={}){return this.request("GET",e,null,t)}post(e,t,r={}){return this.request("POST",e,t,r)}async postFormData(e,t,r={}){const s=`${this.baseUrl}${e}`,i=Date.now(),o={...r,retries:r.retries||3,retryDelay:r.retryDelay||1e3},n={Accept:"application/json"};this.accessToken&&(n.Authorization=`Bearer ${this.accessToken}`);const a={type:"api_request",method:"POST",url:s,timestamp:new Date().toISOString(),source:"local-api-client",contentType:"multipart/form-data"};this.logger.debug("🔄 Local API FormData Request:",a);let l=null;for(let p=1;p<=o.retries;p++)try{const m=await fetch(s,{method:"POST",headers:n,body:t}),d=await this._handleResponse(m),g={type:"api_response",status:m.status,method:"POST",duration:Date.now()-i,attempt:p,source:"local-api-client"};return this.logger.debug("✅ Local API FormData Response:",g),d}catch(m){l=m,this.logger.error(`Local API FormData Error (attempt ${p}/${o.retries}):`,m);const d=m.friendlyMessage||m.message,g=m.status===429,v=(g?o.retryDelay*2:o.retryDelay)*Math.pow(2,p-1);if(window.app&&window.app.uiManager&&(g?p<o.retries?window.app.uiManager.showRateLimitWarning(d,{isRetrying:!0,retryAttempt:p,maxRetries:o.retries,retryDelay:v}):window.app.uiManager.showError(d):p===o.retries&&window.app.uiManager.showError(d)),p===o.retries||!(g||m.status>=500||!m.status))throw m;this.logger.info(`Retrying FormData request in ${v}ms... (attempt ${p+1}/${o.retries})`),await new Promise(S=>setTimeout(S,v))}throw l}put(e,t,r={}){return this.request("PUT",e,t,r)}delete(e,t={}){return this.request("DELETE",e,null,t)}async getWorkerToken(){this.logger.debug("🔐 Retrieving PingOne worker token...");try{const e=await this.post("/api/auth/worker-token",{},{timeout:15e3,retries:2});return this.logger.debug("✅ Worker token retrieved successfully"),e}catch(e){throw this.logger.error("❌ Failed to retrieve worker token:",e),new Error(`Token retrieval failed: ${e.message}`)}}async refreshWorkerToken(e){if(this.logger.debug("🔄 Refreshing PingOne worker token..."),!e)throw new Error("Current token is required for refresh");try{const t=await this.post("/api/auth/refresh-token",{},{headers:{Authorization:`Bearer ${e}`},timeout:1e4,retries:1});return this.logger.debug("✅ Worker token refreshed successfully"),t}catch(t){throw this.logger.error("❌ Failed to refresh worker token:",t),new Error(`Token refresh failed: ${t.message}`)}}async getTokenStatus(){this.logger.debug("🔍 Checking worker token status...");try{const e=await this.get("/api/auth/token-status",{timeout:5e3,retries:1});return this.logger.debug("✅ Token status retrieved successfully"),e}catch(e){return this.logger.debug("ℹ️ Could not retrieve token status:",e.message),{success:!1,hasToken:!1,error:e.message}}}async clearWorkerToken(){this.logger.debug("🗑️ Clearing worker token...");try{const e=await this.delete("/api/auth/worker-token",{timeout:5e3,retries:1});return this.logger.debug("✅ Worker token cleared successfully"),e}catch(e){throw this.logger.error("❌ Failed to clear worker token:",e),new Error(`Token clear failed: ${e.message}`)}}async validateToken(e=null){try{const t=e?{token:e}:{},r=await this.post("/api/auth/validate-credentials",t,{timeout:5e3,retries:1});return{success:!0,valid:r.valid||!1,details:r.details||{},message:r.message||"Token validation completed"}}catch(t){return{success:!1,valid:!1,error:t.message,message:"Token validation failed"}}}async testConnection(){try{const e=await this.get("/api/pingone/test-connection",{timeout:1e4,retries:1});return{success:!0,connected:!0,details:e.details||{},message:e.message||"Connection successful"}}catch(e){return{success:!1,connected:!1,error:e.message,message:"Connection test failed"}}}}const B=new U(console);window.app&&window.app.uiManager;class q{constructor(){this.logger={info:(e,t)=>console.log(`[PingOneClient] ${e}`,t||""),debug:(e,t)=>console.debug(`[PingOneClient] ${e}`,t||""),warn:(e,t)=>console.warn(`[PingOneClient] ${e}`,t||""),error:(e,t)=>console.error(`[PingOneClient] ${e}`,t||"")},this.accessToken=null,this.tokenExpiry=null,this.baseUrl="/api/pingone",this.initialize()}initialize(){try{this.loadTokenFromStorage(),this.logger.info("PingOne client initialized successfully")}catch(e){this.logger.error("Failed to initialize PingOne client",{error:e.message})}}loadTokenFromStorage(){try{if(typeof localStorage<"u"){const e=localStorage.getItem("pingone_worker_token"),t=localStorage.getItem("pingone_token_expiry");if(e&&t){const r=parseInt(t,10),s=Date.now();r>s?(this.accessToken=e,this.tokenExpiry=r,this.logger.info("Token loaded from storage",{hasToken:!!this.accessToken,expiryTime:new Date(this.tokenExpiry).toISOString()})):(this.logger.warn("Stored token has expired"),this.clearToken())}else this.logger.debug("No stored token found")}else this.logger.warn("localStorage is not available")}catch(e){this.logger.error("Error loading token from storage",{error:e.message})}}saveTokenToStorage(e,t){try{if(typeof localStorage<"u"){const r=Date.now()+t*1e3;return localStorage.setItem("pingone_worker_token",e),localStorage.setItem("pingone_token_expiry",r.toString()),this.accessToken=e,this.tokenExpiry=r,this.logger.info("Token saved to storage",{tokenLength:e.length,expiresIn:t,expiryTime:new Date(r).toISOString()}),!0}else return this.logger.warn("localStorage is not available, cannot save token"),!1}catch(r){return this.logger.error("Error saving token to storage",{error:r.message}),!1}}clearToken(){try{typeof localStorage<"u"&&(localStorage.removeItem("pingone_worker_token"),localStorage.removeItem("pingone_token_expiry")),this.accessToken=null,this.tokenExpiry=null,this.logger.info("Token cleared from storage")}catch(e){this.logger.error("Error clearing token from storage",{error:e.message})}}updateCredentials(e){try{this.logger.info("Updating PingOne client credentials"),this.clearToken(),typeof localStorage<"u"&&(localStorage.setItem("pingone_credentials",JSON.stringify(e)),this.logger.info("Credentials updated in localStorage")),window.dispatchEvent(new CustomEvent("credentials-updated",{detail:{credentials:e}})),this.logger.info("Credentials updated successfully")}catch(t){throw this.logger.error("Error updating credentials",{error:t.message}),t}}getCachedToken(){try{if(!this.accessToken||typeof this.accessToken!="string")return this.logger.debug("No valid cached token available"),null;if(!this.tokenExpiry||typeof this.tokenExpiry!="number")return this.logger.warn("Invalid token expiry timestamp"),this.clearToken(),null;const e=Date.now(),t=this.tokenExpiry<=e,r=300*1e3,s=this.tokenExpiry-e<=r;return t?(this.logger.debug("Cached token is expired"),this.clearToken(),null):(s&&this.logger.warn("Token is near expiry, consider refreshing"),!this.accessToken.includes(".")||this.accessToken.split(".").length!==3?(this.logger.error("Invalid token format detected"),this.clearToken(),null):(this.logger.debug("Returning valid cached token"),this.accessToken))}catch(e){return this.logger.error("Error getting cached token",{error:e.message,stack:e.stack,tokenLength:this.accessToken?this.accessToken.length:0}),null}}getCurrentTokenTimeRemaining(){try{if(!this.accessToken||!this.tokenExpiry)return{token:null,timeRemaining:null,isExpired:!0};const e=Date.now(),t=Math.max(0,this.tokenExpiry-e),r=t===0,s=this.formatDuration(Math.floor(t/1e3)),i=this.lastTokenTimeLog||0;return e-i>=3e5&&(this.logger.debug("Token time remaining calculated",{timeRemaining:s,isExpired:r}),this.lastTokenTimeLog=e),{token:this.accessToken,timeRemaining:s,isExpired:r}}catch(e){return this.logger.error("Error getting token time remaining",{error:e.message}),{token:null,timeRemaining:null,isExpired:!0}}}formatDuration(e){if(e<=0)return"Expired";const t=Math.floor(e/3600),r=Math.floor(e%3600/60),s=e%60;return t>0?`${t}h ${r}m ${s}s`:r>0?`${r}m ${s}s`:`${s}s`}async getAccessToken(){try{this.logger.debug("getAccessToken called");const e=this.getCurrentTokenTimeRemaining();if(e.token&&!e.isExpired)return this.logger.debug("Using cached token",{tokenPreview:e.token.substring(0,8)+"...",timeRemaining:e.timeRemaining}),e.token;this.logger.debug("Fetching token from /api/pingone/get-token");const t=await fetch("/api/pingone/get-token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({})});if(this.logger.debug("Fetch response",{status:t.status,ok:t.ok}),!t.ok){const i=await t.text();throw this.logger.error("Fetch error",{status:t.status,error:i}),new Error(`Failed to get token: ${t.status} ${i}`)}const r=await t.json();if(this.logger.debug("Data received from server",{hasAccessToken:!!r.access_token,expiresIn:r.expires_in,success:r.success}),!r.success)throw this.logger.warn("Server returned error",{data:r}),new Error(r.error||"Failed to get token from server");if(!r.access_token)throw this.logger.warn("No access_token in server response",{data:r}),new Error("No access token received from server");return this.saveTokenToStorage(r.access_token,r.expires_in||3600)?this.logger.debug("Token saved to localStorage",{tokenLength:r.access_token.length,expiresIn:r.expires_in||3600}):this.logger.warn("Failed to store token in localStorage"),r.access_token}catch(e){throw this.logger.error("Error in getAccessToken",{error:e.message}),e}}async makeRequest(e,t,r=null,s=3){try{const i=await this.getAccessToken();for(let o=1;o<=s;o++)try{this.logger.debug(`Making API request (attempt ${o})`,{method:e,url:t,hasData:!!r});const n={method:e,headers:{Authorization:`Bearer ${i}`,"Content-Type":"application/json"}};r&&(n.body=JSON.stringify(r));const a=await fetch(`${this.baseUrl}${t}`,n);if(this.logger.debug(`API request completed (attempt ${o})`,{status:a.status,ok:a.ok}),a.ok)return await a.json();{const l=await a.text();if(this.logger.warn(`API request failed (attempt ${o})`,{status:a.status,error:l}),o===s)throw new Error(`API request failed: ${a.status} ${l}`)}}catch(n){if(this.logger.error(`API request error (attempt ${o})`,{error:n.message}),o===s)throw n;await new Promise(a=>setTimeout(a,1e3*o))}}catch(i){throw this.logger.error("All API request attempts failed",{error:i.message}),i}}async getPopulations(e={}){try{this.logger.info("Getting populations from PingOne API");const r=await fetch("/api/pingone/populations",{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok)throw new Error(`Failed to fetch populations: ${r.status} ${r.statusText}`);return r}catch(t){throw this.logger.error("Failed to get populations",{error:t.message}),t}}async importUsers(e,t={}){try{this.logger.info("importUsers method called",{userCount:e.length,options:Object.keys(t)});const{populationId:r=null,batchSize:s=10,retryAttempts:i=3,enableUsers:o=!0,skipDuplicatesByEmail:n=!1,skipDuplicatesByUsername:a=!1}=t;if(this.logger.debug("Initial setup completed",{batchSize:s,retryAttempts:i,enableUsers:o,skipDuplicatesByEmail:n,skipDuplicatesByUsername:a}),!e||!Array.isArray(e)||e.length===0)throw new Error("Invalid CSV data: must be a non-empty array");this.logger.debug("Input validation completed");let l=r;if(!l){const f=document.getElementById("import-population-select");f&&f.value?(l=f.value,this.logger.debug("Using selected population from dropdown",{fallbackPopulationId:l})):(l=JSON.parse(localStorage.getItem("pingone-import-settings")||"{}").populationId,this.logger.debug("Using default population from settings",{fallbackPopulationId:l}))}const p=new Set,m=new Set,d=e.length,g={success:!0,processed:0,created:0,skipped:0,failed:0,errors:[]};this.logger.debug("Starting user processing loop...");for(let f=0;f<d;f+=s){const v=e.slice(f,f+s);this.logger.debug(`Processing batch ${Math.floor(f/s)+1}`,{users:`${f+1}-${Math.min(f+s,d)}`,batchSize:v.length});for(const u of v)try{const S=u.populationId||l;if(!S){const O=`Missing population – user not processed. Username: ${u.email||u.username}`;g.errors.push(O),g.skipped++;continue}if(n&&u.email){if(p.has(u.email.toLowerCase())){this.logger.info(`Skipping duplicate user by email: ${u.email}`),g.skipped++;continue}p.add(u.email.toLowerCase())}if(a&&u.username){if(m.has(u.username.toLowerCase())){this.logger.info(`Skipping duplicate user by username: ${u.username}`),g.skipped++;continue}m.add(u.username.toLowerCase())}const C={username:u.username||u.email,email:u.email,name:{given:u.firstName||u.givenName||"",family:u.lastName||u.familyName||""},enabled:o,population:{id:S}};u.phoneNumber&&(C.phoneNumber=u.phoneNumber),u.company&&(C.company=u.company);const w=await this.createUser(C,i);if(w.success){if(g.created++,!o&&w.userId){this.logger.debug(`Disabling user ${w.userId} after creation`);try{await this.makeRequest("PATCH",`/environments/current/users/${w.userId}`,{enabled:!1}),this.logger.debug(`Successfully disabled user ${w.userId}`)}catch(O){this.logger.warn(`Failed to disable user ${w.userId}`,{error:O.message})}}}else g.failed++,g.errors.push(w.error);g.processed++}catch(S){g.failed++,g.errors.push(S.message)}}return this.logger.info("Batch import summary",{total:d,processed:g.processed,created:g.created,skipped:g.skipped,failed:g.failed}),g}catch(r){throw this.logger.error("Import users failed",{error:r.message}),r}}async createUser(e,t=3){try{for(let r=1;r<=t;r++)try{this.logger.debug(`Making API request for user ${e.email||e.username} (attempt ${r}/${t})`);const s=await this.makeRequest("POST","/environments/current/users",e);if(this.logger.debug(`API request completed for user ${e.email||e.username}`),s.id){const i=`Successfully created user: ${e.username||e.email}`;return this.logger.info(i,{userId:s.id,populationId:e.population.id}),{success:!0,userId:s.id,user:s}}else return this.logger.warn("Invalid response structure - no ID found",{result:s}),{success:!1,error:"Invalid response structure"}}catch(s){if(s.message.includes("already exists"))return this.logger.debug(`User already exists: ${e.email||e.username}`),{success:!0,userId:null,user:null,message:"User already exists"};if(this.logger.error(`API request failed for user ${e.email||e.username} (attempt ${r})`,{error:s.message}),r===t)return{success:!1,error:s.message};await new Promise(i=>setTimeout(i,1e3*r))}}catch(r){return this.logger.error("Create user failed",{error:r.message,userData:e}),{success:!1,error:r.message}}}}new q;export{x as E,z as L,q as P,j as S,$ as _,U as a,k as c,B as l};
//# sourceMappingURL=pingone-client-X8mLxZeL.js.map
