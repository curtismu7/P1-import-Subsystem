import{P as S,a as C,l as L,L as P,S as b}from"./pingone-client-X8mLxZeL.js";class k{constructor(a,i){if(!i)throw new Error("Settings manager is required for API factory");this.logger=a||console,this.settingsManager=i,this.clients=new Map}getPingOneClient(){return this.clients.has("pingone")||this.clients.set("pingone",new S(this.logger,this.settingsManager)),this.clients.get("pingone")}getLocalClient(a=""){const i=`local_${a}`;return this.clients.has(i)||this.clients.set(i,new C(this.logger,a)),this.clients.get(i)}getDefaultLocalClient(){return L}}let p=null,I=!1,u=null;const A=async(s,a)=>p||(I&&u||(I=!0,u=new Promise(async(i,m)=>{try{const o=new k(s,a);p=o,F=o,s&&s.info?s.info("API Factory initialized successfully"):console.log("API Factory initialized successfully"),i(o)}catch(o){const r=`Failed to initialize API Factory: ${o.message}`;s&&s.error?s.error(r,{error:o}):console.error(r,o),m(new Error(r))}finally{I=!1,u=null}})),u);let F=null;document.addEventListener("DOMContentLoaded",async function(){const s=document.getElementById("log-entries"),a=s?new P(s):console,i=new b(a);A(a,i);const m=document.getElementById("settings-form"),o=document.getElementById("test-connection"),r=document.getElementById("load-settings"),f=document.getElementById("test-spinner"),v=document.getElementById("save-spinner"),y=document.getElementById("test-result"),g=document.getElementById("save-result"),l=document.getElementById("connection-status"),w=document.getElementById("status-text");document.querySelectorAll(".toggle-password").forEach(t=>{t.addEventListener("click",function(){const n=this.previousElementSibling,e=this.querySelector("i");n.type==="password"?(n.type="text",e.classList.remove("bi-eye"),e.classList.add("bi-eye-slash")):(n.type="password",e.classList.remove("bi-eye-slash"),e.classList.add("bi-eye"))})});function c(t,n,e="success"){t.textContent=n,t.className=`test-result test-${e} show`,t.style.display="block"}function d(t,n){switch(l.className="status-box",t){case"connected":l.classList.add("status-connected");break;case"connecting":l.classList.add("status-connecting");break;case"error":l.classList.add("status-error");break;default:l.classList.add("status-disconnected")}w.textContent=`Status: ${n}`}async function E(){try{const t=await fetch("/api/settings"),n=await t.json();if(t.ok&&n.success){const e=n.data||{};document.getElementById("apiClientId").value=e.apiClientId||"",document.getElementById("apiSecret").value=e.apiSecret||"",document.getElementById("environmentId").value=e.environmentId||"",document.getElementById("region").value=e.region||"NorthAmerica",document.getElementById("populationId").value=e.populationId||"",e.connectionStatus&&d(e.connectionStatus,e.connectionMessage||"Connection status loaded"),c(g,"Settings loaded successfully","success")}else throw new Error(n.message||"Failed to load settings")}catch(t){c(g,`Error loading settings: ${t.message}`,"error")}}async function h(){const t={apiClientId:document.getElementById("apiClientId").value.trim(),apiSecret:document.getElementById("apiSecret").value.trim(),environmentId:document.getElementById("environmentId").value.trim(),region:document.getElementById("region").value,populationId:document.getElementById("populationId").value.trim()};try{v.classList.remove("d-none");const n=await fetch("/api/settings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),e=await n.json();if(n.ok&&e.success)c(g,"Settings saved successfully","success");else throw new Error(e.message||"Failed to save settings")}catch(n){c(g,`Error saving settings: ${n.message}`,"error")}finally{v.classList.add("d-none")}}async function B(){try{f.classList.remove("d-none"),o.disabled=!0,d("connecting","Testing connection...");const t={apiClientId:document.getElementById("apiClientId").value.trim(),apiSecret:document.getElementById("apiSecret").value.trim(),environmentId:document.getElementById("environmentId").value.trim(),region:document.getElementById("region").value,populationId:document.getElementById("populationId").value.trim()};await h();const n=await fetch("/api/pingone/test-connection",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),e=await n.json();n.ok&&e.success?(d("connected","Successfully connected to PingOne"),c(y,"Connection test successful","success")):(d("error","Failed to connect to PingOne"),c(y,`Connection failed: ${e.message||"Unknown error"}`,"error"))}catch(t){d("error","Connection error"),c(y,`Error: ${t.message||"Unknown error occurred"}`,"error")}finally{f.classList.add("d-none"),o.disabled=!1}}m.addEventListener("submit",async t=>{t.preventDefault(),await h()}),r.addEventListener("click",E),o.addEventListener("click",B),E()});
//# sourceMappingURL=test-settings-CGBxsjCB.js.map
