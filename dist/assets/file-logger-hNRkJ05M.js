class a{constructor(i="client.log"){this.filename=i,this.fileHandle=null,this.writableStream=null,this.initialized=!1,this.logQueue=[],this.initializationPromise=null}async _initialize(){return this.initialized?!0:this.initializationPromise?this.initializationPromise:(this.initializationPromise=(async()=>{try{if(!window.isSecureContext||!window.showSaveFilePicker)throw new Error("File System Access API not available in this context");if(!window.__fileLoggerUserGesture){window.addEventListener("online",()=>this.handleOnline()),window.addEventListener("offline",()=>this.handleOffline());const i=()=>{window.__fileLoggerUserGesture=!0,window.removeEventListener("click",i),window.removeEventListener("keydown",i),this.fileLogger&&!this.fileLogger._initialized&&this.fileLogger._logger===null&&this.fileLogger._ensureInitialized().catch(console.warn)};throw window.addEventListener("click",i,{once:!0,passive:!0}),window.addEventListener("keydown",i,{once:!0,passive:!0}),new Error("Waiting for user gesture to initialize file logger")}try{return this.fileHandle=await window.showSaveFilePicker({suggestedName:this.filename,types:[{description:"Log File",accept:{"text/plain":[".log"]}}],excludeAcceptAllOption:!0}),this.writableStream=await this.fileHandle.createWritable({keepExistingData:!0}),this.initialized=!0,await this._processQueue(),!0}catch(i){return console.warn("File System Access API not available:",i),this.initialized=!1,!1}}catch(i){return console.warn("File logger initialization deferred:",i.message),this.initialized=!1,!1}})(),this.initializationPromise)}async _processQueue(){if(this.logQueue.length===0)return;const i=[...this.logQueue];this.logQueue=[];for(const{level:e,message:t,timestamp:r}of i)await this._writeLog(e,t,r)}async _writeLog(i,e,t){this.initialized||await this._initialize();const r=`[${t}] [${i.toUpperCase()}] ${e}
`;if(this.writableStream)try{await this.writableStream.write(r)}catch(n){console.error("Error writing to log file:",n),this.initialized=!1,await this._initialize(),await this.writableStream.write(r)}else console[i](`[FileLogger] ${r}`)}async log(i,e){const t=new Date().toISOString();this.initialized?await this._writeLog(i,e,t):(this.logQueue.push({level:i,message:e,timestamp:t}),await this._initialize())}info(i){return this.log("info",i)}warn(i){return this.log("warn",i)}error(i){return this.log("error",i)}debug(i){return this.log("debug",i)}async close(){if(this.writableStream)try{await this.writableStream.close()}catch(i){console.error("Error closing log file:",i)}finally{this.initialized=!1,this.writableStream=null,this.fileHandle=null}}}export{a as FileLogger};
//# sourceMappingURL=file-logger-hNRkJ05M.js.map
